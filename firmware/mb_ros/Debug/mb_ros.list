
mb_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800b25c  0800b25c  0001b25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b674  0800b674  0001b674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  20000000  0800b678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
  7 .bss          00001e58  20000098  20000098  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20001ef0  20001ef0  00020098  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c180  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000049f6  00000000  00000000  0004c248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012d8  00000000  00000000  00050c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010e8  00000000  00000000  00051f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a75d  00000000  00000000  00053000  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007b86  00000000  00000000  0005d75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000652e3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005144  00000000  00000000  00065360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b244 	.word	0x0800b244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800b244 	.word	0x0800b244

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <NVIC_PriorityGroupConfig+0x24>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ec:	60d3      	str	r3, [r2, #12]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000208:	2300      	movs	r3, #0
 800020a:	73fb      	strb	r3, [r7, #15]
 800020c:	2300      	movs	r3, #0
 800020e:	73bb      	strb	r3, [r7, #14]
 8000210:	230f      	movs	r3, #15
 8000212:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	78db      	ldrb	r3, [r3, #3]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d039      	beq.n	8000290 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800021c:	4b27      	ldr	r3, [pc, #156]	; (80002bc <NVIC_Init+0xbc>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	43db      	mvns	r3, r3
 8000222:	0a1b      	lsrs	r3, r3, #8
 8000224:	b2db      	uxtb	r3, r3
 8000226:	f003 0307 	and.w	r3, r3, #7
 800022a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	f1c3 0304 	rsb	r3, r3, #4
 8000232:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000234:	7b7a      	ldrb	r2, [r7, #13]
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	fa42 f303 	asr.w	r3, r2, r3
 800023c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	461a      	mov	r2, r3
 8000244:	7bbb      	ldrb	r3, [r7, #14]
 8000246:	fa02 f303 	lsl.w	r3, r2, r3
 800024a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	789a      	ldrb	r2, [r3, #2]
 8000250:	7b7b      	ldrb	r3, [r7, #13]
 8000252:	4013      	ands	r3, r2
 8000254:	b2da      	uxtb	r2, r3
 8000256:	7bfb      	ldrb	r3, [r7, #15]
 8000258:	4313      	orrs	r3, r2
 800025a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	011b      	lsls	r3, r3, #4
 8000260:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <NVIC_Init+0xc0>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4413      	add	r3, r2
 800026a:	7bfa      	ldrb	r2, [r7, #15]
 800026c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <NVIC_Init+0xc0>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	f003 031f 	and.w	r3, r3, #31
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800028a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800028e:	e00f      	b.n	80002b0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000290:	490b      	ldr	r1, [pc, #44]	; (80002c0 <NVIC_Init+0xc0>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	095b      	lsrs	r3, r3, #5
 8000298:	b2db      	uxtb	r3, r3
 800029a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	2201      	movs	r2, #1
 80002a6:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002a8:	f100 0320 	add.w	r3, r0, #32
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00
 80002c0:	e000e100 	.word	0xe000e100

080002c4 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f023 0202 	bic.w	r2, r3, #2
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f043 0201 	orr.w	r2, r3, #1
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80002ee:	e002      	b.n	80002f6 <CAN_Init+0x32>
  {
    wait_ack++;
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	3301      	adds	r3, #1
 80002f4:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d004      	beq.n	800030c <CAN_Init+0x48>
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000308:	4293      	cmp	r3, r2
 800030a:	d1f1      	bne.n	80002f0 <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	2b01      	cmp	r3, #1
 8000316:	d002      	beq.n	800031e <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e09c      	b.n	8000458 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	799b      	ldrb	r3, [r3, #6]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d106      	bne.n	8000334 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	e005      	b.n	8000340 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	79db      	ldrb	r3, [r3, #7]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d106      	bne.n	8000356 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	e005      	b.n	8000362 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	7a1b      	ldrb	r3, [r3, #8]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d106      	bne.n	8000378 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f043 0220 	orr.w	r2, r3, #32
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	e005      	b.n	8000384 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f023 0220 	bic.w	r2, r3, #32
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	7a5b      	ldrb	r3, [r3, #9]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d106      	bne.n	800039a <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f043 0210 	orr.w	r2, r3, #16
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	e005      	b.n	80003a6 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f023 0210 	bic.w	r2, r3, #16
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	7a9b      	ldrb	r3, [r3, #10]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d106      	bne.n	80003bc <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 0208 	orr.w	r2, r3, #8
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	e005      	b.n	80003c8 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0208 	bic.w	r2, r3, #8
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	7adb      	ldrb	r3, [r3, #11]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d106      	bne.n	80003de <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f043 0204 	orr.w	r2, r3, #4
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	e005      	b.n	80003ea <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f023 0204 	bic.w	r2, r3, #4
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	789b      	ldrb	r3, [r3, #2]
 80003ee:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	78db      	ldrb	r3, [r3, #3]
 80003f4:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80003f6:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80003fe:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000406:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800040e:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f023 0201 	bic.w	r2, r3, #1
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000424:	e002      	b.n	800042c <CAN_Init+0x168>
   {
     wait_ack++;
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	3301      	adds	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	2b01      	cmp	r3, #1
 8000436:	d104      	bne.n	8000442 <CAN_Init+0x17e>
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800043e:	4293      	cmp	r3, r2
 8000440:	d1f1      	bne.n	8000426 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	2b01      	cmp	r3, #1
 800044c:	d102      	bne.n	8000454 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 800044e:	2300      	movs	r3, #0
 8000450:	73fb      	strb	r3, [r7, #15]
 8000452:	e001      	b.n	8000458 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000454:	2301      	movs	r3, #1
 8000456:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000458:	7bfb      	ldrb	r3, [r7, #15]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
	...

08000468 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a9b      	ldrb	r3, [r3, #10]
 8000478:	461a      	mov	r2, r3
 800047a:	2301      	movs	r3, #1
 800047c:	4093      	lsls	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000480:	4a56      	ldr	r2, [pc, #344]	; (80005dc <CAN_FilterInit+0x174>)
 8000482:	4b56      	ldr	r3, [pc, #344]	; (80005dc <CAN_FilterInit+0x174>)
 8000484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000490:	4952      	ldr	r1, [pc, #328]	; (80005dc <CAN_FilterInit+0x174>)
 8000492:	4b52      	ldr	r3, [pc, #328]	; (80005dc <CAN_FilterInit+0x174>)
 8000494:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	43db      	mvns	r3, r3
 800049c:	4013      	ands	r3, r2
 800049e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	7b1b      	ldrb	r3, [r3, #12]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d125      	bne.n	80004f6 <CAN_FilterInit+0x8e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80004aa:	494c      	ldr	r1, [pc, #304]	; (80005dc <CAN_FilterInit+0x174>)
 80004ac:	4b4b      	ldr	r3, [pc, #300]	; (80005dc <CAN_FilterInit+0x174>)
 80004ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4013      	ands	r3, r2
 80004b8:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80004bc:	4947      	ldr	r1, [pc, #284]	; (80005dc <CAN_FilterInit+0x174>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	7a9b      	ldrb	r3, [r3, #10]
 80004c2:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	88db      	ldrh	r3, [r3, #6]
 80004c8:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80004ce:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80004d0:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80004d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80004d8:	4940      	ldr	r1, [pc, #256]	; (80005dc <CAN_FilterInit+0x174>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	7a9b      	ldrb	r3, [r3, #10]
 80004de:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	889b      	ldrh	r3, [r3, #4]
 80004e4:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	8812      	ldrh	r2, [r2, #0]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80004ea:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80004ec:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	440b      	add	r3, r1
 80004f4:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	7b1b      	ldrb	r3, [r3, #12]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d124      	bne.n	8000548 <CAN_FilterInit+0xe0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 80004fe:	4937      	ldr	r1, [pc, #220]	; (80005dc <CAN_FilterInit+0x174>)
 8000500:	4b36      	ldr	r3, [pc, #216]	; (80005dc <CAN_FilterInit+0x174>)
 8000502:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	4313      	orrs	r3, r2
 800050a:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800050e:	4933      	ldr	r1, [pc, #204]	; (80005dc <CAN_FilterInit+0x174>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	7a9b      	ldrb	r3, [r3, #10]
 8000514:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000520:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000522:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800052a:	492c      	ldr	r1, [pc, #176]	; (80005dc <CAN_FilterInit+0x174>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7a9b      	ldrb	r3, [r3, #10]
 8000530:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	889b      	ldrh	r3, [r3, #4]
 8000536:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	88d2      	ldrh	r2, [r2, #6]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800053c:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800053e:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	440b      	add	r3, r1
 8000546:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	7adb      	ldrb	r3, [r3, #11]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d109      	bne.n	8000564 <CAN_FilterInit+0xfc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000550:	4922      	ldr	r1, [pc, #136]	; (80005dc <CAN_FilterInit+0x174>)
 8000552:	4b22      	ldr	r3, [pc, #136]	; (80005dc <CAN_FilterInit+0x174>)
 8000554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	43db      	mvns	r3, r3
 800055c:	4013      	ands	r3, r2
 800055e:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8000562:	e007      	b.n	8000574 <CAN_FilterInit+0x10c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000564:	491d      	ldr	r1, [pc, #116]	; (80005dc <CAN_FilterInit+0x174>)
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <CAN_FilterInit+0x174>)
 8000568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4313      	orrs	r3, r2
 8000570:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	891b      	ldrh	r3, [r3, #8]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d108      	bne.n	800058e <CAN_FilterInit+0x126>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 800057c:	4917      	ldr	r1, [pc, #92]	; (80005dc <CAN_FilterInit+0x174>)
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <CAN_FilterInit+0x174>)
 8000580:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	43db      	mvns	r3, r3
 8000588:	4013      	ands	r3, r2
 800058a:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	891b      	ldrh	r3, [r3, #8]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d107      	bne.n	80005a6 <CAN_FilterInit+0x13e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000596:	4911      	ldr	r1, [pc, #68]	; (80005dc <CAN_FilterInit+0x174>)
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <CAN_FilterInit+0x174>)
 800059a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7b5b      	ldrb	r3, [r3, #13]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d107      	bne.n	80005be <CAN_FilterInit+0x156>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 80005ae:	490b      	ldr	r1, [pc, #44]	; (80005dc <CAN_FilterInit+0x174>)
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <CAN_FilterInit+0x174>)
 80005b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <CAN_FilterInit+0x174>)
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <CAN_FilterInit+0x174>)
 80005c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005c6:	f023 0301 	bic.w	r3, r3, #1
 80005ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400

080005e0 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <CAN_SlaveStartBank+0x5c>)
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <CAN_SlaveStartBank+0x5c>)
 80005ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <CAN_SlaveStartBank+0x5c>)
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <CAN_SlaveStartBank+0x5c>)
 80005fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000602:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000606:	f023 030e 	bic.w	r3, r3, #14
 800060a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <CAN_SlaveStartBank+0x5c>)
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <CAN_SlaveStartBank+0x5c>)
 8000612:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	4313      	orrs	r3, r2
 800061c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <CAN_SlaveStartBank+0x5c>)
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <CAN_SlaveStartBank+0x5c>)
 8000624:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000628:	f023 0301 	bic.w	r3, r3, #1
 800062c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40006400 	.word	0x40006400

08000640 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	460b      	mov	r3, r1
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800064e:	7afb      	ldrb	r3, [r7, #11]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	331b      	adds	r3, #27
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	4413      	add	r3, r2
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	b2da      	uxtb	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7a1b      	ldrb	r3, [r3, #8]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10b      	bne.n	8000686 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	331b      	adds	r3, #27
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	4413      	add	r3, r2
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	0d5b      	lsrs	r3, r3, #21
 800067c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e00a      	b.n	800069c <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000686:	7afb      	ldrb	r3, [r7, #11]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	331b      	adds	r3, #27
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	4413      	add	r3, r2
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800069c:	7afb      	ldrb	r3, [r7, #11]
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	331b      	adds	r3, #27
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	4413      	add	r3, r2
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	331b      	adds	r3, #27
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	4413      	add	r3, r2
 80006be:	3304      	adds	r3, #4
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	f003 030f 	and.w	r3, r3, #15
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80006ce:	7afb      	ldrb	r3, [r7, #11]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	331b      	adds	r3, #27
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	3304      	adds	r3, #4
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80006f8:	7afb      	ldrb	r3, [r7, #11]
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	4413      	add	r3, r2
 8000700:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	b2da      	uxtb	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800070e:	7afb      	ldrb	r3, [r7, #11]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	4413      	add	r3, r2
 8000716:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	0c1b      	lsrs	r3, r3, #16
 800071e:	b2da      	uxtb	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000724:	7afb      	ldrb	r3, [r7, #11]
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	4413      	add	r3, r2
 800072c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	0e1b      	lsrs	r3, r3, #24
 8000734:	b2da      	uxtb	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	4413      	add	r3, r2
 8000742:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800074e:	7afb      	ldrb	r3, [r7, #11]
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4413      	add	r3, r2
 8000756:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	b2da      	uxtb	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	b2da      	uxtb	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 800077a:	7afb      	ldrb	r3, [r7, #11]
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	4413      	add	r3, r2
 8000782:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	0e1b      	lsrs	r3, r3, #24
 800078a:	b2da      	uxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d106      	bne.n	80007a4 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	f043 0220 	orr.w	r2, r3, #32
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 80007a2:	e005      	b.n	80007b0 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	f043 0220 	orr.w	r2, r3, #32
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	611a      	str	r2, [r3, #16]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	695a      	ldr	r2, [r3, #20]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	431a      	orrs	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 80007dc:	e006      	b.n	80007ec <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	43db      	mvns	r3, r3
 80007e6:	401a      	ands	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	615a      	str	r2, [r3, #20]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <CAN_ClearFlag+0x70>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d103      	bne.n	8000816 <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8000814:	e021      	b.n	800085a <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800081c:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000824:	2b00      	cmp	r3, #0
 8000826:	d003      	beq.n	8000830 <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
}
 800082e:	e014      	b.n	800085a <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	611a      	str	r2, [r3, #16]
}
 8000840:	e00b      	b.n	800085a <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	609a      	str	r2, [r3, #8]
}
 8000852:	e002      	b.n	800085a <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	605a      	str	r2, [r3, #4]
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	30f00070 	.word	0x30f00070

0800086c <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	4013      	ands	r3, r2
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 80b2 	beq.w	80009ec <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b40      	cmp	r3, #64	; 0x40
 800088c:	d062      	beq.n	8000954 <CAN_GetITStatus+0xe8>
 800088e:	2b40      	cmp	r3, #64	; 0x40
 8000890:	d80f      	bhi.n	80008b2 <CAN_GetITStatus+0x46>
 8000892:	2b04      	cmp	r3, #4
 8000894:	d03a      	beq.n	800090c <CAN_GetITStatus+0xa0>
 8000896:	2b04      	cmp	r3, #4
 8000898:	d804      	bhi.n	80008a4 <CAN_GetITStatus+0x38>
 800089a:	2b01      	cmp	r3, #1
 800089c:	d024      	beq.n	80008e8 <CAN_GetITStatus+0x7c>
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d02b      	beq.n	80008fa <CAN_GetITStatus+0x8e>
 80008a2:	e09f      	b.n	80009e4 <CAN_GetITStatus+0x178>
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	d043      	beq.n	8000930 <CAN_GetITStatus+0xc4>
 80008a8:	2b20      	cmp	r3, #32
 80008aa:	d04a      	beq.n	8000942 <CAN_GetITStatus+0xd6>
 80008ac:	2b08      	cmp	r3, #8
 80008ae:	d036      	beq.n	800091e <CAN_GetITStatus+0xb2>
 80008b0:	e098      	b.n	80009e4 <CAN_GetITStatus+0x178>
 80008b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008b6:	f000 8083 	beq.w	80009c0 <CAN_GetITStatus+0x154>
 80008ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008be:	d809      	bhi.n	80008d4 <CAN_GetITStatus+0x68>
 80008c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008c4:	d06a      	beq.n	800099c <CAN_GetITStatus+0x130>
 80008c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ca:	d070      	beq.n	80009ae <CAN_GetITStatus+0x142>
 80008cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008d0:	d05b      	beq.n	800098a <CAN_GetITStatus+0x11e>
 80008d2:	e087      	b.n	80009e4 <CAN_GetITStatus+0x178>
 80008d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d8:	d045      	beq.n	8000966 <CAN_GetITStatus+0xfa>
 80008da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80008de:	d04b      	beq.n	8000978 <CAN_GetITStatus+0x10c>
 80008e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008e4:	d075      	beq.n	80009d2 <CAN_GetITStatus+0x166>
 80008e6:	e07d      	b.n	80009e4 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	4943      	ldr	r1, [pc, #268]	; (80009fc <CAN_GetITStatus+0x190>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f8f6 	bl	8000ae0 <CheckITStatus>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
        break;
 80008f8:	e07a      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	2103      	movs	r1, #3
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f8ed 	bl	8000ae0 <CheckITStatus>
 8000906:	4603      	mov	r3, r0
 8000908:	73fb      	strb	r3, [r7, #15]
        break;
 800090a:	e071      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	2108      	movs	r1, #8
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f8e4 	bl	8000ae0 <CheckITStatus>
 8000918:	4603      	mov	r3, r0
 800091a:	73fb      	strb	r3, [r7, #15]
        break;
 800091c:	e068      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	2110      	movs	r1, #16
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f8db 	bl	8000ae0 <CheckITStatus>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
        break;
 800092e:	e05f      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	2103      	movs	r1, #3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f8d2 	bl	8000ae0 <CheckITStatus>
 800093c:	4603      	mov	r3, r0
 800093e:	73fb      	strb	r3, [r7, #15]
        break;
 8000940:	e056      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	2108      	movs	r1, #8
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f8c9 	bl	8000ae0 <CheckITStatus>
 800094e:	4603      	mov	r3, r0
 8000950:	73fb      	strb	r3, [r7, #15]
        break;
 8000952:	e04d      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	2110      	movs	r1, #16
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f8c0 	bl	8000ae0 <CheckITStatus>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]
        break;
 8000964:	e044      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2108      	movs	r1, #8
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f8b7 	bl	8000ae0 <CheckITStatus>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
        break;
 8000976:	e03b      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2110      	movs	r1, #16
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f8ae 	bl	8000ae0 <CheckITStatus>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
        break;
 8000988:	e032      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f8a5 	bl	8000ae0 <CheckITStatus>
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]
        break;
 800099a:	e029      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	2102      	movs	r1, #2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f89c 	bl	8000ae0 <CheckITStatus>
 80009a8:	4603      	mov	r3, r0
 80009aa:	73fb      	strb	r3, [r7, #15]
        break;
 80009ac:	e020      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	2104      	movs	r1, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f893 	bl	8000ae0 <CheckITStatus>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73fb      	strb	r3, [r7, #15]
        break;
 80009be:	e017      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	2170      	movs	r1, #112	; 0x70
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f88a 	bl	8000ae0 <CheckITStatus>
 80009cc:	4603      	mov	r3, r0
 80009ce:	73fb      	strb	r3, [r7, #15]
        break;
 80009d0:	e00e      	b.n	80009f0 <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	2104      	movs	r1, #4
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f881 	bl	8000ae0 <CheckITStatus>
 80009de:	4603      	mov	r3, r0
 80009e0:	73fb      	strb	r3, [r7, #15]
        break;
 80009e2:	e005      	b.n	80009f0 <CAN_GetITStatus+0x184>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]
        break;
 80009e8:	bf00      	nop
 80009ea:	e001      	b.n	80009f0 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	00010101 	.word	0x00010101

08000a00 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a10:	d043      	beq.n	8000a9a <CAN_ClearITPendingBit+0x9a>
 8000a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a16:	d80d      	bhi.n	8000a34 <CAN_ClearITPendingBit+0x34>
 8000a18:	2b08      	cmp	r3, #8
 8000a1a:	d02a      	beq.n	8000a72 <CAN_ClearITPendingBit+0x72>
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d804      	bhi.n	8000a2a <CAN_ClearITPendingBit+0x2a>
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d01e      	beq.n	8000a62 <CAN_ClearITPendingBit+0x62>
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d020      	beq.n	8000a6a <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8000a28:	e051      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8000a2a:	2b20      	cmp	r3, #32
 8000a2c:	d025      	beq.n	8000a7a <CAN_ClearITPendingBit+0x7a>
 8000a2e:	2b40      	cmp	r3, #64	; 0x40
 8000a30:	d027      	beq.n	8000a82 <CAN_ClearITPendingBit+0x82>
       break;
 8000a32:	e04c      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8000a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a38:	d03b      	beq.n	8000ab2 <CAN_ClearITPendingBit+0xb2>
 8000a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a3e:	d806      	bhi.n	8000a4e <CAN_ClearITPendingBit+0x4e>
 8000a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a44:	d02d      	beq.n	8000aa2 <CAN_ClearITPendingBit+0xa2>
 8000a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a4a:	d02e      	beq.n	8000aaa <CAN_ClearITPendingBit+0xaa>
       break;
 8000a4c:	e03f      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8000a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a52:	d01a      	beq.n	8000a8a <CAN_ClearITPendingBit+0x8a>
 8000a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a58:	d01b      	beq.n	8000a92 <CAN_ClearITPendingBit+0x92>
 8000a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a5e:	d02f      	beq.n	8000ac0 <CAN_ClearITPendingBit+0xc0>
       break;
 8000a60:	e035      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <CAN_ClearITPendingBit+0xdc>)
 8000a66:	609a      	str	r2, [r3, #8]
      break;
 8000a68:	e031      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FULL0; 
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	60da      	str	r2, [r3, #12]
      break;
 8000a70:	e02d      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2210      	movs	r2, #16
 8000a76:	60da      	str	r2, [r3, #12]
      break;
 8000a78:	e029      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FULL1;  
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2208      	movs	r2, #8
 8000a7e:	611a      	str	r2, [r3, #16]
      break;
 8000a80:	e025      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2210      	movs	r2, #16
 8000a86:	611a      	str	r2, [r3, #16]
      break;
 8000a88:	e021      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_WKUI;  
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2208      	movs	r2, #8
 8000a8e:	605a      	str	r2, [r3, #4]
      break;
 8000a90:	e01d      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_SLAKI;   
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2210      	movs	r2, #16
 8000a96:	605a      	str	r2, [r3, #4]
      break;
 8000a98:	e019      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	605a      	str	r2, [r3, #4]
      break;
 8000aa0:	e015      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	605a      	str	r2, [r3, #4]
      break;
 8000aa8:	e011      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2204      	movs	r2, #4
 8000aae:	605a      	str	r2, [r3, #4]
       break;
 8000ab0:	e00d      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2204      	movs	r2, #4
 8000abc:	605a      	str	r2, [r3, #4]
      break;
 8000abe:	e006      	b.n	8000ace <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2204      	movs	r2, #4
 8000aca:	605a      	str	r2, [r3, #4]
       break;
 8000acc:	bf00      	nop
   }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	00010101 	.word	0x00010101

08000ae0 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e001      	b.n	8000b02 <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <EXTI_GetITStatus+0x44>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4013      	ands	r3, r2
 8000b28:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <EXTI_GetITStatus+0x44>)
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d005      	beq.n	8000b42 <EXTI_GetITStatus+0x32>
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e001      	b.n	8000b46 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40013c00 	.word	0x40013c00

08000b58 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <EXTI_ClearITPendingBit+0x1c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6153      	str	r3, [r2, #20]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40013c00 	.word	0x40013c00

08000b78 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e076      	b.n	8000c82 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b94:	2201      	movs	r2, #1
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d165      	bne.n	8000c7c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2103      	movs	r1, #3
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d003      	beq.n	8000bee <GPIO_Init+0x76>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d12e      	bne.n	8000c4c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	795b      	ldrb	r3, [r3, #5]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	2301      	movs	r3, #1
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	7992      	ldrb	r2, [r2, #6]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	b292      	uxth	r2, r2
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	401a      	ands	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	79db      	ldrb	r3, [r3, #7]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d985      	bls.n	8000b94 <GPIO_Init+0x1c>
    }
  }
}
 8000c88:	bf00      	nop
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d002      	beq.n	8000cb6 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e001      	b.n	8000cba <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000cd8:	787b      	ldrb	r3, [r7, #1]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	887a      	ldrh	r2, [r7, #2]
 8000ce2:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000ce4:	e002      	b.n	8000cec <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	887a      	ldrh	r2, [r7, #2]
 8000cea:	835a      	strh	r2, [r3, #26]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
 8000d04:	4613      	mov	r3, r2
 8000d06:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d10:	787a      	ldrb	r2, [r7, #1]
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	08db      	lsrs	r3, r3, #3
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	210f      	movs	r1, #15
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	ea02 0103 	and.w	r1, r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f100 0208 	add.w	r2, r0, #8
 8000d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3208      	adds	r2, #8
 8000d62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <I2C_DeInit+0x68>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d10a      	bne.n	8000db2 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000da2:	f000 fb53 	bl	800144c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000da6:	2100      	movs	r1, #0
 8000da8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000dac:	f000 fb4e 	bl	800144c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000db0:	e01c      	b.n	8000dec <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <I2C_DeInit+0x6c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10a      	bne.n	8000dd0 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000dba:	2101      	movs	r1, #1
 8000dbc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000dc0:	f000 fb44 	bl	800144c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000dca:	f000 fb3f 	bl	800144c <RCC_APB1PeriphResetCmd>
}
 8000dce:	e00d      	b.n	8000dec <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <I2C_DeInit+0x70>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d109      	bne.n	8000dec <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000dd8:	2101      	movs	r1, #1
 8000dda:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000dde:	f000 fb35 	bl	800144c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000de2:	2100      	movs	r1, #0
 8000de4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000de8:	f000 fb30 	bl	800144c <RCC_APB1PeriphResetCmd>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40005400 	.word	0x40005400
 8000df8:	40005800 	.word	0x40005800
 8000dfc:	40005c00 	.word	0x40005c00

08000e00 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e0e:	2300      	movs	r3, #0
 8000e10:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000e12:	2304      	movs	r3, #4
 8000e14:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <I2C_Init+0x174>)
 8000e18:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	889b      	ldrh	r3, [r3, #4]
 8000e1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000e20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e26:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fa05 	bl	800123c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <I2C_Init+0x178>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0c9b      	lsrs	r3, r3, #18
 8000e40:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000e42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e46:	4313      	orrs	r3, r2
 8000e48:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e4e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a44      	ldr	r2, [pc, #272]	; (8000f7c <I2C_Init+0x17c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d815      	bhi.n	8000e9a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d801      	bhi.n	8000e86 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000e82:	2304      	movs	r3, #4
 8000e84:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000e86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000e8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e90:	3301      	adds	r3, #1
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	841a      	strh	r2, [r3, #32]
 8000e98:	e040      	b.n	8000f1c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	88db      	ldrh	r3, [r3, #6]
 8000e9e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d109      	bne.n	8000eba <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000eb8:	e00e      	b.n	8000ed8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009a      	lsls	r2, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d103      	bne.n	8000eea <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000eea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000efa:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <I2C_Init+0x180>)
 8000f08:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0c:	1192      	asrs	r2, r2, #6
 8000f0e:	17db      	asrs	r3, r3, #31
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3301      	adds	r3, #1
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f20:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000f38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f3a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000f3e:	f023 0302 	bic.w	r3, r3, #2
 8000f42:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	889a      	ldrh	r2, [r3, #4]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	895b      	ldrh	r3, [r3, #10]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f52:	4313      	orrs	r3, r2
 8000f54:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f5a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	899a      	ldrh	r2, [r3, #12]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	891b      	ldrh	r3, [r3, #8]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	811a      	strh	r2, [r3, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	007a1200 	.word	0x007a1200
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	000186a0 	.word	0x000186a0
 8000f80:	10624dd3 	.word	0x10624dd3

08000f84 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000fa6:	e007      	b.n	8000fb8 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	f023 0301 	bic.w	r3, r3, #1
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	801a      	strh	r2, [r3, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d008      	beq.n	8000fe8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000fe6:	e007      	b.n	8000ff8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	801a      	strh	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
 8001010:	4613      	mov	r3, r2
 8001012:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	70fb      	strb	r3, [r7, #3]
 8001022:	e003      	b.n	800102c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	b29a      	uxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	821a      	strh	r2, [r3, #16]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d008      	beq.n	8001064 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105c:	b29a      	uxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001062:	e007      	b.n	8001074 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800106e:	b29a      	uxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	801a      	strh	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	821a      	strh	r2, [r3, #16]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	8a1b      	ldrh	r3, [r3, #16]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d008      	beq.n	80010e4 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	4313      	orrs	r3, r2
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 80010e2:	e009      	b.n	80010f8 <I2C_ITConfig+0x3c>
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	889b      	ldrh	r3, [r3, #4]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4013      	ands	r3, r2
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	809a      	strh	r2, [r3, #4]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8a9b      	ldrh	r3, [r3, #20]
 8001122:	b29b      	uxth	r3, r3
 8001124:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	8b1b      	ldrh	r3, [r3, #24]
 800112a:	b29b      	uxth	r3, r3
 800112c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	4313      	orrs	r3, r2
 800113a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800113e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	401a      	ands	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d102      	bne.n	8001152 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800114c:	2301      	movs	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	e001      	b.n	8001156 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001152:	2300      	movs	r3, #0
 8001154:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001156:	7dfb      	ldrb	r3, [r7, #23]
}
 8001158:	4618      	mov	r0, r3
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	8a9b      	ldrh	r3, [r3, #20]
 800117c:	b29b      	uxth	r3, r3
 800117e:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	8b1b      	ldrh	r3, [r3, #24]
 8001184:	b29b      	uxth	r3, r3
 8001186:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001198:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800119a:	697b      	ldr	r3, [r7, #20]
}
 800119c:	4618      	mov	r0, r3
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	0f1b      	lsrs	r3, r3, #28
 80011c6:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80011ce:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3314      	adds	r3, #20
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e005      	b.n	80011ea <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3318      	adds	r3, #24
 80011e8:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
 80011fa:	e001      	b.n	8001200 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001200:	7dfb      	ldrb	r3, [r7, #23]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001222:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	b29b      	uxth	r3, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	829a      	strh	r2, [r3, #20]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	2302      	movs	r3, #2
 800125a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800125c:	4b47      	ldr	r3, [pc, #284]	; (800137c <RCC_GetClocksFreq+0x140>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d007      	beq.n	800127c <RCC_GetClocksFreq+0x40>
 800126c:	2b08      	cmp	r3, #8
 800126e:	d009      	beq.n	8001284 <RCC_GetClocksFreq+0x48>
 8001270:	2b00      	cmp	r3, #0
 8001272:	d13d      	bne.n	80012f0 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a42      	ldr	r2, [pc, #264]	; (8001380 <RCC_GetClocksFreq+0x144>)
 8001278:	601a      	str	r2, [r3, #0]
      break;
 800127a:	e03d      	b.n	80012f8 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a41      	ldr	r2, [pc, #260]	; (8001384 <RCC_GetClocksFreq+0x148>)
 8001280:	601a      	str	r2, [r3, #0]
      break;
 8001282:	e039      	b.n	80012f8 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <RCC_GetClocksFreq+0x140>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	0d9b      	lsrs	r3, r3, #22
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001290:	4b3a      	ldr	r3, [pc, #232]	; (800137c <RCC_GetClocksFreq+0x140>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001298:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00c      	beq.n	80012ba <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012a0:	4a38      	ldr	r2, [pc, #224]	; (8001384 <RCC_GetClocksFreq+0x148>)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a8:	4a34      	ldr	r2, [pc, #208]	; (800137c <RCC_GetClocksFreq+0x140>)
 80012aa:	6852      	ldr	r2, [r2, #4]
 80012ac:	0992      	lsrs	r2, r2, #6
 80012ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e00b      	b.n	80012d2 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80012ba:	4a31      	ldr	r2, [pc, #196]	; (8001380 <RCC_GetClocksFreq+0x144>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4a2e      	ldr	r2, [pc, #184]	; (800137c <RCC_GetClocksFreq+0x140>)
 80012c4:	6852      	ldr	r2, [r2, #4]
 80012c6:	0992      	lsrs	r2, r2, #6
 80012c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <RCC_GetClocksFreq+0x140>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	3301      	adds	r3, #1
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
      break;
 80012ee:	e003      	b.n	80012f8 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <RCC_GetClocksFreq+0x144>)
 80012f4:	601a      	str	r2, [r3, #0]
      break;
 80012f6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <RCC_GetClocksFreq+0x140>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001300:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001308:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <RCC_GetClocksFreq+0x14c>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	40da      	lsrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <RCC_GetClocksFreq+0x140>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001328:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	0a9b      	lsrs	r3, r3, #10
 800132e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001330:	4a15      	ldr	r2, [pc, #84]	; (8001388 <RCC_GetClocksFreq+0x14c>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	40da      	lsrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <RCC_GetClocksFreq+0x140>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001350:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	0b5b      	lsrs	r3, r3, #13
 8001356:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001358:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <RCC_GetClocksFreq+0x14c>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4413      	add	r3, r2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	40da      	lsrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]
}
 8001370:	bf00      	nop
 8001372:	3724      	adds	r7, #36	; 0x24
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40023800 	.word	0x40023800
 8001380:	00f42400 	.word	0x00f42400
 8001384:	007a1200 	.word	0x007a1200
 8001388:	20000000 	.word	0x20000000

0800138c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800139e:	490a      	ldr	r1, [pc, #40]	; (80013c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80013a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80013aa:	e006      	b.n	80013ba <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80013b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4013      	ands	r3, r2
 80013b8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013de:	490a      	ldr	r1, [pc, #40]	; (8001408 <RCC_APB1PeriphClockCmd+0x3c>)
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <RCC_APB1PeriphClockCmd+0x3c>)
 80013e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80013ea:	e006      	b.n	80013fa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013ec:	4906      	ldr	r1, [pc, #24]	; (8001408 <RCC_APB1PeriphClockCmd+0x3c>)
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <RCC_APB1PeriphClockCmd+0x3c>)
 80013f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	4013      	ands	r3, r2
 80013f8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800141e:	490a      	ldr	r1, [pc, #40]	; (8001448 <RCC_APB2PeriphClockCmd+0x3c>)
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <RCC_APB2PeriphClockCmd+0x3c>)
 8001422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4313      	orrs	r3, r2
 8001428:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800142a:	e006      	b.n	800143a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800142c:	4906      	ldr	r1, [pc, #24]	; (8001448 <RCC_APB2PeriphClockCmd+0x3c>)
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <RCC_APB2PeriphClockCmd+0x3c>)
 8001430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	43db      	mvns	r3, r3
 8001436:	4013      	ands	r3, r2
 8001438:	644b      	str	r3, [r1, #68]	; 0x44
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800145e:	490a      	ldr	r1, [pc, #40]	; (8001488 <RCC_APB1PeriphResetCmd+0x3c>)
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <RCC_APB1PeriphResetCmd+0x3c>)
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4313      	orrs	r3, r2
 8001468:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800146a:	e006      	b.n	800147a <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800146c:	4906      	ldr	r1, [pc, #24]	; (8001488 <RCC_APB1PeriphResetCmd+0x3c>)
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <RCC_APB1PeriphResetCmd+0x3c>)
 8001470:	6a1a      	ldr	r2, [r3, #32]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	43db      	mvns	r3, r3
 8001476:	4013      	ands	r3, r2
 8001478:	620b      	str	r3, [r1, #32]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a29      	ldr	r2, [pc, #164]	; (8001548 <TIM_TimeBaseInit+0xbc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d013      	beq.n	80014d0 <TIM_TimeBaseInit+0x44>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a28      	ldr	r2, [pc, #160]	; (800154c <TIM_TimeBaseInit+0xc0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00f      	beq.n	80014d0 <TIM_TimeBaseInit+0x44>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b6:	d00b      	beq.n	80014d0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a25      	ldr	r2, [pc, #148]	; (8001550 <TIM_TimeBaseInit+0xc4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d007      	beq.n	80014d0 <TIM_TimeBaseInit+0x44>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <TIM_TimeBaseInit+0xc8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d003      	beq.n	80014d0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a23      	ldr	r2, [pc, #140]	; (8001558 <TIM_TimeBaseInit+0xcc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d108      	bne.n	80014e2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014d6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	885a      	ldrh	r2, [r3, #2]
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	4313      	orrs	r3, r2
 80014e0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <TIM_TimeBaseInit+0xd0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00c      	beq.n	8001504 <TIM_TimeBaseInit+0x78>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <TIM_TimeBaseInit+0xd4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d008      	beq.n	8001504 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	891a      	ldrh	r2, [r3, #8]
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	4313      	orrs	r3, r2
 8001502:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	89fa      	ldrh	r2, [r7, #14]
 8001508:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <TIM_TimeBaseInit+0xbc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d003      	beq.n	800152a <TIM_TimeBaseInit+0x9e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a09      	ldr	r2, [pc, #36]	; (800154c <TIM_TimeBaseInit+0xc0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d104      	bne.n	8001534 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7a9b      	ldrb	r3, [r3, #10]
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	829a      	strh	r2, [r3, #20]
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40010000 	.word	0x40010000
 800154c:	40010400 	.word	0x40010400
 8001550:	40000400 	.word	0x40000400
 8001554:	40000800 	.word	0x40000800
 8001558:	40000c00 	.word	0x40000c00
 800155c:	40001000 	.word	0x40001000
 8001560:	40001400 	.word	0x40001400

08001564 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	b29a      	uxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8001586:	e007      	b.n	8001598 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	801a      	strh	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80015c6:	e007      	b.n	80015d8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	801a      	strh	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	817b      	strh	r3, [r7, #10]
 80015f2:	2300      	movs	r3, #0
 80015f4:	81fb      	strh	r3, [r7, #14]
 80015f6:	2300      	movs	r3, #0
 80015f8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	8c1b      	ldrh	r3, [r3, #32]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	8c1b      	ldrh	r3, [r3, #32]
 800160e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	889b      	ldrh	r3, [r3, #4]
 8001614:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8b1b      	ldrh	r3, [r3, #24]
 800161a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800161c:	897b      	ldrh	r3, [r7, #10]
 800161e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001622:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001624:	897b      	ldrh	r3, [r7, #10]
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	881a      	ldrh	r2, [r3, #0]
 8001630:	897b      	ldrh	r3, [r7, #10]
 8001632:	4313      	orrs	r3, r2
 8001634:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	f023 0302 	bic.w	r3, r3, #2
 800163c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	899a      	ldrh	r2, [r3, #12]
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	4313      	orrs	r3, r2
 8001646:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	885a      	ldrh	r2, [r3, #2]
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	4313      	orrs	r3, r2
 8001650:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <TIM_OC1Init+0xec>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d003      	beq.n	8001662 <TIM_OC1Init+0x7e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <TIM_OC1Init+0xf0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d123      	bne.n	80016aa <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	f023 0308 	bic.w	r3, r3, #8
 8001668:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	89da      	ldrh	r2, [r3, #14]
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	4313      	orrs	r3, r2
 8001672:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	889a      	ldrh	r2, [r3, #4]
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	4313      	orrs	r3, r2
 8001684:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8001686:	89bb      	ldrh	r3, [r7, #12]
 8001688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800168c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800168e:	89bb      	ldrh	r3, [r7, #12]
 8001690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001694:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	8a1a      	ldrh	r2, [r3, #16]
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	8a5a      	ldrh	r2, [r3, #18]
 80016a4:	89bb      	ldrh	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	89ba      	ldrh	r2, [r7, #12]
 80016ae:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	897a      	ldrh	r2, [r7, #10]
 80016b4:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	89fa      	ldrh	r2, [r7, #14]
 80016c2:	841a      	strh	r2, [r3, #32]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40010400 	.word	0x40010400

080016d8 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	817b      	strh	r3, [r7, #10]
 80016e6:	2300      	movs	r3, #0
 80016e8:	81fb      	strh	r3, [r7, #14]
 80016ea:	2300      	movs	r3, #0
 80016ec:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8c1b      	ldrh	r3, [r3, #32]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f023 0310 	bic.w	r3, r3, #16
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	8c1b      	ldrh	r3, [r3, #32]
 8001702:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	889b      	ldrh	r3, [r3, #4]
 8001708:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	8b1b      	ldrh	r3, [r3, #24]
 800170e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8001710:	897b      	ldrh	r3, [r7, #10]
 8001712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001716:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800171e:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b29a      	uxth	r2, r3
 8001728:	897b      	ldrh	r3, [r7, #10]
 800172a:	4313      	orrs	r3, r2
 800172c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	f023 0320 	bic.w	r3, r3, #32
 8001734:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	899b      	ldrh	r3, [r3, #12]
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	b29a      	uxth	r2, r3
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	4313      	orrs	r3, r2
 8001742:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	885b      	ldrh	r3, [r3, #2]
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	b29a      	uxth	r2, r3
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	4313      	orrs	r3, r2
 8001750:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <TIM_OC2Init+0x108>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d003      	beq.n	8001762 <TIM_OC2Init+0x8a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <TIM_OC2Init+0x10c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12b      	bne.n	80017ba <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001762:	89fb      	ldrh	r3, [r7, #14]
 8001764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001768:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	89db      	ldrh	r3, [r3, #14]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	b29a      	uxth	r2, r3
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	4313      	orrs	r3, r2
 8001776:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001778:	89fb      	ldrh	r3, [r7, #14]
 800177a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800177e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	889b      	ldrh	r3, [r3, #4]
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	b29a      	uxth	r2, r3
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	4313      	orrs	r3, r2
 800178c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800178e:	89bb      	ldrh	r3, [r7, #12]
 8001790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001794:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800179c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	8a1b      	ldrh	r3, [r3, #16]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	89bb      	ldrh	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	8a5b      	ldrh	r3, [r3, #18]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	89ba      	ldrh	r2, [r7, #12]
 80017be:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	897a      	ldrh	r2, [r7, #10]
 80017c4:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	89fa      	ldrh	r2, [r7, #14]
 80017d2:	841a      	strh	r2, [r3, #32]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40010000 	.word	0x40010000
 80017e4:	40010400 	.word	0x40010400

080017e8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	817b      	strh	r3, [r7, #10]
 80017f6:	2300      	movs	r3, #0
 80017f8:	81fb      	strh	r3, [r7, #14]
 80017fa:	2300      	movs	r3, #0
 80017fc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	8c1b      	ldrh	r3, [r3, #32]
 8001802:	b29b      	uxth	r3, r3
 8001804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	8c1b      	ldrh	r3, [r3, #32]
 8001812:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	889b      	ldrh	r3, [r3, #4]
 8001818:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8b9b      	ldrh	r3, [r3, #28]
 800181e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001820:	897b      	ldrh	r3, [r7, #10]
 8001822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001826:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001828:	897b      	ldrh	r3, [r7, #10]
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	881a      	ldrh	r2, [r3, #0]
 8001834:	897b      	ldrh	r3, [r7, #10]
 8001836:	4313      	orrs	r3, r2
 8001838:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001840:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	899b      	ldrh	r3, [r3, #12]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b29a      	uxth	r2, r3
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	4313      	orrs	r3, r2
 800184e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	885b      	ldrh	r3, [r3, #2]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	89fb      	ldrh	r3, [r7, #14]
 800185a:	4313      	orrs	r3, r2
 800185c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a22      	ldr	r2, [pc, #136]	; (80018ec <TIM_OC3Init+0x104>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d003      	beq.n	800186e <TIM_OC3Init+0x86>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <TIM_OC3Init+0x108>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d12b      	bne.n	80018c6 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001874:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	89db      	ldrh	r3, [r3, #14]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b29a      	uxth	r2, r3
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	4313      	orrs	r3, r2
 8001882:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800188a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	889b      	ldrh	r3, [r3, #4]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	4313      	orrs	r3, r2
 8001898:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018a0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80018a2:	89bb      	ldrh	r3, [r7, #12]
 80018a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018a8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	8a1b      	ldrh	r3, [r3, #16]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	89bb      	ldrh	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	8a5b      	ldrh	r3, [r3, #18]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	b29a      	uxth	r2, r3
 80018c0:	89bb      	ldrh	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	89ba      	ldrh	r2, [r7, #12]
 80018ca:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	897a      	ldrh	r2, [r7, #10]
 80018d0:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	89fa      	ldrh	r2, [r7, #14]
 80018de:	841a      	strh	r2, [r3, #32]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40010400 	.word	0x40010400

080018f4 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	81bb      	strh	r3, [r7, #12]
 8001902:	2300      	movs	r3, #0
 8001904:	817b      	strh	r3, [r7, #10]
 8001906:	2300      	movs	r3, #0
 8001908:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	8c1b      	ldrh	r3, [r3, #32]
 800190e:	b29b      	uxth	r3, r3
 8001910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	8c1b      	ldrh	r3, [r3, #32]
 800191e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	889b      	ldrh	r3, [r3, #4]
 8001924:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	8b9b      	ldrh	r3, [r3, #28]
 800192a:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800192c:	89bb      	ldrh	r3, [r7, #12]
 800192e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001932:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001934:	89bb      	ldrh	r3, [r7, #12]
 8001936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193a:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b29a      	uxth	r2, r3
 8001944:	89bb      	ldrh	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800194a:	897b      	ldrh	r3, [r7, #10]
 800194c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001950:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	899b      	ldrh	r3, [r3, #12]
 8001956:	031b      	lsls	r3, r3, #12
 8001958:	b29a      	uxth	r2, r3
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	4313      	orrs	r3, r2
 800195e:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	885b      	ldrh	r3, [r3, #2]
 8001964:	031b      	lsls	r3, r3, #12
 8001966:	b29a      	uxth	r2, r3
 8001968:	897b      	ldrh	r3, [r7, #10]
 800196a:	4313      	orrs	r3, r2
 800196c:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <TIM_OC4Init+0xc8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d003      	beq.n	800197e <TIM_OC4Init+0x8a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <TIM_OC4Init+0xcc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10a      	bne.n	8001994 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001984:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	8a1b      	ldrh	r3, [r3, #16]
 800198a:	019b      	lsls	r3, r3, #6
 800198c:	b29a      	uxth	r2, r3
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	4313      	orrs	r3, r2
 8001992:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	89fa      	ldrh	r2, [r7, #14]
 8001998:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	89ba      	ldrh	r2, [r7, #12]
 800199e:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	897a      	ldrh	r2, [r7, #10]
 80019ac:	841a      	strh	r2, [r3, #32]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40010400 	.word	0x40010400

080019c4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	8b1b      	ldrh	r3, [r3, #24]
 80019d8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80019da:	89fb      	ldrh	r3, [r7, #14]
 80019dc:	f023 0308 	bic.w	r3, r3, #8
 80019e0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80019e2:	89fa      	ldrh	r2, [r7, #14]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	89fa      	ldrh	r2, [r7, #14]
 80019ee:	831a      	strh	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	8b1b      	ldrh	r3, [r3, #24]
 8001a10:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a18:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	89fb      	ldrh	r3, [r7, #14]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	89fa      	ldrh	r2, [r7, #14]
 8001a2a:	831a      	strh	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8b9b      	ldrh	r3, [r3, #28]
 8001a4c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	f023 0308 	bic.w	r3, r3, #8
 8001a54:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001a56:	89fa      	ldrh	r2, [r7, #14]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	89fa      	ldrh	r2, [r7, #14]
 8001a62:	839a      	strh	r2, [r3, #28]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8b9b      	ldrh	r3, [r3, #28]
 8001a84:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a8c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	89fa      	ldrh	r2, [r7, #14]
 8001a9e:	839a      	strh	r2, [r3, #28]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00c      	beq.n	8001ad8 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 8001ad6:	e009      	b.n	8001aec <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	899b      	ldrh	r3, [r3, #12]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001b1e:	e009      	b.n	8001b34 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	899b      	ldrh	r3, [r3, #12]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	819a      	strh	r2, [r3, #12]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	81bb      	strh	r3, [r7, #12]
 8001b54:	2300      	movs	r3, #0
 8001b56:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	8a1b      	ldrh	r3, [r3, #16]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	4013      	ands	r3, r2
 8001b62:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	899b      	ldrh	r3, [r3, #12]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001b70:	89bb      	ldrh	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <TIM_GetITStatus+0x42>
 8001b76:	897b      	ldrh	r3, [r7, #10]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	821a      	strh	r2, [r3, #16]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b087      	sub	sp, #28
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	4608      	mov	r0, r1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	817b      	strh	r3, [r7, #10]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	813b      	strh	r3, [r7, #8]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	891b      	ldrh	r3, [r3, #8]
 8001be0:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8b1b      	ldrh	r3, [r3, #24]
 8001be6:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8c1b      	ldrh	r3, [r3, #32]
 8001bec:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8001bee:	8afb      	ldrh	r3, [r7, #22]
 8001bf0:	f023 0307 	bic.w	r3, r3, #7
 8001bf4:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8001bf6:	8afa      	ldrh	r2, [r7, #22]
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001bfe:	8abb      	ldrh	r3, [r7, #20]
 8001c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c04:	f023 0303 	bic.w	r3, r3, #3
 8001c08:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001c0a:	8abb      	ldrh	r3, [r7, #20]
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8001c16:	8a7b      	ldrh	r3, [r7, #18]
 8001c18:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001c1c:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	893b      	ldrh	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	8a7b      	ldrh	r3, [r7, #18]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8afa      	ldrh	r2, [r7, #22]
 8001c34:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8aba      	ldrh	r2, [r7, #20]
 8001c3a:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8a7a      	ldrh	r2, [r7, #18]
 8001c40:	841a      	strh	r2, [r3, #32]
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	8a1b      	ldrh	r3, [r3, #16]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	88db      	ldrh	r3, [r3, #6]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	4313      	orrs	r3, r2
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	899b      	ldrh	r3, [r3, #12]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c9c:	f023 030c 	bic.w	r3, r3, #12
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	889a      	ldrh	r2, [r3, #4]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	891b      	ldrh	r3, [r3, #8]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8a9b      	ldrh	r3, [r3, #20]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	899b      	ldrh	r3, [r3, #12]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff faa4 	bl	800123c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a30      	ldr	r2, [pc, #192]	; (8001db8 <USART_Init+0x168>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d003      	beq.n	8001d04 <USART_Init+0xb4>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <USART_Init+0x16c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d102      	bne.n	8001d0a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	e001      	b.n	8001d0e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	899b      	ldrh	r3, [r3, #12]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da0c      	bge.n	8001d34 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001d1a:	6a3a      	ldr	r2, [r7, #32]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	009a      	lsls	r2, r3, #2
 8001d24:	441a      	add	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e00b      	b.n	8001d4c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001d34:	6a3a      	ldr	r2, [r7, #32]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009a      	lsls	r2, r3, #2
 8001d3e:	441a      	add	r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <USART_Init+0x170>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	2264      	movs	r2, #100	; 0x64
 8001d60:	fb02 f303 	mul.w	r3, r2, r3
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	899b      	ldrh	r3, [r3, #12]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	da0c      	bge.n	8001d90 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	3332      	adds	r3, #50	; 0x32
 8001d7c:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <USART_Init+0x170>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	e00b      	b.n	8001da8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	3332      	adds	r3, #50	; 0x32
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <USART_Init+0x170>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	4313      	orrs	r3, r2
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	811a      	strh	r2, [r3, #8]
}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	40011400 	.word	0x40011400
 8001dc0:	51eb851f 	.word	0x51eb851f

08001dc4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	899b      	ldrh	r3, [r3, #12]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001de6:	e007      	b.n	8001df8 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	899b      	ldrh	r3, [r3, #12]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	819a      	strh	r2, [r3, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	809a      	strh	r2, [r3, #4]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	889b      	ldrh	r3, [r3, #4]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3a:	b29b      	uxth	r3, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d103      	bne.n	8001e96 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	330c      	adds	r3, #12
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e009      	b.n	8001eaa <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d103      	bne.n	8001ea4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3310      	adds	r3, #16
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e002      	b.n	8001eaa <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3314      	adds	r3, #20
 8001ea8:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001eaa:	787b      	ldrb	r3, [r7, #1]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	6811      	ldr	r1, [r2, #0]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001ebc:	e006      	b.n	8001ecc <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	6811      	ldr	r1, [r2, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	43d2      	mvns	r2, r2
 8001ec8:	400a      	ands	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e001      	b.n	8001f02 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001f3e:	2201      	movs	r2, #1
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	899b      	ldrh	r3, [r3, #12]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e011      	b.n	8001f82 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d107      	bne.n	8001f74 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8a1b      	ldrh	r3, [r3, #16]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e006      	b.n	8001f82 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	8a9b      	ldrh	r3, [r3, #20]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <USART_GetITStatus+0xa4>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
 8001fb2:	e001      	b.n	8001fb8 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	81fb      	strh	r3, [r7, #14]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001fea:	89bb      	ldrh	r3, [r7, #12]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	801a      	strh	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &TIM1->CCR1, SHIFTREG, &(SR.cast[0]), Bit1, Bit0);
 * 						  BDCInit(&BDC2, &TIM1->CCR2, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc, __IO uint32_t* pwmaddress, BCDDIRPINType Dirpintype, ...){
 8002000:	b40c      	push	{r2, r3}
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af02      	add	r7, sp, #8
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]

	bdc->speed = pwmaddress;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	61da      	str	r2, [r3, #28]
	bdc->Dirpintype =  Dirpintype;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7e3a      	ldrb	r2, [r7, #24]
 8002016:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	60fb      	str	r3, [r7, #12]

	if( bdc->Dirpintype == GPIO){
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d132      	bne.n	800208c <BDCInit+0x8c>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1d1a      	adds	r2, r3, #4
 800202a:	60fa      	str	r2, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1d1a      	adds	r2, r3, #4
 8002036:	60fa      	str	r2, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1d1a      	adds	r2, r3, #4
 8002044:	60fa      	str	r2, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1d1a      	adds	r2, r3, #4
 8002050:	60fa      	str	r2, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b29a      	uxth	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	821a      	strh	r2, [r3, #16]

		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz, GPIO_PuPd_UP);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6858      	ldr	r0, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8919      	ldrh	r1, [r3, #8]
 8002062:	2301      	movs	r3, #1
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2302      	movs	r3, #2
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	2201      	movs	r2, #1
 800206e:	f000 f8a3 	bl	80021b8 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68d8      	ldr	r0, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8a19      	ldrh	r1, [r3, #16]
 800207a:	2301      	movs	r3, #1
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	2302      	movs	r3, #2
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	2201      	movs	r2, #1
 8002086:	f000 f897 	bl	80021b8 <GPIOPinsInit>
		bdc->dir2 = va_arg(pinconfig, int);
	}

	va_end(pinconfig);

}
 800208a:	e017      	b.n	80020bc <BDCInit+0xbc>
	}else if(bdc->Dirpintype == SHIFTREG){
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d113      	bne.n	80020bc <BDCInit+0xbc>
		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1d1a      	adds	r2, r3, #4
 8002098:	60fa      	str	r2, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1d1a      	adds	r2, r3, #4
 80020a4:	60fa      	str	r2, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1d1a      	adds	r2, r3, #4
 80020b2:	60fa      	str	r2, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	765a      	strb	r2, [r3, #25]
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020c6:	b002      	add	sp, #8
 80020c8:	4770      	bx	lr

080020ca <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db33      	blt.n	8002142 <WriteBDC+0x78>

		*(bdc-> speed) = pwm;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	601a      	str	r2, [r3, #0]

		if( bdc->Dirpintype == GPIO){
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d110      	bne.n	800210c <WriteBDC+0x42>

			GPIO_WriteBit(bdc->GPIOx_DIR1 , bdc->GPIO_Pin_DIR1, Bit_SET);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6858      	ldr	r0, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	891b      	ldrh	r3, [r3, #8]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fde7 	bl	8000cc8 <GPIO_WriteBit>
			GPIO_WriteBit(bdc->GPIOx_DIR2 , bdc->GPIO_Pin_DIR2, Bit_RESET);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68d8      	ldr	r0, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8a1b      	ldrh	r3, [r3, #16]
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fddf 	bl	8000cc8 <GPIO_WriteBit>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 800210a:	e051      	b.n	80021b0 <WriteBDC+0xe6>
		}else if(bdc->Dirpintype == SHIFTREG){
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d14d      	bne.n	80021b0 <WriteBDC+0xe6>
			bdc->shiftreg->Byte |= bdc->dir1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6952      	ldr	r2, [r2, #20]
 800211c:	7811      	ldrb	r1, [r2, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	7e12      	ldrb	r2, [r2, #24]
 8002122:	430a      	orrs	r2, r1
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6952      	ldr	r2, [r2, #20]
 8002130:	7811      	ldrb	r1, [r2, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	7e52      	ldrb	r2, [r2, #25]
 8002136:	43d2      	mvns	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	400a      	ands	r2, r1
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]
}
 8002140:	e036      	b.n	80021b0 <WriteBDC+0xe6>
	}else if (pwm < 0){
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	da33      	bge.n	80021b0 <WriteBDC+0xe6>
		*(bdc-> speed) = pwm*(-1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	4252      	negs	r2, r2
 8002150:	601a      	str	r2, [r3, #0]
		if( bdc->Dirpintype == GPIO){
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d110      	bne.n	800217c <WriteBDC+0xb2>
			GPIO_WriteBit(bdc->GPIOx_DIR1 , bdc->GPIO_Pin_DIR1, Bit_RESET);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6858      	ldr	r0, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	891b      	ldrh	r3, [r3, #8]
 8002162:	2200      	movs	r2, #0
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fdaf 	bl	8000cc8 <GPIO_WriteBit>
			GPIO_WriteBit(bdc->GPIOx_DIR2 , bdc->GPIO_Pin_DIR2, Bit_SET);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68d8      	ldr	r0, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8a1b      	ldrh	r3, [r3, #16]
 8002172:	2201      	movs	r2, #1
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fda7 	bl	8000cc8 <GPIO_WriteBit>
}
 800217a:	e019      	b.n	80021b0 <WriteBDC+0xe6>
		}else if(bdc->Dirpintype == SHIFTREG){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d115      	bne.n	80021b0 <WriteBDC+0xe6>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6952      	ldr	r2, [r2, #20]
 800218c:	7811      	ldrb	r1, [r2, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	7e12      	ldrb	r2, [r2, #24]
 8002192:	43d2      	mvns	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	400a      	ands	r2, r1
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6952      	ldr	r2, [r2, #20]
 80021a4:	7811      	ldrb	r1, [r2, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	7e52      	ldrb	r2, [r2, #25]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, GPIOMode_TypeDef GPIO_Mode, GPIOOType_TypeDef GPIO_OType, GPIOSpeed_TypeDef GPIO_Speed,  GPIOPuPd_TypeDef GPIO_PuPd)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	807b      	strh	r3, [r7, #2]
 80021ca:	460b      	mov	r3, r1
 80021cc:	707b      	strb	r3, [r7, #1]
 80021ce:	4613      	mov	r3, r2
 80021d0:	703b      	strb	r3, [r7, #0]
	switch((uint32_t)GPIOx){
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <GPIOPinsInit+0xf8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d038      	beq.n	800224c <GPIOPinsInit+0x94>
 80021da:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <GPIOPinsInit+0xf8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d810      	bhi.n	8002202 <GPIOPinsInit+0x4a>
 80021e0:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <GPIOPinsInit+0xfc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d023      	beq.n	800222e <GPIOPinsInit+0x76>
 80021e6:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <GPIOPinsInit+0xfc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d803      	bhi.n	80021f4 <GPIOPinsInit+0x3c>
 80021ec:	4a32      	ldr	r2, [pc, #200]	; (80022b8 <GPIOPinsInit+0x100>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d018      	beq.n	8002224 <GPIOPinsInit+0x6c>
	    					break;

		case GPIOI_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	    					break;

		default: break;
 80021f2:	e045      	b.n	8002280 <GPIOPinsInit+0xc8>
	switch((uint32_t)GPIOx){
 80021f4:	4a31      	ldr	r2, [pc, #196]	; (80022bc <GPIOPinsInit+0x104>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01e      	beq.n	8002238 <GPIOPinsInit+0x80>
 80021fa:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <GPIOPinsInit+0x108>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d020      	beq.n	8002242 <GPIOPinsInit+0x8a>
		default: break;
 8002200:	e03e      	b.n	8002280 <GPIOPinsInit+0xc8>
	switch((uint32_t)GPIOx){
 8002202:	4a30      	ldr	r2, [pc, #192]	; (80022c4 <GPIOPinsInit+0x10c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d02b      	beq.n	8002260 <GPIOPinsInit+0xa8>
 8002208:	4a2e      	ldr	r2, [pc, #184]	; (80022c4 <GPIOPinsInit+0x10c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d803      	bhi.n	8002216 <GPIOPinsInit+0x5e>
 800220e:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <GPIOPinsInit+0x110>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d020      	beq.n	8002256 <GPIOPinsInit+0x9e>
		default: break;
 8002214:	e034      	b.n	8002280 <GPIOPinsInit+0xc8>
	switch((uint32_t)GPIOx){
 8002216:	4a2d      	ldr	r2, [pc, #180]	; (80022cc <GPIOPinsInit+0x114>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d026      	beq.n	800226a <GPIOPinsInit+0xb2>
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <GPIOPinsInit+0x118>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d028      	beq.n	8002274 <GPIOPinsInit+0xbc>
		default: break;
 8002222:	e02d      	b.n	8002280 <GPIOPinsInit+0xc8>
	    case GPIOA_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002224:	2101      	movs	r1, #1
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff f8b0 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 800222c:	e028      	b.n	8002280 <GPIOPinsInit+0xc8>
		case GPIOB_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800222e:	2101      	movs	r1, #1
 8002230:	2002      	movs	r0, #2
 8002232:	f7ff f8ab 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 8002236:	e023      	b.n	8002280 <GPIOPinsInit+0xc8>
		case GPIOC_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002238:	2101      	movs	r1, #1
 800223a:	2004      	movs	r0, #4
 800223c:	f7ff f8a6 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 8002240:	e01e      	b.n	8002280 <GPIOPinsInit+0xc8>
		case GPIOD_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002242:	2101      	movs	r1, #1
 8002244:	2008      	movs	r0, #8
 8002246:	f7ff f8a1 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 800224a:	e019      	b.n	8002280 <GPIOPinsInit+0xc8>
		case GPIOE_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800224c:	2101      	movs	r1, #1
 800224e:	2010      	movs	r0, #16
 8002250:	f7ff f89c 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 8002254:	e014      	b.n	8002280 <GPIOPinsInit+0xc8>
		case GPIOF_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8002256:	2101      	movs	r1, #1
 8002258:	2020      	movs	r0, #32
 800225a:	f7ff f897 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 800225e:	e00f      	b.n	8002280 <GPIOPinsInit+0xc8>
		case GPIOG_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8002260:	2101      	movs	r1, #1
 8002262:	2040      	movs	r0, #64	; 0x40
 8002264:	f7ff f892 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 8002268:	e00a      	b.n	8002280 <GPIOPinsInit+0xc8>
		case GPIOH_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800226a:	2101      	movs	r1, #1
 800226c:	2080      	movs	r0, #128	; 0x80
 800226e:	f7ff f88d 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 8002272:	e005      	b.n	8002280 <GPIOPinsInit+0xc8>
		case GPIOI_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8002274:	2101      	movs	r1, #1
 8002276:	f44f 7080 	mov.w	r0, #256	; 0x100
 800227a:	f7ff f887 	bl	800138c <RCC_AHB1PeriphClockCmd>
	    					break;
 800227e:	bf00      	nop
	  }

		BIOS_GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin;
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <GPIOPinsInit+0x11c>)
 8002284:	6013      	str	r3, [r2, #0]
		BIOS_GPIO_InitStructure.GPIO_Mode	= GPIO_Mode;
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <GPIOPinsInit+0x11c>)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	7113      	strb	r3, [r2, #4]
		BIOS_GPIO_InitStructure.GPIO_OType	= GPIO_OType;
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <GPIOPinsInit+0x11c>)
 800228e:	783b      	ldrb	r3, [r7, #0]
 8002290:	7193      	strb	r3, [r2, #6]
		BIOS_GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd;
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <GPIOPinsInit+0x11c>)
 8002294:	7d3b      	ldrb	r3, [r7, #20]
 8002296:	71d3      	strb	r3, [r2, #7]
		BIOS_GPIO_InitStructure.GPIO_Speed  = GPIO_Speed;
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <GPIOPinsInit+0x11c>)
 800229a:	7c3b      	ldrb	r3, [r7, #16]
 800229c:	7153      	strb	r3, [r2, #5]
		GPIO_Init(GPIOx,&BIOS_GPIO_InitStructure);
 800229e:	490d      	ldr	r1, [pc, #52]	; (80022d4 <GPIOPinsInit+0x11c>)
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe fc69 	bl	8000b78 <GPIO_Init>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020800 	.word	0x40020800
 80022c0:	40020c00 	.word	0x40020c00
 80022c4:	40021800 	.word	0x40021800
 80022c8:	40021400 	.word	0x40021400
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40022000 	.word	0x40022000
 80022d4:	200004f0 	.word	0x200004f0

080022d8 <MUXInit>:
 * Function Example		: MUXInit(&mux1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2, GPIOD, GPIO_Pin_3);
 */
void MUXInit(MUX_t* mux,GPIO_TypeDef *GPIOx_Input,uint16_t GPIO_Pin_Input,GPIO_TypeDef *GPIOx_S0,
		uint16_t GPIO_Pin_S0,GPIO_TypeDef *GPIOx_S1,uint16_t GPIO_Pin_S1,GPIO_TypeDef *GPIOx_S2,
		uint16_t GPIO_Pin_S2)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	80fb      	strh	r3, [r7, #6]
	mux->GPIOx_Input = GPIOx_Input;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	601a      	str	r2, [r3, #0]
	mux->GPIO_Pin_Input = GPIO_Pin_Input;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	809a      	strh	r2, [r3, #4]
	mux->GPIOx_S0 = GPIOx_S0;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	609a      	str	r2, [r3, #8]
	mux->GPIO_Pin_S0 = GPIO_Pin_S0;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8b3a      	ldrh	r2, [r7, #24]
 80022fe:	819a      	strh	r2, [r3, #12]
	mux->GPIOx_S1 = GPIOx_S1;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	611a      	str	r2, [r3, #16]
	mux->GPIO_Pin_S1 = GPIO_Pin_S1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8c3a      	ldrh	r2, [r7, #32]
 800230a:	829a      	strh	r2, [r3, #20]
	mux->GPIOx_S2 = GPIOx_S2;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002310:	619a      	str	r2, [r3, #24]
	mux->GPIO_Pin_S2 = GPIO_Pin_S2;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002316:	839a      	strh	r2, [r3, #28]

	GPIOPinsInit(mux->GPIOx_Input,mux->GPIO_Pin_Input, GPIO_Mode_IN,GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8899      	ldrh	r1, [r3, #4]
 8002320:	2301      	movs	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	2302      	movs	r3, #2
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	2200      	movs	r2, #0
 800232c:	f7ff ff44 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S0,mux->GPIO_Pin_S0, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6898      	ldr	r0, [r3, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8999      	ldrh	r1, [r3, #12]
 8002338:	2301      	movs	r3, #1
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	2302      	movs	r3, #2
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2300      	movs	r3, #0
 8002342:	2201      	movs	r2, #1
 8002344:	f7ff ff38 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S1,mux->GPIO_Pin_S1, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6918      	ldr	r0, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8a99      	ldrh	r1, [r3, #20]
 8002350:	2301      	movs	r3, #1
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	2302      	movs	r3, #2
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2300      	movs	r3, #0
 800235a:	2201      	movs	r2, #1
 800235c:	f7ff ff2c 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S2,mux->GPIO_Pin_S2, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6998      	ldr	r0, [r3, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8b99      	ldrh	r1, [r3, #28]
 8002368:	2301      	movs	r3, #1
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	2302      	movs	r3, #2
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2300      	movs	r3, #0
 8002372:	2201      	movs	r2, #1
 8002374:	f7ff ff20 	bl	80021b8 <GPIOPinsInit>

}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <MUXSelect>:
 * 						  select	selected input channel of multiplexer
 * Function Return		: Read data bit from multiplexer
 * Function Example		: mux->bit0 = MUXSelect(&mux, 0);
 */
uint8_t MUXSelect(MUX_t* mux, uint8_t select)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
	mux->select = select;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	(mux->s0 == 1) ? GPIO_WriteBit(mux->GPIOx_S0, mux->GPIO_Pin_S0, Bit_SET) : GPIO_WriteBit(mux->GPIOx_S0, mux->GPIO_Pin_S0, Bit_RESET);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <MUXSelect+0x36>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6898      	ldr	r0, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	899b      	ldrh	r3, [r3, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fc8a 	bl	8000cc8 <GPIO_WriteBit>
 80023b4:	e007      	b.n	80023c6 <MUXSelect+0x46>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6898      	ldr	r0, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	899b      	ldrh	r3, [r3, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fc81 	bl	8000cc8 <GPIO_WriteBit>
	(mux->s1 == 1) ? GPIO_WriteBit(mux->GPIOx_S1, mux->GPIO_Pin_S1, Bit_SET) : GPIO_WriteBit(mux->GPIOx_S1, mux->GPIO_Pin_S1, Bit_RESET);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <MUXSelect+0x68>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6918      	ldr	r0, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	8a9b      	ldrh	r3, [r3, #20]
 80023de:	2201      	movs	r2, #1
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fc71 	bl	8000cc8 <GPIO_WriteBit>
 80023e6:	e007      	b.n	80023f8 <MUXSelect+0x78>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6918      	ldr	r0, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8a9b      	ldrh	r3, [r3, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7fe fc68 	bl	8000cc8 <GPIO_WriteBit>
	(mux->s2 == 1) ? GPIO_WriteBit(mux->GPIOx_S2, mux->GPIO_Pin_S2, Bit_SET) : GPIO_WriteBit(mux->GPIOx_S2, mux->GPIO_Pin_S2, Bit_RESET);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <MUXSelect+0x9a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6998      	ldr	r0, [r3, #24]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8b9b      	ldrh	r3, [r3, #28]
 8002410:	2201      	movs	r2, #1
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fc58 	bl	8000cc8 <GPIO_WriteBit>
 8002418:	e007      	b.n	800242a <MUXSelect+0xaa>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6998      	ldr	r0, [r3, #24]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8b9b      	ldrh	r3, [r3, #28]
 8002422:	2200      	movs	r2, #0
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fc4f 	bl	8000cc8 <GPIO_WriteBit>

	return GPIO_ReadInputDataBit(mux->GPIOx_Input, mux->GPIO_Pin_Input);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	889b      	ldrh	r3, [r3, #4]
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7fe fc2d 	bl	8000c94 <GPIO_ReadInputDataBit>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <MUXUpdate>:
 * Function Remarks		: None
 * Function Arguments	: mux	pointer to structure
 * Function Return		: None
 * Function Example		: MUXUpdate(&mux1);
 */
void MUXUpdate(MUX_t* mux){
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 8 ; i++){
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e0aa      	b.n	80025a8 <MUXUpdate+0x164>

		switch(i){
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b07      	cmp	r3, #7
 8002456:	f200 80a3 	bhi.w	80025a0 <MUXUpdate+0x15c>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <MUXUpdate+0x1c>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	08002481 	.word	0x08002481
 8002464:	080024a5 	.word	0x080024a5
 8002468:	080024c9 	.word	0x080024c9
 800246c:	080024ed 	.word	0x080024ed
 8002470:	08002511 	.word	0x08002511
 8002474:	08002535 	.word	0x08002535
 8002478:	08002559 	.word	0x08002559
 800247c:	0800257d 	.word	0x0800257d

			case 0 : mux->mux_data.bit0 = MUXSelect(mux, i);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff7a 	bl	8002380 <MUXSelect>
 800248c:	4603      	mov	r3, r0
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	b2d9      	uxtb	r1, r3
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	f892 3020 	ldrb.w	r3, [r2, #32]
 800249a:	f361 0300 	bfi	r3, r1, #0, #1
 800249e:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 80024a2:	e07e      	b.n	80025a2 <MUXUpdate+0x15e>

			case 1 : mux->mux_data.bit1 = MUXSelect(mux, i);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ff68 	bl	8002380 <MUXSelect>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	b2d9      	uxtb	r1, r3
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	f892 3020 	ldrb.w	r3, [r2, #32]
 80024be:	f361 0341 	bfi	r3, r1, #1, #1
 80024c2:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 80024c6:	e06c      	b.n	80025a2 <MUXUpdate+0x15e>

			case 2 : mux->mux_data.bit2 = MUXSelect(mux, i);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ff56 	bl	8002380 <MUXSelect>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	b2d9      	uxtb	r1, r3
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	f892 3020 	ldrb.w	r3, [r2, #32]
 80024e2:	f361 0382 	bfi	r3, r1, #2, #1
 80024e6:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 80024ea:	e05a      	b.n	80025a2 <MUXUpdate+0x15e>

			case 3 : mux->mux_data.bit3 = MUXSelect(mux, i);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff44 	bl	8002380 <MUXSelect>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	b2d9      	uxtb	r1, r3
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	f892 3020 	ldrb.w	r3, [r2, #32]
 8002506:	f361 03c3 	bfi	r3, r1, #3, #1
 800250a:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 800250e:	e048      	b.n	80025a2 <MUXUpdate+0x15e>

			case 4 : mux->mux_data.bit4 = MUXSelect(mux, i);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff32 	bl	8002380 <MUXSelect>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	b2d9      	uxtb	r1, r3
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	f892 3020 	ldrb.w	r3, [r2, #32]
 800252a:	f361 1304 	bfi	r3, r1, #4, #1
 800252e:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8002532:	e036      	b.n	80025a2 <MUXUpdate+0x15e>

			case 5 : mux->mux_data.bit5 = MUXSelect(mux, i);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff20 	bl	8002380 <MUXSelect>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	b2d9      	uxtb	r1, r3
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800254e:	f361 1345 	bfi	r3, r1, #5, #1
 8002552:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8002556:	e024      	b.n	80025a2 <MUXUpdate+0x15e>

			case 6 : mux->mux_data.bit6 = MUXSelect(mux, i);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ff0e 	bl	8002380 <MUXSelect>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	b2d9      	uxtb	r1, r3
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8002572:	f361 1386 	bfi	r3, r1, #6, #1
 8002576:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 800257a:	e012      	b.n	80025a2 <MUXUpdate+0x15e>

			case 7 : mux->mux_data.bit7 = MUXSelect(mux, i);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fefc 	bl	8002380 <MUXSelect>
 8002588:	4603      	mov	r3, r0
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	b2d9      	uxtb	r1, r3
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	f892 3020 	ldrb.w	r3, [r2, #32]
 8002596:	f361 13c7 	bfi	r3, r1, #7, #1
 800259a:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 800259e:	e000      	b.n	80025a2 <MUXUpdate+0x15e>

			default:
				break;
 80025a0:	bf00      	nop
	for(int i = 0; i < 8 ; i++){
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3301      	adds	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b07      	cmp	r3, #7
 80025ac:	f77f af51 	ble.w	8002452 <MUXUpdate+0xe>
		}

	}

}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(TIM1, 20000, 84);
 */

void PWMTimeBaseInit(TIM_TypeDef* Timer, uint32_t Period, uint32_t Prescaler){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]

	TIM_TimeBaseInitTypeDef     	PWM_TIM_TimeBaseStructure;

	switch((uint32_t)Timer){
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <PWMTimeBaseInit+0x128>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d062      	beq.n	8002692 <PWMTimeBaseInit+0xda>
 80025cc:	4a44      	ldr	r2, [pc, #272]	; (80026e0 <PWMTimeBaseInit+0x128>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d813      	bhi.n	80025fa <PWMTimeBaseInit+0x42>
 80025d2:	4a44      	ldr	r2, [pc, #272]	; (80026e4 <PWMTimeBaseInit+0x12c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d036      	beq.n	8002646 <PWMTimeBaseInit+0x8e>
 80025d8:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <PWMTimeBaseInit+0x12c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d806      	bhi.n	80025ec <PWMTimeBaseInit+0x34>
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d026      	beq.n	8002632 <PWMTimeBaseInit+0x7a>
 80025e4:	4a40      	ldr	r2, [pc, #256]	; (80026e8 <PWMTimeBaseInit+0x130>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d028      	beq.n	800263c <PWMTimeBaseInit+0x84>
							break;

			case TIM14_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
							break;

			default: break;
 80025ea:	e05d      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
	switch((uint32_t)Timer){
 80025ec:	4a3f      	ldr	r2, [pc, #252]	; (80026ec <PWMTimeBaseInit+0x134>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d02e      	beq.n	8002650 <PWMTimeBaseInit+0x98>
 80025f2:	4a3f      	ldr	r2, [pc, #252]	; (80026f0 <PWMTimeBaseInit+0x138>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d047      	beq.n	8002688 <PWMTimeBaseInit+0xd0>
			default: break;
 80025f8:	e056      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
	switch((uint32_t)Timer){
 80025fa:	4a3e      	ldr	r2, [pc, #248]	; (80026f4 <PWMTimeBaseInit+0x13c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d02c      	beq.n	800265a <PWMTimeBaseInit+0xa2>
 8002600:	4a3c      	ldr	r2, [pc, #240]	; (80026f4 <PWMTimeBaseInit+0x13c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d806      	bhi.n	8002614 <PWMTimeBaseInit+0x5c>
 8002606:	4a3c      	ldr	r2, [pc, #240]	; (80026f8 <PWMTimeBaseInit+0x140>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d047      	beq.n	800269c <PWMTimeBaseInit+0xe4>
 800260c:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <PWMTimeBaseInit+0x144>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00a      	beq.n	8002628 <PWMTimeBaseInit+0x70>
			default: break;
 8002612:	e049      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
	switch((uint32_t)Timer){
 8002614:	4a3a      	ldr	r2, [pc, #232]	; (8002700 <PWMTimeBaseInit+0x148>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d02a      	beq.n	8002670 <PWMTimeBaseInit+0xb8>
 800261a:	4a3a      	ldr	r2, [pc, #232]	; (8002704 <PWMTimeBaseInit+0x14c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d02d      	beq.n	800267c <PWMTimeBaseInit+0xc4>
 8002620:	4a39      	ldr	r2, [pc, #228]	; (8002708 <PWMTimeBaseInit+0x150>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01e      	beq.n	8002664 <PWMTimeBaseInit+0xac>
			default: break;
 8002626:	e03f      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM1_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002628:	2101      	movs	r1, #1
 800262a:	2001      	movs	r0, #1
 800262c:	f7fe feee 	bl	800140c <RCC_APB2PeriphClockCmd>
							break;
 8002630:	e03a      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM2_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002632:	2101      	movs	r1, #1
 8002634:	2001      	movs	r0, #1
 8002636:	f7fe fec9 	bl	80013cc <RCC_APB1PeriphClockCmd>
							break;
 800263a:	e035      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM3_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800263c:	2101      	movs	r1, #1
 800263e:	2002      	movs	r0, #2
 8002640:	f7fe fec4 	bl	80013cc <RCC_APB1PeriphClockCmd>
							break;
 8002644:	e030      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM4_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002646:	2101      	movs	r1, #1
 8002648:	2004      	movs	r0, #4
 800264a:	f7fe febf 	bl	80013cc <RCC_APB1PeriphClockCmd>
							break;
 800264e:	e02b      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM5_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002650:	2101      	movs	r1, #1
 8002652:	2008      	movs	r0, #8
 8002654:	f7fe feba 	bl	80013cc <RCC_APB1PeriphClockCmd>
							break;
 8002658:	e026      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM8_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 800265a:	2101      	movs	r1, #1
 800265c:	2002      	movs	r0, #2
 800265e:	f7fe fed5 	bl	800140c <RCC_APB2PeriphClockCmd>
							break;
 8002662:	e021      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM9_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002664:	2101      	movs	r1, #1
 8002666:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800266a:	f7fe fecf 	bl	800140c <RCC_APB2PeriphClockCmd>
							break;
 800266e:	e01b      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM10_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 8002670:	2101      	movs	r1, #1
 8002672:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002676:	f7fe fec9 	bl	800140c <RCC_APB2PeriphClockCmd>
							break;
 800267a:	e015      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM11_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM11, ENABLE);
 800267c:	2101      	movs	r1, #1
 800267e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002682:	f7fe fec3 	bl	800140c <RCC_APB2PeriphClockCmd>
							break;
 8002686:	e00f      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM12_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002688:	2101      	movs	r1, #1
 800268a:	2040      	movs	r0, #64	; 0x40
 800268c:	f7fe fe9e 	bl	80013cc <RCC_APB1PeriphClockCmd>
							break;
 8002690:	e00a      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM13_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002692:	2101      	movs	r1, #1
 8002694:	2080      	movs	r0, #128	; 0x80
 8002696:	f7fe fe99 	bl	80013cc <RCC_APB1PeriphClockCmd>
							break;
 800269a:	e005      	b.n	80026a8 <PWMTimeBaseInit+0xf0>
			case TIM14_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 800269c:	2101      	movs	r1, #1
 800269e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026a2:	f7fe fe93 	bl	80013cc <RCC_APB1PeriphClockCmd>
							break;
 80026a6:	bf00      	nop

		}

	PWM_TIM_TimeBaseStructure.TIM_Period = Period-1;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	61bb      	str	r3, [r7, #24]
	PWM_TIM_TimeBaseStructure.TIM_Prescaler = Prescaler-1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	82bb      	strh	r3, [r7, #20]
	PWM_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80026b8:	2300      	movs	r3, #0
 80026ba:	82fb      	strh	r3, [r7, #22]
	PWM_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	83bb      	strh	r3, [r7, #28]
	PWM_TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	77bb      	strb	r3, [r7, #30]
	TIM_TimeBaseInit(Timer, &PWM_TIM_TimeBaseStructure);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7fe fede 	bl	800148c <TIM_TimeBaseInit>
	TIM_Cmd(Timer, ENABLE);
 80026d0:	2101      	movs	r1, #1
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7fe ff66 	bl	80015a4 <TIM_Cmd>

}
 80026d8:	bf00      	nop
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40001c00 	.word	0x40001c00
 80026e4:	40000800 	.word	0x40000800
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000c00 	.word	0x40000c00
 80026f0:	40001800 	.word	0x40001800
 80026f4:	40010400 	.word	0x40010400
 80026f8:	40002000 	.word	0x40002000
 80026fc:	40010000 	.word	0x40010000
 8002700:	40014400 	.word	0x40014400
 8002704:	40014800 	.word	0x40014800
 8002708:	40014000 	.word	0x40014000

0800270c <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(TIM1, PWM_CHANNEL_1, GPIOE, GPIO_Pin_9);
 */

void PWMChannelConfig(TIM_TypeDef* Timer, PWMChannel Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	; 0x30
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	461a      	mov	r2, r3
 8002718:	460b      	mov	r3, r1
 800271a:	72fb      	strb	r3, [r7, #11]
 800271c:	4613      	mov	r3, r2
 800271e:	813b      	strh	r3, [r7, #8]

	TIM_OCInitTypeDef		PWM_TIM_OCInitStructure;

	GPIOPinsInit(GPIOx, GPIO_Pin_x, GPIO_Mode_AF, GPIO_OType_PP, GPIO_Speed_100MHz, GPIO_PuPd_UP);
 8002720:	8939      	ldrh	r1, [r7, #8]
 8002722:	2301      	movs	r3, #1
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	2303      	movs	r3, #3
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2300      	movs	r3, #0
 800272c:	2202      	movs	r2, #2
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fd42 	bl	80021b8 <GPIOPinsInit>

	if(Timer == TIM1){
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4ab0      	ldr	r2, [pc, #704]	; (80029f8 <PWMChannelConfig+0x2ec>)
 8002738:	4293      	cmp	r3, r2
 800273a:	f040 80a0 	bne.w	800287e <PWMChannelConfig+0x172>
		AFConfig(TIM1, GPIOx, GPIO_Pin_x);
 800273e:	893b      	ldrh	r3, [r7, #8]
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d05e      	beq.n	8002802 <PWMChannelConfig+0xf6>
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d811      	bhi.n	800276c <PWMChannelConfig+0x60>
 8002748:	2b08      	cmp	r3, #8
 800274a:	d042      	beq.n	80027d2 <PWMChannelConfig+0xc6>
 800274c:	2b08      	cmp	r3, #8
 800274e:	d806      	bhi.n	800275e <PWMChannelConfig+0x52>
 8002750:	2b02      	cmp	r3, #2
 8002752:	d032      	beq.n	80027ba <PWMChannelConfig+0xae>
 8002754:	2b04      	cmp	r3, #4
 8002756:	d036      	beq.n	80027c6 <PWMChannelConfig+0xba>
 8002758:	2b01      	cmp	r3, #1
 800275a:	d028      	beq.n	80027ae <PWMChannelConfig+0xa2>
 800275c:	e086      	b.n	800286c <PWMChannelConfig+0x160>
 800275e:	2b20      	cmp	r3, #32
 8002760:	d043      	beq.n	80027ea <PWMChannelConfig+0xde>
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d047      	beq.n	80027f6 <PWMChannelConfig+0xea>
 8002766:	2b10      	cmp	r3, #16
 8002768:	d039      	beq.n	80027de <PWMChannelConfig+0xd2>
 800276a:	e07f      	b.n	800286c <PWMChannelConfig+0x160>
 800276c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002770:	d05f      	beq.n	8002832 <PWMChannelConfig+0x126>
 8002772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002776:	d809      	bhi.n	800278c <PWMChannelConfig+0x80>
 8002778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277c:	d04d      	beq.n	800281a <PWMChannelConfig+0x10e>
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002782:	d050      	beq.n	8002826 <PWMChannelConfig+0x11a>
 8002784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002788:	d041      	beq.n	800280e <PWMChannelConfig+0x102>
 800278a:	e06f      	b.n	800286c <PWMChannelConfig+0x160>
 800278c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002790:	d05b      	beq.n	800284a <PWMChannelConfig+0x13e>
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002796:	d803      	bhi.n	80027a0 <PWMChannelConfig+0x94>
 8002798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279c:	d04f      	beq.n	800283e <PWMChannelConfig+0x132>
 800279e:	e065      	b.n	800286c <PWMChannelConfig+0x160>
 80027a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a4:	d057      	beq.n	8002856 <PWMChannelConfig+0x14a>
 80027a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027aa:	d05a      	beq.n	8002862 <PWMChannelConfig+0x156>
 80027ac:	e05e      	b.n	800286c <PWMChannelConfig+0x160>
 80027ae:	2201      	movs	r2, #1
 80027b0:	2100      	movs	r1, #0
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe faa0 	bl	8000cf8 <GPIO_PinAFConfig>
 80027b8:	e058      	b.n	800286c <PWMChannelConfig+0x160>
 80027ba:	2201      	movs	r2, #1
 80027bc:	2101      	movs	r1, #1
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fa9a 	bl	8000cf8 <GPIO_PinAFConfig>
 80027c4:	e052      	b.n	800286c <PWMChannelConfig+0x160>
 80027c6:	2201      	movs	r2, #1
 80027c8:	2102      	movs	r1, #2
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fa94 	bl	8000cf8 <GPIO_PinAFConfig>
 80027d0:	e04c      	b.n	800286c <PWMChannelConfig+0x160>
 80027d2:	2201      	movs	r2, #1
 80027d4:	2103      	movs	r1, #3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fa8e 	bl	8000cf8 <GPIO_PinAFConfig>
 80027dc:	e046      	b.n	800286c <PWMChannelConfig+0x160>
 80027de:	2201      	movs	r2, #1
 80027e0:	2104      	movs	r1, #4
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fa88 	bl	8000cf8 <GPIO_PinAFConfig>
 80027e8:	e040      	b.n	800286c <PWMChannelConfig+0x160>
 80027ea:	2201      	movs	r2, #1
 80027ec:	2105      	movs	r1, #5
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fa82 	bl	8000cf8 <GPIO_PinAFConfig>
 80027f4:	e03a      	b.n	800286c <PWMChannelConfig+0x160>
 80027f6:	2201      	movs	r2, #1
 80027f8:	2106      	movs	r1, #6
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fa7c 	bl	8000cf8 <GPIO_PinAFConfig>
 8002800:	e034      	b.n	800286c <PWMChannelConfig+0x160>
 8002802:	2201      	movs	r2, #1
 8002804:	2107      	movs	r1, #7
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fa76 	bl	8000cf8 <GPIO_PinAFConfig>
 800280c:	e02e      	b.n	800286c <PWMChannelConfig+0x160>
 800280e:	2201      	movs	r2, #1
 8002810:	2108      	movs	r1, #8
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fa70 	bl	8000cf8 <GPIO_PinAFConfig>
 8002818:	e028      	b.n	800286c <PWMChannelConfig+0x160>
 800281a:	2201      	movs	r2, #1
 800281c:	2109      	movs	r1, #9
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe fa6a 	bl	8000cf8 <GPIO_PinAFConfig>
 8002824:	e022      	b.n	800286c <PWMChannelConfig+0x160>
 8002826:	2201      	movs	r2, #1
 8002828:	210a      	movs	r1, #10
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fa64 	bl	8000cf8 <GPIO_PinAFConfig>
 8002830:	e01c      	b.n	800286c <PWMChannelConfig+0x160>
 8002832:	2201      	movs	r2, #1
 8002834:	210b      	movs	r1, #11
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe fa5e 	bl	8000cf8 <GPIO_PinAFConfig>
 800283c:	e016      	b.n	800286c <PWMChannelConfig+0x160>
 800283e:	2201      	movs	r2, #1
 8002840:	210c      	movs	r1, #12
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fa58 	bl	8000cf8 <GPIO_PinAFConfig>
 8002848:	e010      	b.n	800286c <PWMChannelConfig+0x160>
 800284a:	2201      	movs	r2, #1
 800284c:	210d      	movs	r1, #13
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fa52 	bl	8000cf8 <GPIO_PinAFConfig>
 8002854:	e00a      	b.n	800286c <PWMChannelConfig+0x160>
 8002856:	2201      	movs	r2, #1
 8002858:	210e      	movs	r1, #14
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fa4c 	bl	8000cf8 <GPIO_PinAFConfig>
 8002860:	e004      	b.n	800286c <PWMChannelConfig+0x160>
 8002862:	2201      	movs	r2, #1
 8002864:	210f      	movs	r1, #15
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fa46 	bl	8000cf8 <GPIO_PinAFConfig>
 800286c:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 800286e:	2370      	movs	r3, #112	; 0x70
 8002870:	82bb      	strh	r3, [r7, #20]
		TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8002872:	2101      	movs	r1, #1
 8002874:	4860      	ldr	r0, [pc, #384]	; (80029f8 <PWMChannelConfig+0x2ec>)
 8002876:	f7ff f919 	bl	8001aac <TIM_CtrlPWMOutputs>
 800287a:	f000 bf00 	b.w	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM2){
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	f040 809c 	bne.w	80029c0 <PWMChannelConfig+0x2b4>
		AFConfig(TIM2, GPIOx, GPIO_Pin_x);
 8002888:	893b      	ldrh	r3, [r7, #8]
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d05e      	beq.n	800294c <PWMChannelConfig+0x240>
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d811      	bhi.n	80028b6 <PWMChannelConfig+0x1aa>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d042      	beq.n	800291c <PWMChannelConfig+0x210>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d806      	bhi.n	80028a8 <PWMChannelConfig+0x19c>
 800289a:	2b02      	cmp	r3, #2
 800289c:	d032      	beq.n	8002904 <PWMChannelConfig+0x1f8>
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d036      	beq.n	8002910 <PWMChannelConfig+0x204>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d028      	beq.n	80028f8 <PWMChannelConfig+0x1ec>
 80028a6:	e086      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d043      	beq.n	8002934 <PWMChannelConfig+0x228>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d047      	beq.n	8002940 <PWMChannelConfig+0x234>
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d039      	beq.n	8002928 <PWMChannelConfig+0x21c>
 80028b4:	e07f      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 80028b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ba:	d05f      	beq.n	800297c <PWMChannelConfig+0x270>
 80028bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c0:	d809      	bhi.n	80028d6 <PWMChannelConfig+0x1ca>
 80028c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c6:	d04d      	beq.n	8002964 <PWMChannelConfig+0x258>
 80028c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028cc:	d050      	beq.n	8002970 <PWMChannelConfig+0x264>
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d2:	d041      	beq.n	8002958 <PWMChannelConfig+0x24c>
 80028d4:	e06f      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 80028d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028da:	d05b      	beq.n	8002994 <PWMChannelConfig+0x288>
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e0:	d803      	bhi.n	80028ea <PWMChannelConfig+0x1de>
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	d04f      	beq.n	8002988 <PWMChannelConfig+0x27c>
 80028e8:	e065      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 80028ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ee:	d057      	beq.n	80029a0 <PWMChannelConfig+0x294>
 80028f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f4:	d05a      	beq.n	80029ac <PWMChannelConfig+0x2a0>
 80028f6:	e05e      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 80028f8:	2201      	movs	r2, #1
 80028fa:	2100      	movs	r1, #0
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7fe f9fb 	bl	8000cf8 <GPIO_PinAFConfig>
 8002902:	e058      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002904:	2201      	movs	r2, #1
 8002906:	2101      	movs	r1, #1
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7fe f9f5 	bl	8000cf8 <GPIO_PinAFConfig>
 800290e:	e052      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002910:	2201      	movs	r2, #1
 8002912:	2102      	movs	r1, #2
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fe f9ef 	bl	8000cf8 <GPIO_PinAFConfig>
 800291a:	e04c      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 800291c:	2201      	movs	r2, #1
 800291e:	2103      	movs	r1, #3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7fe f9e9 	bl	8000cf8 <GPIO_PinAFConfig>
 8002926:	e046      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002928:	2201      	movs	r2, #1
 800292a:	2104      	movs	r1, #4
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fe f9e3 	bl	8000cf8 <GPIO_PinAFConfig>
 8002932:	e040      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002934:	2201      	movs	r2, #1
 8002936:	2105      	movs	r1, #5
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7fe f9dd 	bl	8000cf8 <GPIO_PinAFConfig>
 800293e:	e03a      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002940:	2201      	movs	r2, #1
 8002942:	2106      	movs	r1, #6
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe f9d7 	bl	8000cf8 <GPIO_PinAFConfig>
 800294a:	e034      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 800294c:	2201      	movs	r2, #1
 800294e:	2107      	movs	r1, #7
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7fe f9d1 	bl	8000cf8 <GPIO_PinAFConfig>
 8002956:	e02e      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002958:	2201      	movs	r2, #1
 800295a:	2108      	movs	r1, #8
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fe f9cb 	bl	8000cf8 <GPIO_PinAFConfig>
 8002962:	e028      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002964:	2201      	movs	r2, #1
 8002966:	2109      	movs	r1, #9
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7fe f9c5 	bl	8000cf8 <GPIO_PinAFConfig>
 800296e:	e022      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002970:	2201      	movs	r2, #1
 8002972:	210a      	movs	r1, #10
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fe f9bf 	bl	8000cf8 <GPIO_PinAFConfig>
 800297a:	e01c      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 800297c:	2201      	movs	r2, #1
 800297e:	210b      	movs	r1, #11
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fe f9b9 	bl	8000cf8 <GPIO_PinAFConfig>
 8002986:	e016      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002988:	2201      	movs	r2, #1
 800298a:	210c      	movs	r1, #12
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7fe f9b3 	bl	8000cf8 <GPIO_PinAFConfig>
 8002992:	e010      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 8002994:	2201      	movs	r2, #1
 8002996:	210d      	movs	r1, #13
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7fe f9ad 	bl	8000cf8 <GPIO_PinAFConfig>
 800299e:	e00a      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 80029a0:	2201      	movs	r2, #1
 80029a2:	210e      	movs	r1, #14
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe f9a7 	bl	8000cf8 <GPIO_PinAFConfig>
 80029aa:	e004      	b.n	80029b6 <PWMChannelConfig+0x2aa>
 80029ac:	2201      	movs	r2, #1
 80029ae:	210f      	movs	r1, #15
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7fe f9a1 	bl	8000cf8 <GPIO_PinAFConfig>
 80029b6:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 80029b8:	2370      	movs	r3, #112	; 0x70
 80029ba:	82bb      	strh	r3, [r7, #20]
 80029bc:	f000 be5f 	b.w	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM3){
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <PWMChannelConfig+0x2f0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	f040 80a0 	bne.w	8002b0a <PWMChannelConfig+0x3fe>
		AFConfig(TIM3, GPIOx, GPIO_Pin_x);
 80029ca:	893b      	ldrh	r3, [r7, #8]
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d062      	beq.n	8002a96 <PWMChannelConfig+0x38a>
 80029d0:	2b80      	cmp	r3, #128	; 0x80
 80029d2:	d815      	bhi.n	8002a00 <PWMChannelConfig+0x2f4>
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d046      	beq.n	8002a66 <PWMChannelConfig+0x35a>
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d806      	bhi.n	80029ea <PWMChannelConfig+0x2de>
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d036      	beq.n	8002a4e <PWMChannelConfig+0x342>
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d03a      	beq.n	8002a5a <PWMChannelConfig+0x34e>
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d02c      	beq.n	8002a42 <PWMChannelConfig+0x336>
 80029e8:	e08a      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d047      	beq.n	8002a7e <PWMChannelConfig+0x372>
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d04b      	beq.n	8002a8a <PWMChannelConfig+0x37e>
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d03d      	beq.n	8002a72 <PWMChannelConfig+0x366>
 80029f6:	e083      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40000400 	.word	0x40000400
 8002a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a04:	d05f      	beq.n	8002ac6 <PWMChannelConfig+0x3ba>
 8002a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0a:	d809      	bhi.n	8002a20 <PWMChannelConfig+0x314>
 8002a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a10:	d04d      	beq.n	8002aae <PWMChannelConfig+0x3a2>
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a16:	d050      	beq.n	8002aba <PWMChannelConfig+0x3ae>
 8002a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1c:	d041      	beq.n	8002aa2 <PWMChannelConfig+0x396>
 8002a1e:	e06f      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a24:	d05b      	beq.n	8002ade <PWMChannelConfig+0x3d2>
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2a:	d803      	bhi.n	8002a34 <PWMChannelConfig+0x328>
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	d04f      	beq.n	8002ad2 <PWMChannelConfig+0x3c6>
 8002a32:	e065      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a38:	d057      	beq.n	8002aea <PWMChannelConfig+0x3de>
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d05a      	beq.n	8002af6 <PWMChannelConfig+0x3ea>
 8002a40:	e05e      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a42:	2202      	movs	r2, #2
 8002a44:	2100      	movs	r1, #0
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe f956 	bl	8000cf8 <GPIO_PinAFConfig>
 8002a4c:	e058      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a4e:	2202      	movs	r2, #2
 8002a50:	2101      	movs	r1, #1
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe f950 	bl	8000cf8 <GPIO_PinAFConfig>
 8002a58:	e052      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f94a 	bl	8000cf8 <GPIO_PinAFConfig>
 8002a64:	e04c      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a66:	2202      	movs	r2, #2
 8002a68:	2103      	movs	r1, #3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe f944 	bl	8000cf8 <GPIO_PinAFConfig>
 8002a70:	e046      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a72:	2202      	movs	r2, #2
 8002a74:	2104      	movs	r1, #4
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe f93e 	bl	8000cf8 <GPIO_PinAFConfig>
 8002a7c:	e040      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a7e:	2202      	movs	r2, #2
 8002a80:	2105      	movs	r1, #5
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe f938 	bl	8000cf8 <GPIO_PinAFConfig>
 8002a88:	e03a      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	2106      	movs	r1, #6
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe f932 	bl	8000cf8 <GPIO_PinAFConfig>
 8002a94:	e034      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002a96:	2202      	movs	r2, #2
 8002a98:	2107      	movs	r1, #7
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe f92c 	bl	8000cf8 <GPIO_PinAFConfig>
 8002aa0:	e02e      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	2108      	movs	r1, #8
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe f926 	bl	8000cf8 <GPIO_PinAFConfig>
 8002aac:	e028      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002aae:	2202      	movs	r2, #2
 8002ab0:	2109      	movs	r1, #9
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe f920 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ab8:	e022      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002aba:	2202      	movs	r2, #2
 8002abc:	210a      	movs	r1, #10
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe f91a 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ac4:	e01c      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	210b      	movs	r1, #11
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe f914 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ad0:	e016      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	210c      	movs	r1, #12
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fe f90e 	bl	8000cf8 <GPIO_PinAFConfig>
 8002adc:	e010      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002ade:	2202      	movs	r2, #2
 8002ae0:	210d      	movs	r1, #13
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe f908 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ae8:	e00a      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002aea:	2202      	movs	r2, #2
 8002aec:	210e      	movs	r1, #14
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe f902 	bl	8000cf8 <GPIO_PinAFConfig>
 8002af4:	e004      	b.n	8002b00 <PWMChannelConfig+0x3f4>
 8002af6:	2202      	movs	r2, #2
 8002af8:	210f      	movs	r1, #15
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe f8fc 	bl	8000cf8 <GPIO_PinAFConfig>
 8002b00:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002b02:	2370      	movs	r3, #112	; 0x70
 8002b04:	82bb      	strh	r3, [r7, #20]
 8002b06:	f000 bdba 	b.w	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM4){
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4ab6      	ldr	r2, [pc, #728]	; (8002de8 <PWMChannelConfig+0x6dc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 809c 	bne.w	8002c4c <PWMChannelConfig+0x540>
		AFConfig(TIM4, GPIOx, GPIO_Pin_x);
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d05e      	beq.n	8002bd8 <PWMChannelConfig+0x4cc>
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d811      	bhi.n	8002b42 <PWMChannelConfig+0x436>
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d042      	beq.n	8002ba8 <PWMChannelConfig+0x49c>
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d806      	bhi.n	8002b34 <PWMChannelConfig+0x428>
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d032      	beq.n	8002b90 <PWMChannelConfig+0x484>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d036      	beq.n	8002b9c <PWMChannelConfig+0x490>
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d028      	beq.n	8002b84 <PWMChannelConfig+0x478>
 8002b32:	e086      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d043      	beq.n	8002bc0 <PWMChannelConfig+0x4b4>
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d047      	beq.n	8002bcc <PWMChannelConfig+0x4c0>
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d039      	beq.n	8002bb4 <PWMChannelConfig+0x4a8>
 8002b40:	e07f      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b46:	d05f      	beq.n	8002c08 <PWMChannelConfig+0x4fc>
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b4c:	d809      	bhi.n	8002b62 <PWMChannelConfig+0x456>
 8002b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b52:	d04d      	beq.n	8002bf0 <PWMChannelConfig+0x4e4>
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d050      	beq.n	8002bfc <PWMChannelConfig+0x4f0>
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5e:	d041      	beq.n	8002be4 <PWMChannelConfig+0x4d8>
 8002b60:	e06f      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b66:	d05b      	beq.n	8002c20 <PWMChannelConfig+0x514>
 8002b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6c:	d803      	bhi.n	8002b76 <PWMChannelConfig+0x46a>
 8002b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b72:	d04f      	beq.n	8002c14 <PWMChannelConfig+0x508>
 8002b74:	e065      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b7a:	d057      	beq.n	8002c2c <PWMChannelConfig+0x520>
 8002b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b80:	d05a      	beq.n	8002c38 <PWMChannelConfig+0x52c>
 8002b82:	e05e      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002b84:	2202      	movs	r2, #2
 8002b86:	2100      	movs	r1, #0
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fe f8b5 	bl	8000cf8 <GPIO_PinAFConfig>
 8002b8e:	e058      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002b90:	2202      	movs	r2, #2
 8002b92:	2101      	movs	r1, #1
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7fe f8af 	bl	8000cf8 <GPIO_PinAFConfig>
 8002b9a:	e052      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe f8a9 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ba6:	e04c      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002ba8:	2202      	movs	r2, #2
 8002baa:	2103      	movs	r1, #3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7fe f8a3 	bl	8000cf8 <GPIO_PinAFConfig>
 8002bb2:	e046      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7fe f89d 	bl	8000cf8 <GPIO_PinAFConfig>
 8002bbe:	e040      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	2105      	movs	r1, #5
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe f897 	bl	8000cf8 <GPIO_PinAFConfig>
 8002bca:	e03a      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002bcc:	2202      	movs	r2, #2
 8002bce:	2106      	movs	r1, #6
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fe f891 	bl	8000cf8 <GPIO_PinAFConfig>
 8002bd6:	e034      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002bd8:	2202      	movs	r2, #2
 8002bda:	2107      	movs	r1, #7
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fe f88b 	bl	8000cf8 <GPIO_PinAFConfig>
 8002be2:	e02e      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002be4:	2202      	movs	r2, #2
 8002be6:	2108      	movs	r1, #8
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe f885 	bl	8000cf8 <GPIO_PinAFConfig>
 8002bee:	e028      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	2109      	movs	r1, #9
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fe f87f 	bl	8000cf8 <GPIO_PinAFConfig>
 8002bfa:	e022      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	210a      	movs	r1, #10
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fe f879 	bl	8000cf8 <GPIO_PinAFConfig>
 8002c06:	e01c      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002c08:	2202      	movs	r2, #2
 8002c0a:	210b      	movs	r1, #11
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fe f873 	bl	8000cf8 <GPIO_PinAFConfig>
 8002c12:	e016      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002c14:	2202      	movs	r2, #2
 8002c16:	210c      	movs	r1, #12
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7fe f86d 	bl	8000cf8 <GPIO_PinAFConfig>
 8002c1e:	e010      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002c20:	2202      	movs	r2, #2
 8002c22:	210d      	movs	r1, #13
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe f867 	bl	8000cf8 <GPIO_PinAFConfig>
 8002c2a:	e00a      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	210e      	movs	r1, #14
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe f861 	bl	8000cf8 <GPIO_PinAFConfig>
 8002c36:	e004      	b.n	8002c42 <PWMChannelConfig+0x536>
 8002c38:	2202      	movs	r2, #2
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fe f85b 	bl	8000cf8 <GPIO_PinAFConfig>
 8002c42:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002c44:	2370      	movs	r3, #112	; 0x70
 8002c46:	82bb      	strh	r3, [r7, #20]
 8002c48:	f000 bd19 	b.w	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM5){
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a67      	ldr	r2, [pc, #412]	; (8002dec <PWMChannelConfig+0x6e0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	f040 809c 	bne.w	8002d8e <PWMChannelConfig+0x682>
		AFConfig(TIM5, GPIOx, GPIO_Pin_x);
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d05e      	beq.n	8002d1a <PWMChannelConfig+0x60e>
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d811      	bhi.n	8002c84 <PWMChannelConfig+0x578>
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d042      	beq.n	8002cea <PWMChannelConfig+0x5de>
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d806      	bhi.n	8002c76 <PWMChannelConfig+0x56a>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d032      	beq.n	8002cd2 <PWMChannelConfig+0x5c6>
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d036      	beq.n	8002cde <PWMChannelConfig+0x5d2>
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d028      	beq.n	8002cc6 <PWMChannelConfig+0x5ba>
 8002c74:	e086      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d043      	beq.n	8002d02 <PWMChannelConfig+0x5f6>
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d047      	beq.n	8002d0e <PWMChannelConfig+0x602>
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d039      	beq.n	8002cf6 <PWMChannelConfig+0x5ea>
 8002c82:	e07f      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c88:	d05f      	beq.n	8002d4a <PWMChannelConfig+0x63e>
 8002c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8e:	d809      	bhi.n	8002ca4 <PWMChannelConfig+0x598>
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c94:	d04d      	beq.n	8002d32 <PWMChannelConfig+0x626>
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9a:	d050      	beq.n	8002d3e <PWMChannelConfig+0x632>
 8002c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca0:	d041      	beq.n	8002d26 <PWMChannelConfig+0x61a>
 8002ca2:	e06f      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca8:	d05b      	beq.n	8002d62 <PWMChannelConfig+0x656>
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	d803      	bhi.n	8002cb8 <PWMChannelConfig+0x5ac>
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb4:	d04f      	beq.n	8002d56 <PWMChannelConfig+0x64a>
 8002cb6:	e065      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cbc:	d057      	beq.n	8002d6e <PWMChannelConfig+0x662>
 8002cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc2:	d05a      	beq.n	8002d7a <PWMChannelConfig+0x66e>
 8002cc4:	e05e      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	2100      	movs	r1, #0
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe f814 	bl	8000cf8 <GPIO_PinAFConfig>
 8002cd0:	e058      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe f80e 	bl	8000cf8 <GPIO_PinAFConfig>
 8002cdc:	e052      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002cde:	2202      	movs	r2, #2
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe f808 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ce8:	e04c      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002cea:	2202      	movs	r2, #2
 8002cec:	2103      	movs	r1, #3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe f802 	bl	8000cf8 <GPIO_PinAFConfig>
 8002cf4:	e046      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fffc 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d00:	e040      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d02:	2202      	movs	r2, #2
 8002d04:	2105      	movs	r1, #5
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd fff6 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d0c:	e03a      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d0e:	2202      	movs	r2, #2
 8002d10:	2106      	movs	r1, #6
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fff0 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d18:	e034      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	2107      	movs	r1, #7
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fd ffea 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d24:	e02e      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d26:	2202      	movs	r2, #2
 8002d28:	2108      	movs	r1, #8
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd ffe4 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d30:	e028      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d32:	2202      	movs	r2, #2
 8002d34:	2109      	movs	r1, #9
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd ffde 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d3c:	e022      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d3e:	2202      	movs	r2, #2
 8002d40:	210a      	movs	r1, #10
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fd ffd8 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d48:	e01c      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	210b      	movs	r1, #11
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd ffd2 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d54:	e016      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d56:	2202      	movs	r2, #2
 8002d58:	210c      	movs	r1, #12
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fd ffcc 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d60:	e010      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d62:	2202      	movs	r2, #2
 8002d64:	210d      	movs	r1, #13
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd ffc6 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d6c:	e00a      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d6e:	2202      	movs	r2, #2
 8002d70:	210e      	movs	r1, #14
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd ffc0 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d78:	e004      	b.n	8002d84 <PWMChannelConfig+0x678>
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	210f      	movs	r1, #15
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd ffba 	bl	8000cf8 <GPIO_PinAFConfig>
 8002d84:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002d86:	2370      	movs	r3, #112	; 0x70
 8002d88:	82bb      	strh	r3, [r7, #20]
 8002d8a:	f000 bc78 	b.w	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM8){
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <PWMChannelConfig+0x6e4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	f040 80a6 	bne.w	8002ee4 <PWMChannelConfig+0x7d8>
		AFConfig(TIM8, GPIOx, GPIO_Pin_x);
 8002d98:	893b      	ldrh	r3, [r7, #8]
 8002d9a:	2b80      	cmp	r3, #128	; 0x80
 8002d9c:	d065      	beq.n	8002e6a <PWMChannelConfig+0x75e>
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d811      	bhi.n	8002dc6 <PWMChannelConfig+0x6ba>
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d049      	beq.n	8002e3a <PWMChannelConfig+0x72e>
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d806      	bhi.n	8002db8 <PWMChannelConfig+0x6ac>
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d039      	beq.n	8002e22 <PWMChannelConfig+0x716>
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d03d      	beq.n	8002e2e <PWMChannelConfig+0x722>
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d02f      	beq.n	8002e16 <PWMChannelConfig+0x70a>
 8002db6:	e08d      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d04a      	beq.n	8002e52 <PWMChannelConfig+0x746>
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d04e      	beq.n	8002e5e <PWMChannelConfig+0x752>
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d040      	beq.n	8002e46 <PWMChannelConfig+0x73a>
 8002dc4:	e086      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dca:	d066      	beq.n	8002e9a <PWMChannelConfig+0x78e>
 8002dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd0:	d810      	bhi.n	8002df4 <PWMChannelConfig+0x6e8>
 8002dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd6:	d054      	beq.n	8002e82 <PWMChannelConfig+0x776>
 8002dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ddc:	d057      	beq.n	8002e8e <PWMChannelConfig+0x782>
 8002dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de2:	d048      	beq.n	8002e76 <PWMChannelConfig+0x76a>
 8002de4:	e076      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002de6:	bf00      	nop
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40010400 	.word	0x40010400
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d05b      	beq.n	8002eb2 <PWMChannelConfig+0x7a6>
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfe:	d803      	bhi.n	8002e08 <PWMChannelConfig+0x6fc>
 8002e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e04:	d04f      	beq.n	8002ea6 <PWMChannelConfig+0x79a>
 8002e06:	e065      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e0c:	d057      	beq.n	8002ebe <PWMChannelConfig+0x7b2>
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e12:	d05a      	beq.n	8002eca <PWMChannelConfig+0x7be>
 8002e14:	e05e      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e16:	2203      	movs	r2, #3
 8002e18:	2100      	movs	r1, #0
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd ff6c 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e20:	e058      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e22:	2203      	movs	r2, #3
 8002e24:	2101      	movs	r1, #1
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd ff66 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e2c:	e052      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e2e:	2203      	movs	r2, #3
 8002e30:	2102      	movs	r1, #2
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd ff60 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e38:	e04c      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd ff5a 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e44:	e046      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e46:	2203      	movs	r2, #3
 8002e48:	2104      	movs	r1, #4
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd ff54 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e50:	e040      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e52:	2203      	movs	r2, #3
 8002e54:	2105      	movs	r1, #5
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd ff4e 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e5c:	e03a      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e5e:	2203      	movs	r2, #3
 8002e60:	2106      	movs	r1, #6
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fd ff48 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e68:	e034      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	2107      	movs	r1, #7
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd ff42 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e74:	e02e      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e76:	2203      	movs	r2, #3
 8002e78:	2108      	movs	r1, #8
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd ff3c 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e80:	e028      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e82:	2203      	movs	r2, #3
 8002e84:	2109      	movs	r1, #9
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd ff36 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e8c:	e022      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e8e:	2203      	movs	r2, #3
 8002e90:	210a      	movs	r1, #10
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd ff30 	bl	8000cf8 <GPIO_PinAFConfig>
 8002e98:	e01c      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	210b      	movs	r1, #11
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd ff2a 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ea4:	e016      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	210c      	movs	r1, #12
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd ff24 	bl	8000cf8 <GPIO_PinAFConfig>
 8002eb0:	e010      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	210d      	movs	r1, #13
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd ff1e 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ebc:	e00a      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	210e      	movs	r1, #14
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd ff18 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ec8:	e004      	b.n	8002ed4 <PWMChannelConfig+0x7c8>
 8002eca:	2203      	movs	r2, #3
 8002ecc:	210f      	movs	r1, #15
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fd ff12 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ed4:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002ed6:	2370      	movs	r3, #112	; 0x70
 8002ed8:	82bb      	strh	r3, [r7, #20]
		TIM_CtrlPWMOutputs(TIM8, ENABLE);
 8002eda:	2101      	movs	r1, #1
 8002edc:	48af      	ldr	r0, [pc, #700]	; (800319c <PWMChannelConfig+0xa90>)
 8002ede:	f7fe fde5 	bl	8001aac <TIM_CtrlPWMOutputs>
 8002ee2:	e3cc      	b.n	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM9){
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4aae      	ldr	r2, [pc, #696]	; (80031a0 <PWMChannelConfig+0xa94>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	f040 809b 	bne.w	8003024 <PWMChannelConfig+0x918>
		AFConfig(TIM9, GPIOx, GPIO_Pin_x);
 8002eee:	893b      	ldrh	r3, [r7, #8]
 8002ef0:	2b80      	cmp	r3, #128	; 0x80
 8002ef2:	d05e      	beq.n	8002fb2 <PWMChannelConfig+0x8a6>
 8002ef4:	2b80      	cmp	r3, #128	; 0x80
 8002ef6:	d811      	bhi.n	8002f1c <PWMChannelConfig+0x810>
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d042      	beq.n	8002f82 <PWMChannelConfig+0x876>
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d806      	bhi.n	8002f0e <PWMChannelConfig+0x802>
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d032      	beq.n	8002f6a <PWMChannelConfig+0x85e>
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d036      	beq.n	8002f76 <PWMChannelConfig+0x86a>
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d028      	beq.n	8002f5e <PWMChannelConfig+0x852>
 8002f0c:	e086      	b.n	800301c <PWMChannelConfig+0x910>
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d043      	beq.n	8002f9a <PWMChannelConfig+0x88e>
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d047      	beq.n	8002fa6 <PWMChannelConfig+0x89a>
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d039      	beq.n	8002f8e <PWMChannelConfig+0x882>
 8002f1a:	e07f      	b.n	800301c <PWMChannelConfig+0x910>
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d05f      	beq.n	8002fe2 <PWMChannelConfig+0x8d6>
 8002f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f26:	d809      	bhi.n	8002f3c <PWMChannelConfig+0x830>
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d04d      	beq.n	8002fca <PWMChannelConfig+0x8be>
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d050      	beq.n	8002fd6 <PWMChannelConfig+0x8ca>
 8002f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f38:	d041      	beq.n	8002fbe <PWMChannelConfig+0x8b2>
 8002f3a:	e06f      	b.n	800301c <PWMChannelConfig+0x910>
 8002f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f40:	d05b      	beq.n	8002ffa <PWMChannelConfig+0x8ee>
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f46:	d803      	bhi.n	8002f50 <PWMChannelConfig+0x844>
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4c:	d04f      	beq.n	8002fee <PWMChannelConfig+0x8e2>
 8002f4e:	e065      	b.n	800301c <PWMChannelConfig+0x910>
 8002f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f54:	d057      	beq.n	8003006 <PWMChannelConfig+0x8fa>
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5a:	d05a      	beq.n	8003012 <PWMChannelConfig+0x906>
 8002f5c:	e05e      	b.n	800301c <PWMChannelConfig+0x910>
 8002f5e:	2203      	movs	r2, #3
 8002f60:	2100      	movs	r1, #0
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fec8 	bl	8000cf8 <GPIO_PinAFConfig>
 8002f68:	e058      	b.n	800301c <PWMChannelConfig+0x910>
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fec2 	bl	8000cf8 <GPIO_PinAFConfig>
 8002f74:	e052      	b.n	800301c <PWMChannelConfig+0x910>
 8002f76:	2203      	movs	r2, #3
 8002f78:	2102      	movs	r1, #2
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd febc 	bl	8000cf8 <GPIO_PinAFConfig>
 8002f80:	e04c      	b.n	800301c <PWMChannelConfig+0x910>
 8002f82:	2203      	movs	r2, #3
 8002f84:	2103      	movs	r1, #3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd feb6 	bl	8000cf8 <GPIO_PinAFConfig>
 8002f8c:	e046      	b.n	800301c <PWMChannelConfig+0x910>
 8002f8e:	2203      	movs	r2, #3
 8002f90:	2104      	movs	r1, #4
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fd feb0 	bl	8000cf8 <GPIO_PinAFConfig>
 8002f98:	e040      	b.n	800301c <PWMChannelConfig+0x910>
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	2105      	movs	r1, #5
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd feaa 	bl	8000cf8 <GPIO_PinAFConfig>
 8002fa4:	e03a      	b.n	800301c <PWMChannelConfig+0x910>
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	2106      	movs	r1, #6
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fea4 	bl	8000cf8 <GPIO_PinAFConfig>
 8002fb0:	e034      	b.n	800301c <PWMChannelConfig+0x910>
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	2107      	movs	r1, #7
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd fe9e 	bl	8000cf8 <GPIO_PinAFConfig>
 8002fbc:	e02e      	b.n	800301c <PWMChannelConfig+0x910>
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	2108      	movs	r1, #8
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fe98 	bl	8000cf8 <GPIO_PinAFConfig>
 8002fc8:	e028      	b.n	800301c <PWMChannelConfig+0x910>
 8002fca:	2203      	movs	r2, #3
 8002fcc:	2109      	movs	r1, #9
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fe92 	bl	8000cf8 <GPIO_PinAFConfig>
 8002fd4:	e022      	b.n	800301c <PWMChannelConfig+0x910>
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	210a      	movs	r1, #10
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fe8c 	bl	8000cf8 <GPIO_PinAFConfig>
 8002fe0:	e01c      	b.n	800301c <PWMChannelConfig+0x910>
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	210b      	movs	r1, #11
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fe86 	bl	8000cf8 <GPIO_PinAFConfig>
 8002fec:	e016      	b.n	800301c <PWMChannelConfig+0x910>
 8002fee:	2203      	movs	r2, #3
 8002ff0:	210c      	movs	r1, #12
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fe80 	bl	8000cf8 <GPIO_PinAFConfig>
 8002ff8:	e010      	b.n	800301c <PWMChannelConfig+0x910>
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	210d      	movs	r1, #13
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fe7a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003004:	e00a      	b.n	800301c <PWMChannelConfig+0x910>
 8003006:	2203      	movs	r2, #3
 8003008:	210e      	movs	r1, #14
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fe74 	bl	8000cf8 <GPIO_PinAFConfig>
 8003010:	e004      	b.n	800301c <PWMChannelConfig+0x910>
 8003012:	2203      	movs	r2, #3
 8003014:	210f      	movs	r1, #15
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fe6e 	bl	8000cf8 <GPIO_PinAFConfig>
 800301c:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 800301e:	2370      	movs	r3, #112	; 0x70
 8003020:	82bb      	strh	r3, [r7, #20]
 8003022:	e32c      	b.n	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM10){
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a5f      	ldr	r2, [pc, #380]	; (80031a4 <PWMChannelConfig+0xa98>)
 8003028:	4293      	cmp	r3, r2
 800302a:	f040 809b 	bne.w	8003164 <PWMChannelConfig+0xa58>
		AFConfig(TIM10, GPIOx, GPIO_Pin_x);
 800302e:	893b      	ldrh	r3, [r7, #8]
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d05e      	beq.n	80030f2 <PWMChannelConfig+0x9e6>
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d811      	bhi.n	800305c <PWMChannelConfig+0x950>
 8003038:	2b08      	cmp	r3, #8
 800303a:	d042      	beq.n	80030c2 <PWMChannelConfig+0x9b6>
 800303c:	2b08      	cmp	r3, #8
 800303e:	d806      	bhi.n	800304e <PWMChannelConfig+0x942>
 8003040:	2b02      	cmp	r3, #2
 8003042:	d032      	beq.n	80030aa <PWMChannelConfig+0x99e>
 8003044:	2b04      	cmp	r3, #4
 8003046:	d036      	beq.n	80030b6 <PWMChannelConfig+0x9aa>
 8003048:	2b01      	cmp	r3, #1
 800304a:	d028      	beq.n	800309e <PWMChannelConfig+0x992>
 800304c:	e086      	b.n	800315c <PWMChannelConfig+0xa50>
 800304e:	2b20      	cmp	r3, #32
 8003050:	d043      	beq.n	80030da <PWMChannelConfig+0x9ce>
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d047      	beq.n	80030e6 <PWMChannelConfig+0x9da>
 8003056:	2b10      	cmp	r3, #16
 8003058:	d039      	beq.n	80030ce <PWMChannelConfig+0x9c2>
 800305a:	e07f      	b.n	800315c <PWMChannelConfig+0xa50>
 800305c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003060:	d05f      	beq.n	8003122 <PWMChannelConfig+0xa16>
 8003062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003066:	d809      	bhi.n	800307c <PWMChannelConfig+0x970>
 8003068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306c:	d04d      	beq.n	800310a <PWMChannelConfig+0x9fe>
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d050      	beq.n	8003116 <PWMChannelConfig+0xa0a>
 8003074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003078:	d041      	beq.n	80030fe <PWMChannelConfig+0x9f2>
 800307a:	e06f      	b.n	800315c <PWMChannelConfig+0xa50>
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003080:	d05b      	beq.n	800313a <PWMChannelConfig+0xa2e>
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	d803      	bhi.n	8003090 <PWMChannelConfig+0x984>
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	d04f      	beq.n	800312e <PWMChannelConfig+0xa22>
 800308e:	e065      	b.n	800315c <PWMChannelConfig+0xa50>
 8003090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003094:	d057      	beq.n	8003146 <PWMChannelConfig+0xa3a>
 8003096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309a:	d05a      	beq.n	8003152 <PWMChannelConfig+0xa46>
 800309c:	e05e      	b.n	800315c <PWMChannelConfig+0xa50>
 800309e:	2203      	movs	r2, #3
 80030a0:	2100      	movs	r1, #0
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fe28 	bl	8000cf8 <GPIO_PinAFConfig>
 80030a8:	e058      	b.n	800315c <PWMChannelConfig+0xa50>
 80030aa:	2203      	movs	r2, #3
 80030ac:	2101      	movs	r1, #1
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fe22 	bl	8000cf8 <GPIO_PinAFConfig>
 80030b4:	e052      	b.n	800315c <PWMChannelConfig+0xa50>
 80030b6:	2203      	movs	r2, #3
 80030b8:	2102      	movs	r1, #2
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fe1c 	bl	8000cf8 <GPIO_PinAFConfig>
 80030c0:	e04c      	b.n	800315c <PWMChannelConfig+0xa50>
 80030c2:	2203      	movs	r2, #3
 80030c4:	2103      	movs	r1, #3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd fe16 	bl	8000cf8 <GPIO_PinAFConfig>
 80030cc:	e046      	b.n	800315c <PWMChannelConfig+0xa50>
 80030ce:	2203      	movs	r2, #3
 80030d0:	2104      	movs	r1, #4
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fe10 	bl	8000cf8 <GPIO_PinAFConfig>
 80030d8:	e040      	b.n	800315c <PWMChannelConfig+0xa50>
 80030da:	2203      	movs	r2, #3
 80030dc:	2105      	movs	r1, #5
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fe0a 	bl	8000cf8 <GPIO_PinAFConfig>
 80030e4:	e03a      	b.n	800315c <PWMChannelConfig+0xa50>
 80030e6:	2203      	movs	r2, #3
 80030e8:	2106      	movs	r1, #6
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fe04 	bl	8000cf8 <GPIO_PinAFConfig>
 80030f0:	e034      	b.n	800315c <PWMChannelConfig+0xa50>
 80030f2:	2203      	movs	r2, #3
 80030f4:	2107      	movs	r1, #7
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fdfe 	bl	8000cf8 <GPIO_PinAFConfig>
 80030fc:	e02e      	b.n	800315c <PWMChannelConfig+0xa50>
 80030fe:	2203      	movs	r2, #3
 8003100:	2108      	movs	r1, #8
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fdf8 	bl	8000cf8 <GPIO_PinAFConfig>
 8003108:	e028      	b.n	800315c <PWMChannelConfig+0xa50>
 800310a:	2203      	movs	r2, #3
 800310c:	2109      	movs	r1, #9
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fdf2 	bl	8000cf8 <GPIO_PinAFConfig>
 8003114:	e022      	b.n	800315c <PWMChannelConfig+0xa50>
 8003116:	2203      	movs	r2, #3
 8003118:	210a      	movs	r1, #10
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fdec 	bl	8000cf8 <GPIO_PinAFConfig>
 8003120:	e01c      	b.n	800315c <PWMChannelConfig+0xa50>
 8003122:	2203      	movs	r2, #3
 8003124:	210b      	movs	r1, #11
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fde6 	bl	8000cf8 <GPIO_PinAFConfig>
 800312c:	e016      	b.n	800315c <PWMChannelConfig+0xa50>
 800312e:	2203      	movs	r2, #3
 8003130:	210c      	movs	r1, #12
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd fde0 	bl	8000cf8 <GPIO_PinAFConfig>
 8003138:	e010      	b.n	800315c <PWMChannelConfig+0xa50>
 800313a:	2203      	movs	r2, #3
 800313c:	210d      	movs	r1, #13
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fdda 	bl	8000cf8 <GPIO_PinAFConfig>
 8003144:	e00a      	b.n	800315c <PWMChannelConfig+0xa50>
 8003146:	2203      	movs	r2, #3
 8003148:	210e      	movs	r1, #14
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fdd4 	bl	8000cf8 <GPIO_PinAFConfig>
 8003150:	e004      	b.n	800315c <PWMChannelConfig+0xa50>
 8003152:	2203      	movs	r2, #3
 8003154:	210f      	movs	r1, #15
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd fdce 	bl	8000cf8 <GPIO_PinAFConfig>
 800315c:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 800315e:	2370      	movs	r3, #112	; 0x70
 8003160:	82bb      	strh	r3, [r7, #20]
 8003162:	e28c      	b.n	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM11){
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <PWMChannelConfig+0xa9c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	f040 80a3 	bne.w	80032b4 <PWMChannelConfig+0xba8>
		AFConfig(TIM11, GPIOx, GPIO_Pin_x);
 800316e:	893b      	ldrh	r3, [r7, #8]
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d066      	beq.n	8003242 <PWMChannelConfig+0xb36>
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d819      	bhi.n	80031ac <PWMChannelConfig+0xaa0>
 8003178:	2b08      	cmp	r3, #8
 800317a:	d04a      	beq.n	8003212 <PWMChannelConfig+0xb06>
 800317c:	2b08      	cmp	r3, #8
 800317e:	d806      	bhi.n	800318e <PWMChannelConfig+0xa82>
 8003180:	2b02      	cmp	r3, #2
 8003182:	d03a      	beq.n	80031fa <PWMChannelConfig+0xaee>
 8003184:	2b04      	cmp	r3, #4
 8003186:	d03e      	beq.n	8003206 <PWMChannelConfig+0xafa>
 8003188:	2b01      	cmp	r3, #1
 800318a:	d030      	beq.n	80031ee <PWMChannelConfig+0xae2>
 800318c:	e08e      	b.n	80032ac <PWMChannelConfig+0xba0>
 800318e:	2b20      	cmp	r3, #32
 8003190:	d04b      	beq.n	800322a <PWMChannelConfig+0xb1e>
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d04f      	beq.n	8003236 <PWMChannelConfig+0xb2a>
 8003196:	2b10      	cmp	r3, #16
 8003198:	d041      	beq.n	800321e <PWMChannelConfig+0xb12>
 800319a:	e087      	b.n	80032ac <PWMChannelConfig+0xba0>
 800319c:	40010400 	.word	0x40010400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b0:	d05f      	beq.n	8003272 <PWMChannelConfig+0xb66>
 80031b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b6:	d809      	bhi.n	80031cc <PWMChannelConfig+0xac0>
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d04d      	beq.n	800325a <PWMChannelConfig+0xb4e>
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d050      	beq.n	8003266 <PWMChannelConfig+0xb5a>
 80031c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c8:	d041      	beq.n	800324e <PWMChannelConfig+0xb42>
 80031ca:	e06f      	b.n	80032ac <PWMChannelConfig+0xba0>
 80031cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d0:	d05b      	beq.n	800328a <PWMChannelConfig+0xb7e>
 80031d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d6:	d803      	bhi.n	80031e0 <PWMChannelConfig+0xad4>
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	d04f      	beq.n	800327e <PWMChannelConfig+0xb72>
 80031de:	e065      	b.n	80032ac <PWMChannelConfig+0xba0>
 80031e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e4:	d057      	beq.n	8003296 <PWMChannelConfig+0xb8a>
 80031e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ea:	d05a      	beq.n	80032a2 <PWMChannelConfig+0xb96>
 80031ec:	e05e      	b.n	80032ac <PWMChannelConfig+0xba0>
 80031ee:	2203      	movs	r2, #3
 80031f0:	2100      	movs	r1, #0
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd fd80 	bl	8000cf8 <GPIO_PinAFConfig>
 80031f8:	e058      	b.n	80032ac <PWMChannelConfig+0xba0>
 80031fa:	2203      	movs	r2, #3
 80031fc:	2101      	movs	r1, #1
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fd7a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003204:	e052      	b.n	80032ac <PWMChannelConfig+0xba0>
 8003206:	2203      	movs	r2, #3
 8003208:	2102      	movs	r1, #2
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fd74 	bl	8000cf8 <GPIO_PinAFConfig>
 8003210:	e04c      	b.n	80032ac <PWMChannelConfig+0xba0>
 8003212:	2203      	movs	r2, #3
 8003214:	2103      	movs	r1, #3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fd6e 	bl	8000cf8 <GPIO_PinAFConfig>
 800321c:	e046      	b.n	80032ac <PWMChannelConfig+0xba0>
 800321e:	2203      	movs	r2, #3
 8003220:	2104      	movs	r1, #4
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd fd68 	bl	8000cf8 <GPIO_PinAFConfig>
 8003228:	e040      	b.n	80032ac <PWMChannelConfig+0xba0>
 800322a:	2203      	movs	r2, #3
 800322c:	2105      	movs	r1, #5
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fd62 	bl	8000cf8 <GPIO_PinAFConfig>
 8003234:	e03a      	b.n	80032ac <PWMChannelConfig+0xba0>
 8003236:	2203      	movs	r2, #3
 8003238:	2106      	movs	r1, #6
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fd5c 	bl	8000cf8 <GPIO_PinAFConfig>
 8003240:	e034      	b.n	80032ac <PWMChannelConfig+0xba0>
 8003242:	2203      	movs	r2, #3
 8003244:	2107      	movs	r1, #7
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fd56 	bl	8000cf8 <GPIO_PinAFConfig>
 800324c:	e02e      	b.n	80032ac <PWMChannelConfig+0xba0>
 800324e:	2203      	movs	r2, #3
 8003250:	2108      	movs	r1, #8
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd fd50 	bl	8000cf8 <GPIO_PinAFConfig>
 8003258:	e028      	b.n	80032ac <PWMChannelConfig+0xba0>
 800325a:	2203      	movs	r2, #3
 800325c:	2109      	movs	r1, #9
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd fd4a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003264:	e022      	b.n	80032ac <PWMChannelConfig+0xba0>
 8003266:	2203      	movs	r2, #3
 8003268:	210a      	movs	r1, #10
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fd44 	bl	8000cf8 <GPIO_PinAFConfig>
 8003270:	e01c      	b.n	80032ac <PWMChannelConfig+0xba0>
 8003272:	2203      	movs	r2, #3
 8003274:	210b      	movs	r1, #11
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fd3e 	bl	8000cf8 <GPIO_PinAFConfig>
 800327c:	e016      	b.n	80032ac <PWMChannelConfig+0xba0>
 800327e:	2203      	movs	r2, #3
 8003280:	210c      	movs	r1, #12
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd fd38 	bl	8000cf8 <GPIO_PinAFConfig>
 8003288:	e010      	b.n	80032ac <PWMChannelConfig+0xba0>
 800328a:	2203      	movs	r2, #3
 800328c:	210d      	movs	r1, #13
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fd32 	bl	8000cf8 <GPIO_PinAFConfig>
 8003294:	e00a      	b.n	80032ac <PWMChannelConfig+0xba0>
 8003296:	2203      	movs	r2, #3
 8003298:	210e      	movs	r1, #14
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fd2c 	bl	8000cf8 <GPIO_PinAFConfig>
 80032a0:	e004      	b.n	80032ac <PWMChannelConfig+0xba0>
 80032a2:	2203      	movs	r2, #3
 80032a4:	210f      	movs	r1, #15
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fd26 	bl	8000cf8 <GPIO_PinAFConfig>
 80032ac:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 80032ae:	2370      	movs	r3, #112	; 0x70
 80032b0:	82bb      	strh	r3, [r7, #20]
 80032b2:	e1e4      	b.n	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM12){
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4ab5      	ldr	r2, [pc, #724]	; (800358c <PWMChannelConfig+0xe80>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	f040 809b 	bne.w	80033f4 <PWMChannelConfig+0xce8>
		AFConfig(TIM12, GPIOx, GPIO_Pin_x);
 80032be:	893b      	ldrh	r3, [r7, #8]
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d05e      	beq.n	8003382 <PWMChannelConfig+0xc76>
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d811      	bhi.n	80032ec <PWMChannelConfig+0xbe0>
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d042      	beq.n	8003352 <PWMChannelConfig+0xc46>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d806      	bhi.n	80032de <PWMChannelConfig+0xbd2>
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d032      	beq.n	800333a <PWMChannelConfig+0xc2e>
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d036      	beq.n	8003346 <PWMChannelConfig+0xc3a>
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d028      	beq.n	800332e <PWMChannelConfig+0xc22>
 80032dc:	e086      	b.n	80033ec <PWMChannelConfig+0xce0>
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d043      	beq.n	800336a <PWMChannelConfig+0xc5e>
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d047      	beq.n	8003376 <PWMChannelConfig+0xc6a>
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d039      	beq.n	800335e <PWMChannelConfig+0xc52>
 80032ea:	e07f      	b.n	80033ec <PWMChannelConfig+0xce0>
 80032ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f0:	d05f      	beq.n	80033b2 <PWMChannelConfig+0xca6>
 80032f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f6:	d809      	bhi.n	800330c <PWMChannelConfig+0xc00>
 80032f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fc:	d04d      	beq.n	800339a <PWMChannelConfig+0xc8e>
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d050      	beq.n	80033a6 <PWMChannelConfig+0xc9a>
 8003304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003308:	d041      	beq.n	800338e <PWMChannelConfig+0xc82>
 800330a:	e06f      	b.n	80033ec <PWMChannelConfig+0xce0>
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d05b      	beq.n	80033ca <PWMChannelConfig+0xcbe>
 8003312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003316:	d803      	bhi.n	8003320 <PWMChannelConfig+0xc14>
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d04f      	beq.n	80033be <PWMChannelConfig+0xcb2>
 800331e:	e065      	b.n	80033ec <PWMChannelConfig+0xce0>
 8003320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003324:	d057      	beq.n	80033d6 <PWMChannelConfig+0xcca>
 8003326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332a:	d05a      	beq.n	80033e2 <PWMChannelConfig+0xcd6>
 800332c:	e05e      	b.n	80033ec <PWMChannelConfig+0xce0>
 800332e:	2209      	movs	r2, #9
 8003330:	2100      	movs	r1, #0
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fce0 	bl	8000cf8 <GPIO_PinAFConfig>
 8003338:	e058      	b.n	80033ec <PWMChannelConfig+0xce0>
 800333a:	2209      	movs	r2, #9
 800333c:	2101      	movs	r1, #1
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fcda 	bl	8000cf8 <GPIO_PinAFConfig>
 8003344:	e052      	b.n	80033ec <PWMChannelConfig+0xce0>
 8003346:	2209      	movs	r2, #9
 8003348:	2102      	movs	r1, #2
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fcd4 	bl	8000cf8 <GPIO_PinAFConfig>
 8003350:	e04c      	b.n	80033ec <PWMChannelConfig+0xce0>
 8003352:	2209      	movs	r2, #9
 8003354:	2103      	movs	r1, #3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd fcce 	bl	8000cf8 <GPIO_PinAFConfig>
 800335c:	e046      	b.n	80033ec <PWMChannelConfig+0xce0>
 800335e:	2209      	movs	r2, #9
 8003360:	2104      	movs	r1, #4
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fcc8 	bl	8000cf8 <GPIO_PinAFConfig>
 8003368:	e040      	b.n	80033ec <PWMChannelConfig+0xce0>
 800336a:	2209      	movs	r2, #9
 800336c:	2105      	movs	r1, #5
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fcc2 	bl	8000cf8 <GPIO_PinAFConfig>
 8003374:	e03a      	b.n	80033ec <PWMChannelConfig+0xce0>
 8003376:	2209      	movs	r2, #9
 8003378:	2106      	movs	r1, #6
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd fcbc 	bl	8000cf8 <GPIO_PinAFConfig>
 8003380:	e034      	b.n	80033ec <PWMChannelConfig+0xce0>
 8003382:	2209      	movs	r2, #9
 8003384:	2107      	movs	r1, #7
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fcb6 	bl	8000cf8 <GPIO_PinAFConfig>
 800338c:	e02e      	b.n	80033ec <PWMChannelConfig+0xce0>
 800338e:	2209      	movs	r2, #9
 8003390:	2108      	movs	r1, #8
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fcb0 	bl	8000cf8 <GPIO_PinAFConfig>
 8003398:	e028      	b.n	80033ec <PWMChannelConfig+0xce0>
 800339a:	2209      	movs	r2, #9
 800339c:	2109      	movs	r1, #9
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fcaa 	bl	8000cf8 <GPIO_PinAFConfig>
 80033a4:	e022      	b.n	80033ec <PWMChannelConfig+0xce0>
 80033a6:	2209      	movs	r2, #9
 80033a8:	210a      	movs	r1, #10
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd fca4 	bl	8000cf8 <GPIO_PinAFConfig>
 80033b0:	e01c      	b.n	80033ec <PWMChannelConfig+0xce0>
 80033b2:	2209      	movs	r2, #9
 80033b4:	210b      	movs	r1, #11
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd fc9e 	bl	8000cf8 <GPIO_PinAFConfig>
 80033bc:	e016      	b.n	80033ec <PWMChannelConfig+0xce0>
 80033be:	2209      	movs	r2, #9
 80033c0:	210c      	movs	r1, #12
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fc98 	bl	8000cf8 <GPIO_PinAFConfig>
 80033c8:	e010      	b.n	80033ec <PWMChannelConfig+0xce0>
 80033ca:	2209      	movs	r2, #9
 80033cc:	210d      	movs	r1, #13
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fc92 	bl	8000cf8 <GPIO_PinAFConfig>
 80033d4:	e00a      	b.n	80033ec <PWMChannelConfig+0xce0>
 80033d6:	2209      	movs	r2, #9
 80033d8:	210e      	movs	r1, #14
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fc8c 	bl	8000cf8 <GPIO_PinAFConfig>
 80033e0:	e004      	b.n	80033ec <PWMChannelConfig+0xce0>
 80033e2:	2209      	movs	r2, #9
 80033e4:	210f      	movs	r1, #15
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fc86 	bl	8000cf8 <GPIO_PinAFConfig>
 80033ec:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 80033ee:	2370      	movs	r3, #112	; 0x70
 80033f0:	82bb      	strh	r3, [r7, #20]
 80033f2:	e144      	b.n	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM13){
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a66      	ldr	r2, [pc, #408]	; (8003590 <PWMChannelConfig+0xe84>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	f040 809b 	bne.w	8003534 <PWMChannelConfig+0xe28>
		AFConfig(TIM13, GPIOx, GPIO_Pin_x);
 80033fe:	893b      	ldrh	r3, [r7, #8]
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d05e      	beq.n	80034c2 <PWMChannelConfig+0xdb6>
 8003404:	2b80      	cmp	r3, #128	; 0x80
 8003406:	d811      	bhi.n	800342c <PWMChannelConfig+0xd20>
 8003408:	2b08      	cmp	r3, #8
 800340a:	d042      	beq.n	8003492 <PWMChannelConfig+0xd86>
 800340c:	2b08      	cmp	r3, #8
 800340e:	d806      	bhi.n	800341e <PWMChannelConfig+0xd12>
 8003410:	2b02      	cmp	r3, #2
 8003412:	d032      	beq.n	800347a <PWMChannelConfig+0xd6e>
 8003414:	2b04      	cmp	r3, #4
 8003416:	d036      	beq.n	8003486 <PWMChannelConfig+0xd7a>
 8003418:	2b01      	cmp	r3, #1
 800341a:	d028      	beq.n	800346e <PWMChannelConfig+0xd62>
 800341c:	e086      	b.n	800352c <PWMChannelConfig+0xe20>
 800341e:	2b20      	cmp	r3, #32
 8003420:	d043      	beq.n	80034aa <PWMChannelConfig+0xd9e>
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d047      	beq.n	80034b6 <PWMChannelConfig+0xdaa>
 8003426:	2b10      	cmp	r3, #16
 8003428:	d039      	beq.n	800349e <PWMChannelConfig+0xd92>
 800342a:	e07f      	b.n	800352c <PWMChannelConfig+0xe20>
 800342c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003430:	d05f      	beq.n	80034f2 <PWMChannelConfig+0xde6>
 8003432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003436:	d809      	bhi.n	800344c <PWMChannelConfig+0xd40>
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d04d      	beq.n	80034da <PWMChannelConfig+0xdce>
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d050      	beq.n	80034e6 <PWMChannelConfig+0xdda>
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	d041      	beq.n	80034ce <PWMChannelConfig+0xdc2>
 800344a:	e06f      	b.n	800352c <PWMChannelConfig+0xe20>
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003450:	d05b      	beq.n	800350a <PWMChannelConfig+0xdfe>
 8003452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003456:	d803      	bhi.n	8003460 <PWMChannelConfig+0xd54>
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d04f      	beq.n	80034fe <PWMChannelConfig+0xdf2>
 800345e:	e065      	b.n	800352c <PWMChannelConfig+0xe20>
 8003460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003464:	d057      	beq.n	8003516 <PWMChannelConfig+0xe0a>
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d05a      	beq.n	8003522 <PWMChannelConfig+0xe16>
 800346c:	e05e      	b.n	800352c <PWMChannelConfig+0xe20>
 800346e:	2209      	movs	r2, #9
 8003470:	2100      	movs	r1, #0
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fd fc40 	bl	8000cf8 <GPIO_PinAFConfig>
 8003478:	e058      	b.n	800352c <PWMChannelConfig+0xe20>
 800347a:	2209      	movs	r2, #9
 800347c:	2101      	movs	r1, #1
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fc3a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003484:	e052      	b.n	800352c <PWMChannelConfig+0xe20>
 8003486:	2209      	movs	r2, #9
 8003488:	2102      	movs	r1, #2
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fc34 	bl	8000cf8 <GPIO_PinAFConfig>
 8003490:	e04c      	b.n	800352c <PWMChannelConfig+0xe20>
 8003492:	2209      	movs	r2, #9
 8003494:	2103      	movs	r1, #3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd fc2e 	bl	8000cf8 <GPIO_PinAFConfig>
 800349c:	e046      	b.n	800352c <PWMChannelConfig+0xe20>
 800349e:	2209      	movs	r2, #9
 80034a0:	2104      	movs	r1, #4
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fc28 	bl	8000cf8 <GPIO_PinAFConfig>
 80034a8:	e040      	b.n	800352c <PWMChannelConfig+0xe20>
 80034aa:	2209      	movs	r2, #9
 80034ac:	2105      	movs	r1, #5
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fc22 	bl	8000cf8 <GPIO_PinAFConfig>
 80034b4:	e03a      	b.n	800352c <PWMChannelConfig+0xe20>
 80034b6:	2209      	movs	r2, #9
 80034b8:	2106      	movs	r1, #6
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fc1c 	bl	8000cf8 <GPIO_PinAFConfig>
 80034c0:	e034      	b.n	800352c <PWMChannelConfig+0xe20>
 80034c2:	2209      	movs	r2, #9
 80034c4:	2107      	movs	r1, #7
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fc16 	bl	8000cf8 <GPIO_PinAFConfig>
 80034cc:	e02e      	b.n	800352c <PWMChannelConfig+0xe20>
 80034ce:	2209      	movs	r2, #9
 80034d0:	2108      	movs	r1, #8
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fc10 	bl	8000cf8 <GPIO_PinAFConfig>
 80034d8:	e028      	b.n	800352c <PWMChannelConfig+0xe20>
 80034da:	2209      	movs	r2, #9
 80034dc:	2109      	movs	r1, #9
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd fc0a 	bl	8000cf8 <GPIO_PinAFConfig>
 80034e4:	e022      	b.n	800352c <PWMChannelConfig+0xe20>
 80034e6:	2209      	movs	r2, #9
 80034e8:	210a      	movs	r1, #10
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fc04 	bl	8000cf8 <GPIO_PinAFConfig>
 80034f0:	e01c      	b.n	800352c <PWMChannelConfig+0xe20>
 80034f2:	2209      	movs	r2, #9
 80034f4:	210b      	movs	r1, #11
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fbfe 	bl	8000cf8 <GPIO_PinAFConfig>
 80034fc:	e016      	b.n	800352c <PWMChannelConfig+0xe20>
 80034fe:	2209      	movs	r2, #9
 8003500:	210c      	movs	r1, #12
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fbf8 	bl	8000cf8 <GPIO_PinAFConfig>
 8003508:	e010      	b.n	800352c <PWMChannelConfig+0xe20>
 800350a:	2209      	movs	r2, #9
 800350c:	210d      	movs	r1, #13
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd fbf2 	bl	8000cf8 <GPIO_PinAFConfig>
 8003514:	e00a      	b.n	800352c <PWMChannelConfig+0xe20>
 8003516:	2209      	movs	r2, #9
 8003518:	210e      	movs	r1, #14
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fbec 	bl	8000cf8 <GPIO_PinAFConfig>
 8003520:	e004      	b.n	800352c <PWMChannelConfig+0xe20>
 8003522:	2209      	movs	r2, #9
 8003524:	210f      	movs	r1, #15
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fbe6 	bl	8000cf8 <GPIO_PinAFConfig>
 800352c:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 800352e:	2370      	movs	r3, #112	; 0x70
 8003530:	82bb      	strh	r3, [r7, #20]
 8003532:	e0a4      	b.n	800367e <PWMChannelConfig+0xf72>
	}else if(Timer == TIM14){
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <PWMChannelConfig+0xe88>)
 8003538:	4293      	cmp	r3, r2
 800353a:	f040 80a0 	bne.w	800367e <PWMChannelConfig+0xf72>
		AFConfig(TIM14, GPIOx, GPIO_Pin_x);
 800353e:	893b      	ldrh	r3, [r7, #8]
 8003540:	2b80      	cmp	r3, #128	; 0x80
 8003542:	d064      	beq.n	800360e <PWMChannelConfig+0xf02>
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d811      	bhi.n	800356c <PWMChannelConfig+0xe60>
 8003548:	2b08      	cmp	r3, #8
 800354a:	d048      	beq.n	80035de <PWMChannelConfig+0xed2>
 800354c:	2b08      	cmp	r3, #8
 800354e:	d806      	bhi.n	800355e <PWMChannelConfig+0xe52>
 8003550:	2b02      	cmp	r3, #2
 8003552:	d038      	beq.n	80035c6 <PWMChannelConfig+0xeba>
 8003554:	2b04      	cmp	r3, #4
 8003556:	d03c      	beq.n	80035d2 <PWMChannelConfig+0xec6>
 8003558:	2b01      	cmp	r3, #1
 800355a:	d02e      	beq.n	80035ba <PWMChannelConfig+0xeae>
 800355c:	e08c      	b.n	8003678 <PWMChannelConfig+0xf6c>
 800355e:	2b20      	cmp	r3, #32
 8003560:	d049      	beq.n	80035f6 <PWMChannelConfig+0xeea>
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d04d      	beq.n	8003602 <PWMChannelConfig+0xef6>
 8003566:	2b10      	cmp	r3, #16
 8003568:	d03f      	beq.n	80035ea <PWMChannelConfig+0xede>
 800356a:	e085      	b.n	8003678 <PWMChannelConfig+0xf6c>
 800356c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003570:	d065      	beq.n	800363e <PWMChannelConfig+0xf32>
 8003572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003576:	d80f      	bhi.n	8003598 <PWMChannelConfig+0xe8c>
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d053      	beq.n	8003626 <PWMChannelConfig+0xf1a>
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	d056      	beq.n	8003632 <PWMChannelConfig+0xf26>
 8003584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003588:	d047      	beq.n	800361a <PWMChannelConfig+0xf0e>
 800358a:	e075      	b.n	8003678 <PWMChannelConfig+0xf6c>
 800358c:	40001800 	.word	0x40001800
 8003590:	40001c00 	.word	0x40001c00
 8003594:	40002000 	.word	0x40002000
 8003598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359c:	d05b      	beq.n	8003656 <PWMChannelConfig+0xf4a>
 800359e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a2:	d803      	bhi.n	80035ac <PWMChannelConfig+0xea0>
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d04f      	beq.n	800364a <PWMChannelConfig+0xf3e>
 80035aa:	e065      	b.n	8003678 <PWMChannelConfig+0xf6c>
 80035ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b0:	d057      	beq.n	8003662 <PWMChannelConfig+0xf56>
 80035b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b6:	d05a      	beq.n	800366e <PWMChannelConfig+0xf62>
 80035b8:	e05e      	b.n	8003678 <PWMChannelConfig+0xf6c>
 80035ba:	2209      	movs	r2, #9
 80035bc:	2100      	movs	r1, #0
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fb9a 	bl	8000cf8 <GPIO_PinAFConfig>
 80035c4:	e058      	b.n	8003678 <PWMChannelConfig+0xf6c>
 80035c6:	2209      	movs	r2, #9
 80035c8:	2101      	movs	r1, #1
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fb94 	bl	8000cf8 <GPIO_PinAFConfig>
 80035d0:	e052      	b.n	8003678 <PWMChannelConfig+0xf6c>
 80035d2:	2209      	movs	r2, #9
 80035d4:	2102      	movs	r1, #2
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fb8e 	bl	8000cf8 <GPIO_PinAFConfig>
 80035dc:	e04c      	b.n	8003678 <PWMChannelConfig+0xf6c>
 80035de:	2209      	movs	r2, #9
 80035e0:	2103      	movs	r1, #3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fb88 	bl	8000cf8 <GPIO_PinAFConfig>
 80035e8:	e046      	b.n	8003678 <PWMChannelConfig+0xf6c>
 80035ea:	2209      	movs	r2, #9
 80035ec:	2104      	movs	r1, #4
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd fb82 	bl	8000cf8 <GPIO_PinAFConfig>
 80035f4:	e040      	b.n	8003678 <PWMChannelConfig+0xf6c>
 80035f6:	2209      	movs	r2, #9
 80035f8:	2105      	movs	r1, #5
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fb7c 	bl	8000cf8 <GPIO_PinAFConfig>
 8003600:	e03a      	b.n	8003678 <PWMChannelConfig+0xf6c>
 8003602:	2209      	movs	r2, #9
 8003604:	2106      	movs	r1, #6
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fb76 	bl	8000cf8 <GPIO_PinAFConfig>
 800360c:	e034      	b.n	8003678 <PWMChannelConfig+0xf6c>
 800360e:	2209      	movs	r2, #9
 8003610:	2107      	movs	r1, #7
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fb70 	bl	8000cf8 <GPIO_PinAFConfig>
 8003618:	e02e      	b.n	8003678 <PWMChannelConfig+0xf6c>
 800361a:	2209      	movs	r2, #9
 800361c:	2108      	movs	r1, #8
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd fb6a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003624:	e028      	b.n	8003678 <PWMChannelConfig+0xf6c>
 8003626:	2209      	movs	r2, #9
 8003628:	2109      	movs	r1, #9
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fb64 	bl	8000cf8 <GPIO_PinAFConfig>
 8003630:	e022      	b.n	8003678 <PWMChannelConfig+0xf6c>
 8003632:	2209      	movs	r2, #9
 8003634:	210a      	movs	r1, #10
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fb5e 	bl	8000cf8 <GPIO_PinAFConfig>
 800363c:	e01c      	b.n	8003678 <PWMChannelConfig+0xf6c>
 800363e:	2209      	movs	r2, #9
 8003640:	210b      	movs	r1, #11
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fb58 	bl	8000cf8 <GPIO_PinAFConfig>
 8003648:	e016      	b.n	8003678 <PWMChannelConfig+0xf6c>
 800364a:	2209      	movs	r2, #9
 800364c:	210c      	movs	r1, #12
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fb52 	bl	8000cf8 <GPIO_PinAFConfig>
 8003654:	e010      	b.n	8003678 <PWMChannelConfig+0xf6c>
 8003656:	2209      	movs	r2, #9
 8003658:	210d      	movs	r1, #13
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd fb4c 	bl	8000cf8 <GPIO_PinAFConfig>
 8003660:	e00a      	b.n	8003678 <PWMChannelConfig+0xf6c>
 8003662:	2209      	movs	r2, #9
 8003664:	210e      	movs	r1, #14
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fb46 	bl	8000cf8 <GPIO_PinAFConfig>
 800366c:	e004      	b.n	8003678 <PWMChannelConfig+0xf6c>
 800366e:	2209      	movs	r2, #9
 8003670:	210f      	movs	r1, #15
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fb40 	bl	8000cf8 <GPIO_PinAFConfig>
 8003678:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 800367a:	2370      	movs	r3, #112	; 0x70
 800367c:	82bb      	strh	r3, [r7, #20]
	}


	PWM_TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800367e:	2301      	movs	r3, #1
 8003680:	82fb      	strh	r3, [r7, #22]

	switch(Channel){
 8003682:	7afb      	ldrb	r3, [r7, #11]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d837      	bhi.n	80036f8 <PWMChannelConfig+0xfec>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <PWMChannelConfig+0xf84>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a1 	.word	0x080036a1
 8003694:	080036b7 	.word	0x080036b7
 8003698:	080036cd 	.word	0x080036cd
 800369c:	080036e3 	.word	0x080036e3

		case PWM_CHANNEL_1 :	TIM_OC1Init(Timer, &PWM_TIM_OCInitStructure);
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	4619      	mov	r1, r3
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7fd ff9c 	bl	80015e4 <TIM_OC1Init>
								TIM_OC1PreloadConfig(Timer, TIM_OCPreload_Enable);
 80036ac:	2108      	movs	r1, #8
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7fe f988 	bl	80019c4 <TIM_OC1PreloadConfig>
								break;
 80036b4:	e020      	b.n	80036f8 <PWMChannelConfig+0xfec>

		case PWM_CHANNEL_2 :	TIM_OC2Init(Timer, &PWM_TIM_OCInitStructure);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	4619      	mov	r1, r3
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7fe f80b 	bl	80016d8 <TIM_OC2Init>
								TIM_OC2PreloadConfig(Timer, TIM_OCPreload_Enable);
 80036c2:	2108      	movs	r1, #8
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7fe f999 	bl	80019fc <TIM_OC2PreloadConfig>
								break;
 80036ca:	e015      	b.n	80036f8 <PWMChannelConfig+0xfec>

		case PWM_CHANNEL_3 :	TIM_OC3Init(Timer, &PWM_TIM_OCInitStructure);
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4619      	mov	r1, r3
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f7fe f888 	bl	80017e8 <TIM_OC3Init>
								TIM_OC3PreloadConfig(Timer, TIM_OCPreload_Enable);
 80036d8:	2108      	movs	r1, #8
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7fe f9ac 	bl	8001a38 <TIM_OC3PreloadConfig>
								break;
 80036e0:	e00a      	b.n	80036f8 <PWMChannelConfig+0xfec>

		case PWM_CHANNEL_4 :	TIM_OC4Init(Timer, &PWM_TIM_OCInitStructure);
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	4619      	mov	r1, r3
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7fe f903 	bl	80018f4 <TIM_OC4Init>
								TIM_OC4PreloadConfig(Timer, TIM_OCPreload_Enable);
 80036ee:	2108      	movs	r1, #8
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7fe f9bd 	bl	8001a70 <TIM_OC4PreloadConfig>
								break;
 80036f6:	bf00      	nop

	}

	TIM_ARRPreloadConfig(Timer, ENABLE);
 80036f8:	2101      	movs	r1, #1
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7fd ff32 	bl	8001564 <TIM_ARRPreloadConfig>

}
 8003700:	bf00      	nop
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <QEIInit>:
 * 						  QEIInit(QEI6, 3, 8, GPIOE, GPIO_Pin_9, GPIOE, GPIO_Pin_11);	//Initialize QEI6
 */

void QEIInit(QEI_TypeDef QEIx, uint16_t preemptionpriority,uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	460b      	mov	r3, r1
 8003716:	81bb      	strh	r3, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	817b      	strh	r3, [r7, #10]
	switch(QEIx)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	3b01      	subs	r3, #1
 8003720:	2b05      	cmp	r3, #5
 8003722:	d857      	bhi.n	80037d4 <QEIInit+0xcc>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <QEIInit+0x24>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003745 	.word	0x08003745
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003775 	.word	0x08003775
 8003738:	0800378d 	.word	0x0800378d
 800373c:	080037a5 	.word	0x080037a5
 8003740:	080037bd 	.word	0x080037bd
	{
	case QEI1:
		QEI1Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 8003744:	8b3a      	ldrh	r2, [r7, #24]
 8003746:	8979      	ldrh	r1, [r7, #10]
 8003748:	89b8      	ldrh	r0, [r7, #12]
 800374a:	8c3b      	ldrh	r3, [r7, #32]
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	f000 f85f 	bl	8003818 <QEI1Init>
		break;
 800375a:	e03c      	b.n	80037d6 <QEIInit+0xce>
	case QEI2:
		QEI2Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 800375c:	8b3a      	ldrh	r2, [r7, #24]
 800375e:	8979      	ldrh	r1, [r7, #10]
 8003760:	89b8      	ldrh	r0, [r7, #12]
 8003762:	8c3b      	ldrh	r3, [r7, #32]
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	f000 f9e9 	bl	8003b44 <QEI2Init>
		break;
 8003772:	e030      	b.n	80037d6 <QEIInit+0xce>
	case QEI3:
		QEI3Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 8003774:	8b3a      	ldrh	r2, [r7, #24]
 8003776:	8979      	ldrh	r1, [r7, #10]
 8003778:	89b8      	ldrh	r0, [r7, #12]
 800377a:	8c3b      	ldrh	r3, [r7, #32]
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	f000 fb77 	bl	8003e78 <QEI3Init>
		break;
 800378a:	e024      	b.n	80037d6 <QEIInit+0xce>
	case QEI4:
		QEI4Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 800378c:	8b3a      	ldrh	r2, [r7, #24]
 800378e:	8979      	ldrh	r1, [r7, #10]
 8003790:	89b8      	ldrh	r0, [r7, #12]
 8003792:	8c3b      	ldrh	r3, [r7, #32]
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	f000 fd01 	bl	80041a4 <QEI4Init>
		break;
 80037a2:	e018      	b.n	80037d6 <QEIInit+0xce>
	case QEI5:
		QEI5Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 80037a4:	8b3a      	ldrh	r2, [r7, #24]
 80037a6:	8979      	ldrh	r1, [r7, #10]
 80037a8:	89b8      	ldrh	r0, [r7, #12]
 80037aa:	8c3b      	ldrh	r3, [r7, #32]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	f000 fe8b 	bl	80044d0 <QEI5Init>
		break;
 80037ba:	e00c      	b.n	80037d6 <QEIInit+0xce>
	case QEI6:
		QEI6Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 80037bc:	8b3a      	ldrh	r2, [r7, #24]
 80037be:	8979      	ldrh	r1, [r7, #10]
 80037c0:	89b8      	ldrh	r0, [r7, #12]
 80037c2:	8c3b      	ldrh	r3, [r7, #32]
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	f001 f815 	bl	80047fc <QEI6Init>
		break;
 80037d2:	e000      	b.n	80037d6 <QEIInit+0xce>
	default: break;
 80037d4:	bf00      	nop
	}
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop

080037e0 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	461a      	mov	r2, r3
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 80037f6:	e002      	b.n	80037fe <QEIDelay+0x1e>
	{
		currentvalues++;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	3301      	adds	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	429a      	cmp	r2, r3
 8003804:	d3f8      	bcc.n	80037f8 <QEIDelay+0x18>
	}
	currentvalues = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <QEI1Init>:
 * Function Example		: QEI1Init();
 */

void QEI1Init(uint16_t preemptionpriority, uint16_t subpriority,
				  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	60ba      	str	r2, [r7, #8]
 8003820:	461a      	mov	r2, r3
 8003822:	4603      	mov	r3, r0
 8003824:	81fb      	strh	r3, [r7, #14]
 8003826:	460b      	mov	r3, r1
 8003828:	81bb      	strh	r3, [r7, #12]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800382e:	2101      	movs	r1, #1
 8003830:	2001      	movs	r0, #1
 8003832:	f7fd fdeb 	bl	800140c <RCC_APB2PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003836:	88f9      	ldrh	r1, [r7, #6]
 8003838:	2301      	movs	r3, #1
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2302      	movs	r3, #2
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2300      	movs	r3, #0
 8003842:	2202      	movs	r2, #2
 8003844:	68b8      	ldr	r0, [r7, #8]
 8003846:	f7fe fcb7 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 800384a:	8bb9      	ldrh	r1, [r7, #28]
 800384c:	2301      	movs	r3, #1
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	2302      	movs	r3, #2
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2300      	movs	r3, #0
 8003856:	2202      	movs	r2, #2
 8003858:	69b8      	ldr	r0, [r7, #24]
 800385a:	f7fe fcad 	bl	80021b8 <GPIOPinsInit>
	AFConfig(TIM1,GPIOx_pulseA, GPIO_Pin_pulseA);
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b80      	cmp	r3, #128	; 0x80
 8003862:	d05e      	beq.n	8003922 <QEI1Init+0x10a>
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d811      	bhi.n	800388c <QEI1Init+0x74>
 8003868:	2b08      	cmp	r3, #8
 800386a:	d042      	beq.n	80038f2 <QEI1Init+0xda>
 800386c:	2b08      	cmp	r3, #8
 800386e:	d806      	bhi.n	800387e <QEI1Init+0x66>
 8003870:	2b02      	cmp	r3, #2
 8003872:	d032      	beq.n	80038da <QEI1Init+0xc2>
 8003874:	2b04      	cmp	r3, #4
 8003876:	d036      	beq.n	80038e6 <QEI1Init+0xce>
 8003878:	2b01      	cmp	r3, #1
 800387a:	d028      	beq.n	80038ce <QEI1Init+0xb6>
 800387c:	e086      	b.n	800398c <QEI1Init+0x174>
 800387e:	2b20      	cmp	r3, #32
 8003880:	d043      	beq.n	800390a <QEI1Init+0xf2>
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d047      	beq.n	8003916 <QEI1Init+0xfe>
 8003886:	2b10      	cmp	r3, #16
 8003888:	d039      	beq.n	80038fe <QEI1Init+0xe6>
 800388a:	e07f      	b.n	800398c <QEI1Init+0x174>
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003890:	d05f      	beq.n	8003952 <QEI1Init+0x13a>
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	d809      	bhi.n	80038ac <QEI1Init+0x94>
 8003898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389c:	d04d      	beq.n	800393a <QEI1Init+0x122>
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a2:	d050      	beq.n	8003946 <QEI1Init+0x12e>
 80038a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a8:	d041      	beq.n	800392e <QEI1Init+0x116>
 80038aa:	e06f      	b.n	800398c <QEI1Init+0x174>
 80038ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b0:	d05b      	beq.n	800396a <QEI1Init+0x152>
 80038b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b6:	d803      	bhi.n	80038c0 <QEI1Init+0xa8>
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038bc:	d04f      	beq.n	800395e <QEI1Init+0x146>
 80038be:	e065      	b.n	800398c <QEI1Init+0x174>
 80038c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c4:	d057      	beq.n	8003976 <QEI1Init+0x15e>
 80038c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ca:	d05a      	beq.n	8003982 <QEI1Init+0x16a>
 80038cc:	e05e      	b.n	800398c <QEI1Init+0x174>
 80038ce:	2201      	movs	r2, #1
 80038d0:	2100      	movs	r1, #0
 80038d2:	68b8      	ldr	r0, [r7, #8]
 80038d4:	f7fd fa10 	bl	8000cf8 <GPIO_PinAFConfig>
 80038d8:	e058      	b.n	800398c <QEI1Init+0x174>
 80038da:	2201      	movs	r2, #1
 80038dc:	2101      	movs	r1, #1
 80038de:	68b8      	ldr	r0, [r7, #8]
 80038e0:	f7fd fa0a 	bl	8000cf8 <GPIO_PinAFConfig>
 80038e4:	e052      	b.n	800398c <QEI1Init+0x174>
 80038e6:	2201      	movs	r2, #1
 80038e8:	2102      	movs	r1, #2
 80038ea:	68b8      	ldr	r0, [r7, #8]
 80038ec:	f7fd fa04 	bl	8000cf8 <GPIO_PinAFConfig>
 80038f0:	e04c      	b.n	800398c <QEI1Init+0x174>
 80038f2:	2201      	movs	r2, #1
 80038f4:	2103      	movs	r1, #3
 80038f6:	68b8      	ldr	r0, [r7, #8]
 80038f8:	f7fd f9fe 	bl	8000cf8 <GPIO_PinAFConfig>
 80038fc:	e046      	b.n	800398c <QEI1Init+0x174>
 80038fe:	2201      	movs	r2, #1
 8003900:	2104      	movs	r1, #4
 8003902:	68b8      	ldr	r0, [r7, #8]
 8003904:	f7fd f9f8 	bl	8000cf8 <GPIO_PinAFConfig>
 8003908:	e040      	b.n	800398c <QEI1Init+0x174>
 800390a:	2201      	movs	r2, #1
 800390c:	2105      	movs	r1, #5
 800390e:	68b8      	ldr	r0, [r7, #8]
 8003910:	f7fd f9f2 	bl	8000cf8 <GPIO_PinAFConfig>
 8003914:	e03a      	b.n	800398c <QEI1Init+0x174>
 8003916:	2201      	movs	r2, #1
 8003918:	2106      	movs	r1, #6
 800391a:	68b8      	ldr	r0, [r7, #8]
 800391c:	f7fd f9ec 	bl	8000cf8 <GPIO_PinAFConfig>
 8003920:	e034      	b.n	800398c <QEI1Init+0x174>
 8003922:	2201      	movs	r2, #1
 8003924:	2107      	movs	r1, #7
 8003926:	68b8      	ldr	r0, [r7, #8]
 8003928:	f7fd f9e6 	bl	8000cf8 <GPIO_PinAFConfig>
 800392c:	e02e      	b.n	800398c <QEI1Init+0x174>
 800392e:	2201      	movs	r2, #1
 8003930:	2108      	movs	r1, #8
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f7fd f9e0 	bl	8000cf8 <GPIO_PinAFConfig>
 8003938:	e028      	b.n	800398c <QEI1Init+0x174>
 800393a:	2201      	movs	r2, #1
 800393c:	2109      	movs	r1, #9
 800393e:	68b8      	ldr	r0, [r7, #8]
 8003940:	f7fd f9da 	bl	8000cf8 <GPIO_PinAFConfig>
 8003944:	e022      	b.n	800398c <QEI1Init+0x174>
 8003946:	2201      	movs	r2, #1
 8003948:	210a      	movs	r1, #10
 800394a:	68b8      	ldr	r0, [r7, #8]
 800394c:	f7fd f9d4 	bl	8000cf8 <GPIO_PinAFConfig>
 8003950:	e01c      	b.n	800398c <QEI1Init+0x174>
 8003952:	2201      	movs	r2, #1
 8003954:	210b      	movs	r1, #11
 8003956:	68b8      	ldr	r0, [r7, #8]
 8003958:	f7fd f9ce 	bl	8000cf8 <GPIO_PinAFConfig>
 800395c:	e016      	b.n	800398c <QEI1Init+0x174>
 800395e:	2201      	movs	r2, #1
 8003960:	210c      	movs	r1, #12
 8003962:	68b8      	ldr	r0, [r7, #8]
 8003964:	f7fd f9c8 	bl	8000cf8 <GPIO_PinAFConfig>
 8003968:	e010      	b.n	800398c <QEI1Init+0x174>
 800396a:	2201      	movs	r2, #1
 800396c:	210d      	movs	r1, #13
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	f7fd f9c2 	bl	8000cf8 <GPIO_PinAFConfig>
 8003974:	e00a      	b.n	800398c <QEI1Init+0x174>
 8003976:	2201      	movs	r2, #1
 8003978:	210e      	movs	r1, #14
 800397a:	68b8      	ldr	r0, [r7, #8]
 800397c:	f7fd f9bc 	bl	8000cf8 <GPIO_PinAFConfig>
 8003980:	e004      	b.n	800398c <QEI1Init+0x174>
 8003982:	2201      	movs	r2, #1
 8003984:	210f      	movs	r1, #15
 8003986:	68b8      	ldr	r0, [r7, #8]
 8003988:	f7fd f9b6 	bl	8000cf8 <GPIO_PinAFConfig>
 800398c:	bf00      	nop
	AFConfig(TIM1,GPIOx_pulseB, GPIO_Pin_pulseB);
 800398e:	8bbb      	ldrh	r3, [r7, #28]
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d05e      	beq.n	8003a52 <QEI1Init+0x23a>
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d811      	bhi.n	80039bc <QEI1Init+0x1a4>
 8003998:	2b08      	cmp	r3, #8
 800399a:	d042      	beq.n	8003a22 <QEI1Init+0x20a>
 800399c:	2b08      	cmp	r3, #8
 800399e:	d806      	bhi.n	80039ae <QEI1Init+0x196>
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d032      	beq.n	8003a0a <QEI1Init+0x1f2>
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d036      	beq.n	8003a16 <QEI1Init+0x1fe>
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d028      	beq.n	80039fe <QEI1Init+0x1e6>
 80039ac:	e086      	b.n	8003abc <QEI1Init+0x2a4>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d043      	beq.n	8003a3a <QEI1Init+0x222>
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d047      	beq.n	8003a46 <QEI1Init+0x22e>
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d039      	beq.n	8003a2e <QEI1Init+0x216>
 80039ba:	e07f      	b.n	8003abc <QEI1Init+0x2a4>
 80039bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c0:	d05f      	beq.n	8003a82 <QEI1Init+0x26a>
 80039c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c6:	d809      	bhi.n	80039dc <QEI1Init+0x1c4>
 80039c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039cc:	d04d      	beq.n	8003a6a <QEI1Init+0x252>
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d2:	d050      	beq.n	8003a76 <QEI1Init+0x25e>
 80039d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d8:	d041      	beq.n	8003a5e <QEI1Init+0x246>
 80039da:	e06f      	b.n	8003abc <QEI1Init+0x2a4>
 80039dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e0:	d05b      	beq.n	8003a9a <QEI1Init+0x282>
 80039e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e6:	d803      	bhi.n	80039f0 <QEI1Init+0x1d8>
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ec:	d04f      	beq.n	8003a8e <QEI1Init+0x276>
 80039ee:	e065      	b.n	8003abc <QEI1Init+0x2a4>
 80039f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f4:	d057      	beq.n	8003aa6 <QEI1Init+0x28e>
 80039f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fa:	d05a      	beq.n	8003ab2 <QEI1Init+0x29a>
 80039fc:	e05e      	b.n	8003abc <QEI1Init+0x2a4>
 80039fe:	2201      	movs	r2, #1
 8003a00:	2100      	movs	r1, #0
 8003a02:	69b8      	ldr	r0, [r7, #24]
 8003a04:	f7fd f978 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a08:	e058      	b.n	8003abc <QEI1Init+0x2a4>
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	69b8      	ldr	r0, [r7, #24]
 8003a10:	f7fd f972 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a14:	e052      	b.n	8003abc <QEI1Init+0x2a4>
 8003a16:	2201      	movs	r2, #1
 8003a18:	2102      	movs	r1, #2
 8003a1a:	69b8      	ldr	r0, [r7, #24]
 8003a1c:	f7fd f96c 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a20:	e04c      	b.n	8003abc <QEI1Init+0x2a4>
 8003a22:	2201      	movs	r2, #1
 8003a24:	2103      	movs	r1, #3
 8003a26:	69b8      	ldr	r0, [r7, #24]
 8003a28:	f7fd f966 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a2c:	e046      	b.n	8003abc <QEI1Init+0x2a4>
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2104      	movs	r1, #4
 8003a32:	69b8      	ldr	r0, [r7, #24]
 8003a34:	f7fd f960 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a38:	e040      	b.n	8003abc <QEI1Init+0x2a4>
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	2105      	movs	r1, #5
 8003a3e:	69b8      	ldr	r0, [r7, #24]
 8003a40:	f7fd f95a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a44:	e03a      	b.n	8003abc <QEI1Init+0x2a4>
 8003a46:	2201      	movs	r2, #1
 8003a48:	2106      	movs	r1, #6
 8003a4a:	69b8      	ldr	r0, [r7, #24]
 8003a4c:	f7fd f954 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a50:	e034      	b.n	8003abc <QEI1Init+0x2a4>
 8003a52:	2201      	movs	r2, #1
 8003a54:	2107      	movs	r1, #7
 8003a56:	69b8      	ldr	r0, [r7, #24]
 8003a58:	f7fd f94e 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a5c:	e02e      	b.n	8003abc <QEI1Init+0x2a4>
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2108      	movs	r1, #8
 8003a62:	69b8      	ldr	r0, [r7, #24]
 8003a64:	f7fd f948 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a68:	e028      	b.n	8003abc <QEI1Init+0x2a4>
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2109      	movs	r1, #9
 8003a6e:	69b8      	ldr	r0, [r7, #24]
 8003a70:	f7fd f942 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a74:	e022      	b.n	8003abc <QEI1Init+0x2a4>
 8003a76:	2201      	movs	r2, #1
 8003a78:	210a      	movs	r1, #10
 8003a7a:	69b8      	ldr	r0, [r7, #24]
 8003a7c:	f7fd f93c 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a80:	e01c      	b.n	8003abc <QEI1Init+0x2a4>
 8003a82:	2201      	movs	r2, #1
 8003a84:	210b      	movs	r1, #11
 8003a86:	69b8      	ldr	r0, [r7, #24]
 8003a88:	f7fd f936 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a8c:	e016      	b.n	8003abc <QEI1Init+0x2a4>
 8003a8e:	2201      	movs	r2, #1
 8003a90:	210c      	movs	r1, #12
 8003a92:	69b8      	ldr	r0, [r7, #24]
 8003a94:	f7fd f930 	bl	8000cf8 <GPIO_PinAFConfig>
 8003a98:	e010      	b.n	8003abc <QEI1Init+0x2a4>
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	210d      	movs	r1, #13
 8003a9e:	69b8      	ldr	r0, [r7, #24]
 8003aa0:	f7fd f92a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003aa4:	e00a      	b.n	8003abc <QEI1Init+0x2a4>
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	210e      	movs	r1, #14
 8003aaa:	69b8      	ldr	r0, [r7, #24]
 8003aac:	f7fd f924 	bl	8000cf8 <GPIO_PinAFConfig>
 8003ab0:	e004      	b.n	8003abc <QEI1Init+0x2a4>
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	210f      	movs	r1, #15
 8003ab6:	69b8      	ldr	r0, [r7, #24]
 8003ab8:	f7fd f91e 	bl	8000cf8 <GPIO_PinAFConfig>
 8003abc:	bf00      	nop

	BIOS_QEI1_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <QEI1Init+0x320>)
 8003ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac4:	605a      	str	r2, [r3, #4]
	BIOS_QEI1_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <QEI1Init+0x320>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	801a      	strh	r2, [r3, #0]
	BIOS_QEI1_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <QEI1Init+0x320>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	811a      	strh	r2, [r3, #8]
	BIOS_QEI1_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <QEI1Init+0x320>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM1, &BIOS_QEI1_TIM_TimeBaseStructure);
 8003ad8:	4917      	ldr	r1, [pc, #92]	; (8003b38 <QEI1Init+0x320>)
 8003ada:	4818      	ldr	r0, [pc, #96]	; (8003b3c <QEI1Init+0x324>)
 8003adc:	f7fd fcd6 	bl	800148c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM1, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2103      	movs	r1, #3
 8003ae6:	4815      	ldr	r0, [pc, #84]	; (8003b3c <QEI1Init+0x324>)
 8003ae8:	f7fe f865 	bl	8001bb6 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8003aec:	2101      	movs	r1, #1
 8003aee:	4813      	ldr	r0, [pc, #76]	; (8003b3c <QEI1Init+0x324>)
 8003af0:	f7fd fd38 	bl	8001564 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM1, TIM_IT_Update );
 8003af4:	2101      	movs	r1, #1
 8003af6:	4811      	ldr	r0, [pc, #68]	; (8003b3c <QEI1Init+0x324>)
 8003af8:	f7fe f84c 	bl	8001b94 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8003afc:	2201      	movs	r2, #1
 8003afe:	2101      	movs	r1, #1
 8003b00:	480e      	ldr	r0, [pc, #56]	; (8003b3c <QEI1Init+0x324>)
 8003b02:	f7fd fff9 	bl	8001af8 <TIM_ITConfig>

	BIOS_QEI1_NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn;
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <QEI1Init+0x328>)
 8003b08:	2219      	movs	r2, #25
 8003b0a:	701a      	strb	r2, [r3, #0]
	BIOS_QEI1_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8003b0c:	89fb      	ldrh	r3, [r7, #14]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <QEI1Init+0x328>)
 8003b12:	705a      	strb	r2, [r3, #1]
	BIOS_QEI1_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8003b14:	89bb      	ldrh	r3, [r7, #12]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <QEI1Init+0x328>)
 8003b1a:	709a      	strb	r2, [r3, #2]
	BIOS_QEI1_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <QEI1Init+0x328>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI1_NVIC_InitStructure);
 8003b22:	4807      	ldr	r0, [pc, #28]	; (8003b40 <QEI1Init+0x328>)
 8003b24:	f7fc fb6c 	bl	8000200 <NVIC_Init>
	TIM_Cmd(TIM1, ENABLE);
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4804      	ldr	r0, [pc, #16]	; (8003b3c <QEI1Init+0x324>)
 8003b2c:	f7fd fd3a 	bl	80015a4 <TIM_Cmd>
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	2000051c 	.word	0x2000051c
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	20000528 	.word	0x20000528

08003b44 <QEI2Init>:
 * Function Example		: QEI2Init();
 */

void QEI2Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60ba      	str	r2, [r7, #8]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	81fb      	strh	r3, [r7, #14]
 8003b52:	460b      	mov	r3, r1
 8003b54:	81bb      	strh	r3, [r7, #12]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7fd fc35 	bl	80013cc <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003b62:	88f9      	ldrh	r1, [r7, #6]
 8003b64:	2301      	movs	r3, #1
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	2302      	movs	r3, #2
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2202      	movs	r2, #2
 8003b70:	68b8      	ldr	r0, [r7, #8]
 8003b72:	f7fe fb21 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003b76:	8bb9      	ldrh	r1, [r7, #28]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	2202      	movs	r2, #2
 8003b84:	69b8      	ldr	r0, [r7, #24]
 8003b86:	f7fe fb17 	bl	80021b8 <GPIOPinsInit>
	AFConfig(TIM2,GPIOx_pulseA, GPIO_Pin_pulseA);
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	2b80      	cmp	r3, #128	; 0x80
 8003b8e:	d05e      	beq.n	8003c4e <QEI2Init+0x10a>
 8003b90:	2b80      	cmp	r3, #128	; 0x80
 8003b92:	d811      	bhi.n	8003bb8 <QEI2Init+0x74>
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d042      	beq.n	8003c1e <QEI2Init+0xda>
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d806      	bhi.n	8003baa <QEI2Init+0x66>
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d032      	beq.n	8003c06 <QEI2Init+0xc2>
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d036      	beq.n	8003c12 <QEI2Init+0xce>
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d028      	beq.n	8003bfa <QEI2Init+0xb6>
 8003ba8:	e086      	b.n	8003cb8 <QEI2Init+0x174>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d043      	beq.n	8003c36 <QEI2Init+0xf2>
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d047      	beq.n	8003c42 <QEI2Init+0xfe>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d039      	beq.n	8003c2a <QEI2Init+0xe6>
 8003bb6:	e07f      	b.n	8003cb8 <QEI2Init+0x174>
 8003bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bbc:	d05f      	beq.n	8003c7e <QEI2Init+0x13a>
 8003bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc2:	d809      	bhi.n	8003bd8 <QEI2Init+0x94>
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d04d      	beq.n	8003c66 <QEI2Init+0x122>
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d050      	beq.n	8003c72 <QEI2Init+0x12e>
 8003bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd4:	d041      	beq.n	8003c5a <QEI2Init+0x116>
 8003bd6:	e06f      	b.n	8003cb8 <QEI2Init+0x174>
 8003bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bdc:	d05b      	beq.n	8003c96 <QEI2Init+0x152>
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be2:	d803      	bhi.n	8003bec <QEI2Init+0xa8>
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be8:	d04f      	beq.n	8003c8a <QEI2Init+0x146>
 8003bea:	e065      	b.n	8003cb8 <QEI2Init+0x174>
 8003bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bf0:	d057      	beq.n	8003ca2 <QEI2Init+0x15e>
 8003bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf6:	d05a      	beq.n	8003cae <QEI2Init+0x16a>
 8003bf8:	e05e      	b.n	8003cb8 <QEI2Init+0x174>
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	68b8      	ldr	r0, [r7, #8]
 8003c00:	f7fd f87a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c04:	e058      	b.n	8003cb8 <QEI2Init+0x174>
 8003c06:	2201      	movs	r2, #1
 8003c08:	2101      	movs	r1, #1
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	f7fd f874 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c10:	e052      	b.n	8003cb8 <QEI2Init+0x174>
 8003c12:	2201      	movs	r2, #1
 8003c14:	2102      	movs	r1, #2
 8003c16:	68b8      	ldr	r0, [r7, #8]
 8003c18:	f7fd f86e 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c1c:	e04c      	b.n	8003cb8 <QEI2Init+0x174>
 8003c1e:	2201      	movs	r2, #1
 8003c20:	2103      	movs	r1, #3
 8003c22:	68b8      	ldr	r0, [r7, #8]
 8003c24:	f7fd f868 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c28:	e046      	b.n	8003cb8 <QEI2Init+0x174>
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	68b8      	ldr	r0, [r7, #8]
 8003c30:	f7fd f862 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c34:	e040      	b.n	8003cb8 <QEI2Init+0x174>
 8003c36:	2201      	movs	r2, #1
 8003c38:	2105      	movs	r1, #5
 8003c3a:	68b8      	ldr	r0, [r7, #8]
 8003c3c:	f7fd f85c 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c40:	e03a      	b.n	8003cb8 <QEI2Init+0x174>
 8003c42:	2201      	movs	r2, #1
 8003c44:	2106      	movs	r1, #6
 8003c46:	68b8      	ldr	r0, [r7, #8]
 8003c48:	f7fd f856 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c4c:	e034      	b.n	8003cb8 <QEI2Init+0x174>
 8003c4e:	2201      	movs	r2, #1
 8003c50:	2107      	movs	r1, #7
 8003c52:	68b8      	ldr	r0, [r7, #8]
 8003c54:	f7fd f850 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c58:	e02e      	b.n	8003cb8 <QEI2Init+0x174>
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2108      	movs	r1, #8
 8003c5e:	68b8      	ldr	r0, [r7, #8]
 8003c60:	f7fd f84a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c64:	e028      	b.n	8003cb8 <QEI2Init+0x174>
 8003c66:	2201      	movs	r2, #1
 8003c68:	2109      	movs	r1, #9
 8003c6a:	68b8      	ldr	r0, [r7, #8]
 8003c6c:	f7fd f844 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c70:	e022      	b.n	8003cb8 <QEI2Init+0x174>
 8003c72:	2201      	movs	r2, #1
 8003c74:	210a      	movs	r1, #10
 8003c76:	68b8      	ldr	r0, [r7, #8]
 8003c78:	f7fd f83e 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c7c:	e01c      	b.n	8003cb8 <QEI2Init+0x174>
 8003c7e:	2201      	movs	r2, #1
 8003c80:	210b      	movs	r1, #11
 8003c82:	68b8      	ldr	r0, [r7, #8]
 8003c84:	f7fd f838 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c88:	e016      	b.n	8003cb8 <QEI2Init+0x174>
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	210c      	movs	r1, #12
 8003c8e:	68b8      	ldr	r0, [r7, #8]
 8003c90:	f7fd f832 	bl	8000cf8 <GPIO_PinAFConfig>
 8003c94:	e010      	b.n	8003cb8 <QEI2Init+0x174>
 8003c96:	2201      	movs	r2, #1
 8003c98:	210d      	movs	r1, #13
 8003c9a:	68b8      	ldr	r0, [r7, #8]
 8003c9c:	f7fd f82c 	bl	8000cf8 <GPIO_PinAFConfig>
 8003ca0:	e00a      	b.n	8003cb8 <QEI2Init+0x174>
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	210e      	movs	r1, #14
 8003ca6:	68b8      	ldr	r0, [r7, #8]
 8003ca8:	f7fd f826 	bl	8000cf8 <GPIO_PinAFConfig>
 8003cac:	e004      	b.n	8003cb8 <QEI2Init+0x174>
 8003cae:	2201      	movs	r2, #1
 8003cb0:	210f      	movs	r1, #15
 8003cb2:	68b8      	ldr	r0, [r7, #8]
 8003cb4:	f7fd f820 	bl	8000cf8 <GPIO_PinAFConfig>
 8003cb8:	bf00      	nop
	AFConfig(TIM2,GPIOx_pulseB, GPIO_Pin_pulseB);
 8003cba:	8bbb      	ldrh	r3, [r7, #28]
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d05e      	beq.n	8003d7e <QEI2Init+0x23a>
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d811      	bhi.n	8003ce8 <QEI2Init+0x1a4>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d042      	beq.n	8003d4e <QEI2Init+0x20a>
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d806      	bhi.n	8003cda <QEI2Init+0x196>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d032      	beq.n	8003d36 <QEI2Init+0x1f2>
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d036      	beq.n	8003d42 <QEI2Init+0x1fe>
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d028      	beq.n	8003d2a <QEI2Init+0x1e6>
 8003cd8:	e086      	b.n	8003de8 <QEI2Init+0x2a4>
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d043      	beq.n	8003d66 <QEI2Init+0x222>
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d047      	beq.n	8003d72 <QEI2Init+0x22e>
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d039      	beq.n	8003d5a <QEI2Init+0x216>
 8003ce6:	e07f      	b.n	8003de8 <QEI2Init+0x2a4>
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cec:	d05f      	beq.n	8003dae <QEI2Init+0x26a>
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf2:	d809      	bhi.n	8003d08 <QEI2Init+0x1c4>
 8003cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf8:	d04d      	beq.n	8003d96 <QEI2Init+0x252>
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d050      	beq.n	8003da2 <QEI2Init+0x25e>
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d041      	beq.n	8003d8a <QEI2Init+0x246>
 8003d06:	e06f      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	d05b      	beq.n	8003dc6 <QEI2Init+0x282>
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d12:	d803      	bhi.n	8003d1c <QEI2Init+0x1d8>
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d04f      	beq.n	8003dba <QEI2Init+0x276>
 8003d1a:	e065      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d20:	d057      	beq.n	8003dd2 <QEI2Init+0x28e>
 8003d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d26:	d05a      	beq.n	8003dde <QEI2Init+0x29a>
 8003d28:	e05e      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	69b8      	ldr	r0, [r7, #24]
 8003d30:	f7fc ffe2 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d34:	e058      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d36:	2201      	movs	r2, #1
 8003d38:	2101      	movs	r1, #1
 8003d3a:	69b8      	ldr	r0, [r7, #24]
 8003d3c:	f7fc ffdc 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d40:	e052      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d42:	2201      	movs	r2, #1
 8003d44:	2102      	movs	r1, #2
 8003d46:	69b8      	ldr	r0, [r7, #24]
 8003d48:	f7fc ffd6 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d4c:	e04c      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d4e:	2201      	movs	r2, #1
 8003d50:	2103      	movs	r1, #3
 8003d52:	69b8      	ldr	r0, [r7, #24]
 8003d54:	f7fc ffd0 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d58:	e046      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	2104      	movs	r1, #4
 8003d5e:	69b8      	ldr	r0, [r7, #24]
 8003d60:	f7fc ffca 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d64:	e040      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d66:	2201      	movs	r2, #1
 8003d68:	2105      	movs	r1, #5
 8003d6a:	69b8      	ldr	r0, [r7, #24]
 8003d6c:	f7fc ffc4 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d70:	e03a      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d72:	2201      	movs	r2, #1
 8003d74:	2106      	movs	r1, #6
 8003d76:	69b8      	ldr	r0, [r7, #24]
 8003d78:	f7fc ffbe 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d7c:	e034      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d7e:	2201      	movs	r2, #1
 8003d80:	2107      	movs	r1, #7
 8003d82:	69b8      	ldr	r0, [r7, #24]
 8003d84:	f7fc ffb8 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d88:	e02e      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	69b8      	ldr	r0, [r7, #24]
 8003d90:	f7fc ffb2 	bl	8000cf8 <GPIO_PinAFConfig>
 8003d94:	e028      	b.n	8003de8 <QEI2Init+0x2a4>
 8003d96:	2201      	movs	r2, #1
 8003d98:	2109      	movs	r1, #9
 8003d9a:	69b8      	ldr	r0, [r7, #24]
 8003d9c:	f7fc ffac 	bl	8000cf8 <GPIO_PinAFConfig>
 8003da0:	e022      	b.n	8003de8 <QEI2Init+0x2a4>
 8003da2:	2201      	movs	r2, #1
 8003da4:	210a      	movs	r1, #10
 8003da6:	69b8      	ldr	r0, [r7, #24]
 8003da8:	f7fc ffa6 	bl	8000cf8 <GPIO_PinAFConfig>
 8003dac:	e01c      	b.n	8003de8 <QEI2Init+0x2a4>
 8003dae:	2201      	movs	r2, #1
 8003db0:	210b      	movs	r1, #11
 8003db2:	69b8      	ldr	r0, [r7, #24]
 8003db4:	f7fc ffa0 	bl	8000cf8 <GPIO_PinAFConfig>
 8003db8:	e016      	b.n	8003de8 <QEI2Init+0x2a4>
 8003dba:	2201      	movs	r2, #1
 8003dbc:	210c      	movs	r1, #12
 8003dbe:	69b8      	ldr	r0, [r7, #24]
 8003dc0:	f7fc ff9a 	bl	8000cf8 <GPIO_PinAFConfig>
 8003dc4:	e010      	b.n	8003de8 <QEI2Init+0x2a4>
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	210d      	movs	r1, #13
 8003dca:	69b8      	ldr	r0, [r7, #24]
 8003dcc:	f7fc ff94 	bl	8000cf8 <GPIO_PinAFConfig>
 8003dd0:	e00a      	b.n	8003de8 <QEI2Init+0x2a4>
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	210e      	movs	r1, #14
 8003dd6:	69b8      	ldr	r0, [r7, #24]
 8003dd8:	f7fc ff8e 	bl	8000cf8 <GPIO_PinAFConfig>
 8003ddc:	e004      	b.n	8003de8 <QEI2Init+0x2a4>
 8003dde:	2201      	movs	r2, #1
 8003de0:	210f      	movs	r1, #15
 8003de2:	69b8      	ldr	r0, [r7, #24]
 8003de4:	f7fc ff88 	bl	8000cf8 <GPIO_PinAFConfig>
 8003de8:	bf00      	nop

	BIOS_QEI2_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8003dea:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <QEI2Init+0x32c>)
 8003dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df0:	605a      	str	r2, [r3, #4]
	BIOS_QEI2_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003df2:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <QEI2Init+0x32c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	801a      	strh	r2, [r3, #0]
	BIOS_QEI2_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <QEI2Init+0x32c>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	811a      	strh	r2, [r3, #8]
	BIOS_QEI2_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <QEI2Init+0x32c>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM2, &BIOS_QEI2_TIM_TimeBaseStructure);
 8003e04:	491a      	ldr	r1, [pc, #104]	; (8003e70 <QEI2Init+0x32c>)
 8003e06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e0a:	f7fd fb3f 	bl	800148c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2200      	movs	r2, #0
 8003e12:	2103      	movs	r1, #3
 8003e14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e18:	f7fd fecd 	bl	8001bb6 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM2, ENABLE);
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e22:	f7fd fb9f 	bl	8001564 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003e26:	2101      	movs	r1, #1
 8003e28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e2c:	f7fd feb2 	bl	8001b94 <TIM_ClearITPendingBit>
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8003e30:	2201      	movs	r2, #1
 8003e32:	2101      	movs	r1, #1
 8003e34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e38:	f7fd fe5e 	bl	8001af8 <TIM_ITConfig>

	BIOS_QEI2_NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <QEI2Init+0x330>)
 8003e3e:	221c      	movs	r2, #28
 8003e40:	701a      	strb	r2, [r3, #0]
	BIOS_QEI2_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8003e42:	89fb      	ldrh	r3, [r7, #14]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <QEI2Init+0x330>)
 8003e48:	705a      	strb	r2, [r3, #1]
	BIOS_QEI2_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8003e4a:	89bb      	ldrh	r3, [r7, #12]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <QEI2Init+0x330>)
 8003e50:	709a      	strb	r2, [r3, #2]
	BIOS_QEI2_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <QEI2Init+0x330>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI2_NVIC_InitStructure);
 8003e58:	4806      	ldr	r0, [pc, #24]	; (8003e74 <QEI2Init+0x330>)
 8003e5a:	f7fc f9d1 	bl	8000200 <NVIC_Init>

	TIM_Cmd(TIM2, ENABLE);
 8003e5e:	2101      	movs	r1, #1
 8003e60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e64:	f7fd fb9e 	bl	80015a4 <TIM_Cmd>
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	2000052c 	.word	0x2000052c
 8003e74:	20000538 	.word	0x20000538

08003e78 <QEI3Init>:
 * Function Example		: QEI3Init();
 */

void QEI3Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60ba      	str	r2, [r7, #8]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	81fb      	strh	r3, [r7, #14]
 8003e86:	460b      	mov	r3, r1
 8003e88:	81bb      	strh	r3, [r7, #12]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2002      	movs	r0, #2
 8003e92:	f7fd fa9b 	bl	80013cc <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003e96:	88f9      	ldrh	r1, [r7, #6]
 8003e98:	2301      	movs	r3, #1
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	68b8      	ldr	r0, [r7, #8]
 8003ea6:	f7fe f987 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003eaa:	8bb9      	ldrh	r1, [r7, #28]
 8003eac:	2301      	movs	r3, #1
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	69b8      	ldr	r0, [r7, #24]
 8003eba:	f7fe f97d 	bl	80021b8 <GPIOPinsInit>
	AFConfig(TIM3,GPIOx_pulseA, GPIO_Pin_pulseA);
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d05e      	beq.n	8003f82 <QEI3Init+0x10a>
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d811      	bhi.n	8003eec <QEI3Init+0x74>
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d042      	beq.n	8003f52 <QEI3Init+0xda>
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d806      	bhi.n	8003ede <QEI3Init+0x66>
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d032      	beq.n	8003f3a <QEI3Init+0xc2>
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d036      	beq.n	8003f46 <QEI3Init+0xce>
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d028      	beq.n	8003f2e <QEI3Init+0xb6>
 8003edc:	e086      	b.n	8003fec <QEI3Init+0x174>
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d043      	beq.n	8003f6a <QEI3Init+0xf2>
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d047      	beq.n	8003f76 <QEI3Init+0xfe>
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d039      	beq.n	8003f5e <QEI3Init+0xe6>
 8003eea:	e07f      	b.n	8003fec <QEI3Init+0x174>
 8003eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef0:	d05f      	beq.n	8003fb2 <QEI3Init+0x13a>
 8003ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef6:	d809      	bhi.n	8003f0c <QEI3Init+0x94>
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efc:	d04d      	beq.n	8003f9a <QEI3Init+0x122>
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d050      	beq.n	8003fa6 <QEI3Init+0x12e>
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f08:	d041      	beq.n	8003f8e <QEI3Init+0x116>
 8003f0a:	e06f      	b.n	8003fec <QEI3Init+0x174>
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f10:	d05b      	beq.n	8003fca <QEI3Init+0x152>
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f16:	d803      	bhi.n	8003f20 <QEI3Init+0xa8>
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	d04f      	beq.n	8003fbe <QEI3Init+0x146>
 8003f1e:	e065      	b.n	8003fec <QEI3Init+0x174>
 8003f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f24:	d057      	beq.n	8003fd6 <QEI3Init+0x15e>
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d05a      	beq.n	8003fe2 <QEI3Init+0x16a>
 8003f2c:	e05e      	b.n	8003fec <QEI3Init+0x174>
 8003f2e:	2202      	movs	r2, #2
 8003f30:	2100      	movs	r1, #0
 8003f32:	68b8      	ldr	r0, [r7, #8]
 8003f34:	f7fc fee0 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f38:	e058      	b.n	8003fec <QEI3Init+0x174>
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	68b8      	ldr	r0, [r7, #8]
 8003f40:	f7fc feda 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f44:	e052      	b.n	8003fec <QEI3Init+0x174>
 8003f46:	2202      	movs	r2, #2
 8003f48:	2102      	movs	r1, #2
 8003f4a:	68b8      	ldr	r0, [r7, #8]
 8003f4c:	f7fc fed4 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f50:	e04c      	b.n	8003fec <QEI3Init+0x174>
 8003f52:	2202      	movs	r2, #2
 8003f54:	2103      	movs	r1, #3
 8003f56:	68b8      	ldr	r0, [r7, #8]
 8003f58:	f7fc fece 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f5c:	e046      	b.n	8003fec <QEI3Init+0x174>
 8003f5e:	2202      	movs	r2, #2
 8003f60:	2104      	movs	r1, #4
 8003f62:	68b8      	ldr	r0, [r7, #8]
 8003f64:	f7fc fec8 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f68:	e040      	b.n	8003fec <QEI3Init+0x174>
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	2105      	movs	r1, #5
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f7fc fec2 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f74:	e03a      	b.n	8003fec <QEI3Init+0x174>
 8003f76:	2202      	movs	r2, #2
 8003f78:	2106      	movs	r1, #6
 8003f7a:	68b8      	ldr	r0, [r7, #8]
 8003f7c:	f7fc febc 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f80:	e034      	b.n	8003fec <QEI3Init+0x174>
 8003f82:	2202      	movs	r2, #2
 8003f84:	2107      	movs	r1, #7
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f7fc feb6 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f8c:	e02e      	b.n	8003fec <QEI3Init+0x174>
 8003f8e:	2202      	movs	r2, #2
 8003f90:	2108      	movs	r1, #8
 8003f92:	68b8      	ldr	r0, [r7, #8]
 8003f94:	f7fc feb0 	bl	8000cf8 <GPIO_PinAFConfig>
 8003f98:	e028      	b.n	8003fec <QEI3Init+0x174>
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	2109      	movs	r1, #9
 8003f9e:	68b8      	ldr	r0, [r7, #8]
 8003fa0:	f7fc feaa 	bl	8000cf8 <GPIO_PinAFConfig>
 8003fa4:	e022      	b.n	8003fec <QEI3Init+0x174>
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	210a      	movs	r1, #10
 8003faa:	68b8      	ldr	r0, [r7, #8]
 8003fac:	f7fc fea4 	bl	8000cf8 <GPIO_PinAFConfig>
 8003fb0:	e01c      	b.n	8003fec <QEI3Init+0x174>
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	210b      	movs	r1, #11
 8003fb6:	68b8      	ldr	r0, [r7, #8]
 8003fb8:	f7fc fe9e 	bl	8000cf8 <GPIO_PinAFConfig>
 8003fbc:	e016      	b.n	8003fec <QEI3Init+0x174>
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	210c      	movs	r1, #12
 8003fc2:	68b8      	ldr	r0, [r7, #8]
 8003fc4:	f7fc fe98 	bl	8000cf8 <GPIO_PinAFConfig>
 8003fc8:	e010      	b.n	8003fec <QEI3Init+0x174>
 8003fca:	2202      	movs	r2, #2
 8003fcc:	210d      	movs	r1, #13
 8003fce:	68b8      	ldr	r0, [r7, #8]
 8003fd0:	f7fc fe92 	bl	8000cf8 <GPIO_PinAFConfig>
 8003fd4:	e00a      	b.n	8003fec <QEI3Init+0x174>
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	210e      	movs	r1, #14
 8003fda:	68b8      	ldr	r0, [r7, #8]
 8003fdc:	f7fc fe8c 	bl	8000cf8 <GPIO_PinAFConfig>
 8003fe0:	e004      	b.n	8003fec <QEI3Init+0x174>
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	210f      	movs	r1, #15
 8003fe6:	68b8      	ldr	r0, [r7, #8]
 8003fe8:	f7fc fe86 	bl	8000cf8 <GPIO_PinAFConfig>
 8003fec:	bf00      	nop
	AFConfig(TIM3,GPIOx_pulseB, GPIO_Pin_pulseB);
 8003fee:	8bbb      	ldrh	r3, [r7, #28]
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d05e      	beq.n	80040b2 <QEI3Init+0x23a>
 8003ff4:	2b80      	cmp	r3, #128	; 0x80
 8003ff6:	d811      	bhi.n	800401c <QEI3Init+0x1a4>
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d042      	beq.n	8004082 <QEI3Init+0x20a>
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d806      	bhi.n	800400e <QEI3Init+0x196>
 8004000:	2b02      	cmp	r3, #2
 8004002:	d032      	beq.n	800406a <QEI3Init+0x1f2>
 8004004:	2b04      	cmp	r3, #4
 8004006:	d036      	beq.n	8004076 <QEI3Init+0x1fe>
 8004008:	2b01      	cmp	r3, #1
 800400a:	d028      	beq.n	800405e <QEI3Init+0x1e6>
 800400c:	e086      	b.n	800411c <QEI3Init+0x2a4>
 800400e:	2b20      	cmp	r3, #32
 8004010:	d043      	beq.n	800409a <QEI3Init+0x222>
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d047      	beq.n	80040a6 <QEI3Init+0x22e>
 8004016:	2b10      	cmp	r3, #16
 8004018:	d039      	beq.n	800408e <QEI3Init+0x216>
 800401a:	e07f      	b.n	800411c <QEI3Init+0x2a4>
 800401c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004020:	d05f      	beq.n	80040e2 <QEI3Init+0x26a>
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004026:	d809      	bhi.n	800403c <QEI3Init+0x1c4>
 8004028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402c:	d04d      	beq.n	80040ca <QEI3Init+0x252>
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004032:	d050      	beq.n	80040d6 <QEI3Init+0x25e>
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d041      	beq.n	80040be <QEI3Init+0x246>
 800403a:	e06f      	b.n	800411c <QEI3Init+0x2a4>
 800403c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004040:	d05b      	beq.n	80040fa <QEI3Init+0x282>
 8004042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004046:	d803      	bhi.n	8004050 <QEI3Init+0x1d8>
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d04f      	beq.n	80040ee <QEI3Init+0x276>
 800404e:	e065      	b.n	800411c <QEI3Init+0x2a4>
 8004050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004054:	d057      	beq.n	8004106 <QEI3Init+0x28e>
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d05a      	beq.n	8004112 <QEI3Init+0x29a>
 800405c:	e05e      	b.n	800411c <QEI3Init+0x2a4>
 800405e:	2202      	movs	r2, #2
 8004060:	2100      	movs	r1, #0
 8004062:	69b8      	ldr	r0, [r7, #24]
 8004064:	f7fc fe48 	bl	8000cf8 <GPIO_PinAFConfig>
 8004068:	e058      	b.n	800411c <QEI3Init+0x2a4>
 800406a:	2202      	movs	r2, #2
 800406c:	2101      	movs	r1, #1
 800406e:	69b8      	ldr	r0, [r7, #24]
 8004070:	f7fc fe42 	bl	8000cf8 <GPIO_PinAFConfig>
 8004074:	e052      	b.n	800411c <QEI3Init+0x2a4>
 8004076:	2202      	movs	r2, #2
 8004078:	2102      	movs	r1, #2
 800407a:	69b8      	ldr	r0, [r7, #24]
 800407c:	f7fc fe3c 	bl	8000cf8 <GPIO_PinAFConfig>
 8004080:	e04c      	b.n	800411c <QEI3Init+0x2a4>
 8004082:	2202      	movs	r2, #2
 8004084:	2103      	movs	r1, #3
 8004086:	69b8      	ldr	r0, [r7, #24]
 8004088:	f7fc fe36 	bl	8000cf8 <GPIO_PinAFConfig>
 800408c:	e046      	b.n	800411c <QEI3Init+0x2a4>
 800408e:	2202      	movs	r2, #2
 8004090:	2104      	movs	r1, #4
 8004092:	69b8      	ldr	r0, [r7, #24]
 8004094:	f7fc fe30 	bl	8000cf8 <GPIO_PinAFConfig>
 8004098:	e040      	b.n	800411c <QEI3Init+0x2a4>
 800409a:	2202      	movs	r2, #2
 800409c:	2105      	movs	r1, #5
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f7fc fe2a 	bl	8000cf8 <GPIO_PinAFConfig>
 80040a4:	e03a      	b.n	800411c <QEI3Init+0x2a4>
 80040a6:	2202      	movs	r2, #2
 80040a8:	2106      	movs	r1, #6
 80040aa:	69b8      	ldr	r0, [r7, #24]
 80040ac:	f7fc fe24 	bl	8000cf8 <GPIO_PinAFConfig>
 80040b0:	e034      	b.n	800411c <QEI3Init+0x2a4>
 80040b2:	2202      	movs	r2, #2
 80040b4:	2107      	movs	r1, #7
 80040b6:	69b8      	ldr	r0, [r7, #24]
 80040b8:	f7fc fe1e 	bl	8000cf8 <GPIO_PinAFConfig>
 80040bc:	e02e      	b.n	800411c <QEI3Init+0x2a4>
 80040be:	2202      	movs	r2, #2
 80040c0:	2108      	movs	r1, #8
 80040c2:	69b8      	ldr	r0, [r7, #24]
 80040c4:	f7fc fe18 	bl	8000cf8 <GPIO_PinAFConfig>
 80040c8:	e028      	b.n	800411c <QEI3Init+0x2a4>
 80040ca:	2202      	movs	r2, #2
 80040cc:	2109      	movs	r1, #9
 80040ce:	69b8      	ldr	r0, [r7, #24]
 80040d0:	f7fc fe12 	bl	8000cf8 <GPIO_PinAFConfig>
 80040d4:	e022      	b.n	800411c <QEI3Init+0x2a4>
 80040d6:	2202      	movs	r2, #2
 80040d8:	210a      	movs	r1, #10
 80040da:	69b8      	ldr	r0, [r7, #24]
 80040dc:	f7fc fe0c 	bl	8000cf8 <GPIO_PinAFConfig>
 80040e0:	e01c      	b.n	800411c <QEI3Init+0x2a4>
 80040e2:	2202      	movs	r2, #2
 80040e4:	210b      	movs	r1, #11
 80040e6:	69b8      	ldr	r0, [r7, #24]
 80040e8:	f7fc fe06 	bl	8000cf8 <GPIO_PinAFConfig>
 80040ec:	e016      	b.n	800411c <QEI3Init+0x2a4>
 80040ee:	2202      	movs	r2, #2
 80040f0:	210c      	movs	r1, #12
 80040f2:	69b8      	ldr	r0, [r7, #24]
 80040f4:	f7fc fe00 	bl	8000cf8 <GPIO_PinAFConfig>
 80040f8:	e010      	b.n	800411c <QEI3Init+0x2a4>
 80040fa:	2202      	movs	r2, #2
 80040fc:	210d      	movs	r1, #13
 80040fe:	69b8      	ldr	r0, [r7, #24]
 8004100:	f7fc fdfa 	bl	8000cf8 <GPIO_PinAFConfig>
 8004104:	e00a      	b.n	800411c <QEI3Init+0x2a4>
 8004106:	2202      	movs	r2, #2
 8004108:	210e      	movs	r1, #14
 800410a:	69b8      	ldr	r0, [r7, #24]
 800410c:	f7fc fdf4 	bl	8000cf8 <GPIO_PinAFConfig>
 8004110:	e004      	b.n	800411c <QEI3Init+0x2a4>
 8004112:	2202      	movs	r2, #2
 8004114:	210f      	movs	r1, #15
 8004116:	69b8      	ldr	r0, [r7, #24]
 8004118:	f7fc fdee 	bl	8000cf8 <GPIO_PinAFConfig>
 800411c:	bf00      	nop

	BIOS_QEI3_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <QEI3Init+0x320>)
 8004120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004124:	605a      	str	r2, [r3, #4]
	BIOS_QEI3_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <QEI3Init+0x320>)
 8004128:	2200      	movs	r2, #0
 800412a:	801a      	strh	r2, [r3, #0]
	BIOS_QEI3_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <QEI3Init+0x320>)
 800412e:	2200      	movs	r2, #0
 8004130:	811a      	strh	r2, [r3, #8]
	BIOS_QEI3_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <QEI3Init+0x320>)
 8004134:	2200      	movs	r2, #0
 8004136:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM3, &BIOS_QEI3_TIM_TimeBaseStructure);
 8004138:	4917      	ldr	r1, [pc, #92]	; (8004198 <QEI3Init+0x320>)
 800413a:	4818      	ldr	r0, [pc, #96]	; (800419c <QEI3Init+0x324>)
 800413c:	f7fd f9a6 	bl	800148c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8004140:	2300      	movs	r3, #0
 8004142:	2200      	movs	r2, #0
 8004144:	2103      	movs	r1, #3
 8004146:	4815      	ldr	r0, [pc, #84]	; (800419c <QEI3Init+0x324>)
 8004148:	f7fd fd35 	bl	8001bb6 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 800414c:	2101      	movs	r1, #1
 800414e:	4813      	ldr	r0, [pc, #76]	; (800419c <QEI3Init+0x324>)
 8004150:	f7fd fa08 	bl	8001564 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM3, TIM_IT_Update );
 8004154:	2101      	movs	r1, #1
 8004156:	4811      	ldr	r0, [pc, #68]	; (800419c <QEI3Init+0x324>)
 8004158:	f7fd fd1c 	bl	8001b94 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 800415c:	2201      	movs	r2, #1
 800415e:	2101      	movs	r1, #1
 8004160:	480e      	ldr	r0, [pc, #56]	; (800419c <QEI3Init+0x324>)
 8004162:	f7fd fcc9 	bl	8001af8 <TIM_ITConfig>

	BIOS_QEI3_NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <QEI3Init+0x328>)
 8004168:	221d      	movs	r2, #29
 800416a:	701a      	strb	r2, [r3, #0]
	BIOS_QEI3_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 800416c:	89fb      	ldrh	r3, [r7, #14]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <QEI3Init+0x328>)
 8004172:	705a      	strb	r2, [r3, #1]
	BIOS_QEI3_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8004174:	89bb      	ldrh	r3, [r7, #12]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <QEI3Init+0x328>)
 800417a:	709a      	strb	r2, [r3, #2]
	BIOS_QEI3_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <QEI3Init+0x328>)
 800417e:	2201      	movs	r2, #1
 8004180:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI3_NVIC_InitStructure);
 8004182:	4807      	ldr	r0, [pc, #28]	; (80041a0 <QEI3Init+0x328>)
 8004184:	f7fc f83c 	bl	8000200 <NVIC_Init>
	TIM_Cmd(TIM3, ENABLE);
 8004188:	2101      	movs	r1, #1
 800418a:	4804      	ldr	r0, [pc, #16]	; (800419c <QEI3Init+0x324>)
 800418c:	f7fd fa0a 	bl	80015a4 <TIM_Cmd>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	2000053c 	.word	0x2000053c
 800419c:	40000400 	.word	0x40000400
 80041a0:	20000548 	.word	0x20000548

080041a4 <QEI4Init>:
 * Function Example		: QEI4Init();
 */

void QEI4Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60ba      	str	r2, [r7, #8]
 80041ac:	461a      	mov	r2, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	81fb      	strh	r3, [r7, #14]
 80041b2:	460b      	mov	r3, r1
 80041b4:	81bb      	strh	r3, [r7, #12]
 80041b6:	4613      	mov	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80041ba:	2101      	movs	r1, #1
 80041bc:	2004      	movs	r0, #4
 80041be:	f7fd f905 	bl	80013cc <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 80041c2:	88f9      	ldrh	r1, [r7, #6]
 80041c4:	2301      	movs	r3, #1
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	2302      	movs	r3, #2
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	2300      	movs	r3, #0
 80041ce:	2202      	movs	r2, #2
 80041d0:	68b8      	ldr	r0, [r7, #8]
 80041d2:	f7fd fff1 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 80041d6:	8bb9      	ldrh	r1, [r7, #28]
 80041d8:	2301      	movs	r3, #1
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	2302      	movs	r3, #2
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2300      	movs	r3, #0
 80041e2:	2202      	movs	r2, #2
 80041e4:	69b8      	ldr	r0, [r7, #24]
 80041e6:	f7fd ffe7 	bl	80021b8 <GPIOPinsInit>
	AFConfig(TIM4,GPIOx_pulseA, GPIO_Pin_pulseA);
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	2b80      	cmp	r3, #128	; 0x80
 80041ee:	d05e      	beq.n	80042ae <QEI4Init+0x10a>
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d811      	bhi.n	8004218 <QEI4Init+0x74>
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d042      	beq.n	800427e <QEI4Init+0xda>
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d806      	bhi.n	800420a <QEI4Init+0x66>
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d032      	beq.n	8004266 <QEI4Init+0xc2>
 8004200:	2b04      	cmp	r3, #4
 8004202:	d036      	beq.n	8004272 <QEI4Init+0xce>
 8004204:	2b01      	cmp	r3, #1
 8004206:	d028      	beq.n	800425a <QEI4Init+0xb6>
 8004208:	e086      	b.n	8004318 <QEI4Init+0x174>
 800420a:	2b20      	cmp	r3, #32
 800420c:	d043      	beq.n	8004296 <QEI4Init+0xf2>
 800420e:	2b40      	cmp	r3, #64	; 0x40
 8004210:	d047      	beq.n	80042a2 <QEI4Init+0xfe>
 8004212:	2b10      	cmp	r3, #16
 8004214:	d039      	beq.n	800428a <QEI4Init+0xe6>
 8004216:	e07f      	b.n	8004318 <QEI4Init+0x174>
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421c:	d05f      	beq.n	80042de <QEI4Init+0x13a>
 800421e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004222:	d809      	bhi.n	8004238 <QEI4Init+0x94>
 8004224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004228:	d04d      	beq.n	80042c6 <QEI4Init+0x122>
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422e:	d050      	beq.n	80042d2 <QEI4Init+0x12e>
 8004230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004234:	d041      	beq.n	80042ba <QEI4Init+0x116>
 8004236:	e06f      	b.n	8004318 <QEI4Init+0x174>
 8004238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423c:	d05b      	beq.n	80042f6 <QEI4Init+0x152>
 800423e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004242:	d803      	bhi.n	800424c <QEI4Init+0xa8>
 8004244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004248:	d04f      	beq.n	80042ea <QEI4Init+0x146>
 800424a:	e065      	b.n	8004318 <QEI4Init+0x174>
 800424c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004250:	d057      	beq.n	8004302 <QEI4Init+0x15e>
 8004252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004256:	d05a      	beq.n	800430e <QEI4Init+0x16a>
 8004258:	e05e      	b.n	8004318 <QEI4Init+0x174>
 800425a:	2202      	movs	r2, #2
 800425c:	2100      	movs	r1, #0
 800425e:	68b8      	ldr	r0, [r7, #8]
 8004260:	f7fc fd4a 	bl	8000cf8 <GPIO_PinAFConfig>
 8004264:	e058      	b.n	8004318 <QEI4Init+0x174>
 8004266:	2202      	movs	r2, #2
 8004268:	2101      	movs	r1, #1
 800426a:	68b8      	ldr	r0, [r7, #8]
 800426c:	f7fc fd44 	bl	8000cf8 <GPIO_PinAFConfig>
 8004270:	e052      	b.n	8004318 <QEI4Init+0x174>
 8004272:	2202      	movs	r2, #2
 8004274:	2102      	movs	r1, #2
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f7fc fd3e 	bl	8000cf8 <GPIO_PinAFConfig>
 800427c:	e04c      	b.n	8004318 <QEI4Init+0x174>
 800427e:	2202      	movs	r2, #2
 8004280:	2103      	movs	r1, #3
 8004282:	68b8      	ldr	r0, [r7, #8]
 8004284:	f7fc fd38 	bl	8000cf8 <GPIO_PinAFConfig>
 8004288:	e046      	b.n	8004318 <QEI4Init+0x174>
 800428a:	2202      	movs	r2, #2
 800428c:	2104      	movs	r1, #4
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f7fc fd32 	bl	8000cf8 <GPIO_PinAFConfig>
 8004294:	e040      	b.n	8004318 <QEI4Init+0x174>
 8004296:	2202      	movs	r2, #2
 8004298:	2105      	movs	r1, #5
 800429a:	68b8      	ldr	r0, [r7, #8]
 800429c:	f7fc fd2c 	bl	8000cf8 <GPIO_PinAFConfig>
 80042a0:	e03a      	b.n	8004318 <QEI4Init+0x174>
 80042a2:	2202      	movs	r2, #2
 80042a4:	2106      	movs	r1, #6
 80042a6:	68b8      	ldr	r0, [r7, #8]
 80042a8:	f7fc fd26 	bl	8000cf8 <GPIO_PinAFConfig>
 80042ac:	e034      	b.n	8004318 <QEI4Init+0x174>
 80042ae:	2202      	movs	r2, #2
 80042b0:	2107      	movs	r1, #7
 80042b2:	68b8      	ldr	r0, [r7, #8]
 80042b4:	f7fc fd20 	bl	8000cf8 <GPIO_PinAFConfig>
 80042b8:	e02e      	b.n	8004318 <QEI4Init+0x174>
 80042ba:	2202      	movs	r2, #2
 80042bc:	2108      	movs	r1, #8
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f7fc fd1a 	bl	8000cf8 <GPIO_PinAFConfig>
 80042c4:	e028      	b.n	8004318 <QEI4Init+0x174>
 80042c6:	2202      	movs	r2, #2
 80042c8:	2109      	movs	r1, #9
 80042ca:	68b8      	ldr	r0, [r7, #8]
 80042cc:	f7fc fd14 	bl	8000cf8 <GPIO_PinAFConfig>
 80042d0:	e022      	b.n	8004318 <QEI4Init+0x174>
 80042d2:	2202      	movs	r2, #2
 80042d4:	210a      	movs	r1, #10
 80042d6:	68b8      	ldr	r0, [r7, #8]
 80042d8:	f7fc fd0e 	bl	8000cf8 <GPIO_PinAFConfig>
 80042dc:	e01c      	b.n	8004318 <QEI4Init+0x174>
 80042de:	2202      	movs	r2, #2
 80042e0:	210b      	movs	r1, #11
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	f7fc fd08 	bl	8000cf8 <GPIO_PinAFConfig>
 80042e8:	e016      	b.n	8004318 <QEI4Init+0x174>
 80042ea:	2202      	movs	r2, #2
 80042ec:	210c      	movs	r1, #12
 80042ee:	68b8      	ldr	r0, [r7, #8]
 80042f0:	f7fc fd02 	bl	8000cf8 <GPIO_PinAFConfig>
 80042f4:	e010      	b.n	8004318 <QEI4Init+0x174>
 80042f6:	2202      	movs	r2, #2
 80042f8:	210d      	movs	r1, #13
 80042fa:	68b8      	ldr	r0, [r7, #8]
 80042fc:	f7fc fcfc 	bl	8000cf8 <GPIO_PinAFConfig>
 8004300:	e00a      	b.n	8004318 <QEI4Init+0x174>
 8004302:	2202      	movs	r2, #2
 8004304:	210e      	movs	r1, #14
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f7fc fcf6 	bl	8000cf8 <GPIO_PinAFConfig>
 800430c:	e004      	b.n	8004318 <QEI4Init+0x174>
 800430e:	2202      	movs	r2, #2
 8004310:	210f      	movs	r1, #15
 8004312:	68b8      	ldr	r0, [r7, #8]
 8004314:	f7fc fcf0 	bl	8000cf8 <GPIO_PinAFConfig>
 8004318:	bf00      	nop
	AFConfig(TIM4,GPIOx_pulseB, GPIO_Pin_pulseB);
 800431a:	8bbb      	ldrh	r3, [r7, #28]
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d05e      	beq.n	80043de <QEI4Init+0x23a>
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d811      	bhi.n	8004348 <QEI4Init+0x1a4>
 8004324:	2b08      	cmp	r3, #8
 8004326:	d042      	beq.n	80043ae <QEI4Init+0x20a>
 8004328:	2b08      	cmp	r3, #8
 800432a:	d806      	bhi.n	800433a <QEI4Init+0x196>
 800432c:	2b02      	cmp	r3, #2
 800432e:	d032      	beq.n	8004396 <QEI4Init+0x1f2>
 8004330:	2b04      	cmp	r3, #4
 8004332:	d036      	beq.n	80043a2 <QEI4Init+0x1fe>
 8004334:	2b01      	cmp	r3, #1
 8004336:	d028      	beq.n	800438a <QEI4Init+0x1e6>
 8004338:	e086      	b.n	8004448 <QEI4Init+0x2a4>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d043      	beq.n	80043c6 <QEI4Init+0x222>
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d047      	beq.n	80043d2 <QEI4Init+0x22e>
 8004342:	2b10      	cmp	r3, #16
 8004344:	d039      	beq.n	80043ba <QEI4Init+0x216>
 8004346:	e07f      	b.n	8004448 <QEI4Init+0x2a4>
 8004348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434c:	d05f      	beq.n	800440e <QEI4Init+0x26a>
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004352:	d809      	bhi.n	8004368 <QEI4Init+0x1c4>
 8004354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004358:	d04d      	beq.n	80043f6 <QEI4Init+0x252>
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d050      	beq.n	8004402 <QEI4Init+0x25e>
 8004360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004364:	d041      	beq.n	80043ea <QEI4Init+0x246>
 8004366:	e06f      	b.n	8004448 <QEI4Init+0x2a4>
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436c:	d05b      	beq.n	8004426 <QEI4Init+0x282>
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	d803      	bhi.n	800437c <QEI4Init+0x1d8>
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004378:	d04f      	beq.n	800441a <QEI4Init+0x276>
 800437a:	e065      	b.n	8004448 <QEI4Init+0x2a4>
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004380:	d057      	beq.n	8004432 <QEI4Init+0x28e>
 8004382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004386:	d05a      	beq.n	800443e <QEI4Init+0x29a>
 8004388:	e05e      	b.n	8004448 <QEI4Init+0x2a4>
 800438a:	2202      	movs	r2, #2
 800438c:	2100      	movs	r1, #0
 800438e:	69b8      	ldr	r0, [r7, #24]
 8004390:	f7fc fcb2 	bl	8000cf8 <GPIO_PinAFConfig>
 8004394:	e058      	b.n	8004448 <QEI4Init+0x2a4>
 8004396:	2202      	movs	r2, #2
 8004398:	2101      	movs	r1, #1
 800439a:	69b8      	ldr	r0, [r7, #24]
 800439c:	f7fc fcac 	bl	8000cf8 <GPIO_PinAFConfig>
 80043a0:	e052      	b.n	8004448 <QEI4Init+0x2a4>
 80043a2:	2202      	movs	r2, #2
 80043a4:	2102      	movs	r1, #2
 80043a6:	69b8      	ldr	r0, [r7, #24]
 80043a8:	f7fc fca6 	bl	8000cf8 <GPIO_PinAFConfig>
 80043ac:	e04c      	b.n	8004448 <QEI4Init+0x2a4>
 80043ae:	2202      	movs	r2, #2
 80043b0:	2103      	movs	r1, #3
 80043b2:	69b8      	ldr	r0, [r7, #24]
 80043b4:	f7fc fca0 	bl	8000cf8 <GPIO_PinAFConfig>
 80043b8:	e046      	b.n	8004448 <QEI4Init+0x2a4>
 80043ba:	2202      	movs	r2, #2
 80043bc:	2104      	movs	r1, #4
 80043be:	69b8      	ldr	r0, [r7, #24]
 80043c0:	f7fc fc9a 	bl	8000cf8 <GPIO_PinAFConfig>
 80043c4:	e040      	b.n	8004448 <QEI4Init+0x2a4>
 80043c6:	2202      	movs	r2, #2
 80043c8:	2105      	movs	r1, #5
 80043ca:	69b8      	ldr	r0, [r7, #24]
 80043cc:	f7fc fc94 	bl	8000cf8 <GPIO_PinAFConfig>
 80043d0:	e03a      	b.n	8004448 <QEI4Init+0x2a4>
 80043d2:	2202      	movs	r2, #2
 80043d4:	2106      	movs	r1, #6
 80043d6:	69b8      	ldr	r0, [r7, #24]
 80043d8:	f7fc fc8e 	bl	8000cf8 <GPIO_PinAFConfig>
 80043dc:	e034      	b.n	8004448 <QEI4Init+0x2a4>
 80043de:	2202      	movs	r2, #2
 80043e0:	2107      	movs	r1, #7
 80043e2:	69b8      	ldr	r0, [r7, #24]
 80043e4:	f7fc fc88 	bl	8000cf8 <GPIO_PinAFConfig>
 80043e8:	e02e      	b.n	8004448 <QEI4Init+0x2a4>
 80043ea:	2202      	movs	r2, #2
 80043ec:	2108      	movs	r1, #8
 80043ee:	69b8      	ldr	r0, [r7, #24]
 80043f0:	f7fc fc82 	bl	8000cf8 <GPIO_PinAFConfig>
 80043f4:	e028      	b.n	8004448 <QEI4Init+0x2a4>
 80043f6:	2202      	movs	r2, #2
 80043f8:	2109      	movs	r1, #9
 80043fa:	69b8      	ldr	r0, [r7, #24]
 80043fc:	f7fc fc7c 	bl	8000cf8 <GPIO_PinAFConfig>
 8004400:	e022      	b.n	8004448 <QEI4Init+0x2a4>
 8004402:	2202      	movs	r2, #2
 8004404:	210a      	movs	r1, #10
 8004406:	69b8      	ldr	r0, [r7, #24]
 8004408:	f7fc fc76 	bl	8000cf8 <GPIO_PinAFConfig>
 800440c:	e01c      	b.n	8004448 <QEI4Init+0x2a4>
 800440e:	2202      	movs	r2, #2
 8004410:	210b      	movs	r1, #11
 8004412:	69b8      	ldr	r0, [r7, #24]
 8004414:	f7fc fc70 	bl	8000cf8 <GPIO_PinAFConfig>
 8004418:	e016      	b.n	8004448 <QEI4Init+0x2a4>
 800441a:	2202      	movs	r2, #2
 800441c:	210c      	movs	r1, #12
 800441e:	69b8      	ldr	r0, [r7, #24]
 8004420:	f7fc fc6a 	bl	8000cf8 <GPIO_PinAFConfig>
 8004424:	e010      	b.n	8004448 <QEI4Init+0x2a4>
 8004426:	2202      	movs	r2, #2
 8004428:	210d      	movs	r1, #13
 800442a:	69b8      	ldr	r0, [r7, #24]
 800442c:	f7fc fc64 	bl	8000cf8 <GPIO_PinAFConfig>
 8004430:	e00a      	b.n	8004448 <QEI4Init+0x2a4>
 8004432:	2202      	movs	r2, #2
 8004434:	210e      	movs	r1, #14
 8004436:	69b8      	ldr	r0, [r7, #24]
 8004438:	f7fc fc5e 	bl	8000cf8 <GPIO_PinAFConfig>
 800443c:	e004      	b.n	8004448 <QEI4Init+0x2a4>
 800443e:	2202      	movs	r2, #2
 8004440:	210f      	movs	r1, #15
 8004442:	69b8      	ldr	r0, [r7, #24]
 8004444:	f7fc fc58 	bl	8000cf8 <GPIO_PinAFConfig>
 8004448:	bf00      	nop

	BIOS_QEI4_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 800444a:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <QEI4Init+0x320>)
 800444c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004450:	605a      	str	r2, [r3, #4]
	BIOS_QEI4_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8004452:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <QEI4Init+0x320>)
 8004454:	2200      	movs	r2, #0
 8004456:	801a      	strh	r2, [r3, #0]
	BIOS_QEI4_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8004458:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <QEI4Init+0x320>)
 800445a:	2200      	movs	r2, #0
 800445c:	811a      	strh	r2, [r3, #8]
	BIOS_QEI4_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800445e:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <QEI4Init+0x320>)
 8004460:	2200      	movs	r2, #0
 8004462:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM4, &BIOS_QEI4_TIM_TimeBaseStructure);
 8004464:	4917      	ldr	r1, [pc, #92]	; (80044c4 <QEI4Init+0x320>)
 8004466:	4818      	ldr	r0, [pc, #96]	; (80044c8 <QEI4Init+0x324>)
 8004468:	f7fd f810 	bl	800148c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 800446c:	2300      	movs	r3, #0
 800446e:	2200      	movs	r2, #0
 8004470:	2103      	movs	r1, #3
 8004472:	4815      	ldr	r0, [pc, #84]	; (80044c8 <QEI4Init+0x324>)
 8004474:	f7fd fb9f 	bl	8001bb6 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8004478:	2101      	movs	r1, #1
 800447a:	4813      	ldr	r0, [pc, #76]	; (80044c8 <QEI4Init+0x324>)
 800447c:	f7fd f872 	bl	8001564 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM4, TIM_IT_Update );
 8004480:	2101      	movs	r1, #1
 8004482:	4811      	ldr	r0, [pc, #68]	; (80044c8 <QEI4Init+0x324>)
 8004484:	f7fd fb86 	bl	8001b94 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8004488:	2201      	movs	r2, #1
 800448a:	2101      	movs	r1, #1
 800448c:	480e      	ldr	r0, [pc, #56]	; (80044c8 <QEI4Init+0x324>)
 800448e:	f7fd fb33 	bl	8001af8 <TIM_ITConfig>

	BIOS_QEI4_NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <QEI4Init+0x328>)
 8004494:	221e      	movs	r2, #30
 8004496:	701a      	strb	r2, [r3, #0]
	BIOS_QEI4_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8004498:	89fb      	ldrh	r3, [r7, #14]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <QEI4Init+0x328>)
 800449e:	705a      	strb	r2, [r3, #1]
	BIOS_QEI4_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 80044a0:	89bb      	ldrh	r3, [r7, #12]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <QEI4Init+0x328>)
 80044a6:	709a      	strb	r2, [r3, #2]
	BIOS_QEI4_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80044a8:	4b08      	ldr	r3, [pc, #32]	; (80044cc <QEI4Init+0x328>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI4_NVIC_InitStructure);
 80044ae:	4807      	ldr	r0, [pc, #28]	; (80044cc <QEI4Init+0x328>)
 80044b0:	f7fb fea6 	bl	8000200 <NVIC_Init>
	TIM_Cmd(TIM4, ENABLE);
 80044b4:	2101      	movs	r1, #1
 80044b6:	4804      	ldr	r0, [pc, #16]	; (80044c8 <QEI4Init+0x324>)
 80044b8:	f7fd f874 	bl	80015a4 <TIM_Cmd>
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	2000054c 	.word	0x2000054c
 80044c8:	40000800 	.word	0x40000800
 80044cc:	20000558 	.word	0x20000558

080044d0 <QEI5Init>:
 * Function Example		: QEI5Init();
 */

void QEI5Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60ba      	str	r2, [r7, #8]
 80044d8:	461a      	mov	r2, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	81fb      	strh	r3, [r7, #14]
 80044de:	460b      	mov	r3, r1
 80044e0:	81bb      	strh	r3, [r7, #12]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 80044e6:	2101      	movs	r1, #1
 80044e8:	2008      	movs	r0, #8
 80044ea:	f7fc ff6f 	bl	80013cc <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 80044ee:	88f9      	ldrh	r1, [r7, #6]
 80044f0:	2301      	movs	r3, #1
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	2302      	movs	r3, #2
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	2300      	movs	r3, #0
 80044fa:	2202      	movs	r2, #2
 80044fc:	68b8      	ldr	r0, [r7, #8]
 80044fe:	f7fd fe5b 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8004502:	8bb9      	ldrh	r1, [r7, #28]
 8004504:	2301      	movs	r3, #1
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	2302      	movs	r3, #2
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2300      	movs	r3, #0
 800450e:	2202      	movs	r2, #2
 8004510:	69b8      	ldr	r0, [r7, #24]
 8004512:	f7fd fe51 	bl	80021b8 <GPIOPinsInit>
	AFConfig(TIM5,GPIOx_pulseA, GPIO_Pin_pulseA);
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	2b80      	cmp	r3, #128	; 0x80
 800451a:	d05e      	beq.n	80045da <QEI5Init+0x10a>
 800451c:	2b80      	cmp	r3, #128	; 0x80
 800451e:	d811      	bhi.n	8004544 <QEI5Init+0x74>
 8004520:	2b08      	cmp	r3, #8
 8004522:	d042      	beq.n	80045aa <QEI5Init+0xda>
 8004524:	2b08      	cmp	r3, #8
 8004526:	d806      	bhi.n	8004536 <QEI5Init+0x66>
 8004528:	2b02      	cmp	r3, #2
 800452a:	d032      	beq.n	8004592 <QEI5Init+0xc2>
 800452c:	2b04      	cmp	r3, #4
 800452e:	d036      	beq.n	800459e <QEI5Init+0xce>
 8004530:	2b01      	cmp	r3, #1
 8004532:	d028      	beq.n	8004586 <QEI5Init+0xb6>
 8004534:	e086      	b.n	8004644 <QEI5Init+0x174>
 8004536:	2b20      	cmp	r3, #32
 8004538:	d043      	beq.n	80045c2 <QEI5Init+0xf2>
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d047      	beq.n	80045ce <QEI5Init+0xfe>
 800453e:	2b10      	cmp	r3, #16
 8004540:	d039      	beq.n	80045b6 <QEI5Init+0xe6>
 8004542:	e07f      	b.n	8004644 <QEI5Init+0x174>
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004548:	d05f      	beq.n	800460a <QEI5Init+0x13a>
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454e:	d809      	bhi.n	8004564 <QEI5Init+0x94>
 8004550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004554:	d04d      	beq.n	80045f2 <QEI5Init+0x122>
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455a:	d050      	beq.n	80045fe <QEI5Init+0x12e>
 800455c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004560:	d041      	beq.n	80045e6 <QEI5Init+0x116>
 8004562:	e06f      	b.n	8004644 <QEI5Init+0x174>
 8004564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004568:	d05b      	beq.n	8004622 <QEI5Init+0x152>
 800456a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456e:	d803      	bhi.n	8004578 <QEI5Init+0xa8>
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d04f      	beq.n	8004616 <QEI5Init+0x146>
 8004576:	e065      	b.n	8004644 <QEI5Init+0x174>
 8004578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457c:	d057      	beq.n	800462e <QEI5Init+0x15e>
 800457e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004582:	d05a      	beq.n	800463a <QEI5Init+0x16a>
 8004584:	e05e      	b.n	8004644 <QEI5Init+0x174>
 8004586:	2202      	movs	r2, #2
 8004588:	2100      	movs	r1, #0
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f7fc fbb4 	bl	8000cf8 <GPIO_PinAFConfig>
 8004590:	e058      	b.n	8004644 <QEI5Init+0x174>
 8004592:	2202      	movs	r2, #2
 8004594:	2101      	movs	r1, #1
 8004596:	68b8      	ldr	r0, [r7, #8]
 8004598:	f7fc fbae 	bl	8000cf8 <GPIO_PinAFConfig>
 800459c:	e052      	b.n	8004644 <QEI5Init+0x174>
 800459e:	2202      	movs	r2, #2
 80045a0:	2102      	movs	r1, #2
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	f7fc fba8 	bl	8000cf8 <GPIO_PinAFConfig>
 80045a8:	e04c      	b.n	8004644 <QEI5Init+0x174>
 80045aa:	2202      	movs	r2, #2
 80045ac:	2103      	movs	r1, #3
 80045ae:	68b8      	ldr	r0, [r7, #8]
 80045b0:	f7fc fba2 	bl	8000cf8 <GPIO_PinAFConfig>
 80045b4:	e046      	b.n	8004644 <QEI5Init+0x174>
 80045b6:	2202      	movs	r2, #2
 80045b8:	2104      	movs	r1, #4
 80045ba:	68b8      	ldr	r0, [r7, #8]
 80045bc:	f7fc fb9c 	bl	8000cf8 <GPIO_PinAFConfig>
 80045c0:	e040      	b.n	8004644 <QEI5Init+0x174>
 80045c2:	2202      	movs	r2, #2
 80045c4:	2105      	movs	r1, #5
 80045c6:	68b8      	ldr	r0, [r7, #8]
 80045c8:	f7fc fb96 	bl	8000cf8 <GPIO_PinAFConfig>
 80045cc:	e03a      	b.n	8004644 <QEI5Init+0x174>
 80045ce:	2202      	movs	r2, #2
 80045d0:	2106      	movs	r1, #6
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7fc fb90 	bl	8000cf8 <GPIO_PinAFConfig>
 80045d8:	e034      	b.n	8004644 <QEI5Init+0x174>
 80045da:	2202      	movs	r2, #2
 80045dc:	2107      	movs	r1, #7
 80045de:	68b8      	ldr	r0, [r7, #8]
 80045e0:	f7fc fb8a 	bl	8000cf8 <GPIO_PinAFConfig>
 80045e4:	e02e      	b.n	8004644 <QEI5Init+0x174>
 80045e6:	2202      	movs	r2, #2
 80045e8:	2108      	movs	r1, #8
 80045ea:	68b8      	ldr	r0, [r7, #8]
 80045ec:	f7fc fb84 	bl	8000cf8 <GPIO_PinAFConfig>
 80045f0:	e028      	b.n	8004644 <QEI5Init+0x174>
 80045f2:	2202      	movs	r2, #2
 80045f4:	2109      	movs	r1, #9
 80045f6:	68b8      	ldr	r0, [r7, #8]
 80045f8:	f7fc fb7e 	bl	8000cf8 <GPIO_PinAFConfig>
 80045fc:	e022      	b.n	8004644 <QEI5Init+0x174>
 80045fe:	2202      	movs	r2, #2
 8004600:	210a      	movs	r1, #10
 8004602:	68b8      	ldr	r0, [r7, #8]
 8004604:	f7fc fb78 	bl	8000cf8 <GPIO_PinAFConfig>
 8004608:	e01c      	b.n	8004644 <QEI5Init+0x174>
 800460a:	2202      	movs	r2, #2
 800460c:	210b      	movs	r1, #11
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f7fc fb72 	bl	8000cf8 <GPIO_PinAFConfig>
 8004614:	e016      	b.n	8004644 <QEI5Init+0x174>
 8004616:	2202      	movs	r2, #2
 8004618:	210c      	movs	r1, #12
 800461a:	68b8      	ldr	r0, [r7, #8]
 800461c:	f7fc fb6c 	bl	8000cf8 <GPIO_PinAFConfig>
 8004620:	e010      	b.n	8004644 <QEI5Init+0x174>
 8004622:	2202      	movs	r2, #2
 8004624:	210d      	movs	r1, #13
 8004626:	68b8      	ldr	r0, [r7, #8]
 8004628:	f7fc fb66 	bl	8000cf8 <GPIO_PinAFConfig>
 800462c:	e00a      	b.n	8004644 <QEI5Init+0x174>
 800462e:	2202      	movs	r2, #2
 8004630:	210e      	movs	r1, #14
 8004632:	68b8      	ldr	r0, [r7, #8]
 8004634:	f7fc fb60 	bl	8000cf8 <GPIO_PinAFConfig>
 8004638:	e004      	b.n	8004644 <QEI5Init+0x174>
 800463a:	2202      	movs	r2, #2
 800463c:	210f      	movs	r1, #15
 800463e:	68b8      	ldr	r0, [r7, #8]
 8004640:	f7fc fb5a 	bl	8000cf8 <GPIO_PinAFConfig>
 8004644:	bf00      	nop
	AFConfig(TIM5,GPIOx_pulseB, GPIO_Pin_pulseB);
 8004646:	8bbb      	ldrh	r3, [r7, #28]
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d05e      	beq.n	800470a <QEI5Init+0x23a>
 800464c:	2b80      	cmp	r3, #128	; 0x80
 800464e:	d811      	bhi.n	8004674 <QEI5Init+0x1a4>
 8004650:	2b08      	cmp	r3, #8
 8004652:	d042      	beq.n	80046da <QEI5Init+0x20a>
 8004654:	2b08      	cmp	r3, #8
 8004656:	d806      	bhi.n	8004666 <QEI5Init+0x196>
 8004658:	2b02      	cmp	r3, #2
 800465a:	d032      	beq.n	80046c2 <QEI5Init+0x1f2>
 800465c:	2b04      	cmp	r3, #4
 800465e:	d036      	beq.n	80046ce <QEI5Init+0x1fe>
 8004660:	2b01      	cmp	r3, #1
 8004662:	d028      	beq.n	80046b6 <QEI5Init+0x1e6>
 8004664:	e086      	b.n	8004774 <QEI5Init+0x2a4>
 8004666:	2b20      	cmp	r3, #32
 8004668:	d043      	beq.n	80046f2 <QEI5Init+0x222>
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d047      	beq.n	80046fe <QEI5Init+0x22e>
 800466e:	2b10      	cmp	r3, #16
 8004670:	d039      	beq.n	80046e6 <QEI5Init+0x216>
 8004672:	e07f      	b.n	8004774 <QEI5Init+0x2a4>
 8004674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004678:	d05f      	beq.n	800473a <QEI5Init+0x26a>
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467e:	d809      	bhi.n	8004694 <QEI5Init+0x1c4>
 8004680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004684:	d04d      	beq.n	8004722 <QEI5Init+0x252>
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468a:	d050      	beq.n	800472e <QEI5Init+0x25e>
 800468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004690:	d041      	beq.n	8004716 <QEI5Init+0x246>
 8004692:	e06f      	b.n	8004774 <QEI5Init+0x2a4>
 8004694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004698:	d05b      	beq.n	8004752 <QEI5Init+0x282>
 800469a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469e:	d803      	bhi.n	80046a8 <QEI5Init+0x1d8>
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a4:	d04f      	beq.n	8004746 <QEI5Init+0x276>
 80046a6:	e065      	b.n	8004774 <QEI5Init+0x2a4>
 80046a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ac:	d057      	beq.n	800475e <QEI5Init+0x28e>
 80046ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b2:	d05a      	beq.n	800476a <QEI5Init+0x29a>
 80046b4:	e05e      	b.n	8004774 <QEI5Init+0x2a4>
 80046b6:	2202      	movs	r2, #2
 80046b8:	2100      	movs	r1, #0
 80046ba:	69b8      	ldr	r0, [r7, #24]
 80046bc:	f7fc fb1c 	bl	8000cf8 <GPIO_PinAFConfig>
 80046c0:	e058      	b.n	8004774 <QEI5Init+0x2a4>
 80046c2:	2202      	movs	r2, #2
 80046c4:	2101      	movs	r1, #1
 80046c6:	69b8      	ldr	r0, [r7, #24]
 80046c8:	f7fc fb16 	bl	8000cf8 <GPIO_PinAFConfig>
 80046cc:	e052      	b.n	8004774 <QEI5Init+0x2a4>
 80046ce:	2202      	movs	r2, #2
 80046d0:	2102      	movs	r1, #2
 80046d2:	69b8      	ldr	r0, [r7, #24]
 80046d4:	f7fc fb10 	bl	8000cf8 <GPIO_PinAFConfig>
 80046d8:	e04c      	b.n	8004774 <QEI5Init+0x2a4>
 80046da:	2202      	movs	r2, #2
 80046dc:	2103      	movs	r1, #3
 80046de:	69b8      	ldr	r0, [r7, #24]
 80046e0:	f7fc fb0a 	bl	8000cf8 <GPIO_PinAFConfig>
 80046e4:	e046      	b.n	8004774 <QEI5Init+0x2a4>
 80046e6:	2202      	movs	r2, #2
 80046e8:	2104      	movs	r1, #4
 80046ea:	69b8      	ldr	r0, [r7, #24]
 80046ec:	f7fc fb04 	bl	8000cf8 <GPIO_PinAFConfig>
 80046f0:	e040      	b.n	8004774 <QEI5Init+0x2a4>
 80046f2:	2202      	movs	r2, #2
 80046f4:	2105      	movs	r1, #5
 80046f6:	69b8      	ldr	r0, [r7, #24]
 80046f8:	f7fc fafe 	bl	8000cf8 <GPIO_PinAFConfig>
 80046fc:	e03a      	b.n	8004774 <QEI5Init+0x2a4>
 80046fe:	2202      	movs	r2, #2
 8004700:	2106      	movs	r1, #6
 8004702:	69b8      	ldr	r0, [r7, #24]
 8004704:	f7fc faf8 	bl	8000cf8 <GPIO_PinAFConfig>
 8004708:	e034      	b.n	8004774 <QEI5Init+0x2a4>
 800470a:	2202      	movs	r2, #2
 800470c:	2107      	movs	r1, #7
 800470e:	69b8      	ldr	r0, [r7, #24]
 8004710:	f7fc faf2 	bl	8000cf8 <GPIO_PinAFConfig>
 8004714:	e02e      	b.n	8004774 <QEI5Init+0x2a4>
 8004716:	2202      	movs	r2, #2
 8004718:	2108      	movs	r1, #8
 800471a:	69b8      	ldr	r0, [r7, #24]
 800471c:	f7fc faec 	bl	8000cf8 <GPIO_PinAFConfig>
 8004720:	e028      	b.n	8004774 <QEI5Init+0x2a4>
 8004722:	2202      	movs	r2, #2
 8004724:	2109      	movs	r1, #9
 8004726:	69b8      	ldr	r0, [r7, #24]
 8004728:	f7fc fae6 	bl	8000cf8 <GPIO_PinAFConfig>
 800472c:	e022      	b.n	8004774 <QEI5Init+0x2a4>
 800472e:	2202      	movs	r2, #2
 8004730:	210a      	movs	r1, #10
 8004732:	69b8      	ldr	r0, [r7, #24]
 8004734:	f7fc fae0 	bl	8000cf8 <GPIO_PinAFConfig>
 8004738:	e01c      	b.n	8004774 <QEI5Init+0x2a4>
 800473a:	2202      	movs	r2, #2
 800473c:	210b      	movs	r1, #11
 800473e:	69b8      	ldr	r0, [r7, #24]
 8004740:	f7fc fada 	bl	8000cf8 <GPIO_PinAFConfig>
 8004744:	e016      	b.n	8004774 <QEI5Init+0x2a4>
 8004746:	2202      	movs	r2, #2
 8004748:	210c      	movs	r1, #12
 800474a:	69b8      	ldr	r0, [r7, #24]
 800474c:	f7fc fad4 	bl	8000cf8 <GPIO_PinAFConfig>
 8004750:	e010      	b.n	8004774 <QEI5Init+0x2a4>
 8004752:	2202      	movs	r2, #2
 8004754:	210d      	movs	r1, #13
 8004756:	69b8      	ldr	r0, [r7, #24]
 8004758:	f7fc face 	bl	8000cf8 <GPIO_PinAFConfig>
 800475c:	e00a      	b.n	8004774 <QEI5Init+0x2a4>
 800475e:	2202      	movs	r2, #2
 8004760:	210e      	movs	r1, #14
 8004762:	69b8      	ldr	r0, [r7, #24]
 8004764:	f7fc fac8 	bl	8000cf8 <GPIO_PinAFConfig>
 8004768:	e004      	b.n	8004774 <QEI5Init+0x2a4>
 800476a:	2202      	movs	r2, #2
 800476c:	210f      	movs	r1, #15
 800476e:	69b8      	ldr	r0, [r7, #24]
 8004770:	f7fc fac2 	bl	8000cf8 <GPIO_PinAFConfig>
 8004774:	bf00      	nop

	BIOS_QEI5_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8004776:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <QEI5Init+0x320>)
 8004778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800477c:	605a      	str	r2, [r3, #4]
	BIOS_QEI5_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800477e:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <QEI5Init+0x320>)
 8004780:	2200      	movs	r2, #0
 8004782:	801a      	strh	r2, [r3, #0]
	BIOS_QEI5_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8004784:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <QEI5Init+0x320>)
 8004786:	2200      	movs	r2, #0
 8004788:	811a      	strh	r2, [r3, #8]
	BIOS_QEI5_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800478a:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <QEI5Init+0x320>)
 800478c:	2200      	movs	r2, #0
 800478e:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM5, &BIOS_QEI5_TIM_TimeBaseStructure);
 8004790:	4917      	ldr	r1, [pc, #92]	; (80047f0 <QEI5Init+0x320>)
 8004792:	4818      	ldr	r0, [pc, #96]	; (80047f4 <QEI5Init+0x324>)
 8004794:	f7fc fe7a 	bl	800148c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM5, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8004798:	2300      	movs	r3, #0
 800479a:	2200      	movs	r2, #0
 800479c:	2103      	movs	r1, #3
 800479e:	4815      	ldr	r0, [pc, #84]	; (80047f4 <QEI5Init+0x324>)
 80047a0:	f7fd fa09 	bl	8001bb6 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM5, ENABLE);
 80047a4:	2101      	movs	r1, #1
 80047a6:	4813      	ldr	r0, [pc, #76]	; (80047f4 <QEI5Init+0x324>)
 80047a8:	f7fc fedc 	bl	8001564 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM5, TIM_IT_Update );
 80047ac:	2101      	movs	r1, #1
 80047ae:	4811      	ldr	r0, [pc, #68]	; (80047f4 <QEI5Init+0x324>)
 80047b0:	f7fd f9f0 	bl	8001b94 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 80047b4:	2201      	movs	r2, #1
 80047b6:	2101      	movs	r1, #1
 80047b8:	480e      	ldr	r0, [pc, #56]	; (80047f4 <QEI5Init+0x324>)
 80047ba:	f7fd f99d 	bl	8001af8 <TIM_ITConfig>

	BIOS_QEI5_NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <QEI5Init+0x328>)
 80047c0:	2232      	movs	r2, #50	; 0x32
 80047c2:	701a      	strb	r2, [r3, #0]
	BIOS_QEI5_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <QEI5Init+0x328>)
 80047ca:	705a      	strb	r2, [r3, #1]
	BIOS_QEI5_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 80047cc:	89bb      	ldrh	r3, [r7, #12]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <QEI5Init+0x328>)
 80047d2:	709a      	strb	r2, [r3, #2]
	BIOS_QEI5_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80047d4:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <QEI5Init+0x328>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI5_NVIC_InitStructure);
 80047da:	4807      	ldr	r0, [pc, #28]	; (80047f8 <QEI5Init+0x328>)
 80047dc:	f7fb fd10 	bl	8000200 <NVIC_Init>
	TIM_Cmd(TIM5, ENABLE);
 80047e0:	2101      	movs	r1, #1
 80047e2:	4804      	ldr	r0, [pc, #16]	; (80047f4 <QEI5Init+0x324>)
 80047e4:	f7fc fede 	bl	80015a4 <TIM_Cmd>
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	2000055c 	.word	0x2000055c
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	20000568 	.word	0x20000568

080047fc <QEI6Init>:
 * Function Example		: QEI6Init(0,1);
 */

void QEI6Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af02      	add	r7, sp, #8
 8004802:	60ba      	str	r2, [r7, #8]
 8004804:	461a      	mov	r2, r3
 8004806:	4603      	mov	r3, r0
 8004808:	81fb      	strh	r3, [r7, #14]
 800480a:	460b      	mov	r3, r1
 800480c:	81bb      	strh	r3, [r7, #12]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8004812:	2101      	movs	r1, #1
 8004814:	2002      	movs	r0, #2
 8004816:	f7fc fdf9 	bl	800140c <RCC_APB2PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 800481a:	88f9      	ldrh	r1, [r7, #6]
 800481c:	2301      	movs	r3, #1
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	2302      	movs	r3, #2
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2300      	movs	r3, #0
 8004826:	2202      	movs	r2, #2
 8004828:	68b8      	ldr	r0, [r7, #8]
 800482a:	f7fd fcc5 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 800482e:	8bb9      	ldrh	r1, [r7, #28]
 8004830:	2301      	movs	r3, #1
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	2302      	movs	r3, #2
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	2300      	movs	r3, #0
 800483a:	2202      	movs	r2, #2
 800483c:	69b8      	ldr	r0, [r7, #24]
 800483e:	f7fd fcbb 	bl	80021b8 <GPIOPinsInit>
	AFConfig(TIM8,GPIOx_pulseA, GPIO_Pin_pulseA);
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	2b80      	cmp	r3, #128	; 0x80
 8004846:	d05e      	beq.n	8004906 <QEI6Init+0x10a>
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d811      	bhi.n	8004870 <QEI6Init+0x74>
 800484c:	2b08      	cmp	r3, #8
 800484e:	d042      	beq.n	80048d6 <QEI6Init+0xda>
 8004850:	2b08      	cmp	r3, #8
 8004852:	d806      	bhi.n	8004862 <QEI6Init+0x66>
 8004854:	2b02      	cmp	r3, #2
 8004856:	d032      	beq.n	80048be <QEI6Init+0xc2>
 8004858:	2b04      	cmp	r3, #4
 800485a:	d036      	beq.n	80048ca <QEI6Init+0xce>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d028      	beq.n	80048b2 <QEI6Init+0xb6>
 8004860:	e086      	b.n	8004970 <QEI6Init+0x174>
 8004862:	2b20      	cmp	r3, #32
 8004864:	d043      	beq.n	80048ee <QEI6Init+0xf2>
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d047      	beq.n	80048fa <QEI6Init+0xfe>
 800486a:	2b10      	cmp	r3, #16
 800486c:	d039      	beq.n	80048e2 <QEI6Init+0xe6>
 800486e:	e07f      	b.n	8004970 <QEI6Init+0x174>
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004874:	d05f      	beq.n	8004936 <QEI6Init+0x13a>
 8004876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487a:	d809      	bhi.n	8004890 <QEI6Init+0x94>
 800487c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004880:	d04d      	beq.n	800491e <QEI6Init+0x122>
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004886:	d050      	beq.n	800492a <QEI6Init+0x12e>
 8004888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488c:	d041      	beq.n	8004912 <QEI6Init+0x116>
 800488e:	e06f      	b.n	8004970 <QEI6Init+0x174>
 8004890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004894:	d05b      	beq.n	800494e <QEI6Init+0x152>
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	d803      	bhi.n	80048a4 <QEI6Init+0xa8>
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a0:	d04f      	beq.n	8004942 <QEI6Init+0x146>
 80048a2:	e065      	b.n	8004970 <QEI6Init+0x174>
 80048a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a8:	d057      	beq.n	800495a <QEI6Init+0x15e>
 80048aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ae:	d05a      	beq.n	8004966 <QEI6Init+0x16a>
 80048b0:	e05e      	b.n	8004970 <QEI6Init+0x174>
 80048b2:	2203      	movs	r2, #3
 80048b4:	2100      	movs	r1, #0
 80048b6:	68b8      	ldr	r0, [r7, #8]
 80048b8:	f7fc fa1e 	bl	8000cf8 <GPIO_PinAFConfig>
 80048bc:	e058      	b.n	8004970 <QEI6Init+0x174>
 80048be:	2203      	movs	r2, #3
 80048c0:	2101      	movs	r1, #1
 80048c2:	68b8      	ldr	r0, [r7, #8]
 80048c4:	f7fc fa18 	bl	8000cf8 <GPIO_PinAFConfig>
 80048c8:	e052      	b.n	8004970 <QEI6Init+0x174>
 80048ca:	2203      	movs	r2, #3
 80048cc:	2102      	movs	r1, #2
 80048ce:	68b8      	ldr	r0, [r7, #8]
 80048d0:	f7fc fa12 	bl	8000cf8 <GPIO_PinAFConfig>
 80048d4:	e04c      	b.n	8004970 <QEI6Init+0x174>
 80048d6:	2203      	movs	r2, #3
 80048d8:	2103      	movs	r1, #3
 80048da:	68b8      	ldr	r0, [r7, #8]
 80048dc:	f7fc fa0c 	bl	8000cf8 <GPIO_PinAFConfig>
 80048e0:	e046      	b.n	8004970 <QEI6Init+0x174>
 80048e2:	2203      	movs	r2, #3
 80048e4:	2104      	movs	r1, #4
 80048e6:	68b8      	ldr	r0, [r7, #8]
 80048e8:	f7fc fa06 	bl	8000cf8 <GPIO_PinAFConfig>
 80048ec:	e040      	b.n	8004970 <QEI6Init+0x174>
 80048ee:	2203      	movs	r2, #3
 80048f0:	2105      	movs	r1, #5
 80048f2:	68b8      	ldr	r0, [r7, #8]
 80048f4:	f7fc fa00 	bl	8000cf8 <GPIO_PinAFConfig>
 80048f8:	e03a      	b.n	8004970 <QEI6Init+0x174>
 80048fa:	2203      	movs	r2, #3
 80048fc:	2106      	movs	r1, #6
 80048fe:	68b8      	ldr	r0, [r7, #8]
 8004900:	f7fc f9fa 	bl	8000cf8 <GPIO_PinAFConfig>
 8004904:	e034      	b.n	8004970 <QEI6Init+0x174>
 8004906:	2203      	movs	r2, #3
 8004908:	2107      	movs	r1, #7
 800490a:	68b8      	ldr	r0, [r7, #8]
 800490c:	f7fc f9f4 	bl	8000cf8 <GPIO_PinAFConfig>
 8004910:	e02e      	b.n	8004970 <QEI6Init+0x174>
 8004912:	2203      	movs	r2, #3
 8004914:	2108      	movs	r1, #8
 8004916:	68b8      	ldr	r0, [r7, #8]
 8004918:	f7fc f9ee 	bl	8000cf8 <GPIO_PinAFConfig>
 800491c:	e028      	b.n	8004970 <QEI6Init+0x174>
 800491e:	2203      	movs	r2, #3
 8004920:	2109      	movs	r1, #9
 8004922:	68b8      	ldr	r0, [r7, #8]
 8004924:	f7fc f9e8 	bl	8000cf8 <GPIO_PinAFConfig>
 8004928:	e022      	b.n	8004970 <QEI6Init+0x174>
 800492a:	2203      	movs	r2, #3
 800492c:	210a      	movs	r1, #10
 800492e:	68b8      	ldr	r0, [r7, #8]
 8004930:	f7fc f9e2 	bl	8000cf8 <GPIO_PinAFConfig>
 8004934:	e01c      	b.n	8004970 <QEI6Init+0x174>
 8004936:	2203      	movs	r2, #3
 8004938:	210b      	movs	r1, #11
 800493a:	68b8      	ldr	r0, [r7, #8]
 800493c:	f7fc f9dc 	bl	8000cf8 <GPIO_PinAFConfig>
 8004940:	e016      	b.n	8004970 <QEI6Init+0x174>
 8004942:	2203      	movs	r2, #3
 8004944:	210c      	movs	r1, #12
 8004946:	68b8      	ldr	r0, [r7, #8]
 8004948:	f7fc f9d6 	bl	8000cf8 <GPIO_PinAFConfig>
 800494c:	e010      	b.n	8004970 <QEI6Init+0x174>
 800494e:	2203      	movs	r2, #3
 8004950:	210d      	movs	r1, #13
 8004952:	68b8      	ldr	r0, [r7, #8]
 8004954:	f7fc f9d0 	bl	8000cf8 <GPIO_PinAFConfig>
 8004958:	e00a      	b.n	8004970 <QEI6Init+0x174>
 800495a:	2203      	movs	r2, #3
 800495c:	210e      	movs	r1, #14
 800495e:	68b8      	ldr	r0, [r7, #8]
 8004960:	f7fc f9ca 	bl	8000cf8 <GPIO_PinAFConfig>
 8004964:	e004      	b.n	8004970 <QEI6Init+0x174>
 8004966:	2203      	movs	r2, #3
 8004968:	210f      	movs	r1, #15
 800496a:	68b8      	ldr	r0, [r7, #8]
 800496c:	f7fc f9c4 	bl	8000cf8 <GPIO_PinAFConfig>
 8004970:	bf00      	nop
	AFConfig(TIM8,GPIOx_pulseB, GPIO_Pin_pulseB);
 8004972:	8bbb      	ldrh	r3, [r7, #28]
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d05e      	beq.n	8004a36 <QEI6Init+0x23a>
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d811      	bhi.n	80049a0 <QEI6Init+0x1a4>
 800497c:	2b08      	cmp	r3, #8
 800497e:	d042      	beq.n	8004a06 <QEI6Init+0x20a>
 8004980:	2b08      	cmp	r3, #8
 8004982:	d806      	bhi.n	8004992 <QEI6Init+0x196>
 8004984:	2b02      	cmp	r3, #2
 8004986:	d032      	beq.n	80049ee <QEI6Init+0x1f2>
 8004988:	2b04      	cmp	r3, #4
 800498a:	d036      	beq.n	80049fa <QEI6Init+0x1fe>
 800498c:	2b01      	cmp	r3, #1
 800498e:	d028      	beq.n	80049e2 <QEI6Init+0x1e6>
 8004990:	e086      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004992:	2b20      	cmp	r3, #32
 8004994:	d043      	beq.n	8004a1e <QEI6Init+0x222>
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d047      	beq.n	8004a2a <QEI6Init+0x22e>
 800499a:	2b10      	cmp	r3, #16
 800499c:	d039      	beq.n	8004a12 <QEI6Init+0x216>
 800499e:	e07f      	b.n	8004aa0 <QEI6Init+0x2a4>
 80049a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a4:	d05f      	beq.n	8004a66 <QEI6Init+0x26a>
 80049a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049aa:	d809      	bhi.n	80049c0 <QEI6Init+0x1c4>
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b0:	d04d      	beq.n	8004a4e <QEI6Init+0x252>
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b6:	d050      	beq.n	8004a5a <QEI6Init+0x25e>
 80049b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049bc:	d041      	beq.n	8004a42 <QEI6Init+0x246>
 80049be:	e06f      	b.n	8004aa0 <QEI6Init+0x2a4>
 80049c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c4:	d05b      	beq.n	8004a7e <QEI6Init+0x282>
 80049c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ca:	d803      	bhi.n	80049d4 <QEI6Init+0x1d8>
 80049cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d0:	d04f      	beq.n	8004a72 <QEI6Init+0x276>
 80049d2:	e065      	b.n	8004aa0 <QEI6Init+0x2a4>
 80049d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d8:	d057      	beq.n	8004a8a <QEI6Init+0x28e>
 80049da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049de:	d05a      	beq.n	8004a96 <QEI6Init+0x29a>
 80049e0:	e05e      	b.n	8004aa0 <QEI6Init+0x2a4>
 80049e2:	2203      	movs	r2, #3
 80049e4:	2100      	movs	r1, #0
 80049e6:	69b8      	ldr	r0, [r7, #24]
 80049e8:	f7fc f986 	bl	8000cf8 <GPIO_PinAFConfig>
 80049ec:	e058      	b.n	8004aa0 <QEI6Init+0x2a4>
 80049ee:	2203      	movs	r2, #3
 80049f0:	2101      	movs	r1, #1
 80049f2:	69b8      	ldr	r0, [r7, #24]
 80049f4:	f7fc f980 	bl	8000cf8 <GPIO_PinAFConfig>
 80049f8:	e052      	b.n	8004aa0 <QEI6Init+0x2a4>
 80049fa:	2203      	movs	r2, #3
 80049fc:	2102      	movs	r1, #2
 80049fe:	69b8      	ldr	r0, [r7, #24]
 8004a00:	f7fc f97a 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a04:	e04c      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a06:	2203      	movs	r2, #3
 8004a08:	2103      	movs	r1, #3
 8004a0a:	69b8      	ldr	r0, [r7, #24]
 8004a0c:	f7fc f974 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a10:	e046      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a12:	2203      	movs	r2, #3
 8004a14:	2104      	movs	r1, #4
 8004a16:	69b8      	ldr	r0, [r7, #24]
 8004a18:	f7fc f96e 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a1c:	e040      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a1e:	2203      	movs	r2, #3
 8004a20:	2105      	movs	r1, #5
 8004a22:	69b8      	ldr	r0, [r7, #24]
 8004a24:	f7fc f968 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a28:	e03a      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	2106      	movs	r1, #6
 8004a2e:	69b8      	ldr	r0, [r7, #24]
 8004a30:	f7fc f962 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a34:	e034      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a36:	2203      	movs	r2, #3
 8004a38:	2107      	movs	r1, #7
 8004a3a:	69b8      	ldr	r0, [r7, #24]
 8004a3c:	f7fc f95c 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a40:	e02e      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a42:	2203      	movs	r2, #3
 8004a44:	2108      	movs	r1, #8
 8004a46:	69b8      	ldr	r0, [r7, #24]
 8004a48:	f7fc f956 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a4c:	e028      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a4e:	2203      	movs	r2, #3
 8004a50:	2109      	movs	r1, #9
 8004a52:	69b8      	ldr	r0, [r7, #24]
 8004a54:	f7fc f950 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a58:	e022      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	210a      	movs	r1, #10
 8004a5e:	69b8      	ldr	r0, [r7, #24]
 8004a60:	f7fc f94a 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a64:	e01c      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a66:	2203      	movs	r2, #3
 8004a68:	210b      	movs	r1, #11
 8004a6a:	69b8      	ldr	r0, [r7, #24]
 8004a6c:	f7fc f944 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a70:	e016      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a72:	2203      	movs	r2, #3
 8004a74:	210c      	movs	r1, #12
 8004a76:	69b8      	ldr	r0, [r7, #24]
 8004a78:	f7fc f93e 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a7c:	e010      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a7e:	2203      	movs	r2, #3
 8004a80:	210d      	movs	r1, #13
 8004a82:	69b8      	ldr	r0, [r7, #24]
 8004a84:	f7fc f938 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a88:	e00a      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	210e      	movs	r1, #14
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f7fc f932 	bl	8000cf8 <GPIO_PinAFConfig>
 8004a94:	e004      	b.n	8004aa0 <QEI6Init+0x2a4>
 8004a96:	2203      	movs	r2, #3
 8004a98:	210f      	movs	r1, #15
 8004a9a:	69b8      	ldr	r0, [r7, #24]
 8004a9c:	f7fc f92c 	bl	8000cf8 <GPIO_PinAFConfig>
 8004aa0:	bf00      	nop

	BIOS_QEI6_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <QEI6Init+0x320>)
 8004aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aa8:	605a      	str	r2, [r3, #4]
	BIOS_QEI6_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8004aaa:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <QEI6Init+0x320>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	801a      	strh	r2, [r3, #0]
	BIOS_QEI6_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <QEI6Init+0x320>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	811a      	strh	r2, [r3, #8]
	BIOS_QEI6_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004ab6:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <QEI6Init+0x320>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM8, &BIOS_QEI6_TIM_TimeBaseStructure);
 8004abc:	4917      	ldr	r1, [pc, #92]	; (8004b1c <QEI6Init+0x320>)
 8004abe:	4818      	ldr	r0, [pc, #96]	; (8004b20 <QEI6Init+0x324>)
 8004ac0:	f7fc fce4 	bl	800148c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM8, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2103      	movs	r1, #3
 8004aca:	4815      	ldr	r0, [pc, #84]	; (8004b20 <QEI6Init+0x324>)
 8004acc:	f7fd f873 	bl	8001bb6 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM8, ENABLE);
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	4813      	ldr	r0, [pc, #76]	; (8004b20 <QEI6Init+0x324>)
 8004ad4:	f7fc fd46 	bl	8001564 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM8, TIM_IT_Update );
 8004ad8:	2101      	movs	r1, #1
 8004ada:	4811      	ldr	r0, [pc, #68]	; (8004b20 <QEI6Init+0x324>)
 8004adc:	f7fd f85a 	bl	8001b94 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM8, TIM_IT_Update, ENABLE);
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	480e      	ldr	r0, [pc, #56]	; (8004b20 <QEI6Init+0x324>)
 8004ae6:	f7fd f807 	bl	8001af8 <TIM_ITConfig>

	BIOS_QEI6_NVIC_InitStructure.NVIC_IRQChannel = TIM8_UP_TIM13_IRQn;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <QEI6Init+0x328>)
 8004aec:	222c      	movs	r2, #44	; 0x2c
 8004aee:	701a      	strb	r2, [r3, #0]
	BIOS_QEI6_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8004af0:	89fb      	ldrh	r3, [r7, #14]
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <QEI6Init+0x328>)
 8004af6:	705a      	strb	r2, [r3, #1]
	BIOS_QEI6_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8004af8:	89bb      	ldrh	r3, [r7, #12]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <QEI6Init+0x328>)
 8004afe:	709a      	strb	r2, [r3, #2]
	BIOS_QEI6_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <QEI6Init+0x328>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI6_NVIC_InitStructure);
 8004b06:	4807      	ldr	r0, [pc, #28]	; (8004b24 <QEI6Init+0x328>)
 8004b08:	f7fb fb7a 	bl	8000200 <NVIC_Init>
	TIM_Cmd(TIM8, ENABLE);
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	4804      	ldr	r0, [pc, #16]	; (8004b20 <QEI6Init+0x324>)
 8004b10:	f7fc fd48 	bl	80015a4 <TIM_Cmd>
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	2000056c 	.word	0x2000056c
 8004b20:	40010400 	.word	0x40010400
 8004b24:	20000578 	.word	0x20000578

08004b28 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	461a      	mov	r2, r3
 8004b34:	460b      	mov	r3, r1
 8004b36:	72fb      	strb	r3, [r7, #11]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	7afa      	ldrb	r2, [r7, #11]
 8004b40:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	893a      	ldrh	r2, [r7, #8]
 8004b4c:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8bba      	ldrh	r2, [r7, #28]
 8004b58:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a3a      	ldr	r2, [r7, #32]
 8004b5e:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b64:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8899      	ldrh	r1, [r3, #4]
 8004b6e:	2301      	movs	r3, #1
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	2302      	movs	r3, #2
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2300      	movs	r3, #0
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f7fd fb1d 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6898      	ldr	r0, [r3, #8]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8999      	ldrh	r1, [r3, #12]
 8004b86:	2301      	movs	r3, #1
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2201      	movs	r2, #1
 8004b92:	f7fd fb11 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6918      	ldr	r0, [r3, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8a99      	ldrh	r1, [r3, #20]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f7fd fb05 	bl	80021b8 <GPIOPinsInit>

}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7d9b      	ldrb	r3, [r3, #22]
 8004bc2:	73bb      	strb	r3, [r7, #14]

	GPIO_WriteBit(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, Bit_RESET);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	889b      	ldrh	r3, [r3, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f7fc f87a 	bl	8000cc8 <GPIO_WriteBit>
	GPIO_WriteBit(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, Bit_RESET);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6898      	ldr	r0, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	899b      	ldrh	r3, [r3, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4619      	mov	r1, r3
 8004be0:	f7fc f872 	bl	8000cc8 <GPIO_WriteBit>

	do{
		out = shiftreg->cast[i].Byte;
 8004be4:	7bba      	ldrb	r2, [r7, #14]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3206      	adds	r2, #6
 8004bea:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8004bee:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	737b      	strb	r3, [r7, #13]
 8004bf4:	e02a      	b.n	8004c4c <SHIFTREGShift+0x96>
			(out & 0x80) ? GPIO_WriteBit(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, Bit_SET) : GPIO_WriteBit(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, Bit_RESET);
 8004bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da08      	bge.n	8004c10 <SHIFTREGShift+0x5a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6918      	ldr	r0, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8a9b      	ldrh	r3, [r3, #20]
 8004c06:	2201      	movs	r2, #1
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f7fc f85d 	bl	8000cc8 <GPIO_WriteBit>
 8004c0e:	e007      	b.n	8004c20 <SHIFTREGShift+0x6a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6918      	ldr	r0, [r3, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8a9b      	ldrh	r3, [r3, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f7fc f854 	bl	8000cc8 <GPIO_WriteBit>
			out <<= 1;
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
			GPIO_WriteBit(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, Bit_SET);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	889b      	ldrh	r3, [r3, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4619      	mov	r1, r3
 8004c32:	f7fc f849 	bl	8000cc8 <GPIO_WriteBit>
			GPIO_WriteBit(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, Bit_RESET);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	889b      	ldrh	r3, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	4619      	mov	r1, r3
 8004c42:	f7fc f841 	bl	8000cc8 <GPIO_WriteBit>
		for (j = 8; j; j--){
 8004c46:	7b7b      	ldrb	r3, [r7, #13]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	737b      	strb	r3, [r7, #13]
 8004c4c:	7b7b      	ldrb	r3, [r7, #13]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1d1      	bne.n	8004bf6 <SHIFTREGShift+0x40>
		}
	}while(i--);
 8004c52:	7bbb      	ldrb	r3, [r7, #14]
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	73ba      	strb	r2, [r7, #14]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1c3      	bne.n	8004be4 <SHIFTREGShift+0x2e>

	GPIO_WriteBit(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, Bit_SET);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6898      	ldr	r0, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	899b      	ldrh	r3, [r3, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	4619      	mov	r1, r3
 8004c68:	f7fc f82e 	bl	8000cc8 <GPIO_WriteBit>
	GPIO_WriteBit(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, Bit_RESET);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6898      	ldr	r0, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	899b      	ldrh	r3, [r3, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	4619      	mov	r1, r3
 8004c78:	f7fc f826 	bl	8000cc8 <GPIO_WriteBit>

}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	6039      	str	r1, [r7, #0]
 8004c8e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8004c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da0b      	bge.n	8004cb0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8004c98:	490d      	ldr	r1, [pc, #52]	; (8004cd0 <NVIC_SetPriority+0x4c>)
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	440b      	add	r3, r1
 8004cac:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8004cae:	e009      	b.n	8004cc4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8004cb0:	4908      	ldr	r1, [pc, #32]	; (8004cd4 <NVIC_SetPriority+0x50>)
 8004cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	e000ed00 	.word	0xe000ed00
 8004cd4:	e000e100 	.word	0xe000e100

08004cd8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce6:	d301      	bcc.n	8004cec <SysTick_Config+0x14>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e011      	b.n	8004d10 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8004cec:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <SysTick_Config+0x40>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8004cf8:	210f      	movs	r1, #15
 8004cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfe:	f7ff ffc1 	bl	8004c84 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <SysTick_Config+0x40>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <SysTick_Config+0x40>)
 8004d0a:	2207      	movs	r2, #7
 8004d0c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <BIOSInit>:
 * Function Return		: None
 * Function Example		: BIOSInit();
 */

void BIOSInit(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
	SystemInit();
 8004d20:	f005 fee6 	bl	800aaf0 <SystemInit>
	SystemCoreClockUpdate();
 8004d24:	f005 ff1a 	bl	800ab5c <SystemCoreClockUpdate>
	RCC_GetClocksFreq(&BIOS_RCC_Clocks);
 8004d28:	4808      	ldr	r0, [pc, #32]	; (8004d4c <BIOSInit+0x30>)
 8004d2a:	f7fc fa87 	bl	800123c <RCC_GetClocksFreq>
	SysTick_Config(BIOS_RCC_Clocks.HCLK_Frequency / 1000);
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <BIOSInit+0x30>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <BIOSInit+0x34>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	099b      	lsrs	r3, r3, #6
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ffcc 	bl	8004cd8 <SysTick_Config>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8004d40:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004d44:	f7fb fa48 	bl	80001d8 <NVIC_PriorityGroupConfig>

}
 8004d48:	bf00      	nop
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	200004e0 	.word	0x200004e0
 8004d50:	10624dd3 	.word	0x10624dd3

08004d54 <BIOSTimingDelay_Decrement>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: BIOSTimingDelay_Decrement();
 */
void BIOSTimingDelay_Decrement(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  if (BIOSTimingDelay != 0x00)
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <BIOSTimingDelay_Decrement+0x20>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <BIOSTimingDelay_Decrement+0x16>
  {
    BIOSTimingDelay--;
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <BIOSTimingDelay_Decrement+0x20>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	4a03      	ldr	r2, [pc, #12]	; (8004d74 <BIOSTimingDelay_Decrement+0x20>)
 8004d68:	6013      	str	r3, [r2, #0]
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	200004dc 	.word	0x200004dc

08004d78 <BIOSTIMx_Init>:
 * 						  BIOSTIMx_Init (TIM2, 1000, 84, 2, 0);  //1ms  interrupt
 * 						  BIOSTIMx_Init (TIM3, 20000, 84, 2, 1); //20ms interrupt
 */

void BIOSTIMx_Init(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler,uint16_t preemptionpriority,uint16_t subpriority)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	817b      	strh	r3, [r7, #10]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	813b      	strh	r3, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
	switch((uint32_t)TIMx)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a6f      	ldr	r2, [pc, #444]	; (8004f54 <BIOSTIMx_Init+0x1dc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	f000 808f 	beq.w	8004eba <BIOSTIMx_Init+0x142>
 8004d9c:	4a6d      	ldr	r2, [pc, #436]	; (8004f54 <BIOSTIMx_Init+0x1dc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d816      	bhi.n	8004dd0 <BIOSTIMx_Init+0x58>
 8004da2:	4a6d      	ldr	r2, [pc, #436]	; (8004f58 <BIOSTIMx_Init+0x1e0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d068      	beq.n	8004e7a <BIOSTIMx_Init+0x102>
 8004da8:	4a6b      	ldr	r2, [pc, #428]	; (8004f58 <BIOSTIMx_Init+0x1e0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d806      	bhi.n	8004dbc <BIOSTIMx_Init+0x44>
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d052      	beq.n	8004e5a <BIOSTIMx_Init+0xe2>
 8004db4:	4a69      	ldr	r2, [pc, #420]	; (8004f5c <BIOSTIMx_Init+0x1e4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d057      	beq.n	8004e6a <BIOSTIMx_Init+0xf2>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_TRG_COM_TIM14_IRQn ;

			break;
		}

		default: break;
 8004dba:	e097      	b.n	8004eec <BIOSTIMx_Init+0x174>
	switch((uint32_t)TIMx)
 8004dbc:	4a68      	ldr	r2, [pc, #416]	; (8004f60 <BIOSTIMx_Init+0x1e8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d06b      	beq.n	8004e9a <BIOSTIMx_Init+0x122>
 8004dc2:	4a68      	ldr	r2, [pc, #416]	; (8004f64 <BIOSTIMx_Init+0x1ec>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d070      	beq.n	8004eaa <BIOSTIMx_Init+0x132>
 8004dc8:	4a67      	ldr	r2, [pc, #412]	; (8004f68 <BIOSTIMx_Init+0x1f0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d05d      	beq.n	8004e8a <BIOSTIMx_Init+0x112>
		default: break;
 8004dce:	e08d      	b.n	8004eec <BIOSTIMx_Init+0x174>
	switch((uint32_t)TIMx)
 8004dd0:	4a66      	ldr	r2, [pc, #408]	; (8004f6c <BIOSTIMx_Init+0x1f4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01e      	beq.n	8004e14 <BIOSTIMx_Init+0x9c>
 8004dd6:	4a65      	ldr	r2, [pc, #404]	; (8004f6c <BIOSTIMx_Init+0x1f4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d809      	bhi.n	8004df0 <BIOSTIMx_Init+0x78>
 8004ddc:	4a64      	ldr	r2, [pc, #400]	; (8004f70 <BIOSTIMx_Init+0x1f8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d07b      	beq.n	8004eda <BIOSTIMx_Init+0x162>
 8004de2:	4a64      	ldr	r2, [pc, #400]	; (8004f74 <BIOSTIMx_Init+0x1fc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00d      	beq.n	8004e04 <BIOSTIMx_Init+0x8c>
 8004de8:	4a63      	ldr	r2, [pc, #396]	; (8004f78 <BIOSTIMx_Init+0x200>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d06d      	beq.n	8004eca <BIOSTIMx_Init+0x152>
		default: break;
 8004dee:	e07d      	b.n	8004eec <BIOSTIMx_Init+0x174>
	switch((uint32_t)TIMx)
 8004df0:	4a62      	ldr	r2, [pc, #392]	; (8004f7c <BIOSTIMx_Init+0x204>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01f      	beq.n	8004e36 <BIOSTIMx_Init+0xbe>
 8004df6:	4a62      	ldr	r2, [pc, #392]	; (8004f80 <BIOSTIMx_Init+0x208>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d025      	beq.n	8004e48 <BIOSTIMx_Init+0xd0>
 8004dfc:	4a61      	ldr	r2, [pc, #388]	; (8004f84 <BIOSTIMx_Init+0x20c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d010      	beq.n	8004e24 <BIOSTIMx_Init+0xac>
		default: break;
 8004e02:	e073      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004e04:	2101      	movs	r1, #1
 8004e06:	2001      	movs	r0, #1
 8004e08:	f7fc fb00 	bl	800140c <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn ;
 8004e0c:	4b5e      	ldr	r3, [pc, #376]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e0e:	2219      	movs	r2, #25
 8004e10:	701a      	strb	r2, [r3, #0]
			break;
 8004e12:	e06b      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8004e14:	2101      	movs	r1, #1
 8004e16:	2002      	movs	r0, #2
 8004e18:	f7fc faf8 	bl	800140c <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_UP_TIM13_IRQn ;
 8004e1c:	4b5a      	ldr	r3, [pc, #360]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e1e:	222c      	movs	r2, #44	; 0x2c
 8004e20:	701a      	strb	r2, [r3, #0]
			break;
 8004e22:	e063      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
 8004e24:	2101      	movs	r1, #1
 8004e26:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004e2a:	f7fc faef 	bl	800140c <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM1_BRK_TIM9_IRQn ;
 8004e2e:	4b56      	ldr	r3, [pc, #344]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e30:	2218      	movs	r2, #24
 8004e32:	701a      	strb	r2, [r3, #0]
			break;
 8004e34:	e05a      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 8004e36:	2101      	movs	r1, #1
 8004e38:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004e3c:	f7fc fae6 	bl	800140c <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn ;
 8004e40:	4b51      	ldr	r3, [pc, #324]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e42:	2219      	movs	r2, #25
 8004e44:	701a      	strb	r2, [r3, #0]
			break;
 8004e46:	e051      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM11, ENABLE);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004e4e:	f7fc fadd 	bl	800140c <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM1_TRG_COM_TIM11_IRQn ;
 8004e52:	4b4d      	ldr	r3, [pc, #308]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e54:	221a      	movs	r2, #26
 8004e56:	701a      	strb	r2, [r3, #0]
			break;
 8004e58:	e048      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f7fc fab5 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn ;
 8004e62:	4b49      	ldr	r3, [pc, #292]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e64:	221c      	movs	r2, #28
 8004e66:	701a      	strb	r2, [r3, #0]
			break;
 8004e68:	e040      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	f7fc faad 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn ;
 8004e72:	4b45      	ldr	r3, [pc, #276]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e74:	221d      	movs	r2, #29
 8004e76:	701a      	strb	r2, [r3, #0]
			break;
 8004e78:	e038      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	2004      	movs	r0, #4
 8004e7e:	f7fc faa5 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn ;
 8004e82:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e84:	221e      	movs	r2, #30
 8004e86:	701a      	strb	r2, [r3, #0]
			break;
 8004e88:	e030      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	2008      	movs	r0, #8
 8004e8e:	f7fc fa9d 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn ;
 8004e92:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004e94:	2232      	movs	r2, #50	; 0x32
 8004e96:	701a      	strb	r2, [r3, #0]
			break;
 8004e98:	e028      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	2010      	movs	r0, #16
 8004e9e:	f7fc fa95 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn ;
 8004ea2:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004ea4:	2236      	movs	r2, #54	; 0x36
 8004ea6:	701a      	strb	r2, [r3, #0]
			break;
 8004ea8:	e020      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8004eaa:	2101      	movs	r1, #1
 8004eac:	2020      	movs	r0, #32
 8004eae:	f7fc fa8d 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn ;
 8004eb2:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004eb4:	2237      	movs	r2, #55	; 0x37
 8004eb6:	701a      	strb	r2, [r3, #0]
			break;
 8004eb8:	e018      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 8004eba:	2101      	movs	r1, #1
 8004ebc:	2040      	movs	r0, #64	; 0x40
 8004ebe:	f7fc fa85 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_BRK_TIM12_IRQn ;
 8004ec2:	4b31      	ldr	r3, [pc, #196]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004ec4:	222b      	movs	r2, #43	; 0x2b
 8004ec6:	701a      	strb	r2, [r3, #0]
			break;
 8004ec8:	e010      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13, ENABLE);
 8004eca:	2101      	movs	r1, #1
 8004ecc:	2080      	movs	r0, #128	; 0x80
 8004ece:	f7fc fa7d 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_UP_TIM13_IRQn ;
 8004ed2:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004ed4:	222c      	movs	r2, #44	; 0x2c
 8004ed6:	701a      	strb	r2, [r3, #0]
			break;
 8004ed8:	e008      	b.n	8004eec <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 8004eda:	2101      	movs	r1, #1
 8004edc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ee0:	f7fc fa74 	bl	80013cc <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_TRG_COM_TIM14_IRQn ;
 8004ee4:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004ee6:	222d      	movs	r2, #45	; 0x2d
 8004ee8:	701a      	strb	r2, [r3, #0]
			break;
 8004eea:	bf00      	nop
	}

	//Initialize TIMx
	BIOS_TIM_TimeBaseStructure.TIM_Period = period - 1;
 8004eec:	897b      	ldrh	r3, [r7, #10]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <BIOSTIMx_Init+0x214>)
 8004ef4:	605a      	str	r2, [r3, #4]
	BIOS_TIM_TimeBaseStructure.TIM_Prescaler = prescaler - 1;
 8004ef6:	893b      	ldrh	r3, [r7, #8]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	4b23      	ldr	r3, [pc, #140]	; (8004f8c <BIOSTIMx_Init+0x214>)
 8004efe:	801a      	strh	r2, [r3, #0]
	BIOS_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8004f00:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <BIOSTIMx_Init+0x214>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	811a      	strh	r2, [r3, #8]
	BIOS_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004f06:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <BIOSTIMx_Init+0x214>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIMx, &BIOS_TIM_TimeBaseStructure);
 8004f0c:	491f      	ldr	r1, [pc, #124]	; (8004f8c <BIOSTIMx_Init+0x214>)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f7fc fabc 	bl	800148c <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 8004f14:	2101      	movs	r1, #1
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7fc fe3c 	bl	8001b94 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMx,TIM_IT_Update,ENABLE);
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	2101      	movs	r1, #1
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7fc fde9 	bl	8001af8 <TIM_ITConfig>
	//NVIC Configuration
	BIOS_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004f2c:	705a      	strb	r2, [r3, #1]
	BIOS_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8004f2e:	8b3b      	ldrh	r3, [r7, #24]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004f34:	709a      	strb	r2, [r3, #2]
	BIOS_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_NVIC_InitStructure);
 8004f3c:	4812      	ldr	r0, [pc, #72]	; (8004f88 <BIOSTIMx_Init+0x210>)
 8004f3e:	f7fb f95f 	bl	8000200 <NVIC_Init>
	//Enable TIMx
	TIM_Cmd(TIMx,ENABLE);
 8004f42:	2101      	movs	r1, #1
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7fc fb2d 	bl	80015a4 <TIM_Cmd>
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40001800 	.word	0x40001800
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40001000 	.word	0x40001000
 8004f64:	40001400 	.word	0x40001400
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40010400 	.word	0x40010400
 8004f70:	40002000 	.word	0x40002000
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40001c00 	.word	0x40001c00
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40014000 	.word	0x40014000
 8004f88:	20000514 	.word	0x20000514
 8004f8c:	20000508 	.word	0x20000508

08004f90 <UART2Init>:
 * Function Example		: UART2Init(115200, ENABLE, 0, 0, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1);
 */

void UART2Init(uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_Tx, uint16_t GPIO_Pin_Tx, GPIO_TypeDef* GPIOx_Rx, uint16_t GPIO_Pin_Rx)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	72fb      	strb	r3, [r7, #11]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	813b      	strh	r3, [r7, #8]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8004faa:	2101      	movs	r1, #1
 8004fac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004fb0:	f7fc fa0c 	bl	80013cc <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_Tx, GPIO_Pin_Tx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 8004fb4:	8bb9      	ldrh	r1, [r7, #28]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	2302      	movs	r3, #2
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	69b8      	ldr	r0, [r7, #24]
 8004fc4:	f7fd f8f8 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_Rx, GPIO_Pin_Rx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 8004fc8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	2302      	movs	r3, #2
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	6a38      	ldr	r0, [r7, #32]
 8004fd8:	f7fd f8ee 	bl	80021b8 <GPIOPinsInit>
	AFConfig(USART2,GPIOx_Tx, GPIO_Pin_Tx);
 8004fdc:	8bbb      	ldrh	r3, [r7, #28]
 8004fde:	2b80      	cmp	r3, #128	; 0x80
 8004fe0:	d05e      	beq.n	80050a0 <UART2Init+0x110>
 8004fe2:	2b80      	cmp	r3, #128	; 0x80
 8004fe4:	d811      	bhi.n	800500a <UART2Init+0x7a>
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d042      	beq.n	8005070 <UART2Init+0xe0>
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d806      	bhi.n	8004ffc <UART2Init+0x6c>
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d032      	beq.n	8005058 <UART2Init+0xc8>
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d036      	beq.n	8005064 <UART2Init+0xd4>
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d028      	beq.n	800504c <UART2Init+0xbc>
 8004ffa:	e086      	b.n	800510a <UART2Init+0x17a>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d043      	beq.n	8005088 <UART2Init+0xf8>
 8005000:	2b40      	cmp	r3, #64	; 0x40
 8005002:	d047      	beq.n	8005094 <UART2Init+0x104>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d039      	beq.n	800507c <UART2Init+0xec>
 8005008:	e07f      	b.n	800510a <UART2Init+0x17a>
 800500a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500e:	d05f      	beq.n	80050d0 <UART2Init+0x140>
 8005010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005014:	d809      	bhi.n	800502a <UART2Init+0x9a>
 8005016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800501a:	d04d      	beq.n	80050b8 <UART2Init+0x128>
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d050      	beq.n	80050c4 <UART2Init+0x134>
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d041      	beq.n	80050ac <UART2Init+0x11c>
 8005028:	e06f      	b.n	800510a <UART2Init+0x17a>
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502e:	d05b      	beq.n	80050e8 <UART2Init+0x158>
 8005030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005034:	d803      	bhi.n	800503e <UART2Init+0xae>
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	d04f      	beq.n	80050dc <UART2Init+0x14c>
 800503c:	e065      	b.n	800510a <UART2Init+0x17a>
 800503e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005042:	d057      	beq.n	80050f4 <UART2Init+0x164>
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d05a      	beq.n	8005100 <UART2Init+0x170>
 800504a:	e05e      	b.n	800510a <UART2Init+0x17a>
 800504c:	2207      	movs	r2, #7
 800504e:	2100      	movs	r1, #0
 8005050:	69b8      	ldr	r0, [r7, #24]
 8005052:	f7fb fe51 	bl	8000cf8 <GPIO_PinAFConfig>
 8005056:	e058      	b.n	800510a <UART2Init+0x17a>
 8005058:	2207      	movs	r2, #7
 800505a:	2101      	movs	r1, #1
 800505c:	69b8      	ldr	r0, [r7, #24]
 800505e:	f7fb fe4b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005062:	e052      	b.n	800510a <UART2Init+0x17a>
 8005064:	2207      	movs	r2, #7
 8005066:	2102      	movs	r1, #2
 8005068:	69b8      	ldr	r0, [r7, #24]
 800506a:	f7fb fe45 	bl	8000cf8 <GPIO_PinAFConfig>
 800506e:	e04c      	b.n	800510a <UART2Init+0x17a>
 8005070:	2207      	movs	r2, #7
 8005072:	2103      	movs	r1, #3
 8005074:	69b8      	ldr	r0, [r7, #24]
 8005076:	f7fb fe3f 	bl	8000cf8 <GPIO_PinAFConfig>
 800507a:	e046      	b.n	800510a <UART2Init+0x17a>
 800507c:	2207      	movs	r2, #7
 800507e:	2104      	movs	r1, #4
 8005080:	69b8      	ldr	r0, [r7, #24]
 8005082:	f7fb fe39 	bl	8000cf8 <GPIO_PinAFConfig>
 8005086:	e040      	b.n	800510a <UART2Init+0x17a>
 8005088:	2207      	movs	r2, #7
 800508a:	2105      	movs	r1, #5
 800508c:	69b8      	ldr	r0, [r7, #24]
 800508e:	f7fb fe33 	bl	8000cf8 <GPIO_PinAFConfig>
 8005092:	e03a      	b.n	800510a <UART2Init+0x17a>
 8005094:	2207      	movs	r2, #7
 8005096:	2106      	movs	r1, #6
 8005098:	69b8      	ldr	r0, [r7, #24]
 800509a:	f7fb fe2d 	bl	8000cf8 <GPIO_PinAFConfig>
 800509e:	e034      	b.n	800510a <UART2Init+0x17a>
 80050a0:	2207      	movs	r2, #7
 80050a2:	2107      	movs	r1, #7
 80050a4:	69b8      	ldr	r0, [r7, #24]
 80050a6:	f7fb fe27 	bl	8000cf8 <GPIO_PinAFConfig>
 80050aa:	e02e      	b.n	800510a <UART2Init+0x17a>
 80050ac:	2207      	movs	r2, #7
 80050ae:	2108      	movs	r1, #8
 80050b0:	69b8      	ldr	r0, [r7, #24]
 80050b2:	f7fb fe21 	bl	8000cf8 <GPIO_PinAFConfig>
 80050b6:	e028      	b.n	800510a <UART2Init+0x17a>
 80050b8:	2207      	movs	r2, #7
 80050ba:	2109      	movs	r1, #9
 80050bc:	69b8      	ldr	r0, [r7, #24]
 80050be:	f7fb fe1b 	bl	8000cf8 <GPIO_PinAFConfig>
 80050c2:	e022      	b.n	800510a <UART2Init+0x17a>
 80050c4:	2207      	movs	r2, #7
 80050c6:	210a      	movs	r1, #10
 80050c8:	69b8      	ldr	r0, [r7, #24]
 80050ca:	f7fb fe15 	bl	8000cf8 <GPIO_PinAFConfig>
 80050ce:	e01c      	b.n	800510a <UART2Init+0x17a>
 80050d0:	2207      	movs	r2, #7
 80050d2:	210b      	movs	r1, #11
 80050d4:	69b8      	ldr	r0, [r7, #24]
 80050d6:	f7fb fe0f 	bl	8000cf8 <GPIO_PinAFConfig>
 80050da:	e016      	b.n	800510a <UART2Init+0x17a>
 80050dc:	2207      	movs	r2, #7
 80050de:	210c      	movs	r1, #12
 80050e0:	69b8      	ldr	r0, [r7, #24]
 80050e2:	f7fb fe09 	bl	8000cf8 <GPIO_PinAFConfig>
 80050e6:	e010      	b.n	800510a <UART2Init+0x17a>
 80050e8:	2207      	movs	r2, #7
 80050ea:	210d      	movs	r1, #13
 80050ec:	69b8      	ldr	r0, [r7, #24]
 80050ee:	f7fb fe03 	bl	8000cf8 <GPIO_PinAFConfig>
 80050f2:	e00a      	b.n	800510a <UART2Init+0x17a>
 80050f4:	2207      	movs	r2, #7
 80050f6:	210e      	movs	r1, #14
 80050f8:	69b8      	ldr	r0, [r7, #24]
 80050fa:	f7fb fdfd 	bl	8000cf8 <GPIO_PinAFConfig>
 80050fe:	e004      	b.n	800510a <UART2Init+0x17a>
 8005100:	2207      	movs	r2, #7
 8005102:	210f      	movs	r1, #15
 8005104:	69b8      	ldr	r0, [r7, #24]
 8005106:	f7fb fdf7 	bl	8000cf8 <GPIO_PinAFConfig>
 800510a:	bf00      	nop
	AFConfig(USART2,GPIOx_Rx, GPIO_Pin_Rx);
 800510c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d05e      	beq.n	80051d0 <UART2Init+0x240>
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d811      	bhi.n	800513a <UART2Init+0x1aa>
 8005116:	2b08      	cmp	r3, #8
 8005118:	d042      	beq.n	80051a0 <UART2Init+0x210>
 800511a:	2b08      	cmp	r3, #8
 800511c:	d806      	bhi.n	800512c <UART2Init+0x19c>
 800511e:	2b02      	cmp	r3, #2
 8005120:	d032      	beq.n	8005188 <UART2Init+0x1f8>
 8005122:	2b04      	cmp	r3, #4
 8005124:	d036      	beq.n	8005194 <UART2Init+0x204>
 8005126:	2b01      	cmp	r3, #1
 8005128:	d028      	beq.n	800517c <UART2Init+0x1ec>
 800512a:	e086      	b.n	800523a <UART2Init+0x2aa>
 800512c:	2b20      	cmp	r3, #32
 800512e:	d043      	beq.n	80051b8 <UART2Init+0x228>
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d047      	beq.n	80051c4 <UART2Init+0x234>
 8005134:	2b10      	cmp	r3, #16
 8005136:	d039      	beq.n	80051ac <UART2Init+0x21c>
 8005138:	e07f      	b.n	800523a <UART2Init+0x2aa>
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d05f      	beq.n	8005200 <UART2Init+0x270>
 8005140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005144:	d809      	bhi.n	800515a <UART2Init+0x1ca>
 8005146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514a:	d04d      	beq.n	80051e8 <UART2Init+0x258>
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005150:	d050      	beq.n	80051f4 <UART2Init+0x264>
 8005152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005156:	d041      	beq.n	80051dc <UART2Init+0x24c>
 8005158:	e06f      	b.n	800523a <UART2Init+0x2aa>
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515e:	d05b      	beq.n	8005218 <UART2Init+0x288>
 8005160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005164:	d803      	bhi.n	800516e <UART2Init+0x1de>
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	d04f      	beq.n	800520c <UART2Init+0x27c>
 800516c:	e065      	b.n	800523a <UART2Init+0x2aa>
 800516e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005172:	d057      	beq.n	8005224 <UART2Init+0x294>
 8005174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005178:	d05a      	beq.n	8005230 <UART2Init+0x2a0>
 800517a:	e05e      	b.n	800523a <UART2Init+0x2aa>
 800517c:	2207      	movs	r2, #7
 800517e:	2100      	movs	r1, #0
 8005180:	6a38      	ldr	r0, [r7, #32]
 8005182:	f7fb fdb9 	bl	8000cf8 <GPIO_PinAFConfig>
 8005186:	e058      	b.n	800523a <UART2Init+0x2aa>
 8005188:	2207      	movs	r2, #7
 800518a:	2101      	movs	r1, #1
 800518c:	6a38      	ldr	r0, [r7, #32]
 800518e:	f7fb fdb3 	bl	8000cf8 <GPIO_PinAFConfig>
 8005192:	e052      	b.n	800523a <UART2Init+0x2aa>
 8005194:	2207      	movs	r2, #7
 8005196:	2102      	movs	r1, #2
 8005198:	6a38      	ldr	r0, [r7, #32]
 800519a:	f7fb fdad 	bl	8000cf8 <GPIO_PinAFConfig>
 800519e:	e04c      	b.n	800523a <UART2Init+0x2aa>
 80051a0:	2207      	movs	r2, #7
 80051a2:	2103      	movs	r1, #3
 80051a4:	6a38      	ldr	r0, [r7, #32]
 80051a6:	f7fb fda7 	bl	8000cf8 <GPIO_PinAFConfig>
 80051aa:	e046      	b.n	800523a <UART2Init+0x2aa>
 80051ac:	2207      	movs	r2, #7
 80051ae:	2104      	movs	r1, #4
 80051b0:	6a38      	ldr	r0, [r7, #32]
 80051b2:	f7fb fda1 	bl	8000cf8 <GPIO_PinAFConfig>
 80051b6:	e040      	b.n	800523a <UART2Init+0x2aa>
 80051b8:	2207      	movs	r2, #7
 80051ba:	2105      	movs	r1, #5
 80051bc:	6a38      	ldr	r0, [r7, #32]
 80051be:	f7fb fd9b 	bl	8000cf8 <GPIO_PinAFConfig>
 80051c2:	e03a      	b.n	800523a <UART2Init+0x2aa>
 80051c4:	2207      	movs	r2, #7
 80051c6:	2106      	movs	r1, #6
 80051c8:	6a38      	ldr	r0, [r7, #32]
 80051ca:	f7fb fd95 	bl	8000cf8 <GPIO_PinAFConfig>
 80051ce:	e034      	b.n	800523a <UART2Init+0x2aa>
 80051d0:	2207      	movs	r2, #7
 80051d2:	2107      	movs	r1, #7
 80051d4:	6a38      	ldr	r0, [r7, #32]
 80051d6:	f7fb fd8f 	bl	8000cf8 <GPIO_PinAFConfig>
 80051da:	e02e      	b.n	800523a <UART2Init+0x2aa>
 80051dc:	2207      	movs	r2, #7
 80051de:	2108      	movs	r1, #8
 80051e0:	6a38      	ldr	r0, [r7, #32]
 80051e2:	f7fb fd89 	bl	8000cf8 <GPIO_PinAFConfig>
 80051e6:	e028      	b.n	800523a <UART2Init+0x2aa>
 80051e8:	2207      	movs	r2, #7
 80051ea:	2109      	movs	r1, #9
 80051ec:	6a38      	ldr	r0, [r7, #32]
 80051ee:	f7fb fd83 	bl	8000cf8 <GPIO_PinAFConfig>
 80051f2:	e022      	b.n	800523a <UART2Init+0x2aa>
 80051f4:	2207      	movs	r2, #7
 80051f6:	210a      	movs	r1, #10
 80051f8:	6a38      	ldr	r0, [r7, #32]
 80051fa:	f7fb fd7d 	bl	8000cf8 <GPIO_PinAFConfig>
 80051fe:	e01c      	b.n	800523a <UART2Init+0x2aa>
 8005200:	2207      	movs	r2, #7
 8005202:	210b      	movs	r1, #11
 8005204:	6a38      	ldr	r0, [r7, #32]
 8005206:	f7fb fd77 	bl	8000cf8 <GPIO_PinAFConfig>
 800520a:	e016      	b.n	800523a <UART2Init+0x2aa>
 800520c:	2207      	movs	r2, #7
 800520e:	210c      	movs	r1, #12
 8005210:	6a38      	ldr	r0, [r7, #32]
 8005212:	f7fb fd71 	bl	8000cf8 <GPIO_PinAFConfig>
 8005216:	e010      	b.n	800523a <UART2Init+0x2aa>
 8005218:	2207      	movs	r2, #7
 800521a:	210d      	movs	r1, #13
 800521c:	6a38      	ldr	r0, [r7, #32]
 800521e:	f7fb fd6b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005222:	e00a      	b.n	800523a <UART2Init+0x2aa>
 8005224:	2207      	movs	r2, #7
 8005226:	210e      	movs	r1, #14
 8005228:	6a38      	ldr	r0, [r7, #32]
 800522a:	f7fb fd65 	bl	8000cf8 <GPIO_PinAFConfig>
 800522e:	e004      	b.n	800523a <UART2Init+0x2aa>
 8005230:	2207      	movs	r2, #7
 8005232:	210f      	movs	r1, #15
 8005234:	6a38      	ldr	r0, [r7, #32]
 8005236:	f7fb fd5f 	bl	8000cf8 <GPIO_PinAFConfig>
 800523a:	bf00      	nop

	BIOS_USART_InitStructure.USART_BaudRate            = baudrate;
 800523c:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <UART2Init+0x318>)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6013      	str	r3, [r2, #0]
	BIOS_USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 8005242:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <UART2Init+0x318>)
 8005244:	2200      	movs	r2, #0
 8005246:	809a      	strh	r2, [r3, #4]
	BIOS_USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8005248:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <UART2Init+0x318>)
 800524a:	2200      	movs	r2, #0
 800524c:	80da      	strh	r2, [r3, #6]
	BIOS_USART_InitStructure.USART_Parity              = USART_Parity_No;
 800524e:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <UART2Init+0x318>)
 8005250:	2200      	movs	r2, #0
 8005252:	811a      	strh	r2, [r3, #8]
	BIOS_USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005254:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <UART2Init+0x318>)
 8005256:	2200      	movs	r2, #0
 8005258:	819a      	strh	r2, [r3, #12]
	BIOS_USART_InitStructure.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <UART2Init+0x318>)
 800525c:	220c      	movs	r2, #12
 800525e:	815a      	strh	r2, [r3, #10]
	USART_Init(USART2, &BIOS_USART_InitStructure);
 8005260:	4911      	ldr	r1, [pc, #68]	; (80052a8 <UART2Init+0x318>)
 8005262:	4812      	ldr	r0, [pc, #72]	; (80052ac <UART2Init+0x31c>)
 8005264:	f7fc fcf4 	bl	8001c50 <USART_Init>

	USART_ITConfig(USART2, USART_IT_RXNE, rxstate);
 8005268:	7afb      	ldrb	r3, [r7, #11]
 800526a:	461a      	mov	r2, r3
 800526c:	f240 5125 	movw	r1, #1317	; 0x525
 8005270:	480e      	ldr	r0, [pc, #56]	; (80052ac <UART2Init+0x31c>)
 8005272:	f7fc fde9 	bl	8001e48 <USART_ITConfig>

	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8005276:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <UART2Init+0x320>)
 8005278:	2226      	movs	r2, #38	; 0x26
 800527a:	701a      	strb	r2, [r3, #0]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 800527c:	893b      	ldrh	r3, [r7, #8]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <UART2Init+0x320>)
 8005282:	705a      	strb	r2, [r3, #1]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <UART2Init+0x320>)
 800528a:	709a      	strb	r2, [r3, #2]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800528c:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <UART2Init+0x320>)
 800528e:	2201      	movs	r2, #1
 8005290:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_UART_NVIC_InitStructure);
 8005292:	4807      	ldr	r0, [pc, #28]	; (80052b0 <UART2Init+0x320>)
 8005294:	f7fa ffb4 	bl	8000200 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8005298:	2101      	movs	r1, #1
 800529a:	4804      	ldr	r0, [pc, #16]	; (80052ac <UART2Init+0x31c>)
 800529c:	f7fc fd92 	bl	8001dc4 <USART_Cmd>
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	200004f8 	.word	0x200004f8
 80052ac:	40004400 	.word	0x40004400
 80052b0:	20000518 	.word	0x20000518

080052b4 <UART3Init>:
 * Function Example		: UART3Init(115200, ENABLE, 0, 0, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1);
 */

void UART3Init(uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_Tx, uint16_t GPIO_Pin_Tx, GPIO_TypeDef* GPIOx_Rx, uint16_t GPIO_Pin_Rx)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	72fb      	strb	r3, [r7, #11]
 80052c6:	460b      	mov	r3, r1
 80052c8:	813b      	strh	r3, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80052ce:	2101      	movs	r1, #1
 80052d0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80052d4:	f7fc f87a 	bl	80013cc <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_Tx, GPIO_Pin_Tx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 80052d8:	8bb9      	ldrh	r1, [r7, #28]
 80052da:	2300      	movs	r3, #0
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	2302      	movs	r3, #2
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	2202      	movs	r2, #2
 80052e6:	69b8      	ldr	r0, [r7, #24]
 80052e8:	f7fc ff66 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_Rx, GPIO_Pin_Rx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 80052ec:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80052ee:	2300      	movs	r3, #0
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	2302      	movs	r3, #2
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	2202      	movs	r2, #2
 80052fa:	6a38      	ldr	r0, [r7, #32]
 80052fc:	f7fc ff5c 	bl	80021b8 <GPIOPinsInit>
	AFConfig(USART3,GPIOx_Tx, GPIO_Pin_Tx);
 8005300:	8bbb      	ldrh	r3, [r7, #28]
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d05e      	beq.n	80053c4 <UART3Init+0x110>
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d811      	bhi.n	800532e <UART3Init+0x7a>
 800530a:	2b08      	cmp	r3, #8
 800530c:	d042      	beq.n	8005394 <UART3Init+0xe0>
 800530e:	2b08      	cmp	r3, #8
 8005310:	d806      	bhi.n	8005320 <UART3Init+0x6c>
 8005312:	2b02      	cmp	r3, #2
 8005314:	d032      	beq.n	800537c <UART3Init+0xc8>
 8005316:	2b04      	cmp	r3, #4
 8005318:	d036      	beq.n	8005388 <UART3Init+0xd4>
 800531a:	2b01      	cmp	r3, #1
 800531c:	d028      	beq.n	8005370 <UART3Init+0xbc>
 800531e:	e086      	b.n	800542e <UART3Init+0x17a>
 8005320:	2b20      	cmp	r3, #32
 8005322:	d043      	beq.n	80053ac <UART3Init+0xf8>
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d047      	beq.n	80053b8 <UART3Init+0x104>
 8005328:	2b10      	cmp	r3, #16
 800532a:	d039      	beq.n	80053a0 <UART3Init+0xec>
 800532c:	e07f      	b.n	800542e <UART3Init+0x17a>
 800532e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005332:	d05f      	beq.n	80053f4 <UART3Init+0x140>
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	d809      	bhi.n	800534e <UART3Init+0x9a>
 800533a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533e:	d04d      	beq.n	80053dc <UART3Init+0x128>
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d050      	beq.n	80053e8 <UART3Init+0x134>
 8005346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534a:	d041      	beq.n	80053d0 <UART3Init+0x11c>
 800534c:	e06f      	b.n	800542e <UART3Init+0x17a>
 800534e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005352:	d05b      	beq.n	800540c <UART3Init+0x158>
 8005354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005358:	d803      	bhi.n	8005362 <UART3Init+0xae>
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	d04f      	beq.n	8005400 <UART3Init+0x14c>
 8005360:	e065      	b.n	800542e <UART3Init+0x17a>
 8005362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005366:	d057      	beq.n	8005418 <UART3Init+0x164>
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536c:	d05a      	beq.n	8005424 <UART3Init+0x170>
 800536e:	e05e      	b.n	800542e <UART3Init+0x17a>
 8005370:	2207      	movs	r2, #7
 8005372:	2100      	movs	r1, #0
 8005374:	69b8      	ldr	r0, [r7, #24]
 8005376:	f7fb fcbf 	bl	8000cf8 <GPIO_PinAFConfig>
 800537a:	e058      	b.n	800542e <UART3Init+0x17a>
 800537c:	2207      	movs	r2, #7
 800537e:	2101      	movs	r1, #1
 8005380:	69b8      	ldr	r0, [r7, #24]
 8005382:	f7fb fcb9 	bl	8000cf8 <GPIO_PinAFConfig>
 8005386:	e052      	b.n	800542e <UART3Init+0x17a>
 8005388:	2207      	movs	r2, #7
 800538a:	2102      	movs	r1, #2
 800538c:	69b8      	ldr	r0, [r7, #24]
 800538e:	f7fb fcb3 	bl	8000cf8 <GPIO_PinAFConfig>
 8005392:	e04c      	b.n	800542e <UART3Init+0x17a>
 8005394:	2207      	movs	r2, #7
 8005396:	2103      	movs	r1, #3
 8005398:	69b8      	ldr	r0, [r7, #24]
 800539a:	f7fb fcad 	bl	8000cf8 <GPIO_PinAFConfig>
 800539e:	e046      	b.n	800542e <UART3Init+0x17a>
 80053a0:	2207      	movs	r2, #7
 80053a2:	2104      	movs	r1, #4
 80053a4:	69b8      	ldr	r0, [r7, #24]
 80053a6:	f7fb fca7 	bl	8000cf8 <GPIO_PinAFConfig>
 80053aa:	e040      	b.n	800542e <UART3Init+0x17a>
 80053ac:	2207      	movs	r2, #7
 80053ae:	2105      	movs	r1, #5
 80053b0:	69b8      	ldr	r0, [r7, #24]
 80053b2:	f7fb fca1 	bl	8000cf8 <GPIO_PinAFConfig>
 80053b6:	e03a      	b.n	800542e <UART3Init+0x17a>
 80053b8:	2207      	movs	r2, #7
 80053ba:	2106      	movs	r1, #6
 80053bc:	69b8      	ldr	r0, [r7, #24]
 80053be:	f7fb fc9b 	bl	8000cf8 <GPIO_PinAFConfig>
 80053c2:	e034      	b.n	800542e <UART3Init+0x17a>
 80053c4:	2207      	movs	r2, #7
 80053c6:	2107      	movs	r1, #7
 80053c8:	69b8      	ldr	r0, [r7, #24]
 80053ca:	f7fb fc95 	bl	8000cf8 <GPIO_PinAFConfig>
 80053ce:	e02e      	b.n	800542e <UART3Init+0x17a>
 80053d0:	2207      	movs	r2, #7
 80053d2:	2108      	movs	r1, #8
 80053d4:	69b8      	ldr	r0, [r7, #24]
 80053d6:	f7fb fc8f 	bl	8000cf8 <GPIO_PinAFConfig>
 80053da:	e028      	b.n	800542e <UART3Init+0x17a>
 80053dc:	2207      	movs	r2, #7
 80053de:	2109      	movs	r1, #9
 80053e0:	69b8      	ldr	r0, [r7, #24]
 80053e2:	f7fb fc89 	bl	8000cf8 <GPIO_PinAFConfig>
 80053e6:	e022      	b.n	800542e <UART3Init+0x17a>
 80053e8:	2207      	movs	r2, #7
 80053ea:	210a      	movs	r1, #10
 80053ec:	69b8      	ldr	r0, [r7, #24]
 80053ee:	f7fb fc83 	bl	8000cf8 <GPIO_PinAFConfig>
 80053f2:	e01c      	b.n	800542e <UART3Init+0x17a>
 80053f4:	2207      	movs	r2, #7
 80053f6:	210b      	movs	r1, #11
 80053f8:	69b8      	ldr	r0, [r7, #24]
 80053fa:	f7fb fc7d 	bl	8000cf8 <GPIO_PinAFConfig>
 80053fe:	e016      	b.n	800542e <UART3Init+0x17a>
 8005400:	2207      	movs	r2, #7
 8005402:	210c      	movs	r1, #12
 8005404:	69b8      	ldr	r0, [r7, #24]
 8005406:	f7fb fc77 	bl	8000cf8 <GPIO_PinAFConfig>
 800540a:	e010      	b.n	800542e <UART3Init+0x17a>
 800540c:	2207      	movs	r2, #7
 800540e:	210d      	movs	r1, #13
 8005410:	69b8      	ldr	r0, [r7, #24]
 8005412:	f7fb fc71 	bl	8000cf8 <GPIO_PinAFConfig>
 8005416:	e00a      	b.n	800542e <UART3Init+0x17a>
 8005418:	2207      	movs	r2, #7
 800541a:	210e      	movs	r1, #14
 800541c:	69b8      	ldr	r0, [r7, #24]
 800541e:	f7fb fc6b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005422:	e004      	b.n	800542e <UART3Init+0x17a>
 8005424:	2207      	movs	r2, #7
 8005426:	210f      	movs	r1, #15
 8005428:	69b8      	ldr	r0, [r7, #24]
 800542a:	f7fb fc65 	bl	8000cf8 <GPIO_PinAFConfig>
 800542e:	bf00      	nop
	AFConfig(USART3,GPIOx_Rx, GPIO_Pin_Rx);
 8005430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d05e      	beq.n	80054f4 <UART3Init+0x240>
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d811      	bhi.n	800545e <UART3Init+0x1aa>
 800543a:	2b08      	cmp	r3, #8
 800543c:	d042      	beq.n	80054c4 <UART3Init+0x210>
 800543e:	2b08      	cmp	r3, #8
 8005440:	d806      	bhi.n	8005450 <UART3Init+0x19c>
 8005442:	2b02      	cmp	r3, #2
 8005444:	d032      	beq.n	80054ac <UART3Init+0x1f8>
 8005446:	2b04      	cmp	r3, #4
 8005448:	d036      	beq.n	80054b8 <UART3Init+0x204>
 800544a:	2b01      	cmp	r3, #1
 800544c:	d028      	beq.n	80054a0 <UART3Init+0x1ec>
 800544e:	e086      	b.n	800555e <UART3Init+0x2aa>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d043      	beq.n	80054dc <UART3Init+0x228>
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d047      	beq.n	80054e8 <UART3Init+0x234>
 8005458:	2b10      	cmp	r3, #16
 800545a:	d039      	beq.n	80054d0 <UART3Init+0x21c>
 800545c:	e07f      	b.n	800555e <UART3Init+0x2aa>
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005462:	d05f      	beq.n	8005524 <UART3Init+0x270>
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005468:	d809      	bhi.n	800547e <UART3Init+0x1ca>
 800546a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546e:	d04d      	beq.n	800550c <UART3Init+0x258>
 8005470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005474:	d050      	beq.n	8005518 <UART3Init+0x264>
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d041      	beq.n	8005500 <UART3Init+0x24c>
 800547c:	e06f      	b.n	800555e <UART3Init+0x2aa>
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005482:	d05b      	beq.n	800553c <UART3Init+0x288>
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005488:	d803      	bhi.n	8005492 <UART3Init+0x1de>
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548e:	d04f      	beq.n	8005530 <UART3Init+0x27c>
 8005490:	e065      	b.n	800555e <UART3Init+0x2aa>
 8005492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005496:	d057      	beq.n	8005548 <UART3Init+0x294>
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	d05a      	beq.n	8005554 <UART3Init+0x2a0>
 800549e:	e05e      	b.n	800555e <UART3Init+0x2aa>
 80054a0:	2207      	movs	r2, #7
 80054a2:	2100      	movs	r1, #0
 80054a4:	6a38      	ldr	r0, [r7, #32]
 80054a6:	f7fb fc27 	bl	8000cf8 <GPIO_PinAFConfig>
 80054aa:	e058      	b.n	800555e <UART3Init+0x2aa>
 80054ac:	2207      	movs	r2, #7
 80054ae:	2101      	movs	r1, #1
 80054b0:	6a38      	ldr	r0, [r7, #32]
 80054b2:	f7fb fc21 	bl	8000cf8 <GPIO_PinAFConfig>
 80054b6:	e052      	b.n	800555e <UART3Init+0x2aa>
 80054b8:	2207      	movs	r2, #7
 80054ba:	2102      	movs	r1, #2
 80054bc:	6a38      	ldr	r0, [r7, #32]
 80054be:	f7fb fc1b 	bl	8000cf8 <GPIO_PinAFConfig>
 80054c2:	e04c      	b.n	800555e <UART3Init+0x2aa>
 80054c4:	2207      	movs	r2, #7
 80054c6:	2103      	movs	r1, #3
 80054c8:	6a38      	ldr	r0, [r7, #32]
 80054ca:	f7fb fc15 	bl	8000cf8 <GPIO_PinAFConfig>
 80054ce:	e046      	b.n	800555e <UART3Init+0x2aa>
 80054d0:	2207      	movs	r2, #7
 80054d2:	2104      	movs	r1, #4
 80054d4:	6a38      	ldr	r0, [r7, #32]
 80054d6:	f7fb fc0f 	bl	8000cf8 <GPIO_PinAFConfig>
 80054da:	e040      	b.n	800555e <UART3Init+0x2aa>
 80054dc:	2207      	movs	r2, #7
 80054de:	2105      	movs	r1, #5
 80054e0:	6a38      	ldr	r0, [r7, #32]
 80054e2:	f7fb fc09 	bl	8000cf8 <GPIO_PinAFConfig>
 80054e6:	e03a      	b.n	800555e <UART3Init+0x2aa>
 80054e8:	2207      	movs	r2, #7
 80054ea:	2106      	movs	r1, #6
 80054ec:	6a38      	ldr	r0, [r7, #32]
 80054ee:	f7fb fc03 	bl	8000cf8 <GPIO_PinAFConfig>
 80054f2:	e034      	b.n	800555e <UART3Init+0x2aa>
 80054f4:	2207      	movs	r2, #7
 80054f6:	2107      	movs	r1, #7
 80054f8:	6a38      	ldr	r0, [r7, #32]
 80054fa:	f7fb fbfd 	bl	8000cf8 <GPIO_PinAFConfig>
 80054fe:	e02e      	b.n	800555e <UART3Init+0x2aa>
 8005500:	2207      	movs	r2, #7
 8005502:	2108      	movs	r1, #8
 8005504:	6a38      	ldr	r0, [r7, #32]
 8005506:	f7fb fbf7 	bl	8000cf8 <GPIO_PinAFConfig>
 800550a:	e028      	b.n	800555e <UART3Init+0x2aa>
 800550c:	2207      	movs	r2, #7
 800550e:	2109      	movs	r1, #9
 8005510:	6a38      	ldr	r0, [r7, #32]
 8005512:	f7fb fbf1 	bl	8000cf8 <GPIO_PinAFConfig>
 8005516:	e022      	b.n	800555e <UART3Init+0x2aa>
 8005518:	2207      	movs	r2, #7
 800551a:	210a      	movs	r1, #10
 800551c:	6a38      	ldr	r0, [r7, #32]
 800551e:	f7fb fbeb 	bl	8000cf8 <GPIO_PinAFConfig>
 8005522:	e01c      	b.n	800555e <UART3Init+0x2aa>
 8005524:	2207      	movs	r2, #7
 8005526:	210b      	movs	r1, #11
 8005528:	6a38      	ldr	r0, [r7, #32]
 800552a:	f7fb fbe5 	bl	8000cf8 <GPIO_PinAFConfig>
 800552e:	e016      	b.n	800555e <UART3Init+0x2aa>
 8005530:	2207      	movs	r2, #7
 8005532:	210c      	movs	r1, #12
 8005534:	6a38      	ldr	r0, [r7, #32]
 8005536:	f7fb fbdf 	bl	8000cf8 <GPIO_PinAFConfig>
 800553a:	e010      	b.n	800555e <UART3Init+0x2aa>
 800553c:	2207      	movs	r2, #7
 800553e:	210d      	movs	r1, #13
 8005540:	6a38      	ldr	r0, [r7, #32]
 8005542:	f7fb fbd9 	bl	8000cf8 <GPIO_PinAFConfig>
 8005546:	e00a      	b.n	800555e <UART3Init+0x2aa>
 8005548:	2207      	movs	r2, #7
 800554a:	210e      	movs	r1, #14
 800554c:	6a38      	ldr	r0, [r7, #32]
 800554e:	f7fb fbd3 	bl	8000cf8 <GPIO_PinAFConfig>
 8005552:	e004      	b.n	800555e <UART3Init+0x2aa>
 8005554:	2207      	movs	r2, #7
 8005556:	210f      	movs	r1, #15
 8005558:	6a38      	ldr	r0, [r7, #32]
 800555a:	f7fb fbcd 	bl	8000cf8 <GPIO_PinAFConfig>
 800555e:	bf00      	nop

	BIOS_USART_InitStructure.USART_BaudRate            = baudrate;
 8005560:	4a1a      	ldr	r2, [pc, #104]	; (80055cc <UART3Init+0x318>)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6013      	str	r3, [r2, #0]
	BIOS_USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 8005566:	4b19      	ldr	r3, [pc, #100]	; (80055cc <UART3Init+0x318>)
 8005568:	2200      	movs	r2, #0
 800556a:	809a      	strh	r2, [r3, #4]
	BIOS_USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 800556c:	4b17      	ldr	r3, [pc, #92]	; (80055cc <UART3Init+0x318>)
 800556e:	2200      	movs	r2, #0
 8005570:	80da      	strh	r2, [r3, #6]
	BIOS_USART_InitStructure.USART_Parity              = USART_Parity_No;
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <UART3Init+0x318>)
 8005574:	2200      	movs	r2, #0
 8005576:	811a      	strh	r2, [r3, #8]
	BIOS_USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <UART3Init+0x318>)
 800557a:	2200      	movs	r2, #0
 800557c:	819a      	strh	r2, [r3, #12]
	BIOS_USART_InitStructure.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <UART3Init+0x318>)
 8005580:	220c      	movs	r2, #12
 8005582:	815a      	strh	r2, [r3, #10]
	USART_Init(USART3, &BIOS_USART_InitStructure);
 8005584:	4911      	ldr	r1, [pc, #68]	; (80055cc <UART3Init+0x318>)
 8005586:	4812      	ldr	r0, [pc, #72]	; (80055d0 <UART3Init+0x31c>)
 8005588:	f7fc fb62 	bl	8001c50 <USART_Init>

	USART_ITConfig(USART3, USART_IT_RXNE, rxstate);
 800558c:	7afb      	ldrb	r3, [r7, #11]
 800558e:	461a      	mov	r2, r3
 8005590:	f240 5125 	movw	r1, #1317	; 0x525
 8005594:	480e      	ldr	r0, [pc, #56]	; (80055d0 <UART3Init+0x31c>)
 8005596:	f7fc fc57 	bl	8001e48 <USART_ITConfig>

	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <UART3Init+0x320>)
 800559c:	2227      	movs	r2, #39	; 0x27
 800559e:	701a      	strb	r2, [r3, #0]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 80055a0:	893b      	ldrh	r3, [r7, #8]
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <UART3Init+0x320>)
 80055a6:	705a      	strb	r2, [r3, #1]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <UART3Init+0x320>)
 80055ae:	709a      	strb	r2, [r3, #2]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <UART3Init+0x320>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_UART_NVIC_InitStructure);
 80055b6:	4807      	ldr	r0, [pc, #28]	; (80055d4 <UART3Init+0x320>)
 80055b8:	f7fa fe22 	bl	8000200 <NVIC_Init>

	USART_Cmd(USART3, ENABLE);
 80055bc:	2101      	movs	r1, #1
 80055be:	4804      	ldr	r0, [pc, #16]	; (80055d0 <UART3Init+0x31c>)
 80055c0:	f7fc fc00 	bl	8001dc4 <USART_Cmd>
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	200004f8 	.word	0x200004f8
 80055d0:	40004800 	.word	0x40004800
 80055d4:	20000518 	.word	0x20000518

080055d8 <UART4Init>:
 * Function Example		: UART4Init(115200, ENABLE, 0, 0, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1);
 */

void UART4Init(uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_Tx, uint16_t GPIO_Pin_Tx, GPIO_TypeDef* GPIOx_Rx, uint16_t GPIO_Pin_Rx)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	4608      	mov	r0, r1
 80055e2:	4611      	mov	r1, r2
 80055e4:	461a      	mov	r2, r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	72fb      	strb	r3, [r7, #11]
 80055ea:	460b      	mov	r3, r1
 80055ec:	813b      	strh	r3, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 80055f2:	2101      	movs	r1, #1
 80055f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055f8:	f7fb fee8 	bl	80013cc <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_Tx, GPIO_Pin_Tx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 80055fc:	8bb9      	ldrh	r1, [r7, #28]
 80055fe:	2300      	movs	r3, #0
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	2302      	movs	r3, #2
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	2202      	movs	r2, #2
 800560a:	69b8      	ldr	r0, [r7, #24]
 800560c:	f7fc fdd4 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_Rx, GPIO_Pin_Rx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 8005610:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005612:	2300      	movs	r3, #0
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	2302      	movs	r3, #2
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	2202      	movs	r2, #2
 800561e:	6a38      	ldr	r0, [r7, #32]
 8005620:	f7fc fdca 	bl	80021b8 <GPIOPinsInit>
	AFConfig(UART4,GPIOx_Tx, GPIO_Pin_Tx);
 8005624:	8bbb      	ldrh	r3, [r7, #28]
 8005626:	2b80      	cmp	r3, #128	; 0x80
 8005628:	d05e      	beq.n	80056e8 <UART4Init+0x110>
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d811      	bhi.n	8005652 <UART4Init+0x7a>
 800562e:	2b08      	cmp	r3, #8
 8005630:	d042      	beq.n	80056b8 <UART4Init+0xe0>
 8005632:	2b08      	cmp	r3, #8
 8005634:	d806      	bhi.n	8005644 <UART4Init+0x6c>
 8005636:	2b02      	cmp	r3, #2
 8005638:	d032      	beq.n	80056a0 <UART4Init+0xc8>
 800563a:	2b04      	cmp	r3, #4
 800563c:	d036      	beq.n	80056ac <UART4Init+0xd4>
 800563e:	2b01      	cmp	r3, #1
 8005640:	d028      	beq.n	8005694 <UART4Init+0xbc>
 8005642:	e086      	b.n	8005752 <UART4Init+0x17a>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d043      	beq.n	80056d0 <UART4Init+0xf8>
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d047      	beq.n	80056dc <UART4Init+0x104>
 800564c:	2b10      	cmp	r3, #16
 800564e:	d039      	beq.n	80056c4 <UART4Init+0xec>
 8005650:	e07f      	b.n	8005752 <UART4Init+0x17a>
 8005652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005656:	d05f      	beq.n	8005718 <UART4Init+0x140>
 8005658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565c:	d809      	bhi.n	8005672 <UART4Init+0x9a>
 800565e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005662:	d04d      	beq.n	8005700 <UART4Init+0x128>
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005668:	d050      	beq.n	800570c <UART4Init+0x134>
 800566a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800566e:	d041      	beq.n	80056f4 <UART4Init+0x11c>
 8005670:	e06f      	b.n	8005752 <UART4Init+0x17a>
 8005672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005676:	d05b      	beq.n	8005730 <UART4Init+0x158>
 8005678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567c:	d803      	bhi.n	8005686 <UART4Init+0xae>
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005682:	d04f      	beq.n	8005724 <UART4Init+0x14c>
 8005684:	e065      	b.n	8005752 <UART4Init+0x17a>
 8005686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800568a:	d057      	beq.n	800573c <UART4Init+0x164>
 800568c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005690:	d05a      	beq.n	8005748 <UART4Init+0x170>
 8005692:	e05e      	b.n	8005752 <UART4Init+0x17a>
 8005694:	2208      	movs	r2, #8
 8005696:	2100      	movs	r1, #0
 8005698:	69b8      	ldr	r0, [r7, #24]
 800569a:	f7fb fb2d 	bl	8000cf8 <GPIO_PinAFConfig>
 800569e:	e058      	b.n	8005752 <UART4Init+0x17a>
 80056a0:	2208      	movs	r2, #8
 80056a2:	2101      	movs	r1, #1
 80056a4:	69b8      	ldr	r0, [r7, #24]
 80056a6:	f7fb fb27 	bl	8000cf8 <GPIO_PinAFConfig>
 80056aa:	e052      	b.n	8005752 <UART4Init+0x17a>
 80056ac:	2208      	movs	r2, #8
 80056ae:	2102      	movs	r1, #2
 80056b0:	69b8      	ldr	r0, [r7, #24]
 80056b2:	f7fb fb21 	bl	8000cf8 <GPIO_PinAFConfig>
 80056b6:	e04c      	b.n	8005752 <UART4Init+0x17a>
 80056b8:	2208      	movs	r2, #8
 80056ba:	2103      	movs	r1, #3
 80056bc:	69b8      	ldr	r0, [r7, #24]
 80056be:	f7fb fb1b 	bl	8000cf8 <GPIO_PinAFConfig>
 80056c2:	e046      	b.n	8005752 <UART4Init+0x17a>
 80056c4:	2208      	movs	r2, #8
 80056c6:	2104      	movs	r1, #4
 80056c8:	69b8      	ldr	r0, [r7, #24]
 80056ca:	f7fb fb15 	bl	8000cf8 <GPIO_PinAFConfig>
 80056ce:	e040      	b.n	8005752 <UART4Init+0x17a>
 80056d0:	2208      	movs	r2, #8
 80056d2:	2105      	movs	r1, #5
 80056d4:	69b8      	ldr	r0, [r7, #24]
 80056d6:	f7fb fb0f 	bl	8000cf8 <GPIO_PinAFConfig>
 80056da:	e03a      	b.n	8005752 <UART4Init+0x17a>
 80056dc:	2208      	movs	r2, #8
 80056de:	2106      	movs	r1, #6
 80056e0:	69b8      	ldr	r0, [r7, #24]
 80056e2:	f7fb fb09 	bl	8000cf8 <GPIO_PinAFConfig>
 80056e6:	e034      	b.n	8005752 <UART4Init+0x17a>
 80056e8:	2208      	movs	r2, #8
 80056ea:	2107      	movs	r1, #7
 80056ec:	69b8      	ldr	r0, [r7, #24]
 80056ee:	f7fb fb03 	bl	8000cf8 <GPIO_PinAFConfig>
 80056f2:	e02e      	b.n	8005752 <UART4Init+0x17a>
 80056f4:	2208      	movs	r2, #8
 80056f6:	2108      	movs	r1, #8
 80056f8:	69b8      	ldr	r0, [r7, #24]
 80056fa:	f7fb fafd 	bl	8000cf8 <GPIO_PinAFConfig>
 80056fe:	e028      	b.n	8005752 <UART4Init+0x17a>
 8005700:	2208      	movs	r2, #8
 8005702:	2109      	movs	r1, #9
 8005704:	69b8      	ldr	r0, [r7, #24]
 8005706:	f7fb faf7 	bl	8000cf8 <GPIO_PinAFConfig>
 800570a:	e022      	b.n	8005752 <UART4Init+0x17a>
 800570c:	2208      	movs	r2, #8
 800570e:	210a      	movs	r1, #10
 8005710:	69b8      	ldr	r0, [r7, #24]
 8005712:	f7fb faf1 	bl	8000cf8 <GPIO_PinAFConfig>
 8005716:	e01c      	b.n	8005752 <UART4Init+0x17a>
 8005718:	2208      	movs	r2, #8
 800571a:	210b      	movs	r1, #11
 800571c:	69b8      	ldr	r0, [r7, #24]
 800571e:	f7fb faeb 	bl	8000cf8 <GPIO_PinAFConfig>
 8005722:	e016      	b.n	8005752 <UART4Init+0x17a>
 8005724:	2208      	movs	r2, #8
 8005726:	210c      	movs	r1, #12
 8005728:	69b8      	ldr	r0, [r7, #24]
 800572a:	f7fb fae5 	bl	8000cf8 <GPIO_PinAFConfig>
 800572e:	e010      	b.n	8005752 <UART4Init+0x17a>
 8005730:	2208      	movs	r2, #8
 8005732:	210d      	movs	r1, #13
 8005734:	69b8      	ldr	r0, [r7, #24]
 8005736:	f7fb fadf 	bl	8000cf8 <GPIO_PinAFConfig>
 800573a:	e00a      	b.n	8005752 <UART4Init+0x17a>
 800573c:	2208      	movs	r2, #8
 800573e:	210e      	movs	r1, #14
 8005740:	69b8      	ldr	r0, [r7, #24]
 8005742:	f7fb fad9 	bl	8000cf8 <GPIO_PinAFConfig>
 8005746:	e004      	b.n	8005752 <UART4Init+0x17a>
 8005748:	2208      	movs	r2, #8
 800574a:	210f      	movs	r1, #15
 800574c:	69b8      	ldr	r0, [r7, #24]
 800574e:	f7fb fad3 	bl	8000cf8 <GPIO_PinAFConfig>
 8005752:	bf00      	nop
	AFConfig(UART4,GPIOx_Rx, GPIO_Pin_Rx);
 8005754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d05e      	beq.n	8005818 <UART4Init+0x240>
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d811      	bhi.n	8005782 <UART4Init+0x1aa>
 800575e:	2b08      	cmp	r3, #8
 8005760:	d042      	beq.n	80057e8 <UART4Init+0x210>
 8005762:	2b08      	cmp	r3, #8
 8005764:	d806      	bhi.n	8005774 <UART4Init+0x19c>
 8005766:	2b02      	cmp	r3, #2
 8005768:	d032      	beq.n	80057d0 <UART4Init+0x1f8>
 800576a:	2b04      	cmp	r3, #4
 800576c:	d036      	beq.n	80057dc <UART4Init+0x204>
 800576e:	2b01      	cmp	r3, #1
 8005770:	d028      	beq.n	80057c4 <UART4Init+0x1ec>
 8005772:	e086      	b.n	8005882 <UART4Init+0x2aa>
 8005774:	2b20      	cmp	r3, #32
 8005776:	d043      	beq.n	8005800 <UART4Init+0x228>
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d047      	beq.n	800580c <UART4Init+0x234>
 800577c:	2b10      	cmp	r3, #16
 800577e:	d039      	beq.n	80057f4 <UART4Init+0x21c>
 8005780:	e07f      	b.n	8005882 <UART4Init+0x2aa>
 8005782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005786:	d05f      	beq.n	8005848 <UART4Init+0x270>
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578c:	d809      	bhi.n	80057a2 <UART4Init+0x1ca>
 800578e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005792:	d04d      	beq.n	8005830 <UART4Init+0x258>
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d050      	beq.n	800583c <UART4Init+0x264>
 800579a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579e:	d041      	beq.n	8005824 <UART4Init+0x24c>
 80057a0:	e06f      	b.n	8005882 <UART4Init+0x2aa>
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a6:	d05b      	beq.n	8005860 <UART4Init+0x288>
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ac:	d803      	bhi.n	80057b6 <UART4Init+0x1de>
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	d04f      	beq.n	8005854 <UART4Init+0x27c>
 80057b4:	e065      	b.n	8005882 <UART4Init+0x2aa>
 80057b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ba:	d057      	beq.n	800586c <UART4Init+0x294>
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c0:	d05a      	beq.n	8005878 <UART4Init+0x2a0>
 80057c2:	e05e      	b.n	8005882 <UART4Init+0x2aa>
 80057c4:	2208      	movs	r2, #8
 80057c6:	2100      	movs	r1, #0
 80057c8:	6a38      	ldr	r0, [r7, #32]
 80057ca:	f7fb fa95 	bl	8000cf8 <GPIO_PinAFConfig>
 80057ce:	e058      	b.n	8005882 <UART4Init+0x2aa>
 80057d0:	2208      	movs	r2, #8
 80057d2:	2101      	movs	r1, #1
 80057d4:	6a38      	ldr	r0, [r7, #32]
 80057d6:	f7fb fa8f 	bl	8000cf8 <GPIO_PinAFConfig>
 80057da:	e052      	b.n	8005882 <UART4Init+0x2aa>
 80057dc:	2208      	movs	r2, #8
 80057de:	2102      	movs	r1, #2
 80057e0:	6a38      	ldr	r0, [r7, #32]
 80057e2:	f7fb fa89 	bl	8000cf8 <GPIO_PinAFConfig>
 80057e6:	e04c      	b.n	8005882 <UART4Init+0x2aa>
 80057e8:	2208      	movs	r2, #8
 80057ea:	2103      	movs	r1, #3
 80057ec:	6a38      	ldr	r0, [r7, #32]
 80057ee:	f7fb fa83 	bl	8000cf8 <GPIO_PinAFConfig>
 80057f2:	e046      	b.n	8005882 <UART4Init+0x2aa>
 80057f4:	2208      	movs	r2, #8
 80057f6:	2104      	movs	r1, #4
 80057f8:	6a38      	ldr	r0, [r7, #32]
 80057fa:	f7fb fa7d 	bl	8000cf8 <GPIO_PinAFConfig>
 80057fe:	e040      	b.n	8005882 <UART4Init+0x2aa>
 8005800:	2208      	movs	r2, #8
 8005802:	2105      	movs	r1, #5
 8005804:	6a38      	ldr	r0, [r7, #32]
 8005806:	f7fb fa77 	bl	8000cf8 <GPIO_PinAFConfig>
 800580a:	e03a      	b.n	8005882 <UART4Init+0x2aa>
 800580c:	2208      	movs	r2, #8
 800580e:	2106      	movs	r1, #6
 8005810:	6a38      	ldr	r0, [r7, #32]
 8005812:	f7fb fa71 	bl	8000cf8 <GPIO_PinAFConfig>
 8005816:	e034      	b.n	8005882 <UART4Init+0x2aa>
 8005818:	2208      	movs	r2, #8
 800581a:	2107      	movs	r1, #7
 800581c:	6a38      	ldr	r0, [r7, #32]
 800581e:	f7fb fa6b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005822:	e02e      	b.n	8005882 <UART4Init+0x2aa>
 8005824:	2208      	movs	r2, #8
 8005826:	2108      	movs	r1, #8
 8005828:	6a38      	ldr	r0, [r7, #32]
 800582a:	f7fb fa65 	bl	8000cf8 <GPIO_PinAFConfig>
 800582e:	e028      	b.n	8005882 <UART4Init+0x2aa>
 8005830:	2208      	movs	r2, #8
 8005832:	2109      	movs	r1, #9
 8005834:	6a38      	ldr	r0, [r7, #32]
 8005836:	f7fb fa5f 	bl	8000cf8 <GPIO_PinAFConfig>
 800583a:	e022      	b.n	8005882 <UART4Init+0x2aa>
 800583c:	2208      	movs	r2, #8
 800583e:	210a      	movs	r1, #10
 8005840:	6a38      	ldr	r0, [r7, #32]
 8005842:	f7fb fa59 	bl	8000cf8 <GPIO_PinAFConfig>
 8005846:	e01c      	b.n	8005882 <UART4Init+0x2aa>
 8005848:	2208      	movs	r2, #8
 800584a:	210b      	movs	r1, #11
 800584c:	6a38      	ldr	r0, [r7, #32]
 800584e:	f7fb fa53 	bl	8000cf8 <GPIO_PinAFConfig>
 8005852:	e016      	b.n	8005882 <UART4Init+0x2aa>
 8005854:	2208      	movs	r2, #8
 8005856:	210c      	movs	r1, #12
 8005858:	6a38      	ldr	r0, [r7, #32]
 800585a:	f7fb fa4d 	bl	8000cf8 <GPIO_PinAFConfig>
 800585e:	e010      	b.n	8005882 <UART4Init+0x2aa>
 8005860:	2208      	movs	r2, #8
 8005862:	210d      	movs	r1, #13
 8005864:	6a38      	ldr	r0, [r7, #32]
 8005866:	f7fb fa47 	bl	8000cf8 <GPIO_PinAFConfig>
 800586a:	e00a      	b.n	8005882 <UART4Init+0x2aa>
 800586c:	2208      	movs	r2, #8
 800586e:	210e      	movs	r1, #14
 8005870:	6a38      	ldr	r0, [r7, #32]
 8005872:	f7fb fa41 	bl	8000cf8 <GPIO_PinAFConfig>
 8005876:	e004      	b.n	8005882 <UART4Init+0x2aa>
 8005878:	2208      	movs	r2, #8
 800587a:	210f      	movs	r1, #15
 800587c:	6a38      	ldr	r0, [r7, #32]
 800587e:	f7fb fa3b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005882:	bf00      	nop

	BIOS_USART_InitStructure.USART_BaudRate            = baudrate;
 8005884:	4a1a      	ldr	r2, [pc, #104]	; (80058f0 <UART4Init+0x318>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6013      	str	r3, [r2, #0]
	BIOS_USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 800588a:	4b19      	ldr	r3, [pc, #100]	; (80058f0 <UART4Init+0x318>)
 800588c:	2200      	movs	r2, #0
 800588e:	809a      	strh	r2, [r3, #4]
	BIOS_USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8005890:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <UART4Init+0x318>)
 8005892:	2200      	movs	r2, #0
 8005894:	80da      	strh	r2, [r3, #6]
	BIOS_USART_InitStructure.USART_Parity              = USART_Parity_No;
 8005896:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <UART4Init+0x318>)
 8005898:	2200      	movs	r2, #0
 800589a:	811a      	strh	r2, [r3, #8]
	BIOS_USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800589c:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <UART4Init+0x318>)
 800589e:	2200      	movs	r2, #0
 80058a0:	819a      	strh	r2, [r3, #12]
	BIOS_USART_InitStructure.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <UART4Init+0x318>)
 80058a4:	220c      	movs	r2, #12
 80058a6:	815a      	strh	r2, [r3, #10]
	USART_Init(UART4, &BIOS_USART_InitStructure);
 80058a8:	4911      	ldr	r1, [pc, #68]	; (80058f0 <UART4Init+0x318>)
 80058aa:	4812      	ldr	r0, [pc, #72]	; (80058f4 <UART4Init+0x31c>)
 80058ac:	f7fc f9d0 	bl	8001c50 <USART_Init>

	USART_ITConfig(UART4, USART_IT_RXNE, rxstate);
 80058b0:	7afb      	ldrb	r3, [r7, #11]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f240 5125 	movw	r1, #1317	; 0x525
 80058b8:	480e      	ldr	r0, [pc, #56]	; (80058f4 <UART4Init+0x31c>)
 80058ba:	f7fc fac5 	bl	8001e48 <USART_ITConfig>

	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <UART4Init+0x320>)
 80058c0:	2234      	movs	r2, #52	; 0x34
 80058c2:	701a      	strb	r2, [r3, #0]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 80058c4:	893b      	ldrh	r3, [r7, #8]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <UART4Init+0x320>)
 80058ca:	705a      	strb	r2, [r3, #1]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <UART4Init+0x320>)
 80058d2:	709a      	strb	r2, [r3, #2]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80058d4:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <UART4Init+0x320>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_UART_NVIC_InitStructure);
 80058da:	4807      	ldr	r0, [pc, #28]	; (80058f8 <UART4Init+0x320>)
 80058dc:	f7fa fc90 	bl	8000200 <NVIC_Init>

	USART_Cmd(UART4, ENABLE);
 80058e0:	2101      	movs	r1, #1
 80058e2:	4804      	ldr	r0, [pc, #16]	; (80058f4 <UART4Init+0x31c>)
 80058e4:	f7fc fa6e 	bl	8001dc4 <USART_Cmd>
}
 80058e8:	bf00      	nop
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	200004f8 	.word	0x200004f8
 80058f4:	40004c00 	.word	0x40004c00
 80058f8:	20000518 	.word	0x20000518

080058fc <UART5Init>:
 * Function Example		: UART5Init(115200, ENABLE, 0, 0, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1);
 */

void UART5Init(uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_Tx, uint16_t GPIO_Pin_Tx, GPIO_TypeDef* GPIOx_Rx, uint16_t GPIO_Pin_Rx)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	461a      	mov	r2, r3
 800590a:	4603      	mov	r3, r0
 800590c:	72fb      	strb	r3, [r7, #11]
 800590e:	460b      	mov	r3, r1
 8005910:	813b      	strh	r3, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8005916:	2101      	movs	r1, #1
 8005918:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800591c:	f7fb fd56 	bl	80013cc <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_Tx, GPIO_Pin_Tx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 8005920:	8bb9      	ldrh	r1, [r7, #28]
 8005922:	2300      	movs	r3, #0
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	2302      	movs	r3, #2
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	2300      	movs	r3, #0
 800592c:	2202      	movs	r2, #2
 800592e:	69b8      	ldr	r0, [r7, #24]
 8005930:	f7fc fc42 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_Rx, GPIO_Pin_Rx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 8005934:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005936:	2300      	movs	r3, #0
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	2302      	movs	r3, #2
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	2202      	movs	r2, #2
 8005942:	6a38      	ldr	r0, [r7, #32]
 8005944:	f7fc fc38 	bl	80021b8 <GPIOPinsInit>
	AFConfig(UART5,GPIOx_Tx, GPIO_Pin_Tx);
 8005948:	8bbb      	ldrh	r3, [r7, #28]
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d05e      	beq.n	8005a0c <UART5Init+0x110>
 800594e:	2b80      	cmp	r3, #128	; 0x80
 8005950:	d811      	bhi.n	8005976 <UART5Init+0x7a>
 8005952:	2b08      	cmp	r3, #8
 8005954:	d042      	beq.n	80059dc <UART5Init+0xe0>
 8005956:	2b08      	cmp	r3, #8
 8005958:	d806      	bhi.n	8005968 <UART5Init+0x6c>
 800595a:	2b02      	cmp	r3, #2
 800595c:	d032      	beq.n	80059c4 <UART5Init+0xc8>
 800595e:	2b04      	cmp	r3, #4
 8005960:	d036      	beq.n	80059d0 <UART5Init+0xd4>
 8005962:	2b01      	cmp	r3, #1
 8005964:	d028      	beq.n	80059b8 <UART5Init+0xbc>
 8005966:	e086      	b.n	8005a76 <UART5Init+0x17a>
 8005968:	2b20      	cmp	r3, #32
 800596a:	d043      	beq.n	80059f4 <UART5Init+0xf8>
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d047      	beq.n	8005a00 <UART5Init+0x104>
 8005970:	2b10      	cmp	r3, #16
 8005972:	d039      	beq.n	80059e8 <UART5Init+0xec>
 8005974:	e07f      	b.n	8005a76 <UART5Init+0x17a>
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597a:	d05f      	beq.n	8005a3c <UART5Init+0x140>
 800597c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005980:	d809      	bhi.n	8005996 <UART5Init+0x9a>
 8005982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005986:	d04d      	beq.n	8005a24 <UART5Init+0x128>
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598c:	d050      	beq.n	8005a30 <UART5Init+0x134>
 800598e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005992:	d041      	beq.n	8005a18 <UART5Init+0x11c>
 8005994:	e06f      	b.n	8005a76 <UART5Init+0x17a>
 8005996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599a:	d05b      	beq.n	8005a54 <UART5Init+0x158>
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a0:	d803      	bhi.n	80059aa <UART5Init+0xae>
 80059a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a6:	d04f      	beq.n	8005a48 <UART5Init+0x14c>
 80059a8:	e065      	b.n	8005a76 <UART5Init+0x17a>
 80059aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ae:	d057      	beq.n	8005a60 <UART5Init+0x164>
 80059b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b4:	d05a      	beq.n	8005a6c <UART5Init+0x170>
 80059b6:	e05e      	b.n	8005a76 <UART5Init+0x17a>
 80059b8:	2208      	movs	r2, #8
 80059ba:	2100      	movs	r1, #0
 80059bc:	69b8      	ldr	r0, [r7, #24]
 80059be:	f7fb f99b 	bl	8000cf8 <GPIO_PinAFConfig>
 80059c2:	e058      	b.n	8005a76 <UART5Init+0x17a>
 80059c4:	2208      	movs	r2, #8
 80059c6:	2101      	movs	r1, #1
 80059c8:	69b8      	ldr	r0, [r7, #24]
 80059ca:	f7fb f995 	bl	8000cf8 <GPIO_PinAFConfig>
 80059ce:	e052      	b.n	8005a76 <UART5Init+0x17a>
 80059d0:	2208      	movs	r2, #8
 80059d2:	2102      	movs	r1, #2
 80059d4:	69b8      	ldr	r0, [r7, #24]
 80059d6:	f7fb f98f 	bl	8000cf8 <GPIO_PinAFConfig>
 80059da:	e04c      	b.n	8005a76 <UART5Init+0x17a>
 80059dc:	2208      	movs	r2, #8
 80059de:	2103      	movs	r1, #3
 80059e0:	69b8      	ldr	r0, [r7, #24]
 80059e2:	f7fb f989 	bl	8000cf8 <GPIO_PinAFConfig>
 80059e6:	e046      	b.n	8005a76 <UART5Init+0x17a>
 80059e8:	2208      	movs	r2, #8
 80059ea:	2104      	movs	r1, #4
 80059ec:	69b8      	ldr	r0, [r7, #24]
 80059ee:	f7fb f983 	bl	8000cf8 <GPIO_PinAFConfig>
 80059f2:	e040      	b.n	8005a76 <UART5Init+0x17a>
 80059f4:	2208      	movs	r2, #8
 80059f6:	2105      	movs	r1, #5
 80059f8:	69b8      	ldr	r0, [r7, #24]
 80059fa:	f7fb f97d 	bl	8000cf8 <GPIO_PinAFConfig>
 80059fe:	e03a      	b.n	8005a76 <UART5Init+0x17a>
 8005a00:	2208      	movs	r2, #8
 8005a02:	2106      	movs	r1, #6
 8005a04:	69b8      	ldr	r0, [r7, #24]
 8005a06:	f7fb f977 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a0a:	e034      	b.n	8005a76 <UART5Init+0x17a>
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	2107      	movs	r1, #7
 8005a10:	69b8      	ldr	r0, [r7, #24]
 8005a12:	f7fb f971 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a16:	e02e      	b.n	8005a76 <UART5Init+0x17a>
 8005a18:	2208      	movs	r2, #8
 8005a1a:	2108      	movs	r1, #8
 8005a1c:	69b8      	ldr	r0, [r7, #24]
 8005a1e:	f7fb f96b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a22:	e028      	b.n	8005a76 <UART5Init+0x17a>
 8005a24:	2208      	movs	r2, #8
 8005a26:	2109      	movs	r1, #9
 8005a28:	69b8      	ldr	r0, [r7, #24]
 8005a2a:	f7fb f965 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a2e:	e022      	b.n	8005a76 <UART5Init+0x17a>
 8005a30:	2208      	movs	r2, #8
 8005a32:	210a      	movs	r1, #10
 8005a34:	69b8      	ldr	r0, [r7, #24]
 8005a36:	f7fb f95f 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a3a:	e01c      	b.n	8005a76 <UART5Init+0x17a>
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	210b      	movs	r1, #11
 8005a40:	69b8      	ldr	r0, [r7, #24]
 8005a42:	f7fb f959 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a46:	e016      	b.n	8005a76 <UART5Init+0x17a>
 8005a48:	2208      	movs	r2, #8
 8005a4a:	210c      	movs	r1, #12
 8005a4c:	69b8      	ldr	r0, [r7, #24]
 8005a4e:	f7fb f953 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a52:	e010      	b.n	8005a76 <UART5Init+0x17a>
 8005a54:	2208      	movs	r2, #8
 8005a56:	210d      	movs	r1, #13
 8005a58:	69b8      	ldr	r0, [r7, #24]
 8005a5a:	f7fb f94d 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a5e:	e00a      	b.n	8005a76 <UART5Init+0x17a>
 8005a60:	2208      	movs	r2, #8
 8005a62:	210e      	movs	r1, #14
 8005a64:	69b8      	ldr	r0, [r7, #24]
 8005a66:	f7fb f947 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a6a:	e004      	b.n	8005a76 <UART5Init+0x17a>
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	210f      	movs	r1, #15
 8005a70:	69b8      	ldr	r0, [r7, #24]
 8005a72:	f7fb f941 	bl	8000cf8 <GPIO_PinAFConfig>
 8005a76:	bf00      	nop
	AFConfig(UART5,GPIOx_Rx, GPIO_Pin_Rx);
 8005a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d05e      	beq.n	8005b3c <UART5Init+0x240>
 8005a7e:	2b80      	cmp	r3, #128	; 0x80
 8005a80:	d811      	bhi.n	8005aa6 <UART5Init+0x1aa>
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d042      	beq.n	8005b0c <UART5Init+0x210>
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d806      	bhi.n	8005a98 <UART5Init+0x19c>
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d032      	beq.n	8005af4 <UART5Init+0x1f8>
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d036      	beq.n	8005b00 <UART5Init+0x204>
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d028      	beq.n	8005ae8 <UART5Init+0x1ec>
 8005a96:	e086      	b.n	8005ba6 <UART5Init+0x2aa>
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d043      	beq.n	8005b24 <UART5Init+0x228>
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d047      	beq.n	8005b30 <UART5Init+0x234>
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d039      	beq.n	8005b18 <UART5Init+0x21c>
 8005aa4:	e07f      	b.n	8005ba6 <UART5Init+0x2aa>
 8005aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aaa:	d05f      	beq.n	8005b6c <UART5Init+0x270>
 8005aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab0:	d809      	bhi.n	8005ac6 <UART5Init+0x1ca>
 8005ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab6:	d04d      	beq.n	8005b54 <UART5Init+0x258>
 8005ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abc:	d050      	beq.n	8005b60 <UART5Init+0x264>
 8005abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac2:	d041      	beq.n	8005b48 <UART5Init+0x24c>
 8005ac4:	e06f      	b.n	8005ba6 <UART5Init+0x2aa>
 8005ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aca:	d05b      	beq.n	8005b84 <UART5Init+0x288>
 8005acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad0:	d803      	bhi.n	8005ada <UART5Init+0x1de>
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad6:	d04f      	beq.n	8005b78 <UART5Init+0x27c>
 8005ad8:	e065      	b.n	8005ba6 <UART5Init+0x2aa>
 8005ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ade:	d057      	beq.n	8005b90 <UART5Init+0x294>
 8005ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae4:	d05a      	beq.n	8005b9c <UART5Init+0x2a0>
 8005ae6:	e05e      	b.n	8005ba6 <UART5Init+0x2aa>
 8005ae8:	2208      	movs	r2, #8
 8005aea:	2100      	movs	r1, #0
 8005aec:	6a38      	ldr	r0, [r7, #32]
 8005aee:	f7fb f903 	bl	8000cf8 <GPIO_PinAFConfig>
 8005af2:	e058      	b.n	8005ba6 <UART5Init+0x2aa>
 8005af4:	2208      	movs	r2, #8
 8005af6:	2101      	movs	r1, #1
 8005af8:	6a38      	ldr	r0, [r7, #32]
 8005afa:	f7fb f8fd 	bl	8000cf8 <GPIO_PinAFConfig>
 8005afe:	e052      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b00:	2208      	movs	r2, #8
 8005b02:	2102      	movs	r1, #2
 8005b04:	6a38      	ldr	r0, [r7, #32]
 8005b06:	f7fb f8f7 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b0a:	e04c      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	2103      	movs	r1, #3
 8005b10:	6a38      	ldr	r0, [r7, #32]
 8005b12:	f7fb f8f1 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b16:	e046      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b18:	2208      	movs	r2, #8
 8005b1a:	2104      	movs	r1, #4
 8005b1c:	6a38      	ldr	r0, [r7, #32]
 8005b1e:	f7fb f8eb 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b22:	e040      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b24:	2208      	movs	r2, #8
 8005b26:	2105      	movs	r1, #5
 8005b28:	6a38      	ldr	r0, [r7, #32]
 8005b2a:	f7fb f8e5 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b2e:	e03a      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b30:	2208      	movs	r2, #8
 8005b32:	2106      	movs	r1, #6
 8005b34:	6a38      	ldr	r0, [r7, #32]
 8005b36:	f7fb f8df 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b3a:	e034      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	2107      	movs	r1, #7
 8005b40:	6a38      	ldr	r0, [r7, #32]
 8005b42:	f7fb f8d9 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b46:	e02e      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b48:	2208      	movs	r2, #8
 8005b4a:	2108      	movs	r1, #8
 8005b4c:	6a38      	ldr	r0, [r7, #32]
 8005b4e:	f7fb f8d3 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b52:	e028      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b54:	2208      	movs	r2, #8
 8005b56:	2109      	movs	r1, #9
 8005b58:	6a38      	ldr	r0, [r7, #32]
 8005b5a:	f7fb f8cd 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b5e:	e022      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b60:	2208      	movs	r2, #8
 8005b62:	210a      	movs	r1, #10
 8005b64:	6a38      	ldr	r0, [r7, #32]
 8005b66:	f7fb f8c7 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b6a:	e01c      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	210b      	movs	r1, #11
 8005b70:	6a38      	ldr	r0, [r7, #32]
 8005b72:	f7fb f8c1 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b76:	e016      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b78:	2208      	movs	r2, #8
 8005b7a:	210c      	movs	r1, #12
 8005b7c:	6a38      	ldr	r0, [r7, #32]
 8005b7e:	f7fb f8bb 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b82:	e010      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b84:	2208      	movs	r2, #8
 8005b86:	210d      	movs	r1, #13
 8005b88:	6a38      	ldr	r0, [r7, #32]
 8005b8a:	f7fb f8b5 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b8e:	e00a      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b90:	2208      	movs	r2, #8
 8005b92:	210e      	movs	r1, #14
 8005b94:	6a38      	ldr	r0, [r7, #32]
 8005b96:	f7fb f8af 	bl	8000cf8 <GPIO_PinAFConfig>
 8005b9a:	e004      	b.n	8005ba6 <UART5Init+0x2aa>
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	210f      	movs	r1, #15
 8005ba0:	6a38      	ldr	r0, [r7, #32]
 8005ba2:	f7fb f8a9 	bl	8000cf8 <GPIO_PinAFConfig>
 8005ba6:	bf00      	nop

	BIOS_USART_InitStructure.USART_BaudRate            = baudrate;
 8005ba8:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <UART5Init+0x318>)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6013      	str	r3, [r2, #0]
	BIOS_USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 8005bae:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <UART5Init+0x318>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	809a      	strh	r2, [r3, #4]
	BIOS_USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8005bb4:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <UART5Init+0x318>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	80da      	strh	r2, [r3, #6]
	BIOS_USART_InitStructure.USART_Parity              = USART_Parity_No;
 8005bba:	4b16      	ldr	r3, [pc, #88]	; (8005c14 <UART5Init+0x318>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	811a      	strh	r2, [r3, #8]
	BIOS_USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <UART5Init+0x318>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	819a      	strh	r2, [r3, #12]
	BIOS_USART_InitStructure.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <UART5Init+0x318>)
 8005bc8:	220c      	movs	r2, #12
 8005bca:	815a      	strh	r2, [r3, #10]
	USART_Init(UART5, & BIOS_USART_InitStructure);
 8005bcc:	4911      	ldr	r1, [pc, #68]	; (8005c14 <UART5Init+0x318>)
 8005bce:	4812      	ldr	r0, [pc, #72]	; (8005c18 <UART5Init+0x31c>)
 8005bd0:	f7fc f83e 	bl	8001c50 <USART_Init>

	USART_ITConfig(UART5, USART_IT_RXNE, rxstate);
 8005bd4:	7afb      	ldrb	r3, [r7, #11]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f240 5125 	movw	r1, #1317	; 0x525
 8005bdc:	480e      	ldr	r0, [pc, #56]	; (8005c18 <UART5Init+0x31c>)
 8005bde:	f7fc f933 	bl	8001e48 <USART_ITConfig>

	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
 8005be2:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <UART5Init+0x320>)
 8005be4:	2235      	movs	r2, #53	; 0x35
 8005be6:	701a      	strb	r2, [r3, #0]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8005be8:	893b      	ldrh	r3, [r7, #8]
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <UART5Init+0x320>)
 8005bee:	705a      	strb	r2, [r3, #1]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <UART5Init+0x320>)
 8005bf6:	709a      	strb	r2, [r3, #2]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005bf8:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <UART5Init+0x320>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_UART_NVIC_InitStructure);
 8005bfe:	4807      	ldr	r0, [pc, #28]	; (8005c1c <UART5Init+0x320>)
 8005c00:	f7fa fafe 	bl	8000200 <NVIC_Init>

	USART_Cmd(UART5, ENABLE);
 8005c04:	2101      	movs	r1, #1
 8005c06:	4804      	ldr	r0, [pc, #16]	; (8005c18 <UART5Init+0x31c>)
 8005c08:	f7fc f8dc 	bl	8001dc4 <USART_Cmd>
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	200004f8 	.word	0x200004f8
 8005c18:	40005000 	.word	0x40005000
 8005c1c:	20000518 	.word	0x20000518

08005c20 <CANx_Init>:
 */
uint8_t CANx_Init(CAN_TypeDef* CANx, GPIO_TypeDef * CANx_Tx_GPIOx, uint16_t CANx_Tx_pin,
		GPIO_TypeDef * CANx_Rx_GPIOx, uint16_t CANx_Rx_pin,uint16_t CAN_FilterFIFOAssignment,
		uint16_t CAN_FilterId_11bits,uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber,
		uint16_t CAN_Prescaler,uint8_t N_PPriority,uint8_t N_SPriority)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80fb      	strh	r3, [r7, #6]
	uint8_t CAN_InitStatus;
	if(CANx == CAN1){
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4ab7      	ldr	r2, [pc, #732]	; (8005f10 <CANx_Init+0x2f0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	f040 8135 	bne.w	8005ea4 <CANx_Init+0x284>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005c40:	f7fb fbc4 	bl	80013cc <RCC_APB1PeriphClockCmd>
		AFConfig(CAN1,CANx_Tx_GPIOx,CANx_Tx_pin);
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	2b80      	cmp	r3, #128	; 0x80
 8005c48:	d05e      	beq.n	8005d08 <CANx_Init+0xe8>
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d811      	bhi.n	8005c72 <CANx_Init+0x52>
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d042      	beq.n	8005cd8 <CANx_Init+0xb8>
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d806      	bhi.n	8005c64 <CANx_Init+0x44>
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d032      	beq.n	8005cc0 <CANx_Init+0xa0>
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d036      	beq.n	8005ccc <CANx_Init+0xac>
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d028      	beq.n	8005cb4 <CANx_Init+0x94>
 8005c62:	e086      	b.n	8005d72 <CANx_Init+0x152>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d043      	beq.n	8005cf0 <CANx_Init+0xd0>
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d047      	beq.n	8005cfc <CANx_Init+0xdc>
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d039      	beq.n	8005ce4 <CANx_Init+0xc4>
 8005c70:	e07f      	b.n	8005d72 <CANx_Init+0x152>
 8005c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c76:	d05f      	beq.n	8005d38 <CANx_Init+0x118>
 8005c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7c:	d809      	bhi.n	8005c92 <CANx_Init+0x72>
 8005c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c82:	d04d      	beq.n	8005d20 <CANx_Init+0x100>
 8005c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c88:	d050      	beq.n	8005d2c <CANx_Init+0x10c>
 8005c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8e:	d041      	beq.n	8005d14 <CANx_Init+0xf4>
 8005c90:	e06f      	b.n	8005d72 <CANx_Init+0x152>
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c96:	d05b      	beq.n	8005d50 <CANx_Init+0x130>
 8005c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9c:	d803      	bhi.n	8005ca6 <CANx_Init+0x86>
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca2:	d04f      	beq.n	8005d44 <CANx_Init+0x124>
 8005ca4:	e065      	b.n	8005d72 <CANx_Init+0x152>
 8005ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005caa:	d057      	beq.n	8005d5c <CANx_Init+0x13c>
 8005cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb0:	d05a      	beq.n	8005d68 <CANx_Init+0x148>
 8005cb2:	e05e      	b.n	8005d72 <CANx_Init+0x152>
 8005cb4:	2209      	movs	r2, #9
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	68b8      	ldr	r0, [r7, #8]
 8005cba:	f7fb f81d 	bl	8000cf8 <GPIO_PinAFConfig>
 8005cbe:	e058      	b.n	8005d72 <CANx_Init+0x152>
 8005cc0:	2209      	movs	r2, #9
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	68b8      	ldr	r0, [r7, #8]
 8005cc6:	f7fb f817 	bl	8000cf8 <GPIO_PinAFConfig>
 8005cca:	e052      	b.n	8005d72 <CANx_Init+0x152>
 8005ccc:	2209      	movs	r2, #9
 8005cce:	2102      	movs	r1, #2
 8005cd0:	68b8      	ldr	r0, [r7, #8]
 8005cd2:	f7fb f811 	bl	8000cf8 <GPIO_PinAFConfig>
 8005cd6:	e04c      	b.n	8005d72 <CANx_Init+0x152>
 8005cd8:	2209      	movs	r2, #9
 8005cda:	2103      	movs	r1, #3
 8005cdc:	68b8      	ldr	r0, [r7, #8]
 8005cde:	f7fb f80b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005ce2:	e046      	b.n	8005d72 <CANx_Init+0x152>
 8005ce4:	2209      	movs	r2, #9
 8005ce6:	2104      	movs	r1, #4
 8005ce8:	68b8      	ldr	r0, [r7, #8]
 8005cea:	f7fb f805 	bl	8000cf8 <GPIO_PinAFConfig>
 8005cee:	e040      	b.n	8005d72 <CANx_Init+0x152>
 8005cf0:	2209      	movs	r2, #9
 8005cf2:	2105      	movs	r1, #5
 8005cf4:	68b8      	ldr	r0, [r7, #8]
 8005cf6:	f7fa ffff 	bl	8000cf8 <GPIO_PinAFConfig>
 8005cfa:	e03a      	b.n	8005d72 <CANx_Init+0x152>
 8005cfc:	2209      	movs	r2, #9
 8005cfe:	2106      	movs	r1, #6
 8005d00:	68b8      	ldr	r0, [r7, #8]
 8005d02:	f7fa fff9 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d06:	e034      	b.n	8005d72 <CANx_Init+0x152>
 8005d08:	2209      	movs	r2, #9
 8005d0a:	2107      	movs	r1, #7
 8005d0c:	68b8      	ldr	r0, [r7, #8]
 8005d0e:	f7fa fff3 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d12:	e02e      	b.n	8005d72 <CANx_Init+0x152>
 8005d14:	2209      	movs	r2, #9
 8005d16:	2108      	movs	r1, #8
 8005d18:	68b8      	ldr	r0, [r7, #8]
 8005d1a:	f7fa ffed 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d1e:	e028      	b.n	8005d72 <CANx_Init+0x152>
 8005d20:	2209      	movs	r2, #9
 8005d22:	2109      	movs	r1, #9
 8005d24:	68b8      	ldr	r0, [r7, #8]
 8005d26:	f7fa ffe7 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d2a:	e022      	b.n	8005d72 <CANx_Init+0x152>
 8005d2c:	2209      	movs	r2, #9
 8005d2e:	210a      	movs	r1, #10
 8005d30:	68b8      	ldr	r0, [r7, #8]
 8005d32:	f7fa ffe1 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d36:	e01c      	b.n	8005d72 <CANx_Init+0x152>
 8005d38:	2209      	movs	r2, #9
 8005d3a:	210b      	movs	r1, #11
 8005d3c:	68b8      	ldr	r0, [r7, #8]
 8005d3e:	f7fa ffdb 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d42:	e016      	b.n	8005d72 <CANx_Init+0x152>
 8005d44:	2209      	movs	r2, #9
 8005d46:	210c      	movs	r1, #12
 8005d48:	68b8      	ldr	r0, [r7, #8]
 8005d4a:	f7fa ffd5 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d4e:	e010      	b.n	8005d72 <CANx_Init+0x152>
 8005d50:	2209      	movs	r2, #9
 8005d52:	210d      	movs	r1, #13
 8005d54:	68b8      	ldr	r0, [r7, #8]
 8005d56:	f7fa ffcf 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d5a:	e00a      	b.n	8005d72 <CANx_Init+0x152>
 8005d5c:	2209      	movs	r2, #9
 8005d5e:	210e      	movs	r1, #14
 8005d60:	68b8      	ldr	r0, [r7, #8]
 8005d62:	f7fa ffc9 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d66:	e004      	b.n	8005d72 <CANx_Init+0x152>
 8005d68:	2209      	movs	r2, #9
 8005d6a:	210f      	movs	r1, #15
 8005d6c:	68b8      	ldr	r0, [r7, #8]
 8005d6e:	f7fa ffc3 	bl	8000cf8 <GPIO_PinAFConfig>
 8005d72:	bf00      	nop
		AFConfig(CAN1,CANx_Rx_GPIOx,CANx_Rx_pin);
 8005d74:	8c3b      	ldrh	r3, [r7, #32]
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	d05e      	beq.n	8005e38 <CANx_Init+0x218>
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d811      	bhi.n	8005da2 <CANx_Init+0x182>
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d042      	beq.n	8005e08 <CANx_Init+0x1e8>
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d806      	bhi.n	8005d94 <CANx_Init+0x174>
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d032      	beq.n	8005df0 <CANx_Init+0x1d0>
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d036      	beq.n	8005dfc <CANx_Init+0x1dc>
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d028      	beq.n	8005de4 <CANx_Init+0x1c4>
 8005d92:	e1ca      	b.n	800612a <CANx_Init+0x50a>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d043      	beq.n	8005e20 <CANx_Init+0x200>
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d047      	beq.n	8005e2c <CANx_Init+0x20c>
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d039      	beq.n	8005e14 <CANx_Init+0x1f4>
 8005da0:	e1c3      	b.n	800612a <CANx_Init+0x50a>
 8005da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da6:	d05f      	beq.n	8005e68 <CANx_Init+0x248>
 8005da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dac:	d809      	bhi.n	8005dc2 <CANx_Init+0x1a2>
 8005dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db2:	d04d      	beq.n	8005e50 <CANx_Init+0x230>
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db8:	d050      	beq.n	8005e5c <CANx_Init+0x23c>
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dbe:	d041      	beq.n	8005e44 <CANx_Init+0x224>
 8005dc0:	e1b3      	b.n	800612a <CANx_Init+0x50a>
 8005dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc6:	d05b      	beq.n	8005e80 <CANx_Init+0x260>
 8005dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dcc:	d803      	bhi.n	8005dd6 <CANx_Init+0x1b6>
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd2:	d04f      	beq.n	8005e74 <CANx_Init+0x254>
 8005dd4:	e1a9      	b.n	800612a <CANx_Init+0x50a>
 8005dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dda:	d057      	beq.n	8005e8c <CANx_Init+0x26c>
 8005ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de0:	d05a      	beq.n	8005e98 <CANx_Init+0x278>
 8005de2:	e1a2      	b.n	800612a <CANx_Init+0x50a>
 8005de4:	2209      	movs	r2, #9
 8005de6:	2100      	movs	r1, #0
 8005de8:	6838      	ldr	r0, [r7, #0]
 8005dea:	f7fa ff85 	bl	8000cf8 <GPIO_PinAFConfig>
 8005dee:	e19c      	b.n	800612a <CANx_Init+0x50a>
 8005df0:	2209      	movs	r2, #9
 8005df2:	2101      	movs	r1, #1
 8005df4:	6838      	ldr	r0, [r7, #0]
 8005df6:	f7fa ff7f 	bl	8000cf8 <GPIO_PinAFConfig>
 8005dfa:	e196      	b.n	800612a <CANx_Init+0x50a>
 8005dfc:	2209      	movs	r2, #9
 8005dfe:	2102      	movs	r1, #2
 8005e00:	6838      	ldr	r0, [r7, #0]
 8005e02:	f7fa ff79 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e06:	e190      	b.n	800612a <CANx_Init+0x50a>
 8005e08:	2209      	movs	r2, #9
 8005e0a:	2103      	movs	r1, #3
 8005e0c:	6838      	ldr	r0, [r7, #0]
 8005e0e:	f7fa ff73 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e12:	e18a      	b.n	800612a <CANx_Init+0x50a>
 8005e14:	2209      	movs	r2, #9
 8005e16:	2104      	movs	r1, #4
 8005e18:	6838      	ldr	r0, [r7, #0]
 8005e1a:	f7fa ff6d 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e1e:	e184      	b.n	800612a <CANx_Init+0x50a>
 8005e20:	2209      	movs	r2, #9
 8005e22:	2105      	movs	r1, #5
 8005e24:	6838      	ldr	r0, [r7, #0]
 8005e26:	f7fa ff67 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e2a:	e17e      	b.n	800612a <CANx_Init+0x50a>
 8005e2c:	2209      	movs	r2, #9
 8005e2e:	2106      	movs	r1, #6
 8005e30:	6838      	ldr	r0, [r7, #0]
 8005e32:	f7fa ff61 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e36:	e178      	b.n	800612a <CANx_Init+0x50a>
 8005e38:	2209      	movs	r2, #9
 8005e3a:	2107      	movs	r1, #7
 8005e3c:	6838      	ldr	r0, [r7, #0]
 8005e3e:	f7fa ff5b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e42:	e172      	b.n	800612a <CANx_Init+0x50a>
 8005e44:	2209      	movs	r2, #9
 8005e46:	2108      	movs	r1, #8
 8005e48:	6838      	ldr	r0, [r7, #0]
 8005e4a:	f7fa ff55 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e4e:	e16c      	b.n	800612a <CANx_Init+0x50a>
 8005e50:	2209      	movs	r2, #9
 8005e52:	2109      	movs	r1, #9
 8005e54:	6838      	ldr	r0, [r7, #0]
 8005e56:	f7fa ff4f 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e5a:	e166      	b.n	800612a <CANx_Init+0x50a>
 8005e5c:	2209      	movs	r2, #9
 8005e5e:	210a      	movs	r1, #10
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f7fa ff49 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e66:	e160      	b.n	800612a <CANx_Init+0x50a>
 8005e68:	2209      	movs	r2, #9
 8005e6a:	210b      	movs	r1, #11
 8005e6c:	6838      	ldr	r0, [r7, #0]
 8005e6e:	f7fa ff43 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e72:	e15a      	b.n	800612a <CANx_Init+0x50a>
 8005e74:	2209      	movs	r2, #9
 8005e76:	210c      	movs	r1, #12
 8005e78:	6838      	ldr	r0, [r7, #0]
 8005e7a:	f7fa ff3d 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e7e:	e154      	b.n	800612a <CANx_Init+0x50a>
 8005e80:	2209      	movs	r2, #9
 8005e82:	210d      	movs	r1, #13
 8005e84:	6838      	ldr	r0, [r7, #0]
 8005e86:	f7fa ff37 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e8a:	e14e      	b.n	800612a <CANx_Init+0x50a>
 8005e8c:	2209      	movs	r2, #9
 8005e8e:	210e      	movs	r1, #14
 8005e90:	6838      	ldr	r0, [r7, #0]
 8005e92:	f7fa ff31 	bl	8000cf8 <GPIO_PinAFConfig>
 8005e96:	e148      	b.n	800612a <CANx_Init+0x50a>
 8005e98:	2209      	movs	r2, #9
 8005e9a:	210f      	movs	r1, #15
 8005e9c:	6838      	ldr	r0, [r7, #0]
 8005e9e:	f7fa ff2b 	bl	8000cf8 <GPIO_PinAFConfig>
 8005ea2:	e142      	b.n	800612a <CANx_Init+0x50a>

	}else if(CANx == CAN2){
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <CANx_Init+0x2f4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	f040 813e 	bne.w	800612a <CANx_Init+0x50a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
 8005eae:	2101      	movs	r1, #1
 8005eb0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005eb4:	f7fb fa8a 	bl	80013cc <RCC_APB1PeriphClockCmd>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE);
 8005eb8:	2101      	movs	r1, #1
 8005eba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005ebe:	f7fb fa85 	bl	80013cc <RCC_APB1PeriphClockCmd>
		AFConfig(CAN2,CANx_Tx_GPIOx,CANx_Tx_pin);
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b80      	cmp	r3, #128	; 0x80
 8005ec6:	d062      	beq.n	8005f8e <CANx_Init+0x36e>
 8005ec8:	2b80      	cmp	r3, #128	; 0x80
 8005eca:	d811      	bhi.n	8005ef0 <CANx_Init+0x2d0>
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d046      	beq.n	8005f5e <CANx_Init+0x33e>
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d806      	bhi.n	8005ee2 <CANx_Init+0x2c2>
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d036      	beq.n	8005f46 <CANx_Init+0x326>
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d03a      	beq.n	8005f52 <CANx_Init+0x332>
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d02c      	beq.n	8005f3a <CANx_Init+0x31a>
 8005ee0:	e08a      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d047      	beq.n	8005f76 <CANx_Init+0x356>
 8005ee6:	2b40      	cmp	r3, #64	; 0x40
 8005ee8:	d04b      	beq.n	8005f82 <CANx_Init+0x362>
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d03d      	beq.n	8005f6a <CANx_Init+0x34a>
 8005eee:	e083      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef4:	d063      	beq.n	8005fbe <CANx_Init+0x39e>
 8005ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efa:	d80d      	bhi.n	8005f18 <CANx_Init+0x2f8>
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f00:	d051      	beq.n	8005fa6 <CANx_Init+0x386>
 8005f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f06:	d054      	beq.n	8005fb2 <CANx_Init+0x392>
 8005f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0c:	d045      	beq.n	8005f9a <CANx_Init+0x37a>
 8005f0e:	e073      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f10:	40006400 	.word	0x40006400
 8005f14:	40006800 	.word	0x40006800
 8005f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1c:	d05b      	beq.n	8005fd6 <CANx_Init+0x3b6>
 8005f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f22:	d803      	bhi.n	8005f2c <CANx_Init+0x30c>
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f28:	d04f      	beq.n	8005fca <CANx_Init+0x3aa>
 8005f2a:	e065      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f30:	d057      	beq.n	8005fe2 <CANx_Init+0x3c2>
 8005f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f36:	d05a      	beq.n	8005fee <CANx_Init+0x3ce>
 8005f38:	e05e      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f3a:	2209      	movs	r2, #9
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	68b8      	ldr	r0, [r7, #8]
 8005f40:	f7fa feda 	bl	8000cf8 <GPIO_PinAFConfig>
 8005f44:	e058      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f46:	2209      	movs	r2, #9
 8005f48:	2101      	movs	r1, #1
 8005f4a:	68b8      	ldr	r0, [r7, #8]
 8005f4c:	f7fa fed4 	bl	8000cf8 <GPIO_PinAFConfig>
 8005f50:	e052      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f52:	2209      	movs	r2, #9
 8005f54:	2102      	movs	r1, #2
 8005f56:	68b8      	ldr	r0, [r7, #8]
 8005f58:	f7fa fece 	bl	8000cf8 <GPIO_PinAFConfig>
 8005f5c:	e04c      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f5e:	2209      	movs	r2, #9
 8005f60:	2103      	movs	r1, #3
 8005f62:	68b8      	ldr	r0, [r7, #8]
 8005f64:	f7fa fec8 	bl	8000cf8 <GPIO_PinAFConfig>
 8005f68:	e046      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f6a:	2209      	movs	r2, #9
 8005f6c:	2104      	movs	r1, #4
 8005f6e:	68b8      	ldr	r0, [r7, #8]
 8005f70:	f7fa fec2 	bl	8000cf8 <GPIO_PinAFConfig>
 8005f74:	e040      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f76:	2209      	movs	r2, #9
 8005f78:	2105      	movs	r1, #5
 8005f7a:	68b8      	ldr	r0, [r7, #8]
 8005f7c:	f7fa febc 	bl	8000cf8 <GPIO_PinAFConfig>
 8005f80:	e03a      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f82:	2209      	movs	r2, #9
 8005f84:	2106      	movs	r1, #6
 8005f86:	68b8      	ldr	r0, [r7, #8]
 8005f88:	f7fa feb6 	bl	8000cf8 <GPIO_PinAFConfig>
 8005f8c:	e034      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f8e:	2209      	movs	r2, #9
 8005f90:	2107      	movs	r1, #7
 8005f92:	68b8      	ldr	r0, [r7, #8]
 8005f94:	f7fa feb0 	bl	8000cf8 <GPIO_PinAFConfig>
 8005f98:	e02e      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005f9a:	2209      	movs	r2, #9
 8005f9c:	2108      	movs	r1, #8
 8005f9e:	68b8      	ldr	r0, [r7, #8]
 8005fa0:	f7fa feaa 	bl	8000cf8 <GPIO_PinAFConfig>
 8005fa4:	e028      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005fa6:	2209      	movs	r2, #9
 8005fa8:	2109      	movs	r1, #9
 8005faa:	68b8      	ldr	r0, [r7, #8]
 8005fac:	f7fa fea4 	bl	8000cf8 <GPIO_PinAFConfig>
 8005fb0:	e022      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005fb2:	2209      	movs	r2, #9
 8005fb4:	210a      	movs	r1, #10
 8005fb6:	68b8      	ldr	r0, [r7, #8]
 8005fb8:	f7fa fe9e 	bl	8000cf8 <GPIO_PinAFConfig>
 8005fbc:	e01c      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005fbe:	2209      	movs	r2, #9
 8005fc0:	210b      	movs	r1, #11
 8005fc2:	68b8      	ldr	r0, [r7, #8]
 8005fc4:	f7fa fe98 	bl	8000cf8 <GPIO_PinAFConfig>
 8005fc8:	e016      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005fca:	2209      	movs	r2, #9
 8005fcc:	210c      	movs	r1, #12
 8005fce:	68b8      	ldr	r0, [r7, #8]
 8005fd0:	f7fa fe92 	bl	8000cf8 <GPIO_PinAFConfig>
 8005fd4:	e010      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005fd6:	2209      	movs	r2, #9
 8005fd8:	210d      	movs	r1, #13
 8005fda:	68b8      	ldr	r0, [r7, #8]
 8005fdc:	f7fa fe8c 	bl	8000cf8 <GPIO_PinAFConfig>
 8005fe0:	e00a      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005fe2:	2209      	movs	r2, #9
 8005fe4:	210e      	movs	r1, #14
 8005fe6:	68b8      	ldr	r0, [r7, #8]
 8005fe8:	f7fa fe86 	bl	8000cf8 <GPIO_PinAFConfig>
 8005fec:	e004      	b.n	8005ff8 <CANx_Init+0x3d8>
 8005fee:	2209      	movs	r2, #9
 8005ff0:	210f      	movs	r1, #15
 8005ff2:	68b8      	ldr	r0, [r7, #8]
 8005ff4:	f7fa fe80 	bl	8000cf8 <GPIO_PinAFConfig>
 8005ff8:	bf00      	nop
		AFConfig(CAN2,CANx_Rx_GPIOx,CANx_Rx_pin);
 8005ffa:	8c3b      	ldrh	r3, [r7, #32]
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d05e      	beq.n	80060be <CANx_Init+0x49e>
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d811      	bhi.n	8006028 <CANx_Init+0x408>
 8006004:	2b08      	cmp	r3, #8
 8006006:	d042      	beq.n	800608e <CANx_Init+0x46e>
 8006008:	2b08      	cmp	r3, #8
 800600a:	d806      	bhi.n	800601a <CANx_Init+0x3fa>
 800600c:	2b02      	cmp	r3, #2
 800600e:	d032      	beq.n	8006076 <CANx_Init+0x456>
 8006010:	2b04      	cmp	r3, #4
 8006012:	d036      	beq.n	8006082 <CANx_Init+0x462>
 8006014:	2b01      	cmp	r3, #1
 8006016:	d028      	beq.n	800606a <CANx_Init+0x44a>
 8006018:	e086      	b.n	8006128 <CANx_Init+0x508>
 800601a:	2b20      	cmp	r3, #32
 800601c:	d043      	beq.n	80060a6 <CANx_Init+0x486>
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d047      	beq.n	80060b2 <CANx_Init+0x492>
 8006022:	2b10      	cmp	r3, #16
 8006024:	d039      	beq.n	800609a <CANx_Init+0x47a>
 8006026:	e07f      	b.n	8006128 <CANx_Init+0x508>
 8006028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602c:	d05f      	beq.n	80060ee <CANx_Init+0x4ce>
 800602e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006032:	d809      	bhi.n	8006048 <CANx_Init+0x428>
 8006034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006038:	d04d      	beq.n	80060d6 <CANx_Init+0x4b6>
 800603a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603e:	d050      	beq.n	80060e2 <CANx_Init+0x4c2>
 8006040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006044:	d041      	beq.n	80060ca <CANx_Init+0x4aa>
 8006046:	e06f      	b.n	8006128 <CANx_Init+0x508>
 8006048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604c:	d05b      	beq.n	8006106 <CANx_Init+0x4e6>
 800604e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006052:	d803      	bhi.n	800605c <CANx_Init+0x43c>
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006058:	d04f      	beq.n	80060fa <CANx_Init+0x4da>
 800605a:	e065      	b.n	8006128 <CANx_Init+0x508>
 800605c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006060:	d057      	beq.n	8006112 <CANx_Init+0x4f2>
 8006062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006066:	d05a      	beq.n	800611e <CANx_Init+0x4fe>
 8006068:	e05e      	b.n	8006128 <CANx_Init+0x508>
 800606a:	2209      	movs	r2, #9
 800606c:	2100      	movs	r1, #0
 800606e:	6838      	ldr	r0, [r7, #0]
 8006070:	f7fa fe42 	bl	8000cf8 <GPIO_PinAFConfig>
 8006074:	e058      	b.n	8006128 <CANx_Init+0x508>
 8006076:	2209      	movs	r2, #9
 8006078:	2101      	movs	r1, #1
 800607a:	6838      	ldr	r0, [r7, #0]
 800607c:	f7fa fe3c 	bl	8000cf8 <GPIO_PinAFConfig>
 8006080:	e052      	b.n	8006128 <CANx_Init+0x508>
 8006082:	2209      	movs	r2, #9
 8006084:	2102      	movs	r1, #2
 8006086:	6838      	ldr	r0, [r7, #0]
 8006088:	f7fa fe36 	bl	8000cf8 <GPIO_PinAFConfig>
 800608c:	e04c      	b.n	8006128 <CANx_Init+0x508>
 800608e:	2209      	movs	r2, #9
 8006090:	2103      	movs	r1, #3
 8006092:	6838      	ldr	r0, [r7, #0]
 8006094:	f7fa fe30 	bl	8000cf8 <GPIO_PinAFConfig>
 8006098:	e046      	b.n	8006128 <CANx_Init+0x508>
 800609a:	2209      	movs	r2, #9
 800609c:	2104      	movs	r1, #4
 800609e:	6838      	ldr	r0, [r7, #0]
 80060a0:	f7fa fe2a 	bl	8000cf8 <GPIO_PinAFConfig>
 80060a4:	e040      	b.n	8006128 <CANx_Init+0x508>
 80060a6:	2209      	movs	r2, #9
 80060a8:	2105      	movs	r1, #5
 80060aa:	6838      	ldr	r0, [r7, #0]
 80060ac:	f7fa fe24 	bl	8000cf8 <GPIO_PinAFConfig>
 80060b0:	e03a      	b.n	8006128 <CANx_Init+0x508>
 80060b2:	2209      	movs	r2, #9
 80060b4:	2106      	movs	r1, #6
 80060b6:	6838      	ldr	r0, [r7, #0]
 80060b8:	f7fa fe1e 	bl	8000cf8 <GPIO_PinAFConfig>
 80060bc:	e034      	b.n	8006128 <CANx_Init+0x508>
 80060be:	2209      	movs	r2, #9
 80060c0:	2107      	movs	r1, #7
 80060c2:	6838      	ldr	r0, [r7, #0]
 80060c4:	f7fa fe18 	bl	8000cf8 <GPIO_PinAFConfig>
 80060c8:	e02e      	b.n	8006128 <CANx_Init+0x508>
 80060ca:	2209      	movs	r2, #9
 80060cc:	2108      	movs	r1, #8
 80060ce:	6838      	ldr	r0, [r7, #0]
 80060d0:	f7fa fe12 	bl	8000cf8 <GPIO_PinAFConfig>
 80060d4:	e028      	b.n	8006128 <CANx_Init+0x508>
 80060d6:	2209      	movs	r2, #9
 80060d8:	2109      	movs	r1, #9
 80060da:	6838      	ldr	r0, [r7, #0]
 80060dc:	f7fa fe0c 	bl	8000cf8 <GPIO_PinAFConfig>
 80060e0:	e022      	b.n	8006128 <CANx_Init+0x508>
 80060e2:	2209      	movs	r2, #9
 80060e4:	210a      	movs	r1, #10
 80060e6:	6838      	ldr	r0, [r7, #0]
 80060e8:	f7fa fe06 	bl	8000cf8 <GPIO_PinAFConfig>
 80060ec:	e01c      	b.n	8006128 <CANx_Init+0x508>
 80060ee:	2209      	movs	r2, #9
 80060f0:	210b      	movs	r1, #11
 80060f2:	6838      	ldr	r0, [r7, #0]
 80060f4:	f7fa fe00 	bl	8000cf8 <GPIO_PinAFConfig>
 80060f8:	e016      	b.n	8006128 <CANx_Init+0x508>
 80060fa:	2209      	movs	r2, #9
 80060fc:	210c      	movs	r1, #12
 80060fe:	6838      	ldr	r0, [r7, #0]
 8006100:	f7fa fdfa 	bl	8000cf8 <GPIO_PinAFConfig>
 8006104:	e010      	b.n	8006128 <CANx_Init+0x508>
 8006106:	2209      	movs	r2, #9
 8006108:	210d      	movs	r1, #13
 800610a:	6838      	ldr	r0, [r7, #0]
 800610c:	f7fa fdf4 	bl	8000cf8 <GPIO_PinAFConfig>
 8006110:	e00a      	b.n	8006128 <CANx_Init+0x508>
 8006112:	2209      	movs	r2, #9
 8006114:	210e      	movs	r1, #14
 8006116:	6838      	ldr	r0, [r7, #0]
 8006118:	f7fa fdee 	bl	8000cf8 <GPIO_PinAFConfig>
 800611c:	e004      	b.n	8006128 <CANx_Init+0x508>
 800611e:	2209      	movs	r2, #9
 8006120:	210f      	movs	r1, #15
 8006122:	6838      	ldr	r0, [r7, #0]
 8006124:	f7fa fde8 	bl	8000cf8 <GPIO_PinAFConfig>
 8006128:	bf00      	nop
	}

	GPIOPinsInit (CANx_Tx_GPIOx, CANx_Tx_pin, GPIO_Mode_AF, GPIO_OType_PP, GPIO_Speed_50MHz,  GPIO_PuPd_UP);
 800612a:	88f9      	ldrh	r1, [r7, #6]
 800612c:	2301      	movs	r3, #1
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	2302      	movs	r3, #2
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	2202      	movs	r2, #2
 8006138:	68b8      	ldr	r0, [r7, #8]
 800613a:	f7fc f83d 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (CANx_Rx_GPIOx, CANx_Rx_pin, GPIO_Mode_AF, GPIO_OType_PP, GPIO_Speed_50MHz,  GPIO_PuPd_UP);
 800613e:	8c39      	ldrh	r1, [r7, #32]
 8006140:	2301      	movs	r3, #1
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	2302      	movs	r3, #2
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	2300      	movs	r3, #0
 800614a:	2202      	movs	r2, #2
 800614c:	6838      	ldr	r0, [r7, #0]
 800614e:	f7fc f833 	bl	80021b8 <GPIOPinsInit>

	CAN_InitStruct.CAN_TTCM = DISABLE;
 8006152:	4b55      	ldr	r3, [pc, #340]	; (80062a8 <CANx_Init+0x688>)
 8006154:	2200      	movs	r2, #0
 8006156:	719a      	strb	r2, [r3, #6]
	CAN_InitStruct.CAN_ABOM = ENABLE;
 8006158:	4b53      	ldr	r3, [pc, #332]	; (80062a8 <CANx_Init+0x688>)
 800615a:	2201      	movs	r2, #1
 800615c:	71da      	strb	r2, [r3, #7]
	CAN_InitStruct.CAN_AWUM = DISABLE;
 800615e:	4b52      	ldr	r3, [pc, #328]	; (80062a8 <CANx_Init+0x688>)
 8006160:	2200      	movs	r2, #0
 8006162:	721a      	strb	r2, [r3, #8]
	CAN_InitStruct.CAN_NART = DISABLE;
 8006164:	4b50      	ldr	r3, [pc, #320]	; (80062a8 <CANx_Init+0x688>)
 8006166:	2200      	movs	r2, #0
 8006168:	725a      	strb	r2, [r3, #9]
	CAN_InitStruct.CAN_RFLM = DISABLE;
 800616a:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <CANx_Init+0x688>)
 800616c:	2200      	movs	r2, #0
 800616e:	729a      	strb	r2, [r3, #10]
	CAN_InitStruct.CAN_TXFP = ENABLE;
 8006170:	4b4d      	ldr	r3, [pc, #308]	; (80062a8 <CANx_Init+0x688>)
 8006172:	2201      	movs	r2, #1
 8006174:	72da      	strb	r2, [r3, #11]
	CAN_InitStruct.CAN_Mode = CAN_Mode_Normal;
 8006176:	4b4c      	ldr	r3, [pc, #304]	; (80062a8 <CANx_Init+0x688>)
 8006178:	2200      	movs	r2, #0
 800617a:	709a      	strb	r2, [r3, #2]
	CAN_InitStruct.CAN_SJW = CAN_SJW_1tq;
 800617c:	4b4a      	ldr	r3, [pc, #296]	; (80062a8 <CANx_Init+0x688>)
 800617e:	2200      	movs	r2, #0
 8006180:	70da      	strb	r2, [r3, #3]
	CAN_InitStruct.CAN_BS1 = CAN_BS1_12tq;
 8006182:	4b49      	ldr	r3, [pc, #292]	; (80062a8 <CANx_Init+0x688>)
 8006184:	220b      	movs	r2, #11
 8006186:	711a      	strb	r2, [r3, #4]
	CAN_InitStruct.CAN_BS2 = CAN_BS2_8tq;
 8006188:	4b47      	ldr	r3, [pc, #284]	; (80062a8 <CANx_Init+0x688>)
 800618a:	2207      	movs	r2, #7
 800618c:	715a      	strb	r2, [r3, #5]
//	CAN_InitStruct.CAN_SJW = CAN_SJW_1tq;
//	CAN_InitStruct.CAN_BS1 = CAN_BS1_5tq;
//	CAN_InitStruct.CAN_BS2 = CAN_BS2_2tq;
	CAN_InitStruct.CAN_Prescaler = CAN_Prescaler;
 800618e:	4a46      	ldr	r2, [pc, #280]	; (80062a8 <CANx_Init+0x688>)
 8006190:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006192:	8013      	strh	r3, [r2, #0]
	CAN_InitStatus = CAN_Init(CANx, &CAN_InitStruct);
 8006194:	4944      	ldr	r1, [pc, #272]	; (80062a8 <CANx_Init+0x688>)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7fa f894 	bl	80002c4 <CAN_Init>
 800619c:	4603      	mov	r3, r0
 800619e:	75fb      	strb	r3, [r7, #23]

	CAN_FilterInitStruct.CAN_FilterActivation = ENABLE;
 80061a0:	4b42      	ldr	r3, [pc, #264]	; (80062ac <CANx_Init+0x68c>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	735a      	strb	r2, [r3, #13]
	CAN_FilterInitStruct.CAN_FilterFIFOAssignment = CAN_FilterFIFOAssignment;
 80061a6:	4a41      	ldr	r2, [pc, #260]	; (80062ac <CANx_Init+0x68c>)
 80061a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061aa:	8113      	strh	r3, [r2, #8]
	CAN_FilterInitStruct.CAN_FilterIdHigh = CAN_FilterId_11bits << 5;
 80061ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061ae:	015b      	lsls	r3, r3, #5
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	4b3e      	ldr	r3, [pc, #248]	; (80062ac <CANx_Init+0x68c>)
 80061b4:	801a      	strh	r2, [r3, #0]
	CAN_FilterInitStruct.CAN_FilterIdLow = 0x0;
 80061b6:	4b3d      	ldr	r3, [pc, #244]	; (80062ac <CANx_Init+0x68c>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	805a      	strh	r2, [r3, #2]
	CAN_FilterInitStruct.CAN_FilterMaskIdHigh = CAN_FilterMaskId_11bits << 5;
 80061bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061be:	015b      	lsls	r3, r3, #5
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	4b3a      	ldr	r3, [pc, #232]	; (80062ac <CANx_Init+0x68c>)
 80061c4:	809a      	strh	r2, [r3, #4]
	CAN_FilterInitStruct.CAN_FilterMaskIdLow = 0x0;
 80061c6:	4b39      	ldr	r3, [pc, #228]	; (80062ac <CANx_Init+0x68c>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	80da      	strh	r2, [r3, #6]
	CAN_FilterInitStruct.CAN_FilterMode = CAN_FilterMode_IdMask;
 80061cc:	4b37      	ldr	r3, [pc, #220]	; (80062ac <CANx_Init+0x68c>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	72da      	strb	r2, [r3, #11]
	CAN_FilterInitStruct.CAN_FilterNumber = CAN_FilterNumber;
 80061d2:	4a36      	ldr	r2, [pc, #216]	; (80062ac <CANx_Init+0x68c>)
 80061d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80061d8:	7293      	strb	r3, [r2, #10]
	CAN_FilterInitStruct.CAN_FilterScale = CAN_FilterScale_32bit;
 80061da:	4b34      	ldr	r3, [pc, #208]	; (80062ac <CANx_Init+0x68c>)
 80061dc:	2201      	movs	r2, #1
 80061de:	731a      	strb	r2, [r3, #12]
	CAN_FilterInit(&CAN_FilterInitStruct);
 80061e0:	4832      	ldr	r0, [pc, #200]	; (80062ac <CANx_Init+0x68c>)
 80061e2:	f7fa f941 	bl	8000468 <CAN_FilterInit>

	if(CANx == CAN2){
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a31      	ldr	r2, [pc, #196]	; (80062b0 <CANx_Init+0x690>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d104      	bne.n	80061f8 <CANx_Init+0x5d8>
		CAN_SlaveStartBank(CAN_FilterNumber);
 80061ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fa f9f4 	bl	80005e0 <CAN_SlaveStartBank>
	}
	CAN_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = N_PPriority;
 80061f8:	4a2e      	ldr	r2, [pc, #184]	; (80062b4 <CANx_Init+0x694>)
 80061fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80061fe:	7053      	strb	r3, [r2, #1]
	CAN_NVIC_InitStructure.NVIC_IRQChannelSubPriority = N_SPriority;
 8006200:	4a2c      	ldr	r2, [pc, #176]	; (80062b4 <CANx_Init+0x694>)
 8006202:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006206:	7093      	strb	r3, [r2, #2]
	CAN_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8006208:	4b2a      	ldr	r3, [pc, #168]	; (80062b4 <CANx_Init+0x694>)
 800620a:	2201      	movs	r2, #1
 800620c:	70da      	strb	r2, [r3, #3]

	if ((CANx == CAN1)&&(CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)){
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a29      	ldr	r2, [pc, #164]	; (80062b8 <CANx_Init+0x698>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d10d      	bne.n	8006232 <CANx_Init+0x612>
 8006216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <CANx_Init+0x612>
		CAN_NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
 800621c:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <CANx_Init+0x694>)
 800621e:	2214      	movs	r2, #20
 8006220:	701a      	strb	r2, [r3, #0]
		NVIC_Init(&CAN_NVIC_InitStructure);
 8006222:	4824      	ldr	r0, [pc, #144]	; (80062b4 <CANx_Init+0x694>)
 8006224:	f7f9 ffec 	bl	8000200 <NVIC_Init>
		CAN_ITConfig(CANx, CAN_IT_FMP0, ENABLE);
 8006228:	2201      	movs	r2, #1
 800622a:	2102      	movs	r1, #2
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7fa fac5 	bl	80007bc <CAN_ITConfig>
	}
	if ((CANx == CAN1)&&(CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)){
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <CANx_Init+0x698>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d10d      	bne.n	8006256 <CANx_Init+0x636>
 800623a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800623c:	2b01      	cmp	r3, #1
 800623e:	d10a      	bne.n	8006256 <CANx_Init+0x636>
		CAN_NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX1_IRQn;
 8006240:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <CANx_Init+0x694>)
 8006242:	2215      	movs	r2, #21
 8006244:	701a      	strb	r2, [r3, #0]
		NVIC_Init(&CAN_NVIC_InitStructure);
 8006246:	481b      	ldr	r0, [pc, #108]	; (80062b4 <CANx_Init+0x694>)
 8006248:	f7f9 ffda 	bl	8000200 <NVIC_Init>
		CAN_ITConfig(CANx, CAN_IT_FMP1, ENABLE);
 800624c:	2201      	movs	r2, #1
 800624e:	2110      	movs	r1, #16
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7fa fab3 	bl	80007bc <CAN_ITConfig>
	}
	if ((CANx == CAN2)&&(CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)){
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <CANx_Init+0x690>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10d      	bne.n	800627a <CANx_Init+0x65a>
 800625e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <CANx_Init+0x65a>
		CAN_NVIC_InitStructure.NVIC_IRQChannel = CAN2_RX0_IRQn;
 8006264:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <CANx_Init+0x694>)
 8006266:	2240      	movs	r2, #64	; 0x40
 8006268:	701a      	strb	r2, [r3, #0]
		NVIC_Init(&CAN_NVIC_InitStructure);
 800626a:	4812      	ldr	r0, [pc, #72]	; (80062b4 <CANx_Init+0x694>)
 800626c:	f7f9 ffc8 	bl	8000200 <NVIC_Init>
		CAN_ITConfig(CANx, CAN_IT_FMP0, ENABLE);
 8006270:	2201      	movs	r2, #1
 8006272:	2102      	movs	r1, #2
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7fa faa1 	bl	80007bc <CAN_ITConfig>
	}
	if ((CANx == CAN2)&&(CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)){
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a0c      	ldr	r2, [pc, #48]	; (80062b0 <CANx_Init+0x690>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10d      	bne.n	800629e <CANx_Init+0x67e>
 8006282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10a      	bne.n	800629e <CANx_Init+0x67e>
		CAN_NVIC_InitStructure.NVIC_IRQChannel = CAN2_RX1_IRQn;
 8006288:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <CANx_Init+0x694>)
 800628a:	2241      	movs	r2, #65	; 0x41
 800628c:	701a      	strb	r2, [r3, #0]
		NVIC_Init(&CAN_NVIC_InitStructure);
 800628e:	4809      	ldr	r0, [pc, #36]	; (80062b4 <CANx_Init+0x694>)
 8006290:	f7f9 ffb6 	bl	8000200 <NVIC_Init>
		CAN_ITConfig(CANx, CAN_IT_FMP1, ENABLE);
 8006294:	2201      	movs	r2, #1
 8006296:	2110      	movs	r1, #16
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f7fa fa8f 	bl	80007bc <CAN_ITConfig>
	}
	return CAN_InitStatus;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	2000057c 	.word	0x2000057c
 80062ac:	20000588 	.word	0x20000588
 80062b0:	40006800 	.word	0x40006800
 80062b4:	20000598 	.word	0x20000598
 80062b8:	40006400 	.word	0x40006400

080062bc <I2C1_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_EV_IRQHandler(void){
 80062bc:	b598      	push	{r3, r4, r7, lr}
 80062be:	af00      	add	r7, sp, #0
//	CPU_SR_ALLOC();
//	OS_ENTER_CRITICAL();
//	OSIntEnter();
//	OS_EXIT_CRITICAL();

	switch(I2C_GetLastEvent(I2C1)){
 80062c0:	489e      	ldr	r0, [pc, #632]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 80062c2:	f7fa ff4f 	bl	8001164 <I2C_GetLastEvent>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4a9d      	ldr	r2, [pc, #628]	; (8006540 <I2C1_EV_IRQHandler+0x284>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	f000 8081 	beq.w	80063d2 <I2C1_EV_IRQHandler+0x116>
 80062d0:	4a9b      	ldr	r2, [pc, #620]	; (8006540 <I2C1_EV_IRQHandler+0x284>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d815      	bhi.n	8006302 <I2C1_EV_IRQHandler+0x46>
 80062d6:	4a9b      	ldr	r2, [pc, #620]	; (8006544 <I2C1_EV_IRQHandler+0x288>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	f000 8104 	beq.w	80064e6 <I2C1_EV_IRQHandler+0x22a>
 80062de:	4a99      	ldr	r2, [pc, #612]	; (8006544 <I2C1_EV_IRQHandler+0x288>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d807      	bhi.n	80062f4 <I2C1_EV_IRQHandler+0x38>
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	f000 810d 	beq.w	8006504 <I2C1_EV_IRQHandler+0x248>
 80062ea:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 80062ee:	f000 80f6 	beq.w	80064de <I2C1_EV_IRQHandler+0x222>
				srcvhandlerI2C1(I2C1_slave_rcv_buf[1] + 3, I2C1_slave_rcv_buf);
			break;

/*****************************************************************************************************************/

		default: break;
 80062f2:	e120      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C1)){
 80062f4:	4a94      	ldr	r2, [pc, #592]	; (8006548 <I2C1_EV_IRQHandler+0x28c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01a      	beq.n	8006330 <I2C1_EV_IRQHandler+0x74>
 80062fa:	4a94      	ldr	r2, [pc, #592]	; (800654c <I2C1_EV_IRQHandler+0x290>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d057      	beq.n	80063b0 <I2C1_EV_IRQHandler+0xf4>
		default: break;
 8006300:	e119      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C1)){
 8006302:	4a93      	ldr	r2, [pc, #588]	; (8006550 <I2C1_EV_IRQHandler+0x294>)
 8006304:	4293      	cmp	r3, r2
 8006306:	f000 80d6 	beq.w	80064b6 <I2C1_EV_IRQHandler+0x1fa>
 800630a:	4a91      	ldr	r2, [pc, #580]	; (8006550 <I2C1_EV_IRQHandler+0x294>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d808      	bhi.n	8006322 <I2C1_EV_IRQHandler+0x66>
 8006310:	4a90      	ldr	r2, [pc, #576]	; (8006554 <I2C1_EV_IRQHandler+0x298>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f000 80cf 	beq.w	80064b6 <I2C1_EV_IRQHandler+0x1fa>
 8006318:	4a8f      	ldr	r2, [pc, #572]	; (8006558 <I2C1_EV_IRQHandler+0x29c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f000 80b1 	beq.w	8006482 <I2C1_EV_IRQHandler+0x1c6>
		default: break;
 8006320:	e109      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C1)){
 8006322:	4a8e      	ldr	r2, [pc, #568]	; (800655c <I2C1_EV_IRQHandler+0x2a0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d01f      	beq.n	8006368 <I2C1_EV_IRQHandler+0xac>
 8006328:	4a8d      	ldr	r2, [pc, #564]	; (8006560 <I2C1_EV_IRQHandler+0x2a4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00b      	beq.n	8006346 <I2C1_EV_IRQHandler+0x8a>
		default: break;
 800632e:	e102      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			I2C_Send7bitAddress(I2C1, I2C1slaveadress << 1, I2C1_direction);
 8006330:	4b8c      	ldr	r3, [pc, #560]	; (8006564 <I2C1_EV_IRQHandler+0x2a8>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	b2d9      	uxtb	r1, r3
 8006338:	4b8b      	ldr	r3, [pc, #556]	; (8006568 <I2C1_EV_IRQHandler+0x2ac>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	487f      	ldr	r0, [pc, #508]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 8006340:	f7fa fe60 	bl	8001004 <I2C_Send7bitAddress>
			break;
 8006344:	e0f7      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			I2C1_Txlength = 0;
 8006346:	4b89      	ldr	r3, [pc, #548]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
			I2C_SendData(I2C1, I2C1_master_snd_buf[I2C1_Txlength++]);
 800634c:	4b87      	ldr	r3, [pc, #540]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	b2d1      	uxtb	r1, r2
 8006354:	4a85      	ldr	r2, [pc, #532]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 8006356:	7011      	strb	r1, [r2, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	4b85      	ldr	r3, [pc, #532]	; (8006570 <I2C1_EV_IRQHandler+0x2b4>)
 800635c:	5c9b      	ldrb	r3, [r3, r2]
 800635e:	4619      	mov	r1, r3
 8006360:	4876      	ldr	r0, [pc, #472]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 8006362:	f7fa fe8d 	bl	8001080 <I2C_SendData>
			break;
 8006366:	e0e6      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			if(I2C1_Txlength ==  I2C1txlen){
 8006368:	4b80      	ldr	r3, [pc, #512]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	4b81      	ldr	r3, [pc, #516]	; (8006574 <I2C1_EV_IRQHandler+0x2b8>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d10f      	bne.n	8006394 <I2C1_EV_IRQHandler+0xd8>
				while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8006374:	bf00      	nop
 8006376:	4980      	ldr	r1, [pc, #512]	; (8006578 <I2C1_EV_IRQHandler+0x2bc>)
 8006378:	4870      	ldr	r0, [pc, #448]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 800637a:	f7fa fec3 	bl	8001104 <I2C_CheckEvent>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f8      	beq.n	8006376 <I2C1_EV_IRQHandler+0xba>
				I2C_GenerateSTOP(I2C1, ENABLE);
 8006384:	2101      	movs	r1, #1
 8006386:	486d      	ldr	r0, [pc, #436]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 8006388:	f7fa fe1c 	bl	8000fc4 <I2C_GenerateSTOP>
				I2C1_Master_Flag = 0;
 800638c:	4b7b      	ldr	r3, [pc, #492]	; (800657c <I2C1_EV_IRQHandler+0x2c0>)
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
			break;
 8006392:	e0d0      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
				I2C_SendData(I2C1, I2C1_master_snd_buf[I2C1_Txlength++]);
 8006394:	4b75      	ldr	r3, [pc, #468]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	b2d1      	uxtb	r1, r2
 800639c:	4a73      	ldr	r2, [pc, #460]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 800639e:	7011      	strb	r1, [r2, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	4b73      	ldr	r3, [pc, #460]	; (8006570 <I2C1_EV_IRQHandler+0x2b4>)
 80063a4:	5c9b      	ldrb	r3, [r3, r2]
 80063a6:	4619      	mov	r1, r3
 80063a8:	4864      	ldr	r0, [pc, #400]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 80063aa:	f7fa fe69 	bl	8001080 <I2C_SendData>
			break;
 80063ae:	e0c2      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			I2C1_Rxlength = 0;
 80063b0:	4b73      	ldr	r3, [pc, #460]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
			if(I2C1rxlen == 1){
 80063b6:	4b73      	ldr	r3, [pc, #460]	; (8006584 <I2C1_EV_IRQHandler+0x2c8>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	f040 80b4 	bne.w	8006528 <I2C1_EV_IRQHandler+0x26c>
				I2C_AcknowledgeConfig(I2C1, DISABLE);
 80063c0:	2100      	movs	r1, #0
 80063c2:	485e      	ldr	r0, [pc, #376]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 80063c4:	f7fa fe3c 	bl	8001040 <I2C_AcknowledgeConfig>
				I2C_GenerateSTOP(I2C1, ENABLE);
 80063c8:	2101      	movs	r1, #1
 80063ca:	485c      	ldr	r0, [pc, #368]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 80063cc:	f7fa fdfa 	bl	8000fc4 <I2C_GenerateSTOP>
			break;
 80063d0:	e0aa      	b.n	8006528 <I2C1_EV_IRQHandler+0x26c>
			if(I2C1rxlen == 1){
 80063d2:	4b6c      	ldr	r3, [pc, #432]	; (8006584 <I2C1_EV_IRQHandler+0x2c8>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d11c      	bne.n	8006414 <I2C1_EV_IRQHandler+0x158>
				I2C1_master_rcv_buf[I2C1_Rxlength++] = I2C_ReceiveData(I2C1);
 80063da:	4b69      	ldr	r3, [pc, #420]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	b2d1      	uxtb	r1, r2
 80063e2:	4a67      	ldr	r2, [pc, #412]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 80063e4:	7011      	strb	r1, [r2, #0]
 80063e6:	461c      	mov	r4, r3
 80063e8:	4854      	ldr	r0, [pc, #336]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 80063ea:	f7fa fe59 	bl	80010a0 <I2C_ReceiveData>
 80063ee:	4603      	mov	r3, r0
 80063f0:	461a      	mov	r2, r3
 80063f2:	4b65      	ldr	r3, [pc, #404]	; (8006588 <I2C1_EV_IRQHandler+0x2cc>)
 80063f4:	551a      	strb	r2, [r3, r4]
				if(mrcvhandlerI2C1)
 80063f6:	4b65      	ldr	r3, [pc, #404]	; (800658c <I2C1_EV_IRQHandler+0x2d0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d006      	beq.n	800640c <I2C1_EV_IRQHandler+0x150>
					mrcvhandlerI2C1(I2C1rxlen, I2C1_master_rcv_buf);
 80063fe:	4b63      	ldr	r3, [pc, #396]	; (800658c <I2C1_EV_IRQHandler+0x2d0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a60      	ldr	r2, [pc, #384]	; (8006584 <I2C1_EV_IRQHandler+0x2c8>)
 8006404:	7812      	ldrb	r2, [r2, #0]
 8006406:	4960      	ldr	r1, [pc, #384]	; (8006588 <I2C1_EV_IRQHandler+0x2cc>)
 8006408:	4610      	mov	r0, r2
 800640a:	4798      	blx	r3
				I2C1_Master_Flag = 0;
 800640c:	4b5b      	ldr	r3, [pc, #364]	; (800657c <I2C1_EV_IRQHandler+0x2c0>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
			break;
 8006412:	e08b      	b.n	800652c <I2C1_EV_IRQHandler+0x270>
				I2C1_master_rcv_buf[I2C1_Rxlength++] = I2C_ReceiveData(I2C1);
 8006414:	4b5a      	ldr	r3, [pc, #360]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	b2d1      	uxtb	r1, r2
 800641c:	4a58      	ldr	r2, [pc, #352]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 800641e:	7011      	strb	r1, [r2, #0]
 8006420:	461c      	mov	r4, r3
 8006422:	4846      	ldr	r0, [pc, #280]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 8006424:	f7fa fe3c 	bl	80010a0 <I2C_ReceiveData>
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	4b56      	ldr	r3, [pc, #344]	; (8006588 <I2C1_EV_IRQHandler+0x2cc>)
 800642e:	551a      	strb	r2, [r3, r4]
				if (I2C1_Rxlength == (I2C1rxlen-1)){
 8006430:	4b53      	ldr	r3, [pc, #332]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	4b53      	ldr	r3, [pc, #332]	; (8006584 <I2C1_EV_IRQHandler+0x2c8>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	3b01      	subs	r3, #1
 800643c:	429a      	cmp	r2, r3
 800643e:	d107      	bne.n	8006450 <I2C1_EV_IRQHandler+0x194>
					I2C_AcknowledgeConfig(I2C1, DISABLE);
 8006440:	2100      	movs	r1, #0
 8006442:	483e      	ldr	r0, [pc, #248]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 8006444:	f7fa fdfc 	bl	8001040 <I2C_AcknowledgeConfig>
					I2C_GenerateSTOP(I2C1, ENABLE);
 8006448:	2101      	movs	r1, #1
 800644a:	483c      	ldr	r0, [pc, #240]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 800644c:	f7fa fdba 	bl	8000fc4 <I2C_GenerateSTOP>
				if(I2C1_Rxlength == (I2C1rxlen)){
 8006450:	4b4b      	ldr	r3, [pc, #300]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	4b4b      	ldr	r3, [pc, #300]	; (8006584 <I2C1_EV_IRQHandler+0x2c8>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d167      	bne.n	800652c <I2C1_EV_IRQHandler+0x270>
					I2C_AcknowledgeConfig(I2C1, ENABLE);
 800645c:	2101      	movs	r1, #1
 800645e:	4837      	ldr	r0, [pc, #220]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 8006460:	f7fa fdee 	bl	8001040 <I2C_AcknowledgeConfig>
					if(mrcvhandlerI2C1)
 8006464:	4b49      	ldr	r3, [pc, #292]	; (800658c <I2C1_EV_IRQHandler+0x2d0>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <I2C1_EV_IRQHandler+0x1be>
						mrcvhandlerI2C1(I2C1rxlen, I2C1_master_rcv_buf);
 800646c:	4b47      	ldr	r3, [pc, #284]	; (800658c <I2C1_EV_IRQHandler+0x2d0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a44      	ldr	r2, [pc, #272]	; (8006584 <I2C1_EV_IRQHandler+0x2c8>)
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	4944      	ldr	r1, [pc, #272]	; (8006588 <I2C1_EV_IRQHandler+0x2cc>)
 8006476:	4610      	mov	r0, r2
 8006478:	4798      	blx	r3
					I2C1_Master_Flag = 0;
 800647a:	4b40      	ldr	r3, [pc, #256]	; (800657c <I2C1_EV_IRQHandler+0x2c0>)
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
			break;
 8006480:	e054      	b.n	800652c <I2C1_EV_IRQHandler+0x270>
			I2C1_Txlength = 0;
 8006482:	4b3a      	ldr	r3, [pc, #232]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
			if(stranshandlerI2C1)
 8006488:	4b41      	ldr	r3, [pc, #260]	; (8006590 <I2C1_EV_IRQHandler+0x2d4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <I2C1_EV_IRQHandler+0x1de>
				stranshandlerI2C1(&I2C1txlen, I2C1_slave_snd_buf);
 8006490:	4b3f      	ldr	r3, [pc, #252]	; (8006590 <I2C1_EV_IRQHandler+0x2d4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	493f      	ldr	r1, [pc, #252]	; (8006594 <I2C1_EV_IRQHandler+0x2d8>)
 8006496:	4837      	ldr	r0, [pc, #220]	; (8006574 <I2C1_EV_IRQHandler+0x2b8>)
 8006498:	4798      	blx	r3
			I2C_SendData(I2C1, I2C1_slave_snd_buf[I2C1_Txlength++]);
 800649a:	4b34      	ldr	r3, [pc, #208]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	b2d1      	uxtb	r1, r2
 80064a2:	4a32      	ldr	r2, [pc, #200]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 80064a4:	7011      	strb	r1, [r2, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	4b3a      	ldr	r3, [pc, #232]	; (8006594 <I2C1_EV_IRQHandler+0x2d8>)
 80064aa:	5c9b      	ldrb	r3, [r3, r2]
 80064ac:	4619      	mov	r1, r3
 80064ae:	4823      	ldr	r0, [pc, #140]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 80064b0:	f7fa fde6 	bl	8001080 <I2C_SendData>
			break;
 80064b4:	e03f      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			if (I2C1_Txlength < I2C1txlen){
 80064b6:	4b2d      	ldr	r3, [pc, #180]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 80064b8:	781a      	ldrb	r2, [r3, #0]
 80064ba:	4b2e      	ldr	r3, [pc, #184]	; (8006574 <I2C1_EV_IRQHandler+0x2b8>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d236      	bcs.n	8006530 <I2C1_EV_IRQHandler+0x274>
				I2C_SendData(I2C1, I2C1_slave_snd_buf[I2C1_Txlength++]);
 80064c2:	4b2a      	ldr	r3, [pc, #168]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	b2d1      	uxtb	r1, r2
 80064ca:	4a28      	ldr	r2, [pc, #160]	; (800656c <I2C1_EV_IRQHandler+0x2b0>)
 80064cc:	7011      	strb	r1, [r2, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	4b30      	ldr	r3, [pc, #192]	; (8006594 <I2C1_EV_IRQHandler+0x2d8>)
 80064d2:	5c9b      	ldrb	r3, [r3, r2]
 80064d4:	4619      	mov	r1, r3
 80064d6:	4819      	ldr	r0, [pc, #100]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 80064d8:	f7fa fdd2 	bl	8001080 <I2C_SendData>
			break;
 80064dc:	e028      	b.n	8006530 <I2C1_EV_IRQHandler+0x274>
			I2C1_Rxlength = 0;
 80064de:	4b28      	ldr	r3, [pc, #160]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
			break;
 80064e4:	e027      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			I2C1_slave_rcv_buf[I2C1_Rxlength++] = I2C_ReceiveData(I2C1);
 80064e6:	4b26      	ldr	r3, [pc, #152]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	b2d1      	uxtb	r1, r2
 80064ee:	4a24      	ldr	r2, [pc, #144]	; (8006580 <I2C1_EV_IRQHandler+0x2c4>)
 80064f0:	7011      	strb	r1, [r2, #0]
 80064f2:	461c      	mov	r4, r3
 80064f4:	4811      	ldr	r0, [pc, #68]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 80064f6:	f7fa fdd3 	bl	80010a0 <I2C_ReceiveData>
 80064fa:	4603      	mov	r3, r0
 80064fc:	461a      	mov	r2, r3
 80064fe:	4b26      	ldr	r3, [pc, #152]	; (8006598 <I2C1_EV_IRQHandler+0x2dc>)
 8006500:	551a      	strb	r2, [r3, r4]
			break;
 8006502:	e018      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			I2C_Cmd(I2C1, ENABLE);
 8006504:	2101      	movs	r1, #1
 8006506:	480d      	ldr	r0, [pc, #52]	; (800653c <I2C1_EV_IRQHandler+0x280>)
 8006508:	f7fa fd3c 	bl	8000f84 <I2C_Cmd>
			if(srcvhandlerI2C1)
 800650c:	4b23      	ldr	r3, [pc, #140]	; (800659c <I2C1_EV_IRQHandler+0x2e0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00f      	beq.n	8006534 <I2C1_EV_IRQHandler+0x278>
				srcvhandlerI2C1(I2C1_slave_rcv_buf[1] + 3, I2C1_slave_rcv_buf);
 8006514:	4b21      	ldr	r3, [pc, #132]	; (800659c <I2C1_EV_IRQHandler+0x2e0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1f      	ldr	r2, [pc, #124]	; (8006598 <I2C1_EV_IRQHandler+0x2dc>)
 800651a:	7852      	ldrb	r2, [r2, #1]
 800651c:	3203      	adds	r2, #3
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	491d      	ldr	r1, [pc, #116]	; (8006598 <I2C1_EV_IRQHandler+0x2dc>)
 8006522:	4610      	mov	r0, r2
 8006524:	4798      	blx	r3
			break;
 8006526:	e005      	b.n	8006534 <I2C1_EV_IRQHandler+0x278>
			break;
 8006528:	bf00      	nop
 800652a:	e004      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			break;
 800652c:	bf00      	nop
 800652e:	e002      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			break;
 8006530:	bf00      	nop
 8006532:	e000      	b.n	8006536 <I2C1_EV_IRQHandler+0x27a>
			break;
 8006534:	bf00      	nop

	}
//	OSIntExit();
}
 8006536:	bf00      	nop
 8006538:	bd98      	pop	{r3, r4, r7, pc}
 800653a:	bf00      	nop
 800653c:	40005400 	.word	0x40005400
 8006540:	00030040 	.word	0x00030040
 8006544:	00020040 	.word	0x00020040
 8006548:	00030001 	.word	0x00030001
 800654c:	00030002 	.word	0x00030002
 8006550:	00060084 	.word	0x00060084
 8006554:	00060080 	.word	0x00060080
 8006558:	00060082 	.word	0x00060082
 800655c:	00070080 	.word	0x00070080
 8006560:	00070082 	.word	0x00070082
 8006564:	2000061a 	.word	0x2000061a
 8006568:	2000061b 	.word	0x2000061b
 800656c:	20000a28 	.word	0x20000a28
 8006570:	20000628 	.word	0x20000628
 8006574:	20000619 	.word	0x20000619
 8006578:	00070084 	.word	0x00070084
 800657c:	20000624 	.word	0x20000624
 8006580:	20000a29 	.word	0x20000a29
 8006584:	20000618 	.word	0x20000618
 8006588:	20000728 	.word	0x20000728
 800658c:	20000600 	.word	0x20000600
 8006590:	2000060c 	.word	0x2000060c
 8006594:	20000828 	.word	0x20000828
 8006598:	20000928 	.word	0x20000928
 800659c:	200005f4 	.word	0x200005f4

080065a0 <I2C1_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C1.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_ER_IRQHandler(void){
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
//	CPU_SR_ALLOC();
//	OS_ENTER_CRITICAL();
//	OSIntEnter();
//	OS_EXIT_CRITICAL();

	if(I2C_GetLastEvent(I2C1)== I2C_EVENT_SLAVE_ACK_FAILURE)
 80065a4:	4825      	ldr	r0, [pc, #148]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 80065a6:	f7fa fddd 	bl	8001164 <I2C_GetLastEvent>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b0:	d104      	bne.n	80065bc <I2C1_ER_IRQHandler+0x1c>
		I2C_ClearFlag(I2C1, I2C_FLAG_AF);
 80065b2:	4923      	ldr	r1, [pc, #140]	; (8006640 <I2C1_ER_IRQHandler+0xa0>)
 80065b4:	4821      	ldr	r0, [pc, #132]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 80065b6:	f7fa fe2a 	bl	800120e <I2C_ClearFlag>
 80065ba:	e02a      	b.n	8006612 <I2C1_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C1, I2C_FLAG_OVR) == SET)
 80065bc:	4921      	ldr	r1, [pc, #132]	; (8006644 <I2C1_ER_IRQHandler+0xa4>)
 80065be:	481f      	ldr	r0, [pc, #124]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 80065c0:	f7fa fdf2 	bl	80011a8 <I2C_GetFlagStatus>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d104      	bne.n	80065d4 <I2C1_ER_IRQHandler+0x34>
		I2C_ClearFlag(I2C1, I2C_FLAG_OVR);
 80065ca:	491e      	ldr	r1, [pc, #120]	; (8006644 <I2C1_ER_IRQHandler+0xa4>)
 80065cc:	481b      	ldr	r0, [pc, #108]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 80065ce:	f7fa fe1e 	bl	800120e <I2C_ClearFlag>
 80065d2:	e01e      	b.n	8006612 <I2C1_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C1, I2C_FLAG_ARLO) == SET)
 80065d4:	491c      	ldr	r1, [pc, #112]	; (8006648 <I2C1_ER_IRQHandler+0xa8>)
 80065d6:	4819      	ldr	r0, [pc, #100]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 80065d8:	f7fa fde6 	bl	80011a8 <I2C_GetFlagStatus>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d104      	bne.n	80065ec <I2C1_ER_IRQHandler+0x4c>
		I2C_ClearFlag(I2C1, I2C_FLAG_ARLO);
 80065e2:	4919      	ldr	r1, [pc, #100]	; (8006648 <I2C1_ER_IRQHandler+0xa8>)
 80065e4:	4815      	ldr	r0, [pc, #84]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 80065e6:	f7fa fe12 	bl	800120e <I2C_ClearFlag>
 80065ea:	e012      	b.n	8006612 <I2C1_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C1, I2C_FLAG_BERR) == SET)
 80065ec:	4917      	ldr	r1, [pc, #92]	; (800664c <I2C1_ER_IRQHandler+0xac>)
 80065ee:	4813      	ldr	r0, [pc, #76]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 80065f0:	f7fa fdda 	bl	80011a8 <I2C_GetFlagStatus>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d104      	bne.n	8006604 <I2C1_ER_IRQHandler+0x64>
		I2C_ClearFlag(I2C1, I2C_FLAG_BERR);
 80065fa:	4914      	ldr	r1, [pc, #80]	; (800664c <I2C1_ER_IRQHandler+0xac>)
 80065fc:	480f      	ldr	r0, [pc, #60]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 80065fe:	f7fa fe06 	bl	800120e <I2C_ClearFlag>
 8006602:	e006      	b.n	8006612 <I2C1_ER_IRQHandler+0x72>
	else if (I2C1_Master_Flag == 1)
 8006604:	4b12      	ldr	r3, [pc, #72]	; (8006650 <I2C1_ER_IRQHandler+0xb0>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d102      	bne.n	8006612 <I2C1_ER_IRQHandler+0x72>
		I2C1ReInit();
 800660c:	480b      	ldr	r0, [pc, #44]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 800660e:	f7fa fbbd 	bl	8000d8c <I2C_DeInit>
 8006612:	2101      	movs	r1, #1
 8006614:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006618:	f7fa fed8 	bl	80013cc <RCC_APB1PeriphClockCmd>
 800661c:	2101      	movs	r1, #1
 800661e:	2002      	movs	r0, #2
 8006620:	f7fa feb4 	bl	800138c <RCC_AHB1PeriphClockCmd>
 8006624:	490b      	ldr	r1, [pc, #44]	; (8006654 <I2C1_ER_IRQHandler+0xb4>)
 8006626:	4805      	ldr	r0, [pc, #20]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 8006628:	f7fa fbea 	bl	8000e00 <I2C_Init>
 800662c:	2201      	movs	r2, #1
 800662e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006632:	4802      	ldr	r0, [pc, #8]	; (800663c <I2C1_ER_IRQHandler+0x9c>)
 8006634:	f7fa fd42 	bl	80010bc <I2C_ITConfig>

//	OSIntExit();
}
 8006638:	bf00      	nop
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40005400 	.word	0x40005400
 8006640:	10000400 	.word	0x10000400
 8006644:	10000800 	.word	0x10000800
 8006648:	10000200 	.word	0x10000200
 800664c:	10000100 	.word	0x10000100
 8006650:	20000624 	.word	0x20000624
 8006654:	200005c4 	.word	0x200005c4

08006658 <I2C2_EV_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */

void I2C2_EV_IRQHandler(void){
 8006658:	b598      	push	{r3, r4, r7, lr}
 800665a:	af00      	add	r7, sp, #0
//	CPU_SR_ALLOC();
//	OS_ENTER_CRITICAL();
//	OSIntEnter();
//	OS_EXIT_CRITICAL();

	switch(I2C_GetLastEvent(I2C2)){
 800665c:	489e      	ldr	r0, [pc, #632]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 800665e:	f7fa fd81 	bl	8001164 <I2C_GetLastEvent>
 8006662:	4603      	mov	r3, r0
 8006664:	4a9d      	ldr	r2, [pc, #628]	; (80068dc <I2C2_EV_IRQHandler+0x284>)
 8006666:	4293      	cmp	r3, r2
 8006668:	f000 8081 	beq.w	800676e <I2C2_EV_IRQHandler+0x116>
 800666c:	4a9b      	ldr	r2, [pc, #620]	; (80068dc <I2C2_EV_IRQHandler+0x284>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d815      	bhi.n	800669e <I2C2_EV_IRQHandler+0x46>
 8006672:	4a9b      	ldr	r2, [pc, #620]	; (80068e0 <I2C2_EV_IRQHandler+0x288>)
 8006674:	4293      	cmp	r3, r2
 8006676:	f000 8104 	beq.w	8006882 <I2C2_EV_IRQHandler+0x22a>
 800667a:	4a99      	ldr	r2, [pc, #612]	; (80068e0 <I2C2_EV_IRQHandler+0x288>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d807      	bhi.n	8006690 <I2C2_EV_IRQHandler+0x38>
 8006680:	2b10      	cmp	r3, #16
 8006682:	f000 810d 	beq.w	80068a0 <I2C2_EV_IRQHandler+0x248>
 8006686:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 800668a:	f000 80f6 	beq.w	800687a <I2C2_EV_IRQHandler+0x222>
				srcvhandlerI2C2(I2C2_slave_rcv_buf[1] + 3, I2C2_slave_rcv_buf);
			break;

/*****************************************************************************************************************/

		default: break;
 800668e:	e120      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C2)){
 8006690:	4a94      	ldr	r2, [pc, #592]	; (80068e4 <I2C2_EV_IRQHandler+0x28c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01a      	beq.n	80066cc <I2C2_EV_IRQHandler+0x74>
 8006696:	4a94      	ldr	r2, [pc, #592]	; (80068e8 <I2C2_EV_IRQHandler+0x290>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d057      	beq.n	800674c <I2C2_EV_IRQHandler+0xf4>
		default: break;
 800669c:	e119      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C2)){
 800669e:	4a93      	ldr	r2, [pc, #588]	; (80068ec <I2C2_EV_IRQHandler+0x294>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	f000 80d6 	beq.w	8006852 <I2C2_EV_IRQHandler+0x1fa>
 80066a6:	4a91      	ldr	r2, [pc, #580]	; (80068ec <I2C2_EV_IRQHandler+0x294>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d808      	bhi.n	80066be <I2C2_EV_IRQHandler+0x66>
 80066ac:	4a90      	ldr	r2, [pc, #576]	; (80068f0 <I2C2_EV_IRQHandler+0x298>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	f000 80cf 	beq.w	8006852 <I2C2_EV_IRQHandler+0x1fa>
 80066b4:	4a8f      	ldr	r2, [pc, #572]	; (80068f4 <I2C2_EV_IRQHandler+0x29c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	f000 80b1 	beq.w	800681e <I2C2_EV_IRQHandler+0x1c6>
		default: break;
 80066bc:	e109      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C2)){
 80066be:	4a8e      	ldr	r2, [pc, #568]	; (80068f8 <I2C2_EV_IRQHandler+0x2a0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d01f      	beq.n	8006704 <I2C2_EV_IRQHandler+0xac>
 80066c4:	4a8d      	ldr	r2, [pc, #564]	; (80068fc <I2C2_EV_IRQHandler+0x2a4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <I2C2_EV_IRQHandler+0x8a>
		default: break;
 80066ca:	e102      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			I2C_Send7bitAddress(I2C2, I2C2slaveadress << 1, I2C2_direction);
 80066cc:	4b8c      	ldr	r3, [pc, #560]	; (8006900 <I2C2_EV_IRQHandler+0x2a8>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	b2d9      	uxtb	r1, r3
 80066d4:	4b8b      	ldr	r3, [pc, #556]	; (8006904 <I2C2_EV_IRQHandler+0x2ac>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	487f      	ldr	r0, [pc, #508]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 80066dc:	f7fa fc92 	bl	8001004 <I2C_Send7bitAddress>
			break;
 80066e0:	e0f7      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			I2C2_Txlength = 0;
 80066e2:	4b89      	ldr	r3, [pc, #548]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	701a      	strb	r2, [r3, #0]
			I2C_SendData(I2C2, I2C2_master_snd_buf[I2C2_Txlength++]);
 80066e8:	4b87      	ldr	r3, [pc, #540]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	b2d1      	uxtb	r1, r2
 80066f0:	4a85      	ldr	r2, [pc, #532]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 80066f2:	7011      	strb	r1, [r2, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	4b85      	ldr	r3, [pc, #532]	; (800690c <I2C2_EV_IRQHandler+0x2b4>)
 80066f8:	5c9b      	ldrb	r3, [r3, r2]
 80066fa:	4619      	mov	r1, r3
 80066fc:	4876      	ldr	r0, [pc, #472]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 80066fe:	f7fa fcbf 	bl	8001080 <I2C_SendData>
			break;
 8006702:	e0e6      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			if(I2C2_Txlength ==  I2C2txlen){
 8006704:	4b80      	ldr	r3, [pc, #512]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	4b81      	ldr	r3, [pc, #516]	; (8006910 <I2C2_EV_IRQHandler+0x2b8>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d10f      	bne.n	8006730 <I2C2_EV_IRQHandler+0xd8>
				while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8006710:	bf00      	nop
 8006712:	4980      	ldr	r1, [pc, #512]	; (8006914 <I2C2_EV_IRQHandler+0x2bc>)
 8006714:	4870      	ldr	r0, [pc, #448]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 8006716:	f7fa fcf5 	bl	8001104 <I2C_CheckEvent>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f8      	beq.n	8006712 <I2C2_EV_IRQHandler+0xba>
				I2C_GenerateSTOP(I2C2, ENABLE);
 8006720:	2101      	movs	r1, #1
 8006722:	486d      	ldr	r0, [pc, #436]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 8006724:	f7fa fc4e 	bl	8000fc4 <I2C_GenerateSTOP>
				I2C2_Master_Flag = 0;
 8006728:	4b7b      	ldr	r3, [pc, #492]	; (8006918 <I2C2_EV_IRQHandler+0x2c0>)
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
			break;
 800672e:	e0d0      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
				I2C_SendData(I2C2, I2C2_master_snd_buf[I2C2_Txlength++]);
 8006730:	4b75      	ldr	r3, [pc, #468]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	b2d1      	uxtb	r1, r2
 8006738:	4a73      	ldr	r2, [pc, #460]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 800673a:	7011      	strb	r1, [r2, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	4b73      	ldr	r3, [pc, #460]	; (800690c <I2C2_EV_IRQHandler+0x2b4>)
 8006740:	5c9b      	ldrb	r3, [r3, r2]
 8006742:	4619      	mov	r1, r3
 8006744:	4864      	ldr	r0, [pc, #400]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 8006746:	f7fa fc9b 	bl	8001080 <I2C_SendData>
			break;
 800674a:	e0c2      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			I2C2_Rxlength = 0;
 800674c:	4b73      	ldr	r3, [pc, #460]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]
			if(I2C2rxlen == 1){
 8006752:	4b73      	ldr	r3, [pc, #460]	; (8006920 <I2C2_EV_IRQHandler+0x2c8>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	f040 80b4 	bne.w	80068c4 <I2C2_EV_IRQHandler+0x26c>
				I2C_AcknowledgeConfig(I2C2, DISABLE);
 800675c:	2100      	movs	r1, #0
 800675e:	485e      	ldr	r0, [pc, #376]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 8006760:	f7fa fc6e 	bl	8001040 <I2C_AcknowledgeConfig>
				I2C_GenerateSTOP(I2C2, ENABLE);
 8006764:	2101      	movs	r1, #1
 8006766:	485c      	ldr	r0, [pc, #368]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 8006768:	f7fa fc2c 	bl	8000fc4 <I2C_GenerateSTOP>
			break;
 800676c:	e0aa      	b.n	80068c4 <I2C2_EV_IRQHandler+0x26c>
			if(I2C2rxlen == 1){
 800676e:	4b6c      	ldr	r3, [pc, #432]	; (8006920 <I2C2_EV_IRQHandler+0x2c8>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d11c      	bne.n	80067b0 <I2C2_EV_IRQHandler+0x158>
				I2C2_master_rcv_buf[I2C2_Rxlength++] = I2C_ReceiveData(I2C2);
 8006776:	4b69      	ldr	r3, [pc, #420]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	b2d1      	uxtb	r1, r2
 800677e:	4a67      	ldr	r2, [pc, #412]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 8006780:	7011      	strb	r1, [r2, #0]
 8006782:	461c      	mov	r4, r3
 8006784:	4854      	ldr	r0, [pc, #336]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 8006786:	f7fa fc8b 	bl	80010a0 <I2C_ReceiveData>
 800678a:	4603      	mov	r3, r0
 800678c:	461a      	mov	r2, r3
 800678e:	4b65      	ldr	r3, [pc, #404]	; (8006924 <I2C2_EV_IRQHandler+0x2cc>)
 8006790:	551a      	strb	r2, [r3, r4]
				if(mrcvhandlerI2C2)
 8006792:	4b65      	ldr	r3, [pc, #404]	; (8006928 <I2C2_EV_IRQHandler+0x2d0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d006      	beq.n	80067a8 <I2C2_EV_IRQHandler+0x150>
					mrcvhandlerI2C2(I2C2rxlen, I2C2_master_rcv_buf);
 800679a:	4b63      	ldr	r3, [pc, #396]	; (8006928 <I2C2_EV_IRQHandler+0x2d0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a60      	ldr	r2, [pc, #384]	; (8006920 <I2C2_EV_IRQHandler+0x2c8>)
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	4960      	ldr	r1, [pc, #384]	; (8006924 <I2C2_EV_IRQHandler+0x2cc>)
 80067a4:	4610      	mov	r0, r2
 80067a6:	4798      	blx	r3
				I2C2_Master_Flag = 0;
 80067a8:	4b5b      	ldr	r3, [pc, #364]	; (8006918 <I2C2_EV_IRQHandler+0x2c0>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	701a      	strb	r2, [r3, #0]
			break;
 80067ae:	e08b      	b.n	80068c8 <I2C2_EV_IRQHandler+0x270>
				I2C2_master_rcv_buf[I2C2_Rxlength++] = I2C_ReceiveData(I2C2);
 80067b0:	4b5a      	ldr	r3, [pc, #360]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	b2d1      	uxtb	r1, r2
 80067b8:	4a58      	ldr	r2, [pc, #352]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 80067ba:	7011      	strb	r1, [r2, #0]
 80067bc:	461c      	mov	r4, r3
 80067be:	4846      	ldr	r0, [pc, #280]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 80067c0:	f7fa fc6e 	bl	80010a0 <I2C_ReceiveData>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	4b56      	ldr	r3, [pc, #344]	; (8006924 <I2C2_EV_IRQHandler+0x2cc>)
 80067ca:	551a      	strb	r2, [r3, r4]
				if (I2C2_Rxlength == (I2C2rxlen-1)){
 80067cc:	4b53      	ldr	r3, [pc, #332]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	4b53      	ldr	r3, [pc, #332]	; (8006920 <I2C2_EV_IRQHandler+0x2c8>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	429a      	cmp	r2, r3
 80067da:	d107      	bne.n	80067ec <I2C2_EV_IRQHandler+0x194>
					I2C_AcknowledgeConfig(I2C2, DISABLE);
 80067dc:	2100      	movs	r1, #0
 80067de:	483e      	ldr	r0, [pc, #248]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 80067e0:	f7fa fc2e 	bl	8001040 <I2C_AcknowledgeConfig>
					I2C_GenerateSTOP(I2C2, ENABLE);
 80067e4:	2101      	movs	r1, #1
 80067e6:	483c      	ldr	r0, [pc, #240]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 80067e8:	f7fa fbec 	bl	8000fc4 <I2C_GenerateSTOP>
				if(I2C2_Rxlength == (I2C2rxlen)){
 80067ec:	4b4b      	ldr	r3, [pc, #300]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	4b4b      	ldr	r3, [pc, #300]	; (8006920 <I2C2_EV_IRQHandler+0x2c8>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d167      	bne.n	80068c8 <I2C2_EV_IRQHandler+0x270>
					I2C_AcknowledgeConfig(I2C2, ENABLE);
 80067f8:	2101      	movs	r1, #1
 80067fa:	4837      	ldr	r0, [pc, #220]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 80067fc:	f7fa fc20 	bl	8001040 <I2C_AcknowledgeConfig>
					if(mrcvhandlerI2C2)
 8006800:	4b49      	ldr	r3, [pc, #292]	; (8006928 <I2C2_EV_IRQHandler+0x2d0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d006      	beq.n	8006816 <I2C2_EV_IRQHandler+0x1be>
						mrcvhandlerI2C2(I2C2rxlen, I2C2_master_rcv_buf);
 8006808:	4b47      	ldr	r3, [pc, #284]	; (8006928 <I2C2_EV_IRQHandler+0x2d0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a44      	ldr	r2, [pc, #272]	; (8006920 <I2C2_EV_IRQHandler+0x2c8>)
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	4944      	ldr	r1, [pc, #272]	; (8006924 <I2C2_EV_IRQHandler+0x2cc>)
 8006812:	4610      	mov	r0, r2
 8006814:	4798      	blx	r3
					I2C2_Master_Flag = 0;
 8006816:	4b40      	ldr	r3, [pc, #256]	; (8006918 <I2C2_EV_IRQHandler+0x2c0>)
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
			break;
 800681c:	e054      	b.n	80068c8 <I2C2_EV_IRQHandler+0x270>
			I2C2_Txlength = 0;
 800681e:	4b3a      	ldr	r3, [pc, #232]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 8006820:	2200      	movs	r2, #0
 8006822:	701a      	strb	r2, [r3, #0]
			if(stranshandlerI2C2)
 8006824:	4b41      	ldr	r3, [pc, #260]	; (800692c <I2C2_EV_IRQHandler+0x2d4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <I2C2_EV_IRQHandler+0x1de>
				stranshandlerI2C2(&I2C2txlen, I2C2_slave_snd_buf);
 800682c:	4b3f      	ldr	r3, [pc, #252]	; (800692c <I2C2_EV_IRQHandler+0x2d4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	493f      	ldr	r1, [pc, #252]	; (8006930 <I2C2_EV_IRQHandler+0x2d8>)
 8006832:	4837      	ldr	r0, [pc, #220]	; (8006910 <I2C2_EV_IRQHandler+0x2b8>)
 8006834:	4798      	blx	r3
			I2C_SendData(I2C2, I2C2_slave_snd_buf[I2C2_Txlength++]);
 8006836:	4b34      	ldr	r3, [pc, #208]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	b2d1      	uxtb	r1, r2
 800683e:	4a32      	ldr	r2, [pc, #200]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 8006840:	7011      	strb	r1, [r2, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	4b3a      	ldr	r3, [pc, #232]	; (8006930 <I2C2_EV_IRQHandler+0x2d8>)
 8006846:	5c9b      	ldrb	r3, [r3, r2]
 8006848:	4619      	mov	r1, r3
 800684a:	4823      	ldr	r0, [pc, #140]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 800684c:	f7fa fc18 	bl	8001080 <I2C_SendData>
			break;
 8006850:	e03f      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			if (I2C2_Txlength < I2C2txlen){
 8006852:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	4b2e      	ldr	r3, [pc, #184]	; (8006910 <I2C2_EV_IRQHandler+0x2b8>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d236      	bcs.n	80068cc <I2C2_EV_IRQHandler+0x274>
				I2C_SendData(I2C2, I2C2_slave_snd_buf[I2C2_Txlength++]);
 800685e:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	b2d1      	uxtb	r1, r2
 8006866:	4a28      	ldr	r2, [pc, #160]	; (8006908 <I2C2_EV_IRQHandler+0x2b0>)
 8006868:	7011      	strb	r1, [r2, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	4b30      	ldr	r3, [pc, #192]	; (8006930 <I2C2_EV_IRQHandler+0x2d8>)
 800686e:	5c9b      	ldrb	r3, [r3, r2]
 8006870:	4619      	mov	r1, r3
 8006872:	4819      	ldr	r0, [pc, #100]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 8006874:	f7fa fc04 	bl	8001080 <I2C_SendData>
			break;
 8006878:	e028      	b.n	80068cc <I2C2_EV_IRQHandler+0x274>
			I2C2_Rxlength = 0;
 800687a:	4b28      	ldr	r3, [pc, #160]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 800687c:	2200      	movs	r2, #0
 800687e:	701a      	strb	r2, [r3, #0]
			break;
 8006880:	e027      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			I2C2_slave_rcv_buf[I2C2_Rxlength++] = I2C_ReceiveData(I2C2);
 8006882:	4b26      	ldr	r3, [pc, #152]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	b2d1      	uxtb	r1, r2
 800688a:	4a24      	ldr	r2, [pc, #144]	; (800691c <I2C2_EV_IRQHandler+0x2c4>)
 800688c:	7011      	strb	r1, [r2, #0]
 800688e:	461c      	mov	r4, r3
 8006890:	4811      	ldr	r0, [pc, #68]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 8006892:	f7fa fc05 	bl	80010a0 <I2C_ReceiveData>
 8006896:	4603      	mov	r3, r0
 8006898:	461a      	mov	r2, r3
 800689a:	4b26      	ldr	r3, [pc, #152]	; (8006934 <I2C2_EV_IRQHandler+0x2dc>)
 800689c:	551a      	strb	r2, [r3, r4]
			break;
 800689e:	e018      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			I2C_Cmd(I2C2, ENABLE);
 80068a0:	2101      	movs	r1, #1
 80068a2:	480d      	ldr	r0, [pc, #52]	; (80068d8 <I2C2_EV_IRQHandler+0x280>)
 80068a4:	f7fa fb6e 	bl	8000f84 <I2C_Cmd>
			if(srcvhandlerI2C2)
 80068a8:	4b23      	ldr	r3, [pc, #140]	; (8006938 <I2C2_EV_IRQHandler+0x2e0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00f      	beq.n	80068d0 <I2C2_EV_IRQHandler+0x278>
				srcvhandlerI2C2(I2C2_slave_rcv_buf[1] + 3, I2C2_slave_rcv_buf);
 80068b0:	4b21      	ldr	r3, [pc, #132]	; (8006938 <I2C2_EV_IRQHandler+0x2e0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <I2C2_EV_IRQHandler+0x2dc>)
 80068b6:	7852      	ldrb	r2, [r2, #1]
 80068b8:	3203      	adds	r2, #3
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	491d      	ldr	r1, [pc, #116]	; (8006934 <I2C2_EV_IRQHandler+0x2dc>)
 80068be:	4610      	mov	r0, r2
 80068c0:	4798      	blx	r3
			break;
 80068c2:	e005      	b.n	80068d0 <I2C2_EV_IRQHandler+0x278>
			break;
 80068c4:	bf00      	nop
 80068c6:	e004      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			break;
 80068c8:	bf00      	nop
 80068ca:	e002      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			break;
 80068cc:	bf00      	nop
 80068ce:	e000      	b.n	80068d2 <I2C2_EV_IRQHandler+0x27a>
			break;
 80068d0:	bf00      	nop

	}

//	OSIntExit();

}
 80068d2:	bf00      	nop
 80068d4:	bd98      	pop	{r3, r4, r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40005800 	.word	0x40005800
 80068dc:	00030040 	.word	0x00030040
 80068e0:	00020040 	.word	0x00020040
 80068e4:	00030001 	.word	0x00030001
 80068e8:	00030002 	.word	0x00030002
 80068ec:	00060084 	.word	0x00060084
 80068f0:	00060080 	.word	0x00060080
 80068f4:	00060082 	.word	0x00060082
 80068f8:	00070080 	.word	0x00070080
 80068fc:	00070082 	.word	0x00070082
 8006900:	2000061e 	.word	0x2000061e
 8006904:	2000061f 	.word	0x2000061f
 8006908:	20000e2c 	.word	0x20000e2c
 800690c:	20000a2c 	.word	0x20000a2c
 8006910:	2000061d 	.word	0x2000061d
 8006914:	00070084 	.word	0x00070084
 8006918:	20000625 	.word	0x20000625
 800691c:	20000e2d 	.word	0x20000e2d
 8006920:	2000061c 	.word	0x2000061c
 8006924:	20000b2c 	.word	0x20000b2c
 8006928:	20000604 	.word	0x20000604
 800692c:	20000610 	.word	0x20000610
 8006930:	20000c2c 	.word	0x20000c2c
 8006934:	20000d2c 	.word	0x20000d2c
 8006938:	200005f8 	.word	0x200005f8

0800693c <I2C2_ER_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */

void I2C2_ER_IRQHandler(void){
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
//	CPU_SR_ALLOC();
//	OS_ENTER_CRITICAL();
//	OSIntEnter();
//	OS_EXIT_CRITICAL();

	if(I2C_GetLastEvent(I2C2)== I2C_EVENT_SLAVE_ACK_FAILURE)
 8006940:	4825      	ldr	r0, [pc, #148]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 8006942:	f7fa fc0f 	bl	8001164 <I2C_GetLastEvent>
 8006946:	4603      	mov	r3, r0
 8006948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694c:	d104      	bne.n	8006958 <I2C2_ER_IRQHandler+0x1c>
		I2C_ClearFlag(I2C2, I2C_FLAG_AF);
 800694e:	4923      	ldr	r1, [pc, #140]	; (80069dc <I2C2_ER_IRQHandler+0xa0>)
 8006950:	4821      	ldr	r0, [pc, #132]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 8006952:	f7fa fc5c 	bl	800120e <I2C_ClearFlag>
 8006956:	e02a      	b.n	80069ae <I2C2_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C2, I2C_FLAG_OVR) == SET)
 8006958:	4921      	ldr	r1, [pc, #132]	; (80069e0 <I2C2_ER_IRQHandler+0xa4>)
 800695a:	481f      	ldr	r0, [pc, #124]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 800695c:	f7fa fc24 	bl	80011a8 <I2C_GetFlagStatus>
 8006960:	4603      	mov	r3, r0
 8006962:	2b01      	cmp	r3, #1
 8006964:	d104      	bne.n	8006970 <I2C2_ER_IRQHandler+0x34>
		I2C_ClearFlag(I2C2, I2C_FLAG_OVR);
 8006966:	491e      	ldr	r1, [pc, #120]	; (80069e0 <I2C2_ER_IRQHandler+0xa4>)
 8006968:	481b      	ldr	r0, [pc, #108]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 800696a:	f7fa fc50 	bl	800120e <I2C_ClearFlag>
 800696e:	e01e      	b.n	80069ae <I2C2_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C2, I2C_FLAG_ARLO) == SET)
 8006970:	491c      	ldr	r1, [pc, #112]	; (80069e4 <I2C2_ER_IRQHandler+0xa8>)
 8006972:	4819      	ldr	r0, [pc, #100]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 8006974:	f7fa fc18 	bl	80011a8 <I2C_GetFlagStatus>
 8006978:	4603      	mov	r3, r0
 800697a:	2b01      	cmp	r3, #1
 800697c:	d104      	bne.n	8006988 <I2C2_ER_IRQHandler+0x4c>
		I2C_ClearFlag(I2C2, I2C_FLAG_ARLO);
 800697e:	4919      	ldr	r1, [pc, #100]	; (80069e4 <I2C2_ER_IRQHandler+0xa8>)
 8006980:	4815      	ldr	r0, [pc, #84]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 8006982:	f7fa fc44 	bl	800120e <I2C_ClearFlag>
 8006986:	e012      	b.n	80069ae <I2C2_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C2, I2C_FLAG_BERR) == SET)
 8006988:	4917      	ldr	r1, [pc, #92]	; (80069e8 <I2C2_ER_IRQHandler+0xac>)
 800698a:	4813      	ldr	r0, [pc, #76]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 800698c:	f7fa fc0c 	bl	80011a8 <I2C_GetFlagStatus>
 8006990:	4603      	mov	r3, r0
 8006992:	2b01      	cmp	r3, #1
 8006994:	d104      	bne.n	80069a0 <I2C2_ER_IRQHandler+0x64>
		I2C_ClearFlag(I2C2, I2C_FLAG_BERR);
 8006996:	4914      	ldr	r1, [pc, #80]	; (80069e8 <I2C2_ER_IRQHandler+0xac>)
 8006998:	480f      	ldr	r0, [pc, #60]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 800699a:	f7fa fc38 	bl	800120e <I2C_ClearFlag>
 800699e:	e006      	b.n	80069ae <I2C2_ER_IRQHandler+0x72>
	else if (I2C2_Master_Flag == 1)
 80069a0:	4b12      	ldr	r3, [pc, #72]	; (80069ec <I2C2_ER_IRQHandler+0xb0>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d102      	bne.n	80069ae <I2C2_ER_IRQHandler+0x72>
		I2C2ReInit();
 80069a8:	480b      	ldr	r0, [pc, #44]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 80069aa:	f7fa f9ef 	bl	8000d8c <I2C_DeInit>
 80069ae:	2101      	movs	r1, #1
 80069b0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80069b4:	f7fa fd0a 	bl	80013cc <RCC_APB1PeriphClockCmd>
 80069b8:	2101      	movs	r1, #1
 80069ba:	2002      	movs	r0, #2
 80069bc:	f7fa fce6 	bl	800138c <RCC_AHB1PeriphClockCmd>
 80069c0:	490b      	ldr	r1, [pc, #44]	; (80069f0 <I2C2_ER_IRQHandler+0xb4>)
 80069c2:	4805      	ldr	r0, [pc, #20]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 80069c4:	f7fa fa1c 	bl	8000e00 <I2C_Init>
 80069c8:	2201      	movs	r2, #1
 80069ca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80069ce:	4802      	ldr	r0, [pc, #8]	; (80069d8 <I2C2_ER_IRQHandler+0x9c>)
 80069d0:	f7fa fb74 	bl	80010bc <I2C_ITConfig>

//	OSIntExit();

}
 80069d4:	bf00      	nop
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40005800 	.word	0x40005800
 80069dc:	10000400 	.word	0x10000400
 80069e0:	10000800 	.word	0x10000800
 80069e4:	10000200 	.word	0x10000200
 80069e8:	10000100 	.word	0x10000100
 80069ec:	20000625 	.word	0x20000625
 80069f0:	200005d4 	.word	0x200005d4

080069f4 <I2C3_EV_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */

void I2C3_EV_IRQHandler(void){
 80069f4:	b598      	push	{r3, r4, r7, lr}
 80069f6:	af00      	add	r7, sp, #0
//	CPU_SR_ALLOC();
//	OS_ENTER_CRITICAL();
//	OSIntEnter();
//	OS_EXIT_CRITICAL();

	switch(I2C_GetLastEvent(I2C3)){
 80069f8:	489e      	ldr	r0, [pc, #632]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 80069fa:	f7fa fbb3 	bl	8001164 <I2C_GetLastEvent>
 80069fe:	4603      	mov	r3, r0
 8006a00:	4a9d      	ldr	r2, [pc, #628]	; (8006c78 <I2C3_EV_IRQHandler+0x284>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	f000 8081 	beq.w	8006b0a <I2C3_EV_IRQHandler+0x116>
 8006a08:	4a9b      	ldr	r2, [pc, #620]	; (8006c78 <I2C3_EV_IRQHandler+0x284>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d815      	bhi.n	8006a3a <I2C3_EV_IRQHandler+0x46>
 8006a0e:	4a9b      	ldr	r2, [pc, #620]	; (8006c7c <I2C3_EV_IRQHandler+0x288>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	f000 8104 	beq.w	8006c1e <I2C3_EV_IRQHandler+0x22a>
 8006a16:	4a99      	ldr	r2, [pc, #612]	; (8006c7c <I2C3_EV_IRQHandler+0x288>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d807      	bhi.n	8006a2c <I2C3_EV_IRQHandler+0x38>
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	f000 810d 	beq.w	8006c3c <I2C3_EV_IRQHandler+0x248>
 8006a22:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 8006a26:	f000 80f6 	beq.w	8006c16 <I2C3_EV_IRQHandler+0x222>
				srcvhandlerI2C3(I2C3_slave_rcv_buf[1] + 3, I2C3_slave_rcv_buf);
			break;

/*****************************************************************************************************************/

		default: break;
 8006a2a:	e120      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C3)){
 8006a2c:	4a94      	ldr	r2, [pc, #592]	; (8006c80 <I2C3_EV_IRQHandler+0x28c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01a      	beq.n	8006a68 <I2C3_EV_IRQHandler+0x74>
 8006a32:	4a94      	ldr	r2, [pc, #592]	; (8006c84 <I2C3_EV_IRQHandler+0x290>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d057      	beq.n	8006ae8 <I2C3_EV_IRQHandler+0xf4>
		default: break;
 8006a38:	e119      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C3)){
 8006a3a:	4a93      	ldr	r2, [pc, #588]	; (8006c88 <I2C3_EV_IRQHandler+0x294>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	f000 80d6 	beq.w	8006bee <I2C3_EV_IRQHandler+0x1fa>
 8006a42:	4a91      	ldr	r2, [pc, #580]	; (8006c88 <I2C3_EV_IRQHandler+0x294>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d808      	bhi.n	8006a5a <I2C3_EV_IRQHandler+0x66>
 8006a48:	4a90      	ldr	r2, [pc, #576]	; (8006c8c <I2C3_EV_IRQHandler+0x298>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	f000 80cf 	beq.w	8006bee <I2C3_EV_IRQHandler+0x1fa>
 8006a50:	4a8f      	ldr	r2, [pc, #572]	; (8006c90 <I2C3_EV_IRQHandler+0x29c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	f000 80b1 	beq.w	8006bba <I2C3_EV_IRQHandler+0x1c6>
		default: break;
 8006a58:	e109      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
	switch(I2C_GetLastEvent(I2C3)){
 8006a5a:	4a8e      	ldr	r2, [pc, #568]	; (8006c94 <I2C3_EV_IRQHandler+0x2a0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d01f      	beq.n	8006aa0 <I2C3_EV_IRQHandler+0xac>
 8006a60:	4a8d      	ldr	r2, [pc, #564]	; (8006c98 <I2C3_EV_IRQHandler+0x2a4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <I2C3_EV_IRQHandler+0x8a>
		default: break;
 8006a66:	e102      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			I2C_Send7bitAddress(I2C3, I2C3slaveadress << 1, I2C3_direction);
 8006a68:	4b8c      	ldr	r3, [pc, #560]	; (8006c9c <I2C3_EV_IRQHandler+0x2a8>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	b2d9      	uxtb	r1, r3
 8006a70:	4b8b      	ldr	r3, [pc, #556]	; (8006ca0 <I2C3_EV_IRQHandler+0x2ac>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	487f      	ldr	r0, [pc, #508]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006a78:	f7fa fac4 	bl	8001004 <I2C_Send7bitAddress>
			break;
 8006a7c:	e0f7      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			I2C3_Txlength = 0;
 8006a7e:	4b89      	ldr	r3, [pc, #548]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]
			I2C_SendData(I2C3, I2C3_master_snd_buf[I2C3_Txlength++]);
 8006a84:	4b87      	ldr	r3, [pc, #540]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	b2d1      	uxtb	r1, r2
 8006a8c:	4a85      	ldr	r2, [pc, #532]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006a8e:	7011      	strb	r1, [r2, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	4b85      	ldr	r3, [pc, #532]	; (8006ca8 <I2C3_EV_IRQHandler+0x2b4>)
 8006a94:	5c9b      	ldrb	r3, [r3, r2]
 8006a96:	4619      	mov	r1, r3
 8006a98:	4876      	ldr	r0, [pc, #472]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006a9a:	f7fa faf1 	bl	8001080 <I2C_SendData>
			break;
 8006a9e:	e0e6      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			if(I2C3_Txlength ==  I2C3txlen){
 8006aa0:	4b80      	ldr	r3, [pc, #512]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006aa2:	781a      	ldrb	r2, [r3, #0]
 8006aa4:	4b81      	ldr	r3, [pc, #516]	; (8006cac <I2C3_EV_IRQHandler+0x2b8>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d10f      	bne.n	8006acc <I2C3_EV_IRQHandler+0xd8>
				while (!I2C_CheckEvent(I2C3, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8006aac:	bf00      	nop
 8006aae:	4980      	ldr	r1, [pc, #512]	; (8006cb0 <I2C3_EV_IRQHandler+0x2bc>)
 8006ab0:	4870      	ldr	r0, [pc, #448]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006ab2:	f7fa fb27 	bl	8001104 <I2C_CheckEvent>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f8      	beq.n	8006aae <I2C3_EV_IRQHandler+0xba>
				I2C_GenerateSTOP(I2C3, ENABLE);
 8006abc:	2101      	movs	r1, #1
 8006abe:	486d      	ldr	r0, [pc, #436]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006ac0:	f7fa fa80 	bl	8000fc4 <I2C_GenerateSTOP>
				I2C3_Master_Flag = 0;
 8006ac4:	4b7b      	ldr	r3, [pc, #492]	; (8006cb4 <I2C3_EV_IRQHandler+0x2c0>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
			break;
 8006aca:	e0d0      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
				I2C_SendData(I2C3, I2C3_master_snd_buf[I2C3_Txlength++]);
 8006acc:	4b75      	ldr	r3, [pc, #468]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	b2d1      	uxtb	r1, r2
 8006ad4:	4a73      	ldr	r2, [pc, #460]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006ad6:	7011      	strb	r1, [r2, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4b73      	ldr	r3, [pc, #460]	; (8006ca8 <I2C3_EV_IRQHandler+0x2b4>)
 8006adc:	5c9b      	ldrb	r3, [r3, r2]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4864      	ldr	r0, [pc, #400]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006ae2:	f7fa facd 	bl	8001080 <I2C_SendData>
			break;
 8006ae6:	e0c2      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			I2C3_Rxlength = 0;
 8006ae8:	4b73      	ldr	r3, [pc, #460]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	701a      	strb	r2, [r3, #0]
			if(I2C3rxlen == 1){
 8006aee:	4b73      	ldr	r3, [pc, #460]	; (8006cbc <I2C3_EV_IRQHandler+0x2c8>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	f040 80b4 	bne.w	8006c60 <I2C3_EV_IRQHandler+0x26c>
				I2C_AcknowledgeConfig(I2C3, DISABLE);
 8006af8:	2100      	movs	r1, #0
 8006afa:	485e      	ldr	r0, [pc, #376]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006afc:	f7fa faa0 	bl	8001040 <I2C_AcknowledgeConfig>
				I2C_GenerateSTOP(I2C3, ENABLE);
 8006b00:	2101      	movs	r1, #1
 8006b02:	485c      	ldr	r0, [pc, #368]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006b04:	f7fa fa5e 	bl	8000fc4 <I2C_GenerateSTOP>
			break;
 8006b08:	e0aa      	b.n	8006c60 <I2C3_EV_IRQHandler+0x26c>
			if(I2C3rxlen == 1){
 8006b0a:	4b6c      	ldr	r3, [pc, #432]	; (8006cbc <I2C3_EV_IRQHandler+0x2c8>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d11c      	bne.n	8006b4c <I2C3_EV_IRQHandler+0x158>
				I2C3_master_rcv_buf[I2C3_Rxlength++] = I2C_ReceiveData(I2C3);
 8006b12:	4b69      	ldr	r3, [pc, #420]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	b2d1      	uxtb	r1, r2
 8006b1a:	4a67      	ldr	r2, [pc, #412]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006b1c:	7011      	strb	r1, [r2, #0]
 8006b1e:	461c      	mov	r4, r3
 8006b20:	4854      	ldr	r0, [pc, #336]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006b22:	f7fa fabd 	bl	80010a0 <I2C_ReceiveData>
 8006b26:	4603      	mov	r3, r0
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4b65      	ldr	r3, [pc, #404]	; (8006cc0 <I2C3_EV_IRQHandler+0x2cc>)
 8006b2c:	551a      	strb	r2, [r3, r4]
				if(mrcvhandlerI2C3)
 8006b2e:	4b65      	ldr	r3, [pc, #404]	; (8006cc4 <I2C3_EV_IRQHandler+0x2d0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d006      	beq.n	8006b44 <I2C3_EV_IRQHandler+0x150>
					mrcvhandlerI2C3(I2C3rxlen, I2C3_master_rcv_buf);
 8006b36:	4b63      	ldr	r3, [pc, #396]	; (8006cc4 <I2C3_EV_IRQHandler+0x2d0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a60      	ldr	r2, [pc, #384]	; (8006cbc <I2C3_EV_IRQHandler+0x2c8>)
 8006b3c:	7812      	ldrb	r2, [r2, #0]
 8006b3e:	4960      	ldr	r1, [pc, #384]	; (8006cc0 <I2C3_EV_IRQHandler+0x2cc>)
 8006b40:	4610      	mov	r0, r2
 8006b42:	4798      	blx	r3
				I2C3_Master_Flag = 0;
 8006b44:	4b5b      	ldr	r3, [pc, #364]	; (8006cb4 <I2C3_EV_IRQHandler+0x2c0>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	701a      	strb	r2, [r3, #0]
			break;
 8006b4a:	e08b      	b.n	8006c64 <I2C3_EV_IRQHandler+0x270>
				I2C3_master_rcv_buf[I2C3_Rxlength++] = I2C_ReceiveData(I2C3);
 8006b4c:	4b5a      	ldr	r3, [pc, #360]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	b2d1      	uxtb	r1, r2
 8006b54:	4a58      	ldr	r2, [pc, #352]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006b56:	7011      	strb	r1, [r2, #0]
 8006b58:	461c      	mov	r4, r3
 8006b5a:	4846      	ldr	r0, [pc, #280]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006b5c:	f7fa faa0 	bl	80010a0 <I2C_ReceiveData>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461a      	mov	r2, r3
 8006b64:	4b56      	ldr	r3, [pc, #344]	; (8006cc0 <I2C3_EV_IRQHandler+0x2cc>)
 8006b66:	551a      	strb	r2, [r3, r4]
				if (I2C3_Rxlength == (I2C3rxlen-1)){
 8006b68:	4b53      	ldr	r3, [pc, #332]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4b53      	ldr	r3, [pc, #332]	; (8006cbc <I2C3_EV_IRQHandler+0x2c8>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d107      	bne.n	8006b88 <I2C3_EV_IRQHandler+0x194>
					I2C_AcknowledgeConfig(I2C3, DISABLE);
 8006b78:	2100      	movs	r1, #0
 8006b7a:	483e      	ldr	r0, [pc, #248]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006b7c:	f7fa fa60 	bl	8001040 <I2C_AcknowledgeConfig>
					I2C_GenerateSTOP(I2C3, ENABLE);
 8006b80:	2101      	movs	r1, #1
 8006b82:	483c      	ldr	r0, [pc, #240]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006b84:	f7fa fa1e 	bl	8000fc4 <I2C_GenerateSTOP>
				if(I2C3_Rxlength == (I2C3rxlen)){
 8006b88:	4b4b      	ldr	r3, [pc, #300]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	4b4b      	ldr	r3, [pc, #300]	; (8006cbc <I2C3_EV_IRQHandler+0x2c8>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d167      	bne.n	8006c64 <I2C3_EV_IRQHandler+0x270>
					I2C_AcknowledgeConfig(I2C3, ENABLE);
 8006b94:	2101      	movs	r1, #1
 8006b96:	4837      	ldr	r0, [pc, #220]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006b98:	f7fa fa52 	bl	8001040 <I2C_AcknowledgeConfig>
					if(mrcvhandlerI2C3)
 8006b9c:	4b49      	ldr	r3, [pc, #292]	; (8006cc4 <I2C3_EV_IRQHandler+0x2d0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d006      	beq.n	8006bb2 <I2C3_EV_IRQHandler+0x1be>
						mrcvhandlerI2C3(I2C3rxlen, I2C3_master_rcv_buf);
 8006ba4:	4b47      	ldr	r3, [pc, #284]	; (8006cc4 <I2C3_EV_IRQHandler+0x2d0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a44      	ldr	r2, [pc, #272]	; (8006cbc <I2C3_EV_IRQHandler+0x2c8>)
 8006baa:	7812      	ldrb	r2, [r2, #0]
 8006bac:	4944      	ldr	r1, [pc, #272]	; (8006cc0 <I2C3_EV_IRQHandler+0x2cc>)
 8006bae:	4610      	mov	r0, r2
 8006bb0:	4798      	blx	r3
					I2C3_Master_Flag = 0;
 8006bb2:	4b40      	ldr	r3, [pc, #256]	; (8006cb4 <I2C3_EV_IRQHandler+0x2c0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
			break;
 8006bb8:	e054      	b.n	8006c64 <I2C3_EV_IRQHandler+0x270>
			I2C3_Txlength = 0;
 8006bba:	4b3a      	ldr	r3, [pc, #232]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
			if(stranshandlerI2C3)
 8006bc0:	4b41      	ldr	r3, [pc, #260]	; (8006cc8 <I2C3_EV_IRQHandler+0x2d4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <I2C3_EV_IRQHandler+0x1de>
				stranshandlerI2C3(&I2C3txlen, I2C3_slave_snd_buf);
 8006bc8:	4b3f      	ldr	r3, [pc, #252]	; (8006cc8 <I2C3_EV_IRQHandler+0x2d4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	493f      	ldr	r1, [pc, #252]	; (8006ccc <I2C3_EV_IRQHandler+0x2d8>)
 8006bce:	4837      	ldr	r0, [pc, #220]	; (8006cac <I2C3_EV_IRQHandler+0x2b8>)
 8006bd0:	4798      	blx	r3
			I2C_SendData(I2C3, I2C3_slave_snd_buf[I2C3_Txlength++]);
 8006bd2:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	b2d1      	uxtb	r1, r2
 8006bda:	4a32      	ldr	r2, [pc, #200]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006bdc:	7011      	strb	r1, [r2, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	4b3a      	ldr	r3, [pc, #232]	; (8006ccc <I2C3_EV_IRQHandler+0x2d8>)
 8006be2:	5c9b      	ldrb	r3, [r3, r2]
 8006be4:	4619      	mov	r1, r3
 8006be6:	4823      	ldr	r0, [pc, #140]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006be8:	f7fa fa4a 	bl	8001080 <I2C_SendData>
			break;
 8006bec:	e03f      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			if (I2C3_Txlength < I2C3txlen){
 8006bee:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006bf0:	781a      	ldrb	r2, [r3, #0]
 8006bf2:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <I2C3_EV_IRQHandler+0x2b8>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d236      	bcs.n	8006c68 <I2C3_EV_IRQHandler+0x274>
				I2C_SendData(I2C3, I2C3_slave_snd_buf[I2C3_Txlength++]);
 8006bfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	b2d1      	uxtb	r1, r2
 8006c02:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <I2C3_EV_IRQHandler+0x2b0>)
 8006c04:	7011      	strb	r1, [r2, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	4b30      	ldr	r3, [pc, #192]	; (8006ccc <I2C3_EV_IRQHandler+0x2d8>)
 8006c0a:	5c9b      	ldrb	r3, [r3, r2]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4819      	ldr	r0, [pc, #100]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006c10:	f7fa fa36 	bl	8001080 <I2C_SendData>
			break;
 8006c14:	e028      	b.n	8006c68 <I2C3_EV_IRQHandler+0x274>
			I2C3_Rxlength = 0;
 8006c16:	4b28      	ldr	r3, [pc, #160]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
			break;
 8006c1c:	e027      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			I2C3_slave_rcv_buf[I2C3_Rxlength++] = I2C_ReceiveData(I2C3);
 8006c1e:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	b2d1      	uxtb	r1, r2
 8006c26:	4a24      	ldr	r2, [pc, #144]	; (8006cb8 <I2C3_EV_IRQHandler+0x2c4>)
 8006c28:	7011      	strb	r1, [r2, #0]
 8006c2a:	461c      	mov	r4, r3
 8006c2c:	4811      	ldr	r0, [pc, #68]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006c2e:	f7fa fa37 	bl	80010a0 <I2C_ReceiveData>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	4b26      	ldr	r3, [pc, #152]	; (8006cd0 <I2C3_EV_IRQHandler+0x2dc>)
 8006c38:	551a      	strb	r2, [r3, r4]
			break;
 8006c3a:	e018      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			I2C_Cmd(I2C3, ENABLE);
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	480d      	ldr	r0, [pc, #52]	; (8006c74 <I2C3_EV_IRQHandler+0x280>)
 8006c40:	f7fa f9a0 	bl	8000f84 <I2C_Cmd>
			if(srcvhandlerI2C3)
 8006c44:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <I2C3_EV_IRQHandler+0x2e0>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00f      	beq.n	8006c6c <I2C3_EV_IRQHandler+0x278>
				srcvhandlerI2C3(I2C3_slave_rcv_buf[1] + 3, I2C3_slave_rcv_buf);
 8006c4c:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <I2C3_EV_IRQHandler+0x2e0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <I2C3_EV_IRQHandler+0x2dc>)
 8006c52:	7852      	ldrb	r2, [r2, #1]
 8006c54:	3203      	adds	r2, #3
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	491d      	ldr	r1, [pc, #116]	; (8006cd0 <I2C3_EV_IRQHandler+0x2dc>)
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4798      	blx	r3
			break;
 8006c5e:	e005      	b.n	8006c6c <I2C3_EV_IRQHandler+0x278>
			break;
 8006c60:	bf00      	nop
 8006c62:	e004      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <I2C3_EV_IRQHandler+0x27a>
			break;
 8006c6c:	bf00      	nop

	}

//	OSIntExit();
}
 8006c6e:	bf00      	nop
 8006c70:	bd98      	pop	{r3, r4, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40005c00 	.word	0x40005c00
 8006c78:	00030040 	.word	0x00030040
 8006c7c:	00020040 	.word	0x00020040
 8006c80:	00030001 	.word	0x00030001
 8006c84:	00030002 	.word	0x00030002
 8006c88:	00060084 	.word	0x00060084
 8006c8c:	00060080 	.word	0x00060080
 8006c90:	00060082 	.word	0x00060082
 8006c94:	00070080 	.word	0x00070080
 8006c98:	00070082 	.word	0x00070082
 8006c9c:	20000622 	.word	0x20000622
 8006ca0:	20000623 	.word	0x20000623
 8006ca4:	20001230 	.word	0x20001230
 8006ca8:	20000e30 	.word	0x20000e30
 8006cac:	20000621 	.word	0x20000621
 8006cb0:	00070084 	.word	0x00070084
 8006cb4:	20000626 	.word	0x20000626
 8006cb8:	20001231 	.word	0x20001231
 8006cbc:	20000620 	.word	0x20000620
 8006cc0:	20000f30 	.word	0x20000f30
 8006cc4:	20000608 	.word	0x20000608
 8006cc8:	20000614 	.word	0x20000614
 8006ccc:	20001030 	.word	0x20001030
 8006cd0:	20001130 	.word	0x20001130
 8006cd4:	200005fc 	.word	0x200005fc

08006cd8 <I2C3_ER_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */

void I2C3_ER_IRQHandler(void){
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
//	CPU_SR_ALLOC();
//	OS_ENTER_CRITICAL();
//	OSIntEnter();
//	OS_EXIT_CRITICAL();

	if(I2C_GetLastEvent(I2C3)== I2C_EVENT_SLAVE_ACK_FAILURE)
 8006cdc:	4827      	ldr	r0, [pc, #156]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006cde:	f7fa fa41 	bl	8001164 <I2C_GetLastEvent>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce8:	d104      	bne.n	8006cf4 <I2C3_ER_IRQHandler+0x1c>
		I2C_ClearFlag(I2C3, I2C_FLAG_AF);
 8006cea:	4925      	ldr	r1, [pc, #148]	; (8006d80 <I2C3_ER_IRQHandler+0xa8>)
 8006cec:	4823      	ldr	r0, [pc, #140]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006cee:	f7fa fa8e 	bl	800120e <I2C_ClearFlag>
 8006cf2:	e02a      	b.n	8006d4a <I2C3_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C3, I2C_FLAG_OVR) == SET)
 8006cf4:	4923      	ldr	r1, [pc, #140]	; (8006d84 <I2C3_ER_IRQHandler+0xac>)
 8006cf6:	4821      	ldr	r0, [pc, #132]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006cf8:	f7fa fa56 	bl	80011a8 <I2C_GetFlagStatus>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d104      	bne.n	8006d0c <I2C3_ER_IRQHandler+0x34>
		I2C_ClearFlag(I2C3, I2C_FLAG_OVR);
 8006d02:	4920      	ldr	r1, [pc, #128]	; (8006d84 <I2C3_ER_IRQHandler+0xac>)
 8006d04:	481d      	ldr	r0, [pc, #116]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006d06:	f7fa fa82 	bl	800120e <I2C_ClearFlag>
 8006d0a:	e01e      	b.n	8006d4a <I2C3_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C3, I2C_FLAG_ARLO) == SET)
 8006d0c:	491e      	ldr	r1, [pc, #120]	; (8006d88 <I2C3_ER_IRQHandler+0xb0>)
 8006d0e:	481b      	ldr	r0, [pc, #108]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006d10:	f7fa fa4a 	bl	80011a8 <I2C_GetFlagStatus>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d104      	bne.n	8006d24 <I2C3_ER_IRQHandler+0x4c>
		I2C_ClearFlag(I2C3, I2C_FLAG_ARLO);
 8006d1a:	491b      	ldr	r1, [pc, #108]	; (8006d88 <I2C3_ER_IRQHandler+0xb0>)
 8006d1c:	4817      	ldr	r0, [pc, #92]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006d1e:	f7fa fa76 	bl	800120e <I2C_ClearFlag>
 8006d22:	e012      	b.n	8006d4a <I2C3_ER_IRQHandler+0x72>
	else if(I2C_GetFlagStatus(I2C3, I2C_FLAG_BERR) == SET)
 8006d24:	4919      	ldr	r1, [pc, #100]	; (8006d8c <I2C3_ER_IRQHandler+0xb4>)
 8006d26:	4815      	ldr	r0, [pc, #84]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006d28:	f7fa fa3e 	bl	80011a8 <I2C_GetFlagStatus>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d104      	bne.n	8006d3c <I2C3_ER_IRQHandler+0x64>
		I2C_ClearFlag(I2C3, I2C_FLAG_BERR);
 8006d32:	4916      	ldr	r1, [pc, #88]	; (8006d8c <I2C3_ER_IRQHandler+0xb4>)
 8006d34:	4811      	ldr	r0, [pc, #68]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006d36:	f7fa fa6a 	bl	800120e <I2C_ClearFlag>
 8006d3a:	e006      	b.n	8006d4a <I2C3_ER_IRQHandler+0x72>
	else if (I2C3_Master_Flag == 1)
 8006d3c:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <I2C3_ER_IRQHandler+0xb8>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d102      	bne.n	8006d4a <I2C3_ER_IRQHandler+0x72>
		I2C3ReInit();
 8006d44:	480d      	ldr	r0, [pc, #52]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006d46:	f7fa f821 	bl	8000d8c <I2C_DeInit>
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006d50:	f7fa fb3c 	bl	80013cc <RCC_APB1PeriphClockCmd>
 8006d54:	2101      	movs	r1, #1
 8006d56:	2001      	movs	r0, #1
 8006d58:	f7fa fb18 	bl	800138c <RCC_AHB1PeriphClockCmd>
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	2004      	movs	r0, #4
 8006d60:	f7fa fb14 	bl	800138c <RCC_AHB1PeriphClockCmd>
 8006d64:	490b      	ldr	r1, [pc, #44]	; (8006d94 <I2C3_ER_IRQHandler+0xbc>)
 8006d66:	4805      	ldr	r0, [pc, #20]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006d68:	f7fa f84a 	bl	8000e00 <I2C_Init>
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006d72:	4802      	ldr	r0, [pc, #8]	; (8006d7c <I2C3_ER_IRQHandler+0xa4>)
 8006d74:	f7fa f9a2 	bl	80010bc <I2C_ITConfig>

//	OSIntExit();
}
 8006d78:	bf00      	nop
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40005c00 	.word	0x40005c00
 8006d80:	10000400 	.word	0x10000400
 8006d84:	10000800 	.word	0x10000800
 8006d88:	10000200 	.word	0x10000200
 8006d8c:	10000100 	.word	0x10000100
 8006d90:	20000626 	.word	0x20000626
 8006d94:	200005e4 	.word	0x200005e4

08006d98 <rb_init>:
 *              elements it can store will be size - 1.  Thus, size
 *              must be at least 2.
 *
 *  @param buf  Buffer to store items into
 */
static inline void rb_init(ring_buffer *rb, uint16_t size, uint8_t *buf) {
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	460b      	mov	r3, r1
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	817b      	strh	r3, [r7, #10]
    rb->head = 0;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	809a      	strh	r2, [r3, #4]
    rb->tail = 0;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	80da      	strh	r2, [r3, #6]
    rb->size = size - 1;
 8006db2:	897b      	ldrh	r3, [r7, #10]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	811a      	strh	r2, [r3, #8]
    rb->buf = buf;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <rb_full_count>:

/**
 * @brief Return the number of elements stored in the ring buffer.
 * @param rb Buffer whose elements to count.
 */
static inline uint16_t rb_full_count(ring_buffer *rb) {
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
    ring_buffer *arb = rb;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60bb      	str	r3, [r7, #8]
    int32_t size = arb->tail - arb->head;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	88db      	ldrh	r3, [r3, #6]
 8006dde:	461a      	mov	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	889b      	ldrh	r3, [r3, #4]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	60fb      	str	r3, [r7, #12]
    if (arb->tail < arb->head) {
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	88db      	ldrh	r3, [r3, #6]
 8006dec:	461a      	mov	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	889b      	ldrh	r3, [r3, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	da05      	bge.n	8006e02 <rb_full_count+0x34>
        size += arb->size + 1;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	891b      	ldrh	r3, [r3, #8]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    }
    return (uint16_t)size;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	b29b      	uxth	r3, r3
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <rb_is_full>:
/**
 * @brief Returns true if and only if the ring buffer is full.
 * @param rb Buffer to test.
 */
static inline int rb_is_full(ring_buffer *rb) {
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
    return (rb->tail + 1 == rb->head) ||
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	88db      	ldrh	r3, [r3, #6]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	8892      	ldrh	r2, [r2, #4]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <rb_is_full+0x2a>
        (rb->tail == rb->size && rb->head == 0);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	88da      	ldrh	r2, [r3, #6]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	891b      	ldrh	r3, [r3, #8]
    return (rb->tail + 1 == rb->head) ||
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d105      	bne.n	8006e40 <rb_is_full+0x2e>
        (rb->tail == rb->size && rb->head == 0);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	889b      	ldrh	r3, [r3, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <rb_is_full+0x2e>
    return (rb->tail + 1 == rb->head) ||
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <rb_is_full+0x30>
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <rb_insert>:
/**
 * Append element onto the end of a ring buffer.
 * @param rb Buffer to append onto.
 * @param element Value to append.
 */
static inline void rb_insert(ring_buffer *rb, uint8_t element) {
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
    rb->buf[rb->tail] = element;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	88d2      	ldrh	r2, [r2, #6]
 8006e62:	4413      	add	r3, r2
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail == rb->size) ? 0 : rb->tail + 1;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	88da      	ldrh	r2, [r3, #6]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	891b      	ldrh	r3, [r3, #8]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d004      	beq.n	8006e7e <rb_insert+0x30>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	88db      	ldrh	r3, [r3, #6]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	e000      	b.n	8006e80 <rb_insert+0x32>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	80da      	strh	r2, [r3, #6]
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <rb_remove>:

/**
 * @brief Remove and return the first item from a ring buffer.
 * @param rb Buffer to remove from, must contain at least one element.
 */
static inline uint8_t rb_remove(ring_buffer *rb) {
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
    uint8_t ch = rb->buf[rb->head];
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	8892      	ldrh	r2, [r2, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	73fb      	strb	r3, [r7, #15]
    rb->head = (rb->head == rb->size) ? 0 : rb->head + 1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	889a      	ldrh	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	891b      	ldrh	r3, [r3, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d004      	beq.n	8006ebc <rb_remove+0x2c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	889b      	ldrh	r3, [r3, #4]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	e000      	b.n	8006ebe <rb_remove+0x2e>
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	809a      	strh	r2, [r3, #4]
    return ch;
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <rb_push_insert>:
 * @param rb Ring buffer to insert into.
 * @param element Value to insert into ring buffer.
 * @return On success, returns -1.  If an element was popped, returns
 *         the popped value.
 */
static inline int rb_push_insert(ring_buffer *rb, uint8_t element) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
    int ret = -1;
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ee0:	60fb      	str	r3, [r7, #12]
    if (rb_is_full(rb)) {
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff ff95 	bl	8006e12 <rb_is_full>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bf14      	ite	ne
 8006eee:	2301      	movne	r3, #1
 8006ef0:	2300      	moveq	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <rb_push_insert+0x32>
        ret = rb_remove(rb);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff ffc9 	bl	8006e90 <rb_remove>
 8006efe:	4603      	mov	r3, r0
 8006f00:	60fb      	str	r3, [r7, #12]
    }
    rb_insert(rb, element);
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff ffa1 	bl	8006e4e <rb_insert>
    return ret;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <_ZN14HardwareSerial5beginEm>:
static ring_buffer rb1_recv;
static ring_buffer rb2_recv;
static ring_buffer rb3_recv;

void HardwareSerial::begin(uint32_t baud)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	/** init ringbuf **/
	if(this->Serial == SERIAL2)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <_ZN14HardwareSerial5beginEm+0x1e>
		rb_init(&rb1_recv, sizeof(rxbuf), rxbuf);
 8006f2a:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <_ZN14HardwareSerial5beginEm+0x50>)
 8006f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f30:	480e      	ldr	r0, [pc, #56]	; (8006f6c <_ZN14HardwareSerial5beginEm+0x54>)
 8006f32:	f7ff ff31 	bl	8006d98 <rb_init>
	if(this->Serial == SERIAL3)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d105      	bne.n	8006f4a <_ZN14HardwareSerial5beginEm+0x32>
		rb_init(&rb2_recv, sizeof(rxbuf), rxbuf);
 8006f3e:	4a0a      	ldr	r2, [pc, #40]	; (8006f68 <_ZN14HardwareSerial5beginEm+0x50>)
 8006f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f44:	480a      	ldr	r0, [pc, #40]	; (8006f70 <_ZN14HardwareSerial5beginEm+0x58>)
 8006f46:	f7ff ff27 	bl	8006d98 <rb_init>
	if(this->Serial == SERIAL4)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d105      	bne.n	8006f5e <_ZN14HardwareSerial5beginEm+0x46>
		rb_init(&rb3_recv, sizeof(rxbuf), rxbuf);
 8006f52:	4a05      	ldr	r2, [pc, #20]	; (8006f68 <_ZN14HardwareSerial5beginEm+0x50>)
 8006f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f58:	4806      	ldr	r0, [pc, #24]	; (8006f74 <_ZN14HardwareSerial5beginEm+0x5c>)
 8006f5a:	f7ff ff1d 	bl	8006d98 <rb_init>
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200000b4 	.word	0x200000b4
 8006f6c:	200004b4 	.word	0x200004b4
 8006f70:	200004c0 	.word	0x200004c0
 8006f74:	200004cc 	.word	0x200004cc

08006f78 <_ZN14HardwareSerial9availableEv>:

uint32_t HardwareSerial::available(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	if(this->Serial == SERIAL2)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <_ZN14HardwareSerial9availableEv+0x1a>
		return rb_full_count(&rb1_recv);
 8006f88:	480d      	ldr	r0, [pc, #52]	; (8006fc0 <_ZN14HardwareSerial9availableEv+0x48>)
 8006f8a:	f7ff ff20 	bl	8006dce <rb_full_count>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	e012      	b.n	8006fb8 <_ZN14HardwareSerial9availableEv+0x40>
	if(this->Serial == SERIAL3)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d104      	bne.n	8006fa4 <_ZN14HardwareSerial9availableEv+0x2c>
		return rb_full_count(&rb2_recv);
 8006f9a:	480a      	ldr	r0, [pc, #40]	; (8006fc4 <_ZN14HardwareSerial9availableEv+0x4c>)
 8006f9c:	f7ff ff17 	bl	8006dce <rb_full_count>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	e009      	b.n	8006fb8 <_ZN14HardwareSerial9availableEv+0x40>
	if(this->Serial == SERIAL4)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d104      	bne.n	8006fb6 <_ZN14HardwareSerial9availableEv+0x3e>
		return rb_full_count(&rb3_recv);
 8006fac:	4806      	ldr	r0, [pc, #24]	; (8006fc8 <_ZN14HardwareSerial9availableEv+0x50>)
 8006fae:	f7ff ff0e 	bl	8006dce <rb_full_count>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	e000      	b.n	8006fb8 <_ZN14HardwareSerial9availableEv+0x40>

	return 0;
 8006fb6:	2300      	movs	r3, #0

}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	200004b4 	.word	0x200004b4
 8006fc4:	200004c0 	.word	0x200004c0
 8006fc8:	200004cc 	.word	0x200004cc

08006fcc <_ZN14HardwareSerial4readEv>:

uint8_t HardwareSerial::read(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	while(!this->available())
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ffcf 	bl	8006f78 <_ZN14HardwareSerial9availableEv>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf0c      	ite	eq
 8006fe0:	2301      	moveq	r3, #1
 8006fe2:	2300      	movne	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d000      	beq.n	8006fec <_ZN14HardwareSerial4readEv+0x20>
 8006fea:	e7f3      	b.n	8006fd4 <_ZN14HardwareSerial4readEv+0x8>
		;
	if(this->Serial == SERIAL2)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d104      	bne.n	8006ffe <_ZN14HardwareSerial4readEv+0x32>
		return rb_remove(&rb1_recv);
 8006ff4:	480d      	ldr	r0, [pc, #52]	; (800702c <_ZN14HardwareSerial4readEv+0x60>)
 8006ff6:	f7ff ff4b 	bl	8006e90 <rb_remove>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e012      	b.n	8007024 <_ZN14HardwareSerial4readEv+0x58>
	if(this->Serial == SERIAL3)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d104      	bne.n	8007010 <_ZN14HardwareSerial4readEv+0x44>
		return rb_remove(&rb2_recv);
 8007006:	480a      	ldr	r0, [pc, #40]	; (8007030 <_ZN14HardwareSerial4readEv+0x64>)
 8007008:	f7ff ff42 	bl	8006e90 <rb_remove>
 800700c:	4603      	mov	r3, r0
 800700e:	e009      	b.n	8007024 <_ZN14HardwareSerial4readEv+0x58>
	if(this->Serial == SERIAL4)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d104      	bne.n	8007022 <_ZN14HardwareSerial4readEv+0x56>
		return rb_remove(&rb3_recv);
 8007018:	4806      	ldr	r0, [pc, #24]	; (8007034 <_ZN14HardwareSerial4readEv+0x68>)
 800701a:	f7ff ff39 	bl	8006e90 <rb_remove>
 800701e:	4603      	mov	r3, r0
 8007020:	e000      	b.n	8007024 <_ZN14HardwareSerial4readEv+0x58>

	return 0;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	200004b4 	.word	0x200004b4
 8007030:	200004c0 	.word	0x200004c0
 8007034:	200004cc 	.word	0x200004cc

08007038 <_ZN14HardwareSerial5writeEh>:

uint32_t HardwareSerial::write(uint8_t ch)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
	USART_SendData(SERIAL_USART[this->Serial], ch);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	4b10      	ldr	r3, [pc, #64]	; (800708c <_ZN14HardwareSerial5writeEh+0x54>)
 800704c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	b292      	uxth	r2, r2
 8007054:	4611      	mov	r1, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f7fa fed4 	bl	8001e04 <USART_SendData>
	while(USART_GetFlagStatus(SERIAL_USART[this->Serial], USART_FLAG_TXE) == RESET);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	4b0a      	ldr	r3, [pc, #40]	; (800708c <_ZN14HardwareSerial5writeEh+0x54>)
 8007064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007068:	2180      	movs	r1, #128	; 0x80
 800706a:	4618      	mov	r0, r3
 800706c:	f7fa ff34 	bl	8001ed8 <USART_GetFlagStatus>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	bf0c      	ite	eq
 8007076:	2301      	moveq	r3, #1
 8007078:	2300      	movne	r3, #0
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d000      	beq.n	8007082 <_ZN14HardwareSerial5writeEh+0x4a>
 8007080:	e7ec      	b.n	800705c <_ZN14HardwareSerial5writeEh+0x24>

	return 1;
 8007082:	2301      	movs	r3, #1
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000010 	.word	0x20000010

08007090 <USART2_IRQHandler>:
#ifdef __cplusplus
extern "C" {
#endif

void USART2_IRQHandler(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
	unsigned char data;
	if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 8007096:	f240 5125 	movw	r1, #1317	; 0x525
 800709a:	480f      	ldr	r0, [pc, #60]	; (80070d8 <USART2_IRQHandler+0x48>)
 800709c:	f7fa ff38 	bl	8001f10 <USART_GetITStatus>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	bf14      	ite	ne
 80070a6:	2301      	movne	r3, #1
 80070a8:	2300      	moveq	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00e      	beq.n	80070ce <USART2_IRQHandler+0x3e>
		data = USART_ReceiveData(USART2);
 80070b0:	4809      	ldr	r0, [pc, #36]	; (80070d8 <USART2_IRQHandler+0x48>)
 80070b2:	f7fa feb9 	bl	8001e28 <USART_ReceiveData>
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
		rb_push_insert(&rb1_recv, data);
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	4619      	mov	r1, r3
 80070be:	4807      	ldr	r0, [pc, #28]	; (80070dc <USART2_IRQHandler+0x4c>)
 80070c0:	f7ff ff06 	bl	8006ed0 <rb_push_insert>
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80070c4:	f240 5125 	movw	r1, #1317	; 0x525
 80070c8:	4803      	ldr	r0, [pc, #12]	; (80070d8 <USART2_IRQHandler+0x48>)
 80070ca:	f7fa ff7c 	bl	8001fc6 <USART_ClearITPendingBit>
	}
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	40004400 	.word	0x40004400
 80070dc:	200004b4 	.word	0x200004b4

080070e0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
	unsigned char data;
	if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
 80070e6:	f240 5125 	movw	r1, #1317	; 0x525
 80070ea:	480f      	ldr	r0, [pc, #60]	; (8007128 <USART3_IRQHandler+0x48>)
 80070ec:	f7fa ff10 	bl	8001f10 <USART_GetITStatus>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf14      	ite	ne
 80070f6:	2301      	movne	r3, #1
 80070f8:	2300      	moveq	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00e      	beq.n	800711e <USART3_IRQHandler+0x3e>
		data = USART_ReceiveData(USART3);
 8007100:	4809      	ldr	r0, [pc, #36]	; (8007128 <USART3_IRQHandler+0x48>)
 8007102:	f7fa fe91 	bl	8001e28 <USART_ReceiveData>
 8007106:	4603      	mov	r3, r0
 8007108:	71fb      	strb	r3, [r7, #7]
		rb_push_insert(&rb2_recv, data);
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	4619      	mov	r1, r3
 800710e:	4807      	ldr	r0, [pc, #28]	; (800712c <USART3_IRQHandler+0x4c>)
 8007110:	f7ff fede 	bl	8006ed0 <rb_push_insert>
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 8007114:	f240 5125 	movw	r1, #1317	; 0x525
 8007118:	4803      	ldr	r0, [pc, #12]	; (8007128 <USART3_IRQHandler+0x48>)
 800711a:	f7fa ff54 	bl	8001fc6 <USART_ClearITPendingBit>
	}
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40004800 	.word	0x40004800
 800712c:	200004c0 	.word	0x200004c0

08007130 <millis>:
	target = _counter + millis;
	while(_counter < target);
} 

uint32_t millis() 
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
	return _counter;
 8007134:	4b03      	ldr	r3, [pc, #12]	; (8007144 <millis+0x14>)
 8007136:	681b      	ldr	r3, [r3, #0]
}
 8007138:	4618      	mov	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20001ee8 	.word	0x20001ee8

08007148 <Initialize>:

char uartbuff[500];
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;


void Initialize (void){
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af08      	add	r7, sp, #32

	BIOSInit();
 800714e:	f7fd fde5 	bl	8004d1c <BIOSInit>

	BIOSTIMx_Init(TIM6, 20000, 84, 0, 0);
 8007152:	2300      	movs	r3, #0
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	2300      	movs	r3, #0
 8007158:	2254      	movs	r2, #84	; 0x54
 800715a:	f644 6120 	movw	r1, #20000	; 0x4e20
 800715e:	48bd      	ldr	r0, [pc, #756]	; (8007454 <Initialize+0x30c>)
 8007160:	f7fd fe0a 	bl	8004d78 <BIOSTIMx_Init>
	BIOSTIMx_Init(TIM7, 20000, 84, 0, 0);
 8007164:	2300      	movs	r3, #0
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	2300      	movs	r3, #0
 800716a:	2254      	movs	r2, #84	; 0x54
 800716c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8007170:	48b9      	ldr	r0, [pc, #740]	; (8007458 <Initialize+0x310>)
 8007172:	f7fd fe01 	bl	8004d78 <BIOSTIMx_Init>

	GPIOPinsInit (LED1_PIN, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007176:	2301      	movs	r3, #1
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	2302      	movs	r3, #2
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	2201      	movs	r2, #1
 8007182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007186:	48b5      	ldr	r0, [pc, #724]	; (800745c <Initialize+0x314>)
 8007188:	f7fb f816 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 800718c:	2301      	movs	r3, #1
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	2302      	movs	r3, #2
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	2300      	movs	r3, #0
 8007196:	2201      	movs	r2, #1
 8007198:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800719c:	48af      	ldr	r0, [pc, #700]	; (800745c <Initialize+0x314>)
 800719e:	f7fb f80b 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80071a2:	2301      	movs	r3, #1
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	2302      	movs	r3, #2
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	2300      	movs	r3, #0
 80071ac:	2201      	movs	r2, #1
 80071ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071b2:	48aa      	ldr	r0, [pc, #680]	; (800745c <Initialize+0x314>)
 80071b4:	f7fb f800 	bl	80021b8 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80071b8:	2301      	movs	r3, #1
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	2302      	movs	r3, #2
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	2300      	movs	r3, #0
 80071c2:	2200      	movs	r2, #0
 80071c4:	2180      	movs	r1, #128	; 0x80
 80071c6:	48a6      	ldr	r0, [pc, #664]	; (8007460 <Initialize+0x318>)
 80071c8:	f7fa fff6 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80071cc:	2301      	movs	r3, #1
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	2302      	movs	r3, #2
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	2200      	movs	r2, #0
 80071d8:	2101      	movs	r1, #1
 80071da:	48a2      	ldr	r0, [pc, #648]	; (8007464 <Initialize+0x31c>)
 80071dc:	f7fa ffec 	bl	80021b8 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80071e0:	2301      	movs	r3, #1
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	2302      	movs	r3, #2
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	2300      	movs	r3, #0
 80071ea:	2200      	movs	r2, #0
 80071ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071f0:	489c      	ldr	r0, [pc, #624]	; (8007464 <Initialize+0x31c>)
 80071f2:	f7fa ffe1 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80071f6:	2301      	movs	r3, #1
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	2302      	movs	r3, #2
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	2300      	movs	r3, #0
 8007200:	2200      	movs	r2, #0
 8007202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007206:	4897      	ldr	r0, [pc, #604]	; (8007464 <Initialize+0x31c>)
 8007208:	f7fa ffd6 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 800720c:	2301      	movs	r3, #1
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	2302      	movs	r3, #2
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	2200      	movs	r2, #0
 8007218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800721c:	4891      	ldr	r0, [pc, #580]	; (8007464 <Initialize+0x31c>)
 800721e:	f7fa ffcb 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007222:	2301      	movs	r3, #1
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	2302      	movs	r3, #2
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2300      	movs	r3, #0
 800722c:	2200      	movs	r2, #0
 800722e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007232:	488c      	ldr	r0, [pc, #560]	; (8007464 <Initialize+0x31c>)
 8007234:	f7fa ffc0 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007238:	2301      	movs	r3, #1
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	2302      	movs	r3, #2
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	2300      	movs	r3, #0
 8007242:	2200      	movs	r2, #0
 8007244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007248:	4885      	ldr	r0, [pc, #532]	; (8007460 <Initialize+0x318>)
 800724a:	f7fa ffb5 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 800724e:	2301      	movs	r3, #1
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	2302      	movs	r3, #2
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	2300      	movs	r3, #0
 8007258:	2200      	movs	r2, #0
 800725a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800725e:	4880      	ldr	r0, [pc, #512]	; (8007460 <Initialize+0x318>)
 8007260:	f7fa ffaa 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007264:	2301      	movs	r3, #1
 8007266:	9301      	str	r3, [sp, #4]
 8007268:	2302      	movs	r3, #2
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	2300      	movs	r3, #0
 800726e:	2200      	movs	r2, #0
 8007270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007274:	487c      	ldr	r0, [pc, #496]	; (8007468 <Initialize+0x320>)
 8007276:	f7fa ff9f 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 800727a:	2301      	movs	r3, #1
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	2302      	movs	r3, #2
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	2200      	movs	r2, #0
 8007286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800728a:	4877      	ldr	r0, [pc, #476]	; (8007468 <Initialize+0x320>)
 800728c:	f7fa ff94 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007290:	2301      	movs	r3, #1
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	2302      	movs	r3, #2
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	2300      	movs	r3, #0
 800729a:	2200      	movs	r2, #0
 800729c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072a0:	486e      	ldr	r0, [pc, #440]	; (800745c <Initialize+0x314>)
 80072a2:	f7fa ff89 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80072a6:	2301      	movs	r3, #1
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	2302      	movs	r3, #2
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80072b6:	486d      	ldr	r0, [pc, #436]	; (800746c <Initialize+0x324>)
 80072b8:	f7fa ff7e 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80072bc:	2301      	movs	r3, #1
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	2302      	movs	r3, #2
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2300      	movs	r3, #0
 80072c6:	2200      	movs	r2, #0
 80072c8:	2108      	movs	r1, #8
 80072ca:	4867      	ldr	r0, [pc, #412]	; (8007468 <Initialize+0x320>)
 80072cc:	f7fa ff74 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80072d0:	2301      	movs	r3, #1
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	2302      	movs	r3, #2
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	2300      	movs	r3, #0
 80072da:	2200      	movs	r2, #0
 80072dc:	2110      	movs	r1, #16
 80072de:	4862      	ldr	r0, [pc, #392]	; (8007468 <Initialize+0x320>)
 80072e0:	f7fa ff6a 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80072e4:	2301      	movs	r3, #1
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	2302      	movs	r3, #2
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2300      	movs	r3, #0
 80072ee:	2200      	movs	r2, #0
 80072f0:	2180      	movs	r1, #128	; 0x80
 80072f2:	485d      	ldr	r0, [pc, #372]	; (8007468 <Initialize+0x320>)
 80072f4:	f7fa ff60 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 80072f8:	2301      	movs	r3, #1
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	2302      	movs	r3, #2
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2300      	movs	r3, #0
 8007302:	2200      	movs	r2, #0
 8007304:	2120      	movs	r1, #32
 8007306:	4856      	ldr	r0, [pc, #344]	; (8007460 <Initialize+0x318>)
 8007308:	f7fa ff56 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 800730c:	2301      	movs	r3, #1
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	2302      	movs	r3, #2
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	2300      	movs	r3, #0
 8007316:	2200      	movs	r2, #0
 8007318:	2140      	movs	r1, #64	; 0x40
 800731a:	4851      	ldr	r0, [pc, #324]	; (8007460 <Initialize+0x318>)
 800731c:	f7fa ff4c 	bl	80021b8 <GPIOPinsInit>

	/*IOs with ADC*/
	//GPIOPinsInit (IP16_Analog1_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007320:	2301      	movs	r3, #1
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	2302      	movs	r3, #2
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	2300      	movs	r3, #0
 800732a:	2200      	movs	r2, #0
 800732c:	2102      	movs	r1, #2
 800732e:	484b      	ldr	r0, [pc, #300]	; (800745c <Initialize+0x314>)
 8007330:	f7fa ff42 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007334:	2301      	movs	r3, #1
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	2302      	movs	r3, #2
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	2300      	movs	r3, #0
 800733e:	2200      	movs	r2, #0
 8007340:	2104      	movs	r1, #4
 8007342:	4846      	ldr	r0, [pc, #280]	; (800745c <Initialize+0x314>)
 8007344:	f7fa ff38 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007348:	2301      	movs	r3, #1
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	2302      	movs	r3, #2
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	2200      	movs	r2, #0
 8007354:	2108      	movs	r1, #8
 8007356:	4841      	ldr	r0, [pc, #260]	; (800745c <Initialize+0x314>)
 8007358:	f7fa ff2e 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog7_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 800735c:	2301      	movs	r3, #1
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	2302      	movs	r3, #2
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	2300      	movs	r3, #0
 8007366:	2200      	movs	r2, #0
 8007368:	2110      	movs	r1, #16
 800736a:	483c      	ldr	r0, [pc, #240]	; (800745c <Initialize+0x314>)
 800736c:	f7fa ff24 	bl	80021b8 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog8_PIN, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8007370:	2301      	movs	r3, #1
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	2302      	movs	r3, #2
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	2300      	movs	r3, #0
 800737a:	2200      	movs	r2, #0
 800737c:	2120      	movs	r1, #32
 800737e:	4837      	ldr	r0, [pc, #220]	; (800745c <Initialize+0x314>)
 8007380:	f7fa ff1a 	bl	80021b8 <GPIOPinsInit>

	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
 8007384:	2310      	movs	r3, #16
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	4b36      	ldr	r3, [pc, #216]	; (8007464 <Initialize+0x31c>)
 800738a:	9303      	str	r3, [sp, #12]
 800738c:	2308      	movs	r3, #8
 800738e:	9302      	str	r3, [sp, #8]
 8007390:	4b34      	ldr	r3, [pc, #208]	; (8007464 <Initialize+0x31c>)
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	2304      	movs	r3, #4
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4b32      	ldr	r3, [pc, #200]	; (8007464 <Initialize+0x31c>)
 800739a:	2202      	movs	r2, #2
 800739c:	4931      	ldr	r1, [pc, #196]	; (8007464 <Initialize+0x31c>)
 800739e:	4834      	ldr	r0, [pc, #208]	; (8007470 <Initialize+0x328>)
 80073a0:	f7fa ff9a 	bl	80022d8 <MUXInit>
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 80073a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a8:	9303      	str	r3, [sp, #12]
 80073aa:	4b2e      	ldr	r3, [pc, #184]	; (8007464 <Initialize+0x31c>)
 80073ac:	9302      	str	r3, [sp, #8]
 80073ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	4b2b      	ldr	r3, [pc, #172]	; (8007464 <Initialize+0x31c>)
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	2380      	movs	r3, #128	; 0x80
 80073ba:	4a2a      	ldr	r2, [pc, #168]	; (8007464 <Initialize+0x31c>)
 80073bc:	2101      	movs	r1, #1
 80073be:	482d      	ldr	r0, [pc, #180]	; (8007474 <Initialize+0x32c>)
 80073c0:	f7fd fbb2 	bl	8004b28 <SHIFTREGInit>

//	I2C1Init (main_board_1, CLOCK_SPEED_400KHz, slave_rcv, PS3_rcv, 0);
//	I2C2Init (main_board_1, CLOCK_SPEED_400KHz, slave_rcv, PS3_rcv, 0);
//	I2C3Init (main_board_1, CLOCK_SPEED_400KHz, slave_rcv, PS3_rcv, 0);

	CANx_Init(CAN1, CAN1_Tx, CAN1_Rx, CAN_Filter_FIFO0,0,0,26,4,1,1);
 80073c4:	2301      	movs	r3, #1
 80073c6:	9307      	str	r3, [sp, #28]
 80073c8:	2301      	movs	r3, #1
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	2304      	movs	r3, #4
 80073ce:	9305      	str	r3, [sp, #20]
 80073d0:	231a      	movs	r3, #26
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	2300      	movs	r3, #0
 80073d6:	9303      	str	r3, [sp, #12]
 80073d8:	2300      	movs	r3, #0
 80073da:	9302      	str	r3, [sp, #8]
 80073dc:	2300      	movs	r3, #0
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	2301      	movs	r3, #1
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4b20      	ldr	r3, [pc, #128]	; (8007468 <Initialize+0x320>)
 80073e6:	2202      	movs	r2, #2
 80073e8:	491f      	ldr	r1, [pc, #124]	; (8007468 <Initialize+0x320>)
 80073ea:	4823      	ldr	r0, [pc, #140]	; (8007478 <Initialize+0x330>)
 80073ec:	f7fe fc18 	bl	8005c20 <CANx_Init>
	CANx_Init(CAN2, CAN2_Tx, CAN2_Rx, CAN_Filter_FIFO1,0,0,27,4,1,2);
 80073f0:	2302      	movs	r3, #2
 80073f2:	9307      	str	r3, [sp, #28]
 80073f4:	2301      	movs	r3, #1
 80073f6:	9306      	str	r3, [sp, #24]
 80073f8:	2304      	movs	r3, #4
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	231b      	movs	r3, #27
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	2300      	movs	r3, #0
 8007402:	9303      	str	r3, [sp, #12]
 8007404:	2300      	movs	r3, #0
 8007406:	9302      	str	r3, [sp, #8]
 8007408:	2301      	movs	r3, #1
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	4b13      	ldr	r3, [pc, #76]	; (8007460 <Initialize+0x318>)
 8007414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007418:	4911      	ldr	r1, [pc, #68]	; (8007460 <Initialize+0x318>)
 800741a:	4818      	ldr	r0, [pc, #96]	; (800747c <Initialize+0x334>)
 800741c:	f7fe fc00 	bl	8005c20 <CANx_Init>

	UART2Init(115200, ENABLE, 0,0, UART2_Tx, UART2_Rx);
 8007420:	2340      	movs	r3, #64	; 0x40
 8007422:	9303      	str	r3, [sp, #12]
 8007424:	4b10      	ldr	r3, [pc, #64]	; (8007468 <Initialize+0x320>)
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	2320      	movs	r3, #32
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <Initialize+0x320>)
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	2200      	movs	r2, #0
 8007434:	2101      	movs	r1, #1
 8007436:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800743a:	f7fd fda9 	bl	8004f90 <UART2Init>
	UART3Init(115200, DISABLE, 0,0, UART3_Tx, UART3_Rx);
 800743e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007442:	9303      	str	r3, [sp, #12]
 8007444:	4b08      	ldr	r3, [pc, #32]	; (8007468 <Initialize+0x320>)
 8007446:	9302      	str	r3, [sp, #8]
 8007448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <Initialize+0x320>)
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	e015      	b.n	8007480 <Initialize+0x338>
 8007454:	40001000 	.word	0x40001000
 8007458:	40001400 	.word	0x40001400
 800745c:	40020800 	.word	0x40020800
 8007460:	40020400 	.word	0x40020400
 8007464:	40021000 	.word	0x40021000
 8007468:	40020c00 	.word	0x40020c00
 800746c:	40020000 	.word	0x40020000
 8007470:	20001234 	.word	0x20001234
 8007474:	2000125c 	.word	0x2000125c
 8007478:	40006400 	.word	0x40006400
 800747c:	40006800 	.word	0x40006800
 8007480:	2300      	movs	r3, #0
 8007482:	2200      	movs	r2, #0
 8007484:	2100      	movs	r1, #0
 8007486:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800748a:	f7fd ff13 	bl	80052b4 <UART3Init>
	UART4Init(115200, DISABLE, 0,0, UART4_Tx, UART4_Rx);
 800748e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007492:	9303      	str	r3, [sp, #12]
 8007494:	4b6d      	ldr	r3, [pc, #436]	; (800764c <Initialize+0x504>)
 8007496:	9302      	str	r3, [sp, #8]
 8007498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	4b6b      	ldr	r3, [pc, #428]	; (800764c <Initialize+0x504>)
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	2300      	movs	r3, #0
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80074ac:	f7fe f894 	bl	80055d8 <UART4Init>
	UART5Init(115200, DISABLE, 0,0, UART5_Tx, UART5_Rx);
 80074b0:	2304      	movs	r3, #4
 80074b2:	9303      	str	r3, [sp, #12]
 80074b4:	4b66      	ldr	r3, [pc, #408]	; (8007650 <Initialize+0x508>)
 80074b6:	9302      	str	r3, [sp, #8]
 80074b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	4b63      	ldr	r3, [pc, #396]	; (800764c <Initialize+0x504>)
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	2300      	movs	r3, #0
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80074cc:	f7fe fa16 	bl	80058fc <UART5Init>

	QEIInit(QEI1,5,5,QEI1_PLUSEA_PIN, QEI1_PLUSEB_PIN);
 80074d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074d4:	9302      	str	r3, [sp, #8]
 80074d6:	4b5f      	ldr	r3, [pc, #380]	; (8007654 <Initialize+0x50c>)
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	4b5c      	ldr	r3, [pc, #368]	; (8007654 <Initialize+0x50c>)
 80074e2:	2205      	movs	r2, #5
 80074e4:	2105      	movs	r1, #5
 80074e6:	2001      	movs	r0, #1
 80074e8:	f7fc f90e 	bl	8003708 <QEIInit>
	QEIInit(QEI4,5,5,QEI4_PLUSEA_PIN, QEI4_PLUSEB_PIN);
 80074ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074f0:	9302      	str	r3, [sp, #8]
 80074f2:	4b57      	ldr	r3, [pc, #348]	; (8007650 <Initialize+0x508>)
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	4b54      	ldr	r3, [pc, #336]	; (8007650 <Initialize+0x508>)
 80074fe:	2205      	movs	r2, #5
 8007500:	2105      	movs	r1, #5
 8007502:	2004      	movs	r0, #4
 8007504:	f7fc f900 	bl	8003708 <QEIInit>
	QEIInit(QEI6,5,5,QEI6_PLUSEA_PIN, QEI6_PLUSEB_PIN);
 8007508:	2380      	movs	r3, #128	; 0x80
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	4b4f      	ldr	r3, [pc, #316]	; (800764c <Initialize+0x504>)
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4b4d      	ldr	r3, [pc, #308]	; (800764c <Initialize+0x504>)
 8007516:	2205      	movs	r2, #5
 8007518:	2105      	movs	r1, #5
 800751a:	2006      	movs	r0, #6
 800751c:	f7fc f8f4 	bl	8003708 <QEIInit>

	PWMTimeBaseInit(TIM3, 20000, 84);//50Hz PWM
 8007520:	2254      	movs	r2, #84	; 0x54
 8007522:	f644 6120 	movw	r1, #20000	; 0x4e20
 8007526:	484c      	ldr	r0, [pc, #304]	; (8007658 <Initialize+0x510>)
 8007528:	f7fb f846 	bl	80025b8 <PWMTimeBaseInit>
	PWMChannelConfig(TIM3, PWM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800752c:	2301      	movs	r3, #1
 800752e:	4a4b      	ldr	r2, [pc, #300]	; (800765c <Initialize+0x514>)
 8007530:	2102      	movs	r1, #2
 8007532:	4849      	ldr	r0, [pc, #292]	; (8007658 <Initialize+0x510>)
 8007534:	f7fb f8ea 	bl	800270c <PWMChannelConfig>
	PWMChannelConfig(TIM3, PWM_CHANNEL_4, TIM3_CHANNEL4_PIN);
 8007538:	2302      	movs	r3, #2
 800753a:	4a48      	ldr	r2, [pc, #288]	; (800765c <Initialize+0x514>)
 800753c:	2103      	movs	r1, #3
 800753e:	4846      	ldr	r0, [pc, #280]	; (8007658 <Initialize+0x510>)
 8007540:	f7fb f8e4 	bl	800270c <PWMChannelConfig>

	PWMTimeBaseInit(TIM5, 20000, 84);//50Hz PWM
 8007544:	2254      	movs	r2, #84	; 0x54
 8007546:	f644 6120 	movw	r1, #20000	; 0x4e20
 800754a:	4845      	ldr	r0, [pc, #276]	; (8007660 <Initialize+0x518>)
 800754c:	f7fb f834 	bl	80025b8 <PWMTimeBaseInit>
	PWMChannelConfig(TIM5, PWM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 8007550:	2301      	movs	r3, #1
 8007552:	4a44      	ldr	r2, [pc, #272]	; (8007664 <Initialize+0x51c>)
 8007554:	2100      	movs	r1, #0
 8007556:	4842      	ldr	r0, [pc, #264]	; (8007660 <Initialize+0x518>)
 8007558:	f7fb f8d8 	bl	800270c <PWMChannelConfig>
	PWMChannelConfig(TIM5, PWM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800755c:	2302      	movs	r3, #2
 800755e:	4a41      	ldr	r2, [pc, #260]	; (8007664 <Initialize+0x51c>)
 8007560:	2101      	movs	r1, #1
 8007562:	483f      	ldr	r0, [pc, #252]	; (8007660 <Initialize+0x518>)
 8007564:	f7fb f8d2 	bl	800270c <PWMChannelConfig>
	PWMChannelConfig(TIM5, PWM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 8007568:	2304      	movs	r3, #4
 800756a:	4a3e      	ldr	r2, [pc, #248]	; (8007664 <Initialize+0x51c>)
 800756c:	2102      	movs	r1, #2
 800756e:	483c      	ldr	r0, [pc, #240]	; (8007660 <Initialize+0x518>)
 8007570:	f7fb f8cc 	bl	800270c <PWMChannelConfig>
	PWMChannelConfig(TIM5, PWM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 8007574:	2308      	movs	r3, #8
 8007576:	4a3b      	ldr	r2, [pc, #236]	; (8007664 <Initialize+0x51c>)
 8007578:	2103      	movs	r1, #3
 800757a:	4839      	ldr	r0, [pc, #228]	; (8007660 <Initialize+0x518>)
 800757c:	f7fb f8c6 	bl	800270c <PWMChannelConfig>

	PWMTimeBaseInit(TIM9, 20000, 168);//50Hz PWM
 8007580:	22a8      	movs	r2, #168	; 0xa8
 8007582:	f644 6120 	movw	r1, #20000	; 0x4e20
 8007586:	4838      	ldr	r0, [pc, #224]	; (8007668 <Initialize+0x520>)
 8007588:	f7fb f816 	bl	80025b8 <PWMTimeBaseInit>
	PWMChannelConfig(TIM9, PWM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800758c:	2320      	movs	r3, #32
 800758e:	4a31      	ldr	r2, [pc, #196]	; (8007654 <Initialize+0x50c>)
 8007590:	2100      	movs	r1, #0
 8007592:	4835      	ldr	r0, [pc, #212]	; (8007668 <Initialize+0x520>)
 8007594:	f7fb f8ba 	bl	800270c <PWMChannelConfig>
	PWMChannelConfig(TIM9, PWM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 8007598:	2340      	movs	r3, #64	; 0x40
 800759a:	4a2e      	ldr	r2, [pc, #184]	; (8007654 <Initialize+0x50c>)
 800759c:	2101      	movs	r1, #1
 800759e:	4832      	ldr	r0, [pc, #200]	; (8007668 <Initialize+0x520>)
 80075a0:	f7fb f8b4 	bl	800270c <PWMChannelConfig>

	BDCInit(&BDC1, &(TIM3->CCR4), SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	2340      	movs	r3, #64	; 0x40
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	4b2f      	ldr	r3, [pc, #188]	; (800766c <Initialize+0x524>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	492f      	ldr	r1, [pc, #188]	; (8007670 <Initialize+0x528>)
 80075b2:	4830      	ldr	r0, [pc, #192]	; (8007674 <Initialize+0x52c>)
 80075b4:	f7fa fd24 	bl	8002000 <BDCInit>
	BDCInit(&BDC2, &(TIM3->CCR3), SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 80075b8:	2320      	movs	r3, #32
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	2310      	movs	r3, #16
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4b2a      	ldr	r3, [pc, #168]	; (800766c <Initialize+0x524>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	492c      	ldr	r1, [pc, #176]	; (8007678 <Initialize+0x530>)
 80075c6:	482d      	ldr	r0, [pc, #180]	; (800767c <Initialize+0x534>)
 80075c8:	f7fa fd1a 	bl	8002000 <BDCInit>
	BDCInit(&BDC3, &(TIM9->CCR1), SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 80075cc:	2308      	movs	r3, #8
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	2304      	movs	r3, #4
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4b25      	ldr	r3, [pc, #148]	; (800766c <Initialize+0x524>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	4929      	ldr	r1, [pc, #164]	; (8007680 <Initialize+0x538>)
 80075da:	482a      	ldr	r0, [pc, #168]	; (8007684 <Initialize+0x53c>)
 80075dc:	f7fa fd10 	bl	8002000 <BDCInit>
	BDCInit(&BDC4, &(TIM9->CCR2), SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 80075e0:	2302      	movs	r3, #2
 80075e2:	9301      	str	r3, [sp, #4]
 80075e4:	2301      	movs	r3, #1
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4b20      	ldr	r3, [pc, #128]	; (800766c <Initialize+0x524>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	4926      	ldr	r1, [pc, #152]	; (8007688 <Initialize+0x540>)
 80075ee:	4827      	ldr	r0, [pc, #156]	; (800768c <Initialize+0x544>)
 80075f0:	f7fa fd06 	bl	8002000 <BDCInit>
	BDCInit(&BDC5, &(TIM5->CCR4), SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 80075f4:	2380      	movs	r3, #128	; 0x80
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	2340      	movs	r3, #64	; 0x40
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	4b24      	ldr	r3, [pc, #144]	; (8007690 <Initialize+0x548>)
 80075fe:	2200      	movs	r2, #0
 8007600:	4924      	ldr	r1, [pc, #144]	; (8007694 <Initialize+0x54c>)
 8007602:	4825      	ldr	r0, [pc, #148]	; (8007698 <Initialize+0x550>)
 8007604:	f7fa fcfc 	bl	8002000 <BDCInit>
	BDCInit(&BDC6, &(TIM5->CCR3), SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 8007608:	2320      	movs	r3, #32
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	2310      	movs	r3, #16
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4b1f      	ldr	r3, [pc, #124]	; (8007690 <Initialize+0x548>)
 8007612:	2200      	movs	r2, #0
 8007614:	4921      	ldr	r1, [pc, #132]	; (800769c <Initialize+0x554>)
 8007616:	4822      	ldr	r0, [pc, #136]	; (80076a0 <Initialize+0x558>)
 8007618:	f7fa fcf2 	bl	8002000 <BDCInit>
	BDCInit(&BDC7, &(TIM5->CCR2), SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800761c:	2308      	movs	r3, #8
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	2304      	movs	r3, #4
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <Initialize+0x548>)
 8007626:	2200      	movs	r2, #0
 8007628:	491e      	ldr	r1, [pc, #120]	; (80076a4 <Initialize+0x55c>)
 800762a:	481f      	ldr	r0, [pc, #124]	; (80076a8 <Initialize+0x560>)
 800762c:	f7fa fce8 	bl	8002000 <BDCInit>
	BDCInit(&BDC8, &(TIM5->CCR1), SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 8007630:	2302      	movs	r3, #2
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	2301      	movs	r3, #1
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	4b15      	ldr	r3, [pc, #84]	; (8007690 <Initialize+0x548>)
 800763a:	2200      	movs	r2, #0
 800763c:	491b      	ldr	r1, [pc, #108]	; (80076ac <Initialize+0x564>)
 800763e:	481c      	ldr	r0, [pc, #112]	; (80076b0 <Initialize+0x568>)
 8007640:	f7fa fcde 	bl	8002000 <BDCInit>

}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	40020800 	.word	0x40020800
 8007650:	40020c00 	.word	0x40020c00
 8007654:	40021000 	.word	0x40021000
 8007658:	40000400 	.word	0x40000400
 800765c:	40020400 	.word	0x40020400
 8007660:	40000c00 	.word	0x40000c00
 8007664:	40020000 	.word	0x40020000
 8007668:	40014000 	.word	0x40014000
 800766c:	20001278 	.word	0x20001278
 8007670:	40000440 	.word	0x40000440
 8007674:	200012e8 	.word	0x200012e8
 8007678:	4000043c 	.word	0x4000043c
 800767c:	20001308 	.word	0x20001308
 8007680:	40014034 	.word	0x40014034
 8007684:	20001328 	.word	0x20001328
 8007688:	40014038 	.word	0x40014038
 800768c:	20001348 	.word	0x20001348
 8007690:	20001274 	.word	0x20001274
 8007694:	40000c40 	.word	0x40000c40
 8007698:	20001368 	.word	0x20001368
 800769c:	40000c3c 	.word	0x40000c3c
 80076a0:	20001388 	.word	0x20001388
 80076a4:	40000c38 	.word	0x40000c38
 80076a8:	200013a8 	.word	0x200013a8
 80076ac:	40000c34 	.word	0x40000c34
 80076b0:	200013c8 	.word	0x200013c8

080076b4 <CAN1_RX0_IRQHandler>:
//
//}


void CAN1_RX0_IRQHandler()
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
	if(CAN_GetITStatus(CAN1, CAN_IT_FMP0) == SET){
 80076b8:	2102      	movs	r1, #2
 80076ba:	4838      	ldr	r0, [pc, #224]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 80076bc:	f7f9 f8d6 	bl	800086c <CAN_GetITStatus>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d104      	bne.n	80076d0 <CAN1_RX0_IRQHandler+0x1c>
		CAN_Receive(CAN1, CAN_FIFO0, &CAN1_RxMessage);
 80076c6:	4a36      	ldr	r2, [pc, #216]	; (80077a0 <CAN1_RX0_IRQHandler+0xec>)
 80076c8:	2100      	movs	r1, #0
 80076ca:	4834      	ldr	r0, [pc, #208]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 80076cc:	f7f8 ffb8 	bl	8000640 <CAN_Receive>
	}
	switch(CAN1_RxMessage.StdId){
 80076d0:	4b33      	ldr	r3, [pc, #204]	; (80077a0 <CAN1_RX0_IRQHandler+0xec>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3b14      	subs	r3, #20
 80076d6:	2b06      	cmp	r3, #6
 80076d8:	d82e      	bhi.n	8007738 <CAN1_RX0_IRQHandler+0x84>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <CAN1_RX0_IRQHandler+0x2c>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	08007713 	.word	0x08007713
 80076e8:	08007723 	.word	0x08007723
 80076ec:	08007739 	.word	0x08007739
 80076f0:	08007739 	.word	0x08007739
 80076f4:	08007739 	.word	0x08007739
 80076f8:	08007739 	.word	0x08007739
		case RNS_TO_mainboard:
			memcpy(&insData_receive, &CAN1_RxMessage.Data, CAN1_RxMessage.DLC);
 80076fc:	4b28      	ldr	r3, [pc, #160]	; (80077a0 <CAN1_RX0_IRQHandler+0xec>)
 80076fe:	7a9b      	ldrb	r3, [r3, #10]
 8007700:	461a      	mov	r2, r3
 8007702:	4928      	ldr	r1, [pc, #160]	; (80077a4 <CAN1_RX0_IRQHandler+0xf0>)
 8007704:	4828      	ldr	r0, [pc, #160]	; (80077a8 <CAN1_RX0_IRQHandler+0xf4>)
 8007706:	f003 fc57 	bl	800afb8 <memcpy>
			buf2_flag = 0;
 800770a:	4b28      	ldr	r3, [pc, #160]	; (80077ac <CAN1_RX0_IRQHandler+0xf8>)
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]

			break;
 8007710:	e013      	b.n	800773a <CAN1_RX0_IRQHandler+0x86>
		case RNS_TO_mainboard_buf1:
			memcpy(&buf1_receive, &CAN1_RxMessage.Data, CAN1_RxMessage.DLC);
 8007712:	4b23      	ldr	r3, [pc, #140]	; (80077a0 <CAN1_RX0_IRQHandler+0xec>)
 8007714:	7a9b      	ldrb	r3, [r3, #10]
 8007716:	461a      	mov	r2, r3
 8007718:	4922      	ldr	r1, [pc, #136]	; (80077a4 <CAN1_RX0_IRQHandler+0xf0>)
 800771a:	4825      	ldr	r0, [pc, #148]	; (80077b0 <CAN1_RX0_IRQHandler+0xfc>)
 800771c:	f003 fc4c 	bl	800afb8 <memcpy>

			break;
 8007720:	e00b      	b.n	800773a <CAN1_RX0_IRQHandler+0x86>
		case RNS_TO_mainboard_buf2:
			memcpy(&buf2_receive, &CAN1_RxMessage.Data, CAN1_RxMessage.DLC);
 8007722:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <CAN1_RX0_IRQHandler+0xec>)
 8007724:	7a9b      	ldrb	r3, [r3, #10]
 8007726:	461a      	mov	r2, r3
 8007728:	491e      	ldr	r1, [pc, #120]	; (80077a4 <CAN1_RX0_IRQHandler+0xf0>)
 800772a:	4822      	ldr	r0, [pc, #136]	; (80077b4 <CAN1_RX0_IRQHandler+0x100>)
 800772c:	f003 fc44 	bl	800afb8 <memcpy>
			buf2_flag = 1;
 8007730:	4b1e      	ldr	r3, [pc, #120]	; (80077ac <CAN1_RX0_IRQHandler+0xf8>)
 8007732:	2201      	movs	r2, #1
 8007734:	701a      	strb	r2, [r3, #0]
			break;
 8007736:	e000      	b.n	800773a <CAN1_RX0_IRQHandler+0x86>
		case XY_feedback_state :
			break;
		default:
			break;
 8007738:	bf00      	nop
	}
	CAN_PROCESS();
 800773a:	f000 f8e7 	bl	800790c <CAN_PROCESS>
	CAN_ClearITPendingBit(CAN1, CAN_IT_FF0);
 800773e:	2104      	movs	r1, #4
 8007740:	4816      	ldr	r0, [pc, #88]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 8007742:	f7f9 f95d 	bl	8000a00 <CAN_ClearITPendingBit>
	CAN_ClearFlag(CAN1, CAN_FLAG_EWG);
 8007746:	491c      	ldr	r1, [pc, #112]	; (80077b8 <CAN1_RX0_IRQHandler+0x104>)
 8007748:	4814      	ldr	r0, [pc, #80]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 800774a:	f7f9 f855 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN1, CAN_FLAG_EPV);
 800774e:	491b      	ldr	r1, [pc, #108]	; (80077bc <CAN1_RX0_IRQHandler+0x108>)
 8007750:	4812      	ldr	r0, [pc, #72]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 8007752:	f7f9 f851 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN1, CAN_FLAG_BOF);
 8007756:	491a      	ldr	r1, [pc, #104]	; (80077c0 <CAN1_RX0_IRQHandler+0x10c>)
 8007758:	4810      	ldr	r0, [pc, #64]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 800775a:	f7f9 f84d 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN1, CAN_FLAG_LEC);
 800775e:	4919      	ldr	r1, [pc, #100]	; (80077c4 <CAN1_RX0_IRQHandler+0x110>)
 8007760:	480e      	ldr	r0, [pc, #56]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 8007762:	f7f9 f849 	bl	80007f8 <CAN_ClearFlag>

	CAN_ClearFlag(CAN1, CAN_FLAG_FMP0);
 8007766:	4918      	ldr	r1, [pc, #96]	; (80077c8 <CAN1_RX0_IRQHandler+0x114>)
 8007768:	480c      	ldr	r0, [pc, #48]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 800776a:	f7f9 f845 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN1, CAN_FLAG_FF0);
 800776e:	4917      	ldr	r1, [pc, #92]	; (80077cc <CAN1_RX0_IRQHandler+0x118>)
 8007770:	480a      	ldr	r0, [pc, #40]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 8007772:	f7f9 f841 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN1, CAN_FLAG_FOV0);
 8007776:	4916      	ldr	r1, [pc, #88]	; (80077d0 <CAN1_RX0_IRQHandler+0x11c>)
 8007778:	4808      	ldr	r0, [pc, #32]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 800777a:	f7f9 f83d 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN1, CAN_FLAG_FMP1);
 800777e:	4915      	ldr	r1, [pc, #84]	; (80077d4 <CAN1_RX0_IRQHandler+0x120>)
 8007780:	4806      	ldr	r0, [pc, #24]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 8007782:	f7f9 f839 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN1, CAN_FLAG_FF1);
 8007786:	4914      	ldr	r1, [pc, #80]	; (80077d8 <CAN1_RX0_IRQHandler+0x124>)
 8007788:	4804      	ldr	r0, [pc, #16]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 800778a:	f7f9 f835 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN1, CAN_FLAG_FOV1);
 800778e:	4913      	ldr	r1, [pc, #76]	; (80077dc <CAN1_RX0_IRQHandler+0x128>)
 8007790:	4802      	ldr	r0, [pc, #8]	; (800779c <CAN1_RX0_IRQHandler+0xe8>)
 8007792:	f7f9 f831 	bl	80007f8 <CAN_ClearFlag>
}
 8007796:	bf00      	nop
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	40006400 	.word	0x40006400
 80077a0:	2000059c 	.word	0x2000059c
 80077a4:	200005a7 	.word	0x200005a7
 80077a8:	200013e8 	.word	0x200013e8
 80077ac:	200004d8 	.word	0x200004d8
 80077b0:	200013ec 	.word	0x200013ec
 80077b4:	200013f4 	.word	0x200013f4
 80077b8:	10f00001 	.word	0x10f00001
 80077bc:	10f00002 	.word	0x10f00002
 80077c0:	10f00004 	.word	0x10f00004
 80077c4:	30f00070 	.word	0x30f00070
 80077c8:	12000003 	.word	0x12000003
 80077cc:	32000008 	.word	0x32000008
 80077d0:	32000010 	.word	0x32000010
 80077d4:	14000003 	.word	0x14000003
 80077d8:	34000008 	.word	0x34000008
 80077dc:	34000010 	.word	0x34000010

080077e0 <CAN2_RX1_IRQHandler>:
//using
void CAN2_RX1_IRQHandler()
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
	if(CAN_GetITStatus(CAN2, CAN_IT_FMP0) == SET){
 80077e4:	2102      	movs	r1, #2
 80077e6:	4838      	ldr	r0, [pc, #224]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 80077e8:	f7f9 f840 	bl	800086c <CAN_GetITStatus>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d104      	bne.n	80077fc <CAN2_RX1_IRQHandler+0x1c>
		CAN_Receive(CAN2, CAN_FIFO1, &CAN2_RxMessage);
 80077f2:	4a36      	ldr	r2, [pc, #216]	; (80078cc <CAN2_RX1_IRQHandler+0xec>)
 80077f4:	2101      	movs	r1, #1
 80077f6:	4834      	ldr	r0, [pc, #208]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 80077f8:	f7f8 ff22 	bl	8000640 <CAN_Receive>
	}
	switch(CAN2_RxMessage.StdId){
 80077fc:	4b33      	ldr	r3, [pc, #204]	; (80078cc <CAN2_RX1_IRQHandler+0xec>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3b14      	subs	r3, #20
 8007802:	2b06      	cmp	r3, #6
 8007804:	d82e      	bhi.n	8007864 <CAN2_RX1_IRQHandler+0x84>
 8007806:	a201      	add	r2, pc, #4	; (adr r2, 800780c <CAN2_RX1_IRQHandler+0x2c>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	08007829 	.word	0x08007829
 8007810:	0800783f 	.word	0x0800783f
 8007814:	0800784f 	.word	0x0800784f
 8007818:	08007865 	.word	0x08007865
 800781c:	08007865 	.word	0x08007865
 8007820:	08007865 	.word	0x08007865
 8007824:	08007865 	.word	0x08007865
		case RNS_TO_mainboard:
			memcpy(&insData_receive, &CAN2_RxMessage.Data, CAN2_RxMessage.DLC);
 8007828:	4b28      	ldr	r3, [pc, #160]	; (80078cc <CAN2_RX1_IRQHandler+0xec>)
 800782a:	7a9b      	ldrb	r3, [r3, #10]
 800782c:	461a      	mov	r2, r3
 800782e:	4928      	ldr	r1, [pc, #160]	; (80078d0 <CAN2_RX1_IRQHandler+0xf0>)
 8007830:	4828      	ldr	r0, [pc, #160]	; (80078d4 <CAN2_RX1_IRQHandler+0xf4>)
 8007832:	f003 fbc1 	bl	800afb8 <memcpy>
			buf2_flag = 0;
 8007836:	4b28      	ldr	r3, [pc, #160]	; (80078d8 <CAN2_RX1_IRQHandler+0xf8>)
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]

			break;
 800783c:	e013      	b.n	8007866 <CAN2_RX1_IRQHandler+0x86>
		case RNS_TO_mainboard_buf1:
			memcpy(&buf1_receive, &CAN2_RxMessage.Data, CAN2_RxMessage.DLC);
 800783e:	4b23      	ldr	r3, [pc, #140]	; (80078cc <CAN2_RX1_IRQHandler+0xec>)
 8007840:	7a9b      	ldrb	r3, [r3, #10]
 8007842:	461a      	mov	r2, r3
 8007844:	4922      	ldr	r1, [pc, #136]	; (80078d0 <CAN2_RX1_IRQHandler+0xf0>)
 8007846:	4825      	ldr	r0, [pc, #148]	; (80078dc <CAN2_RX1_IRQHandler+0xfc>)
 8007848:	f003 fbb6 	bl	800afb8 <memcpy>

			break;
 800784c:	e00b      	b.n	8007866 <CAN2_RX1_IRQHandler+0x86>
		case RNS_TO_mainboard_buf2:
			memcpy(&buf2_receive, &CAN2_RxMessage.Data, CAN2_RxMessage.DLC);
 800784e:	4b1f      	ldr	r3, [pc, #124]	; (80078cc <CAN2_RX1_IRQHandler+0xec>)
 8007850:	7a9b      	ldrb	r3, [r3, #10]
 8007852:	461a      	mov	r2, r3
 8007854:	491e      	ldr	r1, [pc, #120]	; (80078d0 <CAN2_RX1_IRQHandler+0xf0>)
 8007856:	4822      	ldr	r0, [pc, #136]	; (80078e0 <CAN2_RX1_IRQHandler+0x100>)
 8007858:	f003 fbae 	bl	800afb8 <memcpy>
			buf2_flag = 1;
 800785c:	4b1e      	ldr	r3, [pc, #120]	; (80078d8 <CAN2_RX1_IRQHandler+0xf8>)
 800785e:	2201      	movs	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
			break;
 8007862:	e000      	b.n	8007866 <CAN2_RX1_IRQHandler+0x86>

		case XY_feedback_state :

			break;
		default:
			break;
 8007864:	bf00      	nop
	}
	CAN_PROCESS();
 8007866:	f000 f851 	bl	800790c <CAN_PROCESS>
	CAN_ClearITPendingBit(CAN2, CAN_IT_FF1);
 800786a:	2120      	movs	r1, #32
 800786c:	4816      	ldr	r0, [pc, #88]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 800786e:	f7f9 f8c7 	bl	8000a00 <CAN_ClearITPendingBit>
	CAN_ClearFlag(CAN2, CAN_FLAG_EWG);
 8007872:	491c      	ldr	r1, [pc, #112]	; (80078e4 <CAN2_RX1_IRQHandler+0x104>)
 8007874:	4814      	ldr	r0, [pc, #80]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 8007876:	f7f8 ffbf 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN2, CAN_FLAG_EPV);
 800787a:	491b      	ldr	r1, [pc, #108]	; (80078e8 <CAN2_RX1_IRQHandler+0x108>)
 800787c:	4812      	ldr	r0, [pc, #72]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 800787e:	f7f8 ffbb 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN2, CAN_FLAG_BOF);
 8007882:	491a      	ldr	r1, [pc, #104]	; (80078ec <CAN2_RX1_IRQHandler+0x10c>)
 8007884:	4810      	ldr	r0, [pc, #64]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 8007886:	f7f8 ffb7 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN2, CAN_FLAG_LEC);
 800788a:	4919      	ldr	r1, [pc, #100]	; (80078f0 <CAN2_RX1_IRQHandler+0x110>)
 800788c:	480e      	ldr	r0, [pc, #56]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 800788e:	f7f8 ffb3 	bl	80007f8 <CAN_ClearFlag>

	CAN_ClearFlag(CAN2, CAN_FLAG_FMP0);
 8007892:	4918      	ldr	r1, [pc, #96]	; (80078f4 <CAN2_RX1_IRQHandler+0x114>)
 8007894:	480c      	ldr	r0, [pc, #48]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 8007896:	f7f8 ffaf 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN2, CAN_FLAG_FF0);
 800789a:	4917      	ldr	r1, [pc, #92]	; (80078f8 <CAN2_RX1_IRQHandler+0x118>)
 800789c:	480a      	ldr	r0, [pc, #40]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 800789e:	f7f8 ffab 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN2, CAN_FLAG_FOV0);
 80078a2:	4916      	ldr	r1, [pc, #88]	; (80078fc <CAN2_RX1_IRQHandler+0x11c>)
 80078a4:	4808      	ldr	r0, [pc, #32]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 80078a6:	f7f8 ffa7 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN2, CAN_FLAG_FMP1);
 80078aa:	4915      	ldr	r1, [pc, #84]	; (8007900 <CAN2_RX1_IRQHandler+0x120>)
 80078ac:	4806      	ldr	r0, [pc, #24]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 80078ae:	f7f8 ffa3 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN2, CAN_FLAG_FF1);
 80078b2:	4914      	ldr	r1, [pc, #80]	; (8007904 <CAN2_RX1_IRQHandler+0x124>)
 80078b4:	4804      	ldr	r0, [pc, #16]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 80078b6:	f7f8 ff9f 	bl	80007f8 <CAN_ClearFlag>
	CAN_ClearFlag(CAN2, CAN_FLAG_FOV1);
 80078ba:	4913      	ldr	r1, [pc, #76]	; (8007908 <CAN2_RX1_IRQHandler+0x128>)
 80078bc:	4802      	ldr	r0, [pc, #8]	; (80078c8 <CAN2_RX1_IRQHandler+0xe8>)
 80078be:	f7f8 ff9b 	bl	80007f8 <CAN_ClearFlag>
}
 80078c2:	bf00      	nop
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	40006800 	.word	0x40006800
 80078cc:	200005b0 	.word	0x200005b0
 80078d0:	200005bb 	.word	0x200005bb
 80078d4:	200013e8 	.word	0x200013e8
 80078d8:	200004d8 	.word	0x200004d8
 80078dc:	200013ec 	.word	0x200013ec
 80078e0:	200013f4 	.word	0x200013f4
 80078e4:	10f00001 	.word	0x10f00001
 80078e8:	10f00002 	.word	0x10f00002
 80078ec:	10f00004 	.word	0x10f00004
 80078f0:	30f00070 	.word	0x30f00070
 80078f4:	12000003 	.word	0x12000003
 80078f8:	32000008 	.word	0x32000008
 80078fc:	32000010 	.word	0x32000010
 8007900:	14000003 	.word	0x14000003
 8007904:	34000008 	.word	0x34000008
 8007908:	34000010 	.word	0x34000010

0800790c <CAN_PROCESS>:

void CAN_PROCESS(void){
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
	if(insData_receive[0] == 1){
 8007910:	4b18      	ldr	r3, [pc, #96]	; (8007974 <CAN_PROCESS+0x68>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d107      	bne.n	8007928 <CAN_PROCESS+0x1c>
		rns.RNS_data.common_instruction = insData_receive[1];
 8007918:	4b16      	ldr	r3, [pc, #88]	; (8007974 <CAN_PROCESS+0x68>)
 800791a:	785a      	ldrb	r2, [r3, #1]
 800791c:	4b16      	ldr	r3, [pc, #88]	; (8007978 <CAN_PROCESS+0x6c>)
 800791e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		insData_receive[0]=2;
 8007922:	4b14      	ldr	r3, [pc, #80]	; (8007974 <CAN_PROCESS+0x68>)
 8007924:	2202      	movs	r2, #2
 8007926:	701a      	strb	r2, [r3, #0]
	}
	if(insData_receive[0] == 17){
 8007928:	4b12      	ldr	r3, [pc, #72]	; (8007974 <CAN_PROCESS+0x68>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b11      	cmp	r3, #17
 800792e:	d11b      	bne.n	8007968 <CAN_PROCESS+0x5c>
		if(buf2_flag == 1){
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <CAN_PROCESS+0x70>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d117      	bne.n	8007968 <CAN_PROCESS+0x5c>
			rns.RNS_data.common_instruction = insData_receive[1];
 8007938:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <CAN_PROCESS+0x68>)
 800793a:	785a      	ldrb	r2, [r3, #1]
 800793c:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <CAN_PROCESS+0x6c>)
 800793e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 8007942:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <CAN_PROCESS+0x74>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a0c      	ldr	r2, [pc, #48]	; (8007978 <CAN_PROCESS+0x6c>)
 8007948:	6453      	str	r3, [r2, #68]	; 0x44
			rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800794a:	4b0d      	ldr	r3, [pc, #52]	; (8007980 <CAN_PROCESS+0x74>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	4a0a      	ldr	r2, [pc, #40]	; (8007978 <CAN_PROCESS+0x6c>)
 8007950:	6493      	str	r3, [r2, #72]	; 0x48
			rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 8007952:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <CAN_PROCESS+0x78>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a08      	ldr	r2, [pc, #32]	; (8007978 <CAN_PROCESS+0x6c>)
 8007958:	64d3      	str	r3, [r2, #76]	; 0x4c
			rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800795a:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <CAN_PROCESS+0x78>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	4a06      	ldr	r2, [pc, #24]	; (8007978 <CAN_PROCESS+0x6c>)
 8007960:	6513      	str	r3, [r2, #80]	; 0x50
			insData_receive[0]=3;
 8007962:	4b04      	ldr	r3, [pc, #16]	; (8007974 <CAN_PROCESS+0x68>)
 8007964:	2203      	movs	r2, #3
 8007966:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	200013e8 	.word	0x200013e8
 8007978:	2000128c 	.word	0x2000128c
 800797c:	200004d8 	.word	0x200004d8
 8007980:	200013ec 	.word	0x200013ec
 8007984:	200013f4 	.word	0x200013f4

08007988 <System_Start>:

#include "common.h"
#include "math.h"

void System_Start(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
//	BIOSDelay(500);
//	RNSInit(CAN1, &rns);
//	BIOSDelay(500);
//	RNSStop(&rns);
//	RNSSet(&rns, RNS_RESET_POS);
}
 800798c:	bf00      	nop
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <System_Run>:

void System_Run(void)
{
 8007996:	b480      	push	{r7}
 8007998:	af00      	add	r7, sp, #0

}
 800799a:	bf00      	nop
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <SysTick_Handler>:

int count = 0;
int count2 = 0;
int count3 = 0;
char uartbuff[200];
void SysTick_Handler(void){
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0

	BIOSTimingDelay_Decrement();
 80079a8:	f7fd f9d4 	bl	8004d54 <BIOSTimingDelay_Decrement>
	MUXUpdate(&MUX);
 80079ac:	4803      	ldr	r0, [pc, #12]	; (80079bc <SysTick_Handler+0x18>)
 80079ae:	f7fa fd49 	bl	8002444 <MUXUpdate>
	SHIFTREGShift(&SR);
 80079b2:	4803      	ldr	r0, [pc, #12]	; (80079c0 <SysTick_Handler+0x1c>)
 80079b4:	f7fd f8ff 	bl	8004bb6 <SHIFTREGShift>

}
 80079b8:	bf00      	nop
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20001234 	.word	0x20001234
 80079c0:	2000125c 	.word	0x2000125c

080079c4 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (TIM1 -> CR1 == 129)
 80079c8:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <TIM1_UP_TIM10_IRQHandler+0x68>)
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b81      	cmp	r3, #129	; 0x81
 80079d0:	d109      	bne.n	80079e6 <TIM1_UP_TIM10_IRQHandler+0x22>
		{
			BIOS_QEI1.signbit += 1;
 80079d2:	4b17      	ldr	r3, [pc, #92]	; (8007a30 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 80079d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3301      	adds	r3, #1
 80079dc:	b29b      	uxth	r3, r3
 80079de:	b21a      	sxth	r2, r3
 80079e0:	4b13      	ldr	r3, [pc, #76]	; (8007a30 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 80079e2:	805a      	strh	r2, [r3, #2]
 80079e4:	e00d      	b.n	8007a02 <TIM1_UP_TIM10_IRQHandler+0x3e>
		}
	else if (TIM1 ->CR1 == 145)
 80079e6:	4b11      	ldr	r3, [pc, #68]	; (8007a2c <TIM1_UP_TIM10_IRQHandler+0x68>)
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	2b91      	cmp	r3, #145	; 0x91
 80079ee:	d108      	bne.n	8007a02 <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 80079f0:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 80079f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	b21a      	sxth	r2, r3
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 8007a00:	805a      	strh	r2, [r3, #2]
	}
	TIM1 -> SR = 0;
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <TIM1_UP_TIM10_IRQHandler+0x68>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	821a      	strh	r2, [r3, #16]
	QEIDelay(200);
 8007a08:	20c8      	movs	r0, #200	; 0xc8
 8007a0a:	f7fb fee9 	bl	80037e0 <QEIDelay>
  if (TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET)
	   {
		  TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
	   }
#endif
  if (TIM_GetITStatus(TIM10, TIM_IT_Update) != RESET)
 8007a0e:	2101      	movs	r1, #1
 8007a10:	4808      	ldr	r0, [pc, #32]	; (8007a34 <TIM1_UP_TIM10_IRQHandler+0x70>)
 8007a12:	f7fa f895 	bl	8001b40 <TIM_GetITStatus>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <TIM1_UP_TIM10_IRQHandler+0x62>
	   {
		  TIM_ClearITPendingBit(TIM10, TIM_IT_Update);
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	4805      	ldr	r0, [pc, #20]	; (8007a34 <TIM1_UP_TIM10_IRQHandler+0x70>)
 8007a20:	f7fa f8b8 	bl	8001b94 <TIM_ClearITPendingBit>

	   }
   return;
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
}
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40010000 	.word	0x40010000
 8007a30:	20001ebc 	.word	0x20001ebc
 8007a34:	40014400 	.word	0x40014400

08007a38 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
		BIOS_QEI2.signbit -= 1;
	}
	TIM2 -> SR = 0;
	QEIDelay(100);
#else
  if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007a42:	f7fa f87d 	bl	8001b40 <TIM_GetITStatus>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <TIM2_IRQHandler+0x20>
	   {
		  TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007a52:	f7fa f89f 	bl	8001b94 <TIM_ClearITPendingBit>
	   }


   return;
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
#endif
}
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
		BIOS_QEI3.signbit -= 1;
	}
	TIM3 -> SR = 0;
	QEIDelay(100);
#else
  if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8007a60:	2101      	movs	r1, #1
 8007a62:	4806      	ldr	r0, [pc, #24]	; (8007a7c <TIM3_IRQHandler+0x20>)
 8007a64:	f7fa f86c 	bl	8001b40 <TIM_GetITStatus>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <TIM3_IRQHandler+0x1c>
	   {
		  TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8007a6e:	2101      	movs	r1, #1
 8007a70:	4802      	ldr	r0, [pc, #8]	; (8007a7c <TIM3_IRQHandler+0x20>)
 8007a72:	f7fa f88f 	bl	8001b94 <TIM_ClearITPendingBit>

	   }
   return;
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
#endif
}
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40000400 	.word	0x40000400

08007a80 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
#ifdef USED_QEI4
  if (TIM4 -> CR1 == 129)
 8007a84:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <TIM4_IRQHandler+0x50>)
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b81      	cmp	r3, #129	; 0x81
 8007a8c:	d109      	bne.n	8007aa2 <TIM4_IRQHandler+0x22>
  {
		BIOS_QEI4.signbit += 1;
 8007a8e:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <TIM4_IRQHandler+0x54>)
 8007a90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3301      	adds	r3, #1
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	b21a      	sxth	r2, r3
 8007a9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <TIM4_IRQHandler+0x54>)
 8007a9e:	805a      	strh	r2, [r3, #2]
 8007aa0:	e00d      	b.n	8007abe <TIM4_IRQHandler+0x3e>
  }
  else if (TIM4 ->CR1 == 145)
 8007aa2:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <TIM4_IRQHandler+0x50>)
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b91      	cmp	r3, #145	; 0x91
 8007aaa:	d108      	bne.n	8007abe <TIM4_IRQHandler+0x3e>
  {
		BIOS_QEI4.signbit -= 1;
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <TIM4_IRQHandler+0x54>)
 8007aae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	b21a      	sxth	r2, r3
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <TIM4_IRQHandler+0x54>)
 8007abc:	805a      	strh	r2, [r3, #2]
  }
  TIM4 -> SR = 0;
 8007abe:	4b04      	ldr	r3, [pc, #16]	; (8007ad0 <TIM4_IRQHandler+0x50>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	821a      	strh	r2, [r3, #16]
  QEIDelay(100);
 8007ac4:	2064      	movs	r0, #100	; 0x64
 8007ac6:	f7fb fe8b 	bl	80037e0 <QEIDelay>
	  	  TIM_ClearITPendingBit(TIM4, TIM_IT_Update);

	   }
   return;
#endif
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40000800 	.word	0x40000800
 8007ad4:	20001ee0 	.word	0x20001ee0

08007ad8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
			BIOS_QEI5.signbit -= 1;
	  }
	  TIM5 -> SR = 0;
	  QEIDelay(100);
#else
  if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 8007adc:	2101      	movs	r1, #1
 8007ade:	4806      	ldr	r0, [pc, #24]	; (8007af8 <TIM5_IRQHandler+0x20>)
 8007ae0:	f7fa f82e 	bl	8001b40 <TIM_GetITStatus>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <TIM5_IRQHandler+0x1c>
	   {
		  TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 8007aea:	2101      	movs	r1, #1
 8007aec:	4802      	ldr	r0, [pc, #8]	; (8007af8 <TIM5_IRQHandler+0x20>)
 8007aee:	f7fa f851 	bl	8001b94 <TIM_ClearITPendingBit>

	   }
   return;
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
#endif
}
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40000c00 	.word	0x40000c00

08007afc <TIM7_IRQHandler>:



void TIM7_IRQHandler(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 8007b00:	2101      	movs	r1, #1
 8007b02:	4806      	ldr	r0, [pc, #24]	; (8007b1c <TIM7_IRQHandler+0x20>)
 8007b04:	f7fa f81c 	bl	8001b40 <TIM_GetITStatus>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d004      	beq.n	8007b18 <TIM7_IRQHandler+0x1c>
		{
			TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8007b0e:	2101      	movs	r1, #1
 8007b10:	4802      	ldr	r0, [pc, #8]	; (8007b1c <TIM7_IRQHandler+0x20>)
 8007b12:	f7fa f83f 	bl	8001b94 <TIM_ClearITPendingBit>
		}
   return;
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
}
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40001400 	.word	0x40001400

08007b20 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
#ifdef USED_QEI6
	if (TIM8 -> CR1 == 129)
 8007b24:	4b18      	ldr	r3, [pc, #96]	; (8007b88 <TIM8_UP_TIM13_IRQHandler+0x68>)
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b81      	cmp	r3, #129	; 0x81
 8007b2c:	d109      	bne.n	8007b42 <TIM8_UP_TIM13_IRQHandler+0x22>
		{
			BIOS_QEI6.signbit += 1;
 8007b2e:	4b17      	ldr	r3, [pc, #92]	; (8007b8c <TIM8_UP_TIM13_IRQHandler+0x6c>)
 8007b30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3301      	adds	r3, #1
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	b21a      	sxth	r2, r3
 8007b3c:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <TIM8_UP_TIM13_IRQHandler+0x6c>)
 8007b3e:	805a      	strh	r2, [r3, #2]
 8007b40:	e00d      	b.n	8007b5e <TIM8_UP_TIM13_IRQHandler+0x3e>
		}
	else if (TIM8 ->CR1 == 145)
 8007b42:	4b11      	ldr	r3, [pc, #68]	; (8007b88 <TIM8_UP_TIM13_IRQHandler+0x68>)
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	2b91      	cmp	r3, #145	; 0x91
 8007b4a:	d108      	bne.n	8007b5e <TIM8_UP_TIM13_IRQHandler+0x3e>
	{
		BIOS_QEI6.signbit -= 1;
 8007b4c:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <TIM8_UP_TIM13_IRQHandler+0x6c>)
 8007b4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	b21a      	sxth	r2, r3
 8007b5a:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <TIM8_UP_TIM13_IRQHandler+0x6c>)
 8007b5c:	805a      	strh	r2, [r3, #2]
	}
	TIM8 -> SR = 0;
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <TIM8_UP_TIM13_IRQHandler+0x68>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	821a      	strh	r2, [r3, #16]
	QEIDelay(200);
 8007b64:	20c8      	movs	r0, #200	; 0xc8
 8007b66:	f7fb fe3b 	bl	80037e0 <QEIDelay>

		}
#endif


	if (TIM_GetITStatus(TIM13, TIM_IT_Update) != RESET)
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	4808      	ldr	r0, [pc, #32]	; (8007b90 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8007b6e:	f7f9 ffe7 	bl	8001b40 <TIM_GetITStatus>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <TIM8_UP_TIM13_IRQHandler+0x62>
		{
		  TIM_ClearITPendingBit(TIM13, TIM_IT_Update);
 8007b78:	2101      	movs	r1, #1
 8007b7a:	4805      	ldr	r0, [pc, #20]	; (8007b90 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8007b7c:	f7fa f80a 	bl	8001b94 <TIM_ClearITPendingBit>
		}
return;
 8007b80:	bf00      	nop
 8007b82:	bf00      	nop

}
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40010400 	.word	0x40010400
 8007b8c:	20001ee4 	.word	0x20001ee4
 8007b90:	40001c00 	.word	0x40001c00

08007b94 <TIM1_BRK_TIM9_IRQHandler>:

void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM9, TIM_IT_Update) != RESET)
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4806      	ldr	r0, [pc, #24]	; (8007bb4 <TIM1_BRK_TIM9_IRQHandler+0x20>)
 8007b9c:	f7f9 ffd0 	bl	8001b40 <TIM_GetITStatus>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d004      	beq.n	8007bb0 <TIM1_BRK_TIM9_IRQHandler+0x1c>
	   {
		  TIM_ClearITPendingBit(TIM9, TIM_IT_Update);
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	4802      	ldr	r0, [pc, #8]	; (8007bb4 <TIM1_BRK_TIM9_IRQHandler+0x20>)
 8007baa:	f7f9 fff3 	bl	8001b94 <TIM_ClearITPendingBit>

	   }
	   return;
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
}
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	40014000 	.word	0x40014000

08007bb8 <TIM1_TRG_COM_TIM11_IRQHandler>:


void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM11, TIM_IT_Update) != RESET)
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	4806      	ldr	r0, [pc, #24]	; (8007bd8 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8007bc0:	f7f9 ffbe 	bl	8001b40 <TIM_GetITStatus>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d004      	beq.n	8007bd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>
	   {
		  TIM_ClearITPendingBit(TIM11, TIM_IT_Update);
 8007bca:	2101      	movs	r1, #1
 8007bcc:	4802      	ldr	r0, [pc, #8]	; (8007bd8 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8007bce:	f7f9 ffe1 	bl	8001b94 <TIM_ClearITPendingBit>

	   }
	return;
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
}
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40014800 	.word	0x40014800

08007bdc <TIM8_BRK_TIM12_IRQHandler>:

void TIM8_BRK_TIM12_IRQHandler(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM12, TIM_IT_Update) != RESET)
 8007be0:	2101      	movs	r1, #1
 8007be2:	4806      	ldr	r0, [pc, #24]	; (8007bfc <TIM8_BRK_TIM12_IRQHandler+0x20>)
 8007be4:	f7f9 ffac 	bl	8001b40 <TIM_GetITStatus>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <TIM8_BRK_TIM12_IRQHandler+0x1c>
	   {
		  TIM_ClearITPendingBit(TIM12, TIM_IT_Update);
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4802      	ldr	r0, [pc, #8]	; (8007bfc <TIM8_BRK_TIM12_IRQHandler+0x20>)
 8007bf2:	f7f9 ffcf 	bl	8001b94 <TIM_ClearITPendingBit>

	   }
	return;
 8007bf6:	bf00      	nop
 8007bf8:	bf00      	nop
}
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	40001800 	.word	0x40001800

08007c00 <TIM8_TRG_COM_TIM14_IRQHandler>:

void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM14, TIM_IT_Update) != RESET)
 8007c04:	2101      	movs	r1, #1
 8007c06:	4806      	ldr	r0, [pc, #24]	; (8007c20 <TIM8_TRG_COM_TIM14_IRQHandler+0x20>)
 8007c08:	f7f9 ff9a 	bl	8001b40 <TIM_GetITStatus>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d004      	beq.n	8007c1c <TIM8_TRG_COM_TIM14_IRQHandler+0x1c>
	   {
		  TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
 8007c12:	2101      	movs	r1, #1
 8007c14:	4802      	ldr	r0, [pc, #8]	; (8007c20 <TIM8_TRG_COM_TIM14_IRQHandler+0x20>)
 8007c16:	f7f9 ffbd 	bl	8001b94 <TIM_ClearITPendingBit>

	   }
    return;
 8007c1a:	bf00      	nop
 8007c1c:	bf00      	nop
}
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	40002000 	.word	0x40002000

08007c24 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line15) != RESET)
 8007c28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c2c:	f7f8 ff70 	bl	8000b10 <EXTI_GetITStatus>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <EXTI15_10_IRQHandler+0x1a>
	{
		EXTI_ClearITPendingBit(EXTI_Line15);
 8007c36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c3a:	f7f8 ff8d 	bl	8000b58 <EXTI_ClearITPendingBit>
	}
}
 8007c3e:	bf00      	nop
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <_ZN3ros3MsgC1Ev+0x1c>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	0800b65c 	.word	0x0800b65c

08007c64 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff ffe8 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 8007c74:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	711a      	strb	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a04      	ldr	r2, [pc, #16]	; (8007c94 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8007c84:	609a      	str	r2, [r3, #8]
    {
    }
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	0800b644 	.word	0x0800b644
 8007c94:	0800b25c 	.word	0x0800b25c

08007c98 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	4413      	add	r3, r2
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	7912      	ldrb	r2, [r2, #4]
 8007cb0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7f8 fa83 	bl	80001c8 <strlen>
 8007cc2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4413      	add	r3, r2
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 fea3 	bl	8009a18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	18d0      	adds	r0, r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f003 f967 	bl	800afb8 <memcpy>
      offset += length_msg;
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4413      	add	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
      return offset;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
    }
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	4413      	add	r3, r2
 8007d10:	781a      	ldrb	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	441a      	add	r2, r3
 8007d22:	f107 030c 	add.w	r3, r7, #12
 8007d26:	4611      	mov	r1, r2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 fe93 	bl	8009a54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3304      	adds	r3, #4
 8007d32:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	441a      	add	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d90c      	bls.n	8007d5e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	440a      	add	r2, r1
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	e7ec      	b.n	8007d38 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	3b01      	subs	r3, #1
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	4413      	add	r3, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	441a      	add	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	613b      	str	r3, [r7, #16]
     return offset;
 8007d82:	693b      	ldr	r3, [r7, #16]
    }
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	0800b260 	.word	0x0800b260

08007da8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	0800b274 	.word	0x0800b274

08007dc4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ff38 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 8007dd4:	4a0c      	ldr	r2, [pc, #48]	; (8007e08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	605a      	str	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	611a      	str	r2, [r3, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	619a      	str	r2, [r3, #24]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	61da      	str	r2, [r3, #28]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	0800b62c 	.word	0x0800b62c

08007e0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	4413      	add	r3, r2
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	6852      	ldr	r2, [r2, #4]
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	4413      	add	r3, r2
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6852      	ldr	r2, [r2, #4]
 8007e34:	0a12      	lsrs	r2, r2, #8
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4413      	add	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6852      	ldr	r2, [r2, #4]
 8007e46:	0c12      	lsrs	r2, r2, #16
 8007e48:	b2d2      	uxtb	r2, r2
 8007e4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	3303      	adds	r3, #3
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	4413      	add	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6852      	ldr	r2, [r2, #4]
 8007e58:	0e12      	lsrs	r2, r2, #24
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	3304      	adds	r3, #4
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8007e64:	2300      	movs	r3, #0
 8007e66:	623b      	str	r3, [r7, #32]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d92b      	bls.n	8007eca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	4413      	add	r3, r2
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	3301      	adds	r3, #1
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	4413      	add	r3, r2
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	0a12      	lsrs	r2, r2, #8
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	3302      	adds	r3, #2
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	0c12      	lsrs	r2, r2, #16
 8007ea8:	b2d2      	uxtb	r2, r2
 8007eaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	3303      	adds	r3, #3
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	0e12      	lsrs	r2, r2, #24
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	623b      	str	r3, [r7, #32]
 8007ec8:	e7ce      	b.n	8007e68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	4413      	add	r3, r2
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6912      	ldr	r2, [r2, #16]
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	3301      	adds	r3, #1
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	4413      	add	r3, r2
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6912      	ldr	r2, [r2, #16]
 8007ee4:	0a12      	lsrs	r2, r2, #8
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	3302      	adds	r3, #2
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6912      	ldr	r2, [r2, #16]
 8007ef6:	0c12      	lsrs	r2, r2, #16
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	3303      	adds	r3, #3
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	4413      	add	r3, r2
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6912      	ldr	r2, [r2, #16]
 8007f08:	0e12      	lsrs	r2, r2, #24
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	3304      	adds	r3, #4
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8007f14:	2300      	movs	r3, #0
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d92b      	bls.n	8007f7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	4413      	add	r3, r2
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	3301      	adds	r3, #1
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	4413      	add	r3, r2
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	0a12      	lsrs	r2, r2, #8
 8007f48:	b2d2      	uxtb	r2, r2
 8007f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	3302      	adds	r3, #2
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	4413      	add	r3, r2
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	0c12      	lsrs	r2, r2, #16
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	3303      	adds	r3, #3
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	4413      	add	r3, r2
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	0e12      	lsrs	r2, r2, #24
 8007f68:	b2d2      	uxtb	r2, r2
 8007f6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	3304      	adds	r3, #4
 8007f70:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	3301      	adds	r3, #1
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	e7ce      	b.n	8007f18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	4413      	add	r3, r2
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	69d2      	ldr	r2, [r2, #28]
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	4413      	add	r3, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	69d2      	ldr	r2, [r2, #28]
 8007f94:	0a12      	lsrs	r2, r2, #8
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	3302      	adds	r3, #2
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	69d2      	ldr	r2, [r2, #28]
 8007fa6:	0c12      	lsrs	r2, r2, #16
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	3303      	adds	r3, #3
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	69d2      	ldr	r2, [r2, #28]
 8007fb8:	0e12      	lsrs	r2, r2, #24
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d928      	bls.n	8008024 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7f8 f8f2 	bl	80001c8 <strlen>
 8007fe4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	4413      	add	r3, r2
 8007fec:	6979      	ldr	r1, [r7, #20]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 fd12 	bl	8009a18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	18d0      	adds	r0, r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4619      	mov	r1, r3
 8008010:	f002 ffd2 	bl	800afb8 <memcpy>
      offset += length_stringsi;
 8008014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	4413      	add	r3, r2
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	3301      	adds	r3, #1
 8008020:	61bb      	str	r3, [r7, #24]
 8008022:	e7d1      	b.n	8007fc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8008026:	4618      	mov	r0, r3
 8008028:	3728      	adds	r7, #40	; 0x28
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800802e:	b580      	push	{r7, lr}
 8008030:	b08e      	sub	sp, #56	; 0x38
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800803c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4413      	add	r3, r2
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	3301      	adds	r3, #1
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4413      	add	r3, r2
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	4313      	orrs	r3, r2
 8008056:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805a:	3302      	adds	r3, #2
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	4413      	add	r3, r2
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	041b      	lsls	r3, r3, #16
 8008064:	6a3a      	ldr	r2, [r7, #32]
 8008066:	4313      	orrs	r3, r2
 8008068:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806c:	3303      	adds	r3, #3
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	4413      	add	r3, r2
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	061b      	lsls	r3, r3, #24
 8008076:	6a3a      	ldr	r2, [r7, #32]
 8008078:	4313      	orrs	r3, r2
 800807a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800807c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807e:	3304      	adds	r3, #4
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	429a      	cmp	r2, r3
 800808a:	d20a      	bcs.n	80080a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4619      	mov	r1, r3
 8008096:	4610      	mov	r0, r2
 8008098:	f002 ff9a 	bl	800afd0 <realloc>
 800809c:	4602      	mov	r2, r0
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80080a8:	2300      	movs	r3, #0
 80080aa:	633b      	str	r3, [r7, #48]	; 0x30
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d936      	bls.n	8008124 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	440a      	add	r2, r1
 80080c2:	7812      	ldrb	r2, [r2, #0]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080cc:	3301      	adds	r3, #1
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	440b      	add	r3, r1
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080de:	3302      	adds	r3, #2
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	440b      	add	r3, r1
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	041b      	lsls	r3, r3, #16
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	3303      	adds	r3, #3
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	440b      	add	r3, r1
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	061b      	lsls	r3, r3, #24
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8008104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008106:	3304      	adds	r3, #4
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	3208      	adds	r2, #8
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	3301      	adds	r3, #1
 8008120:	633b      	str	r3, [r7, #48]	; 0x30
 8008122:	e7c3      	b.n	80080ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	4413      	add	r3, r2
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	3301      	adds	r3, #1
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	4413      	add	r3, r2
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	4313      	orrs	r3, r2
 800813e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008142:	3302      	adds	r3, #2
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	4413      	add	r3, r2
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	041b      	lsls	r3, r3, #16
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	4313      	orrs	r3, r2
 8008150:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008154:	3303      	adds	r3, #3
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	4413      	add	r3, r2
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	061b      	lsls	r3, r3, #24
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	4313      	orrs	r3, r2
 8008162:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8008164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008166:	3304      	adds	r3, #4
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	429a      	cmp	r2, r3
 8008172:	d20a      	bcs.n	800818a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699a      	ldr	r2, [r3, #24]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4619      	mov	r1, r3
 800817e:	4610      	mov	r0, r2
 8008180:	f002 ff26 	bl	800afd0 <realloc>
 8008184:	4602      	mov	r2, r0
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8008190:	2300      	movs	r3, #0
 8008192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819a:	429a      	cmp	r2, r3
 800819c:	d936      	bls.n	800820c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	440a      	add	r2, r1
 80081aa:	7812      	ldrb	r2, [r2, #0]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b4:	3301      	adds	r3, #1
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	440b      	add	r3, r1
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	3302      	adds	r3, #2
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	440b      	add	r3, r1
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	041b      	lsls	r3, r3, #16
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	3303      	adds	r3, #3
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	440b      	add	r3, r1
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	061b      	lsls	r3, r3, #24
 80081e2:	4313      	orrs	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	3304      	adds	r3, #4
 80081f0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	3214      	adds	r2, #20
 8008200:	6812      	ldr	r2, [r2, #0]
 8008202:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	3301      	adds	r3, #1
 8008208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800820a:	e7c3      	b.n	8008194 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	4413      	add	r3, r2
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	3301      	adds	r3, #1
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4413      	add	r3, r2
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	4313      	orrs	r3, r2
 8008226:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	3302      	adds	r3, #2
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	4413      	add	r3, r2
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	041b      	lsls	r3, r3, #16
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	4313      	orrs	r3, r2
 8008238:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	3303      	adds	r3, #3
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	4413      	add	r3, r2
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	061b      	lsls	r3, r3, #24
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	4313      	orrs	r3, r2
 800824a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800824c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824e:	3304      	adds	r3, #4
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	69da      	ldr	r2, [r3, #28]
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	429a      	cmp	r2, r3
 800825a:	d20a      	bcs.n	8008272 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f002 feb2 	bl	800afd0 <realloc>
 800826c:	4602      	mov	r2, r0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8008278:	2300      	movs	r3, #0
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	69da      	ldr	r2, [r3, #28]
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	429a      	cmp	r2, r3
 8008284:	d93f      	bls.n	8008306 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8008286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	441a      	add	r2, r3
 800828c:	f107 030c 	add.w	r3, r7, #12
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f001 fbde 	bl	8009a54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829a:	3304      	adds	r3, #4
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800829e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
 80082a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	441a      	add	r2, r3
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d90c      	bls.n	80082c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	3b01      	subs	r3, #1
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	4413      	add	r3, r2
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ba:	440a      	add	r2, r1
 80082bc:	7812      	ldrb	r2, [r2, #0]
 80082be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	3301      	adds	r3, #1
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
 80082c6:	e7ec      	b.n	80082a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80082c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	3b01      	subs	r3, #1
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	4413      	add	r3, r2
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80082d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082da:	3b01      	subs	r3, #1
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	441a      	add	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80082e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4413      	add	r3, r2
 80082ea:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	3220      	adds	r2, #32
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	3301      	adds	r3, #1
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
 8008304:	e7ba      	b.n	800827c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8008308:	4618      	mov	r0, r3
 800830a:	3738      	adds	r7, #56	; 0x38
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	4b03      	ldr	r3, [pc, #12]	; (8008328 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	0800b4d8 	.word	0x0800b4d8

0800832c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	4b03      	ldr	r3, [pc, #12]	; (8008344 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	0800b298 	.word	0x0800b298

08008348 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff fc76 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 8008358:	4a0b      	ldr	r2, [pc, #44]	; (8008388 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	809a      	strh	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a09      	ldr	r2, [pc, #36]	; (800838c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8008368:	609a      	str	r2, [r3, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a07      	ldr	r2, [pc, #28]	; (800838c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800836e:	60da      	str	r2, [r3, #12]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a06      	ldr	r2, [pc, #24]	; (800838c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8008374:	611a      	str	r2, [r3, #16]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	615a      	str	r2, [r3, #20]
    {
    }
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	0800b614 	.word	0x0800b614
 800838c:	0800b25c 	.word	0x0800b25c

08008390 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	4413      	add	r3, r2
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	8892      	ldrh	r2, [r2, #4]
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	3301      	adds	r3, #1
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	4413      	add	r3, r2
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	8892      	ldrh	r2, [r2, #4]
 80083b8:	0a12      	lsrs	r2, r2, #8
 80083ba:	b292      	uxth	r2, r2
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3302      	adds	r3, #2
 80083c4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f7 fefc 	bl	80001c8 <strlen>
 80083d0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	4413      	add	r3, r2
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 fb1c 	bl	8009a18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	3304      	adds	r3, #4
 80083e4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	18d0      	adds	r0, r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	4619      	mov	r1, r3
 80083f4:	f002 fde0 	bl	800afb8 <memcpy>
      offset += length_topic_name;
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	4413      	add	r3, r2
 80083fe:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	4618      	mov	r0, r3
 8008406:	f7f7 fedf 	bl	80001c8 <strlen>
 800840a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4413      	add	r3, r2
 8008412:	6979      	ldr	r1, [r7, #20]
 8008414:	4618      	mov	r0, r3
 8008416:	f001 faff 	bl	8009a18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3304      	adds	r3, #4
 800841e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	18d0      	adds	r0, r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4619      	mov	r1, r3
 800842e:	f002 fdc3 	bl	800afb8 <memcpy>
      offset += length_message_type;
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	4413      	add	r3, r2
 8008438:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	4618      	mov	r0, r3
 8008440:	f7f7 fec2 	bl	80001c8 <strlen>
 8008444:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	4413      	add	r3, r2
 800844c:	6939      	ldr	r1, [r7, #16]
 800844e:	4618      	mov	r0, r3
 8008450:	f001 fae2 	bl	8009a18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	3304      	adds	r3, #4
 8008458:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	18d0      	adds	r0, r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4619      	mov	r1, r3
 8008468:	f002 fda6 	bl	800afb8 <memcpy>
      offset += length_md5sum;
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	4413      	add	r3, r2
 8008472:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	4413      	add	r3, r2
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	3301      	adds	r3, #1
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4413      	add	r3, r2
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	0a12      	lsrs	r2, r2, #8
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	3302      	adds	r3, #2
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4413      	add	r3, r2
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	0c12      	lsrs	r2, r2, #16
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	3303      	adds	r3, #3
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	4413      	add	r3, r2
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	0e12      	lsrs	r2, r2, #24
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	3304      	adds	r3, #4
 80084ba:	61fb      	str	r3, [r7, #28]
      return offset;
 80084bc:	69fb      	ldr	r3, [r7, #28]
    }
 80084be:	4618      	mov	r0, r3
 80084c0:	3720      	adds	r7, #32
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b08a      	sub	sp, #40	; 0x28
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4413      	add	r3, r2
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b29a      	uxth	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	889b      	ldrh	r3, [r3, #4]
 80084e6:	b21a      	sxth	r2, r3
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	3301      	adds	r3, #1
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	440b      	add	r3, r1
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	b21b      	sxth	r3, r3
 80084f6:	4313      	orrs	r3, r2
 80084f8:	b21b      	sxth	r3, r3
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	3302      	adds	r3, #2
 8008504:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	441a      	add	r2, r3
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f001 fa9e 	bl	8009a54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	3304      	adds	r3, #4
 800851c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	627b      	str	r3, [r7, #36]	; 0x24
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	441a      	add	r2, r3
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	429a      	cmp	r2, r3
 800852c:	d90c      	bls.n	8008548 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	3b01      	subs	r3, #1
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4413      	add	r3, r2
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	440a      	add	r2, r1
 800853c:	7812      	ldrb	r2, [r2, #0]
 800853e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	3301      	adds	r3, #1
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
 8008546:	e7ec      	b.n	8008522 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	4413      	add	r3, r2
 800854e:	3b01      	subs	r3, #1
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	4413      	add	r3, r2
 8008554:	2200      	movs	r2, #0
 8008556:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	3b01      	subs	r3, #1
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	441a      	add	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	4413      	add	r3, r2
 800856a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	441a      	add	r2, r3
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	4611      	mov	r1, r2
 8008578:	4618      	mov	r0, r3
 800857a:	f001 fa6b 	bl	8009a54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	3304      	adds	r3, #4
 8008582:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	623b      	str	r3, [r7, #32]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	441a      	add	r2, r3
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	429a      	cmp	r2, r3
 8008592:	d90c      	bls.n	80085ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	3b01      	subs	r3, #1
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	4413      	add	r3, r2
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6a3a      	ldr	r2, [r7, #32]
 80085a0:	440a      	add	r2, r1
 80085a2:	7812      	ldrb	r2, [r2, #0]
 80085a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	3301      	adds	r3, #1
 80085aa:	623b      	str	r3, [r7, #32]
 80085ac:	e7ec      	b.n	8008588 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	4413      	add	r3, r2
 80085b4:	3b01      	subs	r3, #1
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4413      	add	r3, r2
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	441a      	add	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	4413      	add	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	441a      	add	r2, r3
 80085d8:	f107 030c 	add.w	r3, r7, #12
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 fa38 	bl	8009a54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	3304      	adds	r3, #4
 80085e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	61fb      	str	r3, [r7, #28]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	441a      	add	r2, r3
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d90c      	bls.n	8008614 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	4413      	add	r3, r2
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	440a      	add	r2, r1
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	3301      	adds	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	e7ec      	b.n	80085ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	3b01      	subs	r3, #1
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	4413      	add	r3, r2
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	3b01      	subs	r3, #1
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	441a      	add	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4413      	add	r3, r2
 8008636:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	440a      	add	r2, r1
 8008644:	7812      	ldrb	r2, [r2, #0]
 8008646:	4313      	orrs	r3, r2
 8008648:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	3301      	adds	r3, #1
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	440b      	add	r3, r1
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	4313      	orrs	r3, r2
 800865a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	3302      	adds	r3, #2
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	440b      	add	r3, r1
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	4313      	orrs	r3, r2
 800866c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	3303      	adds	r3, #3
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	440b      	add	r3, r1
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	061b      	lsls	r3, r3, #24
 800867c:	4313      	orrs	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	3304      	adds	r3, #4
 800868a:	61bb      	str	r3, [r7, #24]
     return offset;
 800868c:	69bb      	ldr	r3, [r7, #24]
    }
 800868e:	4618      	mov	r0, r3
 8008690:	3728      	adds	r7, #40	; 0x28
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	4b03      	ldr	r3, [pc, #12]	; (80086b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	0800b2bc 	.word	0x0800b2bc

080086b4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	4b03      	ldr	r3, [pc, #12]	; (80086cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	0800b2d8 	.word	0x0800b2d8

080086d0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	605a      	str	r2, [r3, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
      data()
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff faa0 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 8008704:	4a06      	ldr	r2, [pc, #24]	; (8008720 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3304      	adds	r3, #4
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff ffde 	bl	80086d0 <_ZN3ros4TimeC1Ev>
    {
    }
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	0800b5fc 	.word	0x0800b5fc

08008724 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	4413      	add	r3, r2
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6852      	ldr	r2, [r2, #4]
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	4413      	add	r3, r2
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6852      	ldr	r2, [r2, #4]
 800874c:	0a12      	lsrs	r2, r2, #8
 800874e:	b2d2      	uxtb	r2, r2
 8008750:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3302      	adds	r3, #2
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	4413      	add	r3, r2
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6852      	ldr	r2, [r2, #4]
 800875e:	0c12      	lsrs	r2, r2, #16
 8008760:	b2d2      	uxtb	r2, r2
 8008762:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3303      	adds	r3, #3
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	4413      	add	r3, r2
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6852      	ldr	r2, [r2, #4]
 8008770:	0e12      	lsrs	r2, r2, #24
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3304      	adds	r3, #4
 800877a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	4413      	add	r3, r2
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6892      	ldr	r2, [r2, #8]
 8008786:	b2d2      	uxtb	r2, r2
 8008788:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	4413      	add	r3, r2
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6892      	ldr	r2, [r2, #8]
 8008796:	0a12      	lsrs	r2, r2, #8
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3302      	adds	r3, #2
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	4413      	add	r3, r2
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6892      	ldr	r2, [r2, #8]
 80087a8:	0c12      	lsrs	r2, r2, #16
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3303      	adds	r3, #3
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	4413      	add	r3, r2
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6892      	ldr	r2, [r2, #8]
 80087ba:	0e12      	lsrs	r2, r2, #24
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3304      	adds	r3, #4
 80087c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80087c6:	68fb      	ldr	r3, [r7, #12]
    }
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	4413      	add	r3, r2
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3301      	adds	r3, #1
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	440b      	add	r3, r1
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3302      	adds	r3, #2
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	440b      	add	r3, r1
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	041b      	lsls	r3, r3, #16
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3303      	adds	r3, #3
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	440b      	add	r3, r1
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	061b      	lsls	r3, r3, #24
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3304      	adds	r3, #4
 8008836:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4413      	add	r3, r2
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	440b      	add	r3, r1
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	021b      	lsls	r3, r3, #8
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3302      	adds	r3, #2
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	440b      	add	r3, r1
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	041b      	lsls	r3, r3, #16
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689a      	ldr	r2, [r3, #8]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3303      	adds	r3, #3
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	440b      	add	r3, r1
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	061b      	lsls	r3, r3, #24
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3304      	adds	r3, #4
 800888c:	60fb      	str	r3, [r7, #12]
     return offset;
 800888e:	68fb      	ldr	r3, [r7, #12]
    }
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	4b03      	ldr	r3, [pc, #12]	; (80088b4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	0800b2fc 	.word	0x0800b2fc

080088b8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80088c2:	4618      	mov	r0, r3
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	0800b30c 	.word	0x0800b30c

080088d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	611a      	str	r2, [r3, #16]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	68d0      	ldr	r0, [r2, #12]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6891      	ldr	r1, [r2, #8]
 800891c:	683a      	ldr	r2, [r7, #0]
 800891e:	4798      	blx	r3
 8008920:	4603      	mov	r3, r0
  };
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
  }
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <_ZN14HardwareSerialC1E14Serial_TypeDef>:
class HardwareSerial {
private:
Serial_TypeDef Serial;

public:
	HardwareSerial(Serial_TypeDef _Serial=SERIAL2){
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
		Serial = _Serial;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	701a      	strb	r2, [r3, #0]
	}
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <_ZN13STM32HardwareC1Ev>:
  public:
  	STM32Hardware(SERIAL_CLASS* io , long baud= 115200){
      iostream = io;
      baud_ = baud;
    }
    STM32Hardware()
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
    {
      iostream = &Serial;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a06      	ldr	r2, [pc, #24]	; (8008988 <_ZN13STM32HardwareC1Ev+0x24>)
 8008970:	601a      	str	r2, [r3, #0]
      baud_ = 115200;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008978:	605a      	str	r2, [r3, #4]
    }
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	200013fc 	.word	0x200013fc

0800898c <_ZN13STM32Hardware7setBaudEl>:
    STM32Hardware(STM32Hardware& h){
	  this->iostream = iostream;
      this->baud_ = h.baud_;
    }

    void setBaud(long baud){
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
      this->baud_= baud;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	605a      	str	r2, [r3, #4]
    }
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <_ZN13STM32Hardware4initEv>:

    int getBaud(){return baud_;}

    void init(){
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
      iostream->begin(baud_);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f7fe faac 	bl	8006f18 <_ZN14HardwareSerial5beginEm>
    }
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
      if(iostream->available()){
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe facf 	bl	8006f78 <_ZN14HardwareSerial9availableEv>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	bf14      	ite	ne
 80089e0:	2301      	movne	r3, #1
 80089e2:	2300      	moveq	r3, #0
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d006      	beq.n	80089f8 <_ZN13STM32Hardware4readEv+0x30>
	  	return iostream->read();
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe faec 	bl	8006fcc <_ZN14HardwareSerial4readEv>
 80089f4:	4603      	mov	r3, r0
 80089f6:	e001      	b.n	80089fc <_ZN13STM32Hardware4readEv+0x34>
      }else{
	    return -1;
 80089f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      }
    };
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
      for(int i=0; i<length; i++){
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	da0c      	bge.n	8008a36 <_ZN13STM32Hardware5writeEPhi+0x32>
		  iostream->write(data[i]);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	4413      	add	r3, r2
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f7fe fb05 	bl	8007038 <_ZN14HardwareSerial5writeEh>
      for(int i=0; i<length; i++){
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	3301      	adds	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e7ee      	b.n	8008a14 <_ZN13STM32Hardware5writeEPhi+0x10>
      }
    }
 8008a36:	bf00      	nop
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){return millis();}
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	f7fe fb73 	bl	8007130 <millis>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
      data("")
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff f8f0 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 8008a64:	4a05      	ldr	r2, [pc, #20]	; (8008a7c <_ZN8std_msgs6StringC1Ev+0x28>)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8008a6e:	605a      	str	r2, [r3, #4]
    {
    }
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	0800b5b8 	.word	0x0800b5b8
 8008a80:	0800b25c 	.word	0x0800b25c

08008a84 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f7 fb96 	bl	80001c8 <strlen>
 8008a9c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 ffb6 	bl	8009a18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	18d0      	adds	r0, r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	f002 fa7a 	bl	800afb8 <memcpy>
      offset += length_data;
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	4413      	add	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
      return offset;
 8008acc:	68fb      	ldr	r3, [r7, #12]
    }
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b086      	sub	sp, #24
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	441a      	add	r2, r3
 8008aea:	f107 030c 	add.w	r3, r7, #12
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 ffaf 	bl	8009a54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3304      	adds	r3, #4
 8008afa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	441a      	add	r2, r3
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d90c      	bls.n	8008b26 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	4413      	add	r3, r2
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	440a      	add	r2, r1
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	3301      	adds	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	e7ec      	b.n	8008b00 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4413      	add	r3, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	441a      	add	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]
     return offset;
 8008b4a:	693b      	ldr	r3, [r7, #16]
    }
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	4b03      	ldr	r3, [pc, #12]	; (8008b6c <_ZN8std_msgs6String7getTypeEv+0x18>)
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	0800b330 	.word	0x0800b330

08008b70 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	4b03      	ldr	r3, [pc, #12]	; (8008b88 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	0800b340 	.word	0x0800b340

08008b8c <_ZN11utmrbc_msgs3LEDC1Ev>:
      typedef int32_t _led_type;
      _led_type led;
      typedef bool _signal_type;
      _signal_type signal;

    LED():
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
      led(0),
      signal(0)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff f854 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 8008b9c:	4a06      	ldr	r2, [pc, #24]	; (8008bb8 <_ZN11utmrbc_msgs3LEDC1Ev+0x2c>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	721a      	strb	r2, [r3, #8]
    {
    }
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	0800b5a0 	.word	0x0800b5a0

08008bbc <_ZNK11utmrbc_msgs3LED9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_led;
      u_led.real = this->led;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_led.base >> (8 * 0)) & 0xFF;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	b2d2      	uxtb	r2, r2
 8008bda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_led.base >> (8 * 1)) & 0xFF;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	3301      	adds	r3, #1
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	4413      	add	r3, r2
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	0a12      	lsrs	r2, r2, #8
 8008be8:	b2d2      	uxtb	r2, r2
 8008bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_led.base >> (8 * 2)) & 0xFF;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	3302      	adds	r3, #2
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	0c12      	lsrs	r2, r2, #16
 8008bf8:	b2d2      	uxtb	r2, r2
 8008bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_led.base >> (8 * 3)) & 0xFF;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	3303      	adds	r3, #3
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	4413      	add	r3, r2
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	0e12      	lsrs	r2, r2, #24
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->led);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_signal;
      u_signal.real = this->signal;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	7a1b      	ldrb	r3, [r3, #8]
 8008c16:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_signal.base >> (8 * 0)) & 0xFF;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	7b3a      	ldrb	r2, [r7, #12]
 8008c20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->signal);
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	3301      	adds	r3, #1
 8008c26:	617b      	str	r3, [r7, #20]
      return offset;
 8008c28:	697b      	ldr	r3, [r7, #20]
    }
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <_ZN11utmrbc_msgs3LED11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008c36:	b480      	push	{r7}
 8008c38:	b087      	sub	sp, #28
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_led;
      u_led.base = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	613b      	str	r3, [r7, #16]
      u_led.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	440a      	add	r2, r1
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
      u_led.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	440b      	add	r3, r1
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
      u_led.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	440b      	add	r3, r1
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	041b      	lsls	r3, r3, #16
 8008c76:	4313      	orrs	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]
      u_led.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	3303      	adds	r3, #3
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	440b      	add	r3, r1
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	061b      	lsls	r3, r3, #24
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
      this->led = u_led.real;
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->led);
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	3304      	adds	r3, #4
 8008c96:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_signal;
      u_signal.base = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	733b      	strb	r3, [r7, #12]
      u_signal.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008c9c:	7b3a      	ldrb	r2, [r7, #12]
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	440b      	add	r3, r1
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	733b      	strb	r3, [r7, #12]
      this->signal = u_signal.real;
 8008cac:	7b3a      	ldrb	r2, [r7, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	721a      	strb	r2, [r3, #8]
      offset += sizeof(this->signal);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]
     return offset;
 8008cb8:	697b      	ldr	r3, [r7, #20]
    }
 8008cba:	4618      	mov	r0, r3
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <_ZN11utmrbc_msgs3LED7getTypeEv>:

    const char * getType(){ return "utmrbc_msgs/LED"; };
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <_ZN11utmrbc_msgs3LED7getTypeEv+0x18>)
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	0800b364 	.word	0x0800b364

08008ce4 <_ZN11utmrbc_msgs3LED6getMD5Ev>:
    const char * getMD5(){ return "0d48f2ba0b312d97024acd5dc86ebcb1"; };
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <_ZN11utmrbc_msgs3LED6getMD5Ev+0x18>)
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	0800b374 	.word	0x0800b374

08008d00 <_ZN11utmrbc_msgs8InputPinC1Ev>:
      typedef int32_t _pin_type;
      _pin_type pin;
      typedef bool _signal_type;
      _signal_type signal;

    InputPin():
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
      pin(0),
      signal(0)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe ff9a 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 8008d10:	4a06      	ldr	r2, [pc, #24]	; (8008d2c <_ZN11utmrbc_msgs8InputPinC1Ev+0x2c>)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	605a      	str	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	721a      	strb	r2, [r3, #8]
    {
    }
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	0800b588 	.word	0x0800b588

08008d30 <_ZNK11utmrbc_msgs8InputPin9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_pin;
      u_pin.real = this->pin;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_pin.base >> (8 * 0)) & 0xFF;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	4413      	add	r3, r2
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_pin.base >> (8 * 1)) & 0xFF;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	3301      	adds	r3, #1
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	4413      	add	r3, r2
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	0a12      	lsrs	r2, r2, #8
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_pin.base >> (8 * 2)) & 0xFF;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	3302      	adds	r3, #2
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	4413      	add	r3, r2
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	0c12      	lsrs	r2, r2, #16
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_pin.base >> (8 * 3)) & 0xFF;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	3303      	adds	r3, #3
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	4413      	add	r3, r2
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	0e12      	lsrs	r2, r2, #24
 8008d7c:	b2d2      	uxtb	r2, r2
 8008d7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->pin);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3304      	adds	r3, #4
 8008d84:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_signal;
      u_signal.real = this->signal;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	7a1b      	ldrb	r3, [r3, #8]
 8008d8a:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_signal.base >> (8 * 0)) & 0xFF;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4413      	add	r3, r2
 8008d92:	7b3a      	ldrb	r2, [r7, #12]
 8008d94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->signal);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	617b      	str	r3, [r7, #20]
      return offset;
 8008d9c:	697b      	ldr	r3, [r7, #20]
    }
 8008d9e:	4618      	mov	r0, r3
 8008da0:	371c      	adds	r7, #28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <_ZN11utmrbc_msgs8InputPin11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008daa:	b480      	push	{r7}
 8008dac:	b087      	sub	sp, #28
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_pin;
      u_pin.base = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	613b      	str	r3, [r7, #16]
      u_pin.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	440a      	add	r2, r1
 8008dc4:	7812      	ldrb	r2, [r2, #0]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]
      u_pin.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	440b      	add	r3, r1
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	021b      	lsls	r3, r3, #8
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]
      u_pin.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	3302      	adds	r3, #2
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	440b      	add	r3, r1
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	041b      	lsls	r3, r3, #16
 8008dea:	4313      	orrs	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]
      u_pin.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	3303      	adds	r3, #3
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	440b      	add	r3, r1
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	061b      	lsls	r3, r3, #24
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
      this->pin = u_pin.real;
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->pin);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_signal;
      u_signal.base = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	733b      	strb	r3, [r7, #12]
      u_signal.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008e10:	7b3a      	ldrb	r2, [r7, #12]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	440b      	add	r3, r1
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	733b      	strb	r3, [r7, #12]
      this->signal = u_signal.real;
 8008e20:	7b3a      	ldrb	r2, [r7, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	721a      	strb	r2, [r3, #8]
      offset += sizeof(this->signal);
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	617b      	str	r3, [r7, #20]
     return offset;
 8008e2c:	697b      	ldr	r3, [r7, #20]
    }
 8008e2e:	4618      	mov	r0, r3
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
	...

08008e3c <_ZN11utmrbc_msgs8InputPin7getTypeEv>:

    const char * getType(){ return "utmrbc_msgs/InputPin"; };
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <_ZN11utmrbc_msgs8InputPin7getTypeEv+0x18>)
 8008e46:	4618      	mov	r0, r3
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	0800b398 	.word	0x0800b398

08008e58 <_ZN11utmrbc_msgs8InputPin6getMD5Ev>:
    const char * getMD5(){ return "359ffdef4df401a3c881b8043c9e8293"; };
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	4b03      	ldr	r3, [pc, #12]	; (8008e70 <_ZN11utmrbc_msgs8InputPin6getMD5Ev+0x18>)
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	0800b3b0 	.word	0x0800b3b0

08008e74 <_ZN11utmrbc_msgs3BDCC1Ev>:
      typedef int32_t _bdc_type;
      _bdc_type bdc;
      typedef int32_t _value_type;
      _value_type value;

    BDC():
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
      bdc(0),
      value(0)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fee0 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 8008e84:	4a06      	ldr	r2, [pc, #24]	; (8008ea0 <_ZN11utmrbc_msgs3BDCC1Ev+0x2c>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	605a      	str	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	609a      	str	r2, [r3, #8]
    {
    }
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	0800b570 	.word	0x0800b570

08008ea4 <_ZNK11utmrbc_msgs3BDC9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_bdc;
      u_bdc.real = this->bdc;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_bdc.base >> (8 * 0)) & 0xFF;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	b2d2      	uxtb	r2, r2
 8008ec2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_bdc.base >> (8 * 1)) & 0xFF;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	4413      	add	r3, r2
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	0a12      	lsrs	r2, r2, #8
 8008ed0:	b2d2      	uxtb	r2, r2
 8008ed2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_bdc.base >> (8 * 2)) & 0xFF;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	4413      	add	r3, r2
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	0c12      	lsrs	r2, r2, #16
 8008ee0:	b2d2      	uxtb	r2, r2
 8008ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_bdc.base >> (8 * 3)) & 0xFF;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3303      	adds	r3, #3
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	4413      	add	r3, r2
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	0e12      	lsrs	r2, r2, #24
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->bdc);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_value;
      u_value.real = this->value;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_value.base >> (8 * 0)) & 0xFF;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	4413      	add	r3, r2
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	b2d2      	uxtb	r2, r2
 8008f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_value.base >> (8 * 1)) & 0xFF;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	4413      	add	r3, r2
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	0a12      	lsrs	r2, r2, #8
 8008f18:	b2d2      	uxtb	r2, r2
 8008f1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_value.base >> (8 * 2)) & 0xFF;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	3302      	adds	r3, #2
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	4413      	add	r3, r2
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	0c12      	lsrs	r2, r2, #16
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_value.base >> (8 * 3)) & 0xFF;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	3303      	adds	r3, #3
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	4413      	add	r3, r2
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	0e12      	lsrs	r2, r2, #24
 8008f38:	b2d2      	uxtb	r2, r2
 8008f3a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->value);
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	617b      	str	r3, [r7, #20]
      return offset;
 8008f42:	697b      	ldr	r3, [r7, #20]
    }
 8008f44:	4618      	mov	r0, r3
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <_ZN11utmrbc_msgs3BDC11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_bdc;
      u_bdc.base = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	613b      	str	r3, [r7, #16]
      u_bdc.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	440a      	add	r2, r1
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
      u_bdc.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	3301      	adds	r3, #1
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	440b      	add	r3, r1
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	021b      	lsls	r3, r3, #8
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]
      u_bdc.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	3302      	adds	r3, #2
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	440b      	add	r3, r1
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	041b      	lsls	r3, r3, #16
 8008f90:	4313      	orrs	r3, r2
 8008f92:	613b      	str	r3, [r7, #16]
      u_bdc.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	3303      	adds	r3, #3
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	440b      	add	r3, r1
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	061b      	lsls	r3, r3, #24
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]
      this->bdc = u_bdc.real;
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->bdc);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	3304      	adds	r3, #4
 8008fb0:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_value;
      u_value.base = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	440a      	add	r2, r1
 8008fbe:	7812      	ldrb	r2, [r2, #0]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	440b      	add	r3, r1
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	021b      	lsls	r3, r3, #8
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	3302      	adds	r3, #2
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	440b      	add	r3, r1
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	041b      	lsls	r3, r3, #16
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	3303      	adds	r3, #3
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	440b      	add	r3, r1
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	061b      	lsls	r3, r3, #24
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
      this->value = u_value.real;
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->value);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	3304      	adds	r3, #4
 8009004:	617b      	str	r3, [r7, #20]
     return offset;
 8009006:	697b      	ldr	r3, [r7, #20]
    }
 8009008:	4618      	mov	r0, r3
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <_ZN11utmrbc_msgs3BDC7getTypeEv>:

    const char * getType(){ return "utmrbc_msgs/BDC"; };
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	4b03      	ldr	r3, [pc, #12]	; (800902c <_ZN11utmrbc_msgs3BDC7getTypeEv+0x18>)
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	0800b3d4 	.word	0x0800b3d4

08009030 <_ZN11utmrbc_msgs3BDC6getMD5Ev>:
    const char * getMD5(){ return "2918c8f84390a5f9c92a1c6a1a2d5dd8"; };
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	4b03      	ldr	r3, [pc, #12]	; (8009048 <_ZN11utmrbc_msgs3BDC6getMD5Ev+0x18>)
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	0800b3e4 	.word	0x0800b3e4

0800904c <_ZN11utmrbc_msgs4HSPMC1Ev>:
      typedef int32_t _hspm_type;
      _hspm_type hspm;
      typedef bool _signal_type;
      _signal_type signal;

    HSPM():
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
      hspm(0),
      signal(0)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe fdf4 	bl	8007c44 <_ZN3ros3MsgC1Ev>
 800905c:	4a06      	ldr	r2, [pc, #24]	; (8009078 <_ZN11utmrbc_msgs4HSPMC1Ev+0x2c>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	605a      	str	r2, [r3, #4]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	721a      	strb	r2, [r3, #8]
    {
    }
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	0800b558 	.word	0x0800b558

0800907c <_ZNK11utmrbc_msgs4HSPM9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_hspm;
      u_hspm.real = this->hspm;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_hspm.base >> (8 * 0)) & 0xFF;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	4413      	add	r3, r2
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_hspm.base >> (8 * 1)) & 0xFF;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	3301      	adds	r3, #1
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	4413      	add	r3, r2
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	0a12      	lsrs	r2, r2, #8
 80090a8:	b2d2      	uxtb	r2, r2
 80090aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_hspm.base >> (8 * 2)) & 0xFF;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	3302      	adds	r3, #2
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	4413      	add	r3, r2
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	0c12      	lsrs	r2, r2, #16
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_hspm.base >> (8 * 3)) & 0xFF;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	3303      	adds	r3, #3
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	4413      	add	r3, r2
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	0e12      	lsrs	r2, r2, #24
 80090c8:	b2d2      	uxtb	r2, r2
 80090ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->hspm);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	3304      	adds	r3, #4
 80090d0:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_signal;
      u_signal.real = this->signal;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	7a1b      	ldrb	r3, [r3, #8]
 80090d6:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_signal.base >> (8 * 0)) & 0xFF;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	4413      	add	r3, r2
 80090de:	7b3a      	ldrb	r2, [r7, #12]
 80090e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->signal);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	3301      	adds	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
      return offset;
 80090e8:	697b      	ldr	r3, [r7, #20]
    }
 80090ea:	4618      	mov	r0, r3
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <_ZN11utmrbc_msgs4HSPM11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80090f6:	b480      	push	{r7}
 80090f8:	b087      	sub	sp, #28
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]
      union {
        int32_t real;
        uint32_t base;
      } u_hspm;
      u_hspm.base = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]
      u_hspm.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	440a      	add	r2, r1
 8009110:	7812      	ldrb	r2, [r2, #0]
 8009112:	4313      	orrs	r3, r2
 8009114:	613b      	str	r3, [r7, #16]
      u_hspm.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	3301      	adds	r3, #1
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	440b      	add	r3, r1
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]
      u_hspm.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	3302      	adds	r3, #2
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	440b      	add	r3, r1
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	041b      	lsls	r3, r3, #16
 8009136:	4313      	orrs	r3, r2
 8009138:	613b      	str	r3, [r7, #16]
      u_hspm.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	3303      	adds	r3, #3
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	440b      	add	r3, r1
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	061b      	lsls	r3, r3, #24
 8009148:	4313      	orrs	r3, r2
 800914a:	613b      	str	r3, [r7, #16]
      this->hspm = u_hspm.real;
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->hspm);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	3304      	adds	r3, #4
 8009156:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_signal;
      u_signal.base = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	733b      	strb	r3, [r7, #12]
      u_signal.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800915c:	7b3a      	ldrb	r2, [r7, #12]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	440b      	add	r3, r1
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	4313      	orrs	r3, r2
 8009168:	b2db      	uxtb	r3, r3
 800916a:	733b      	strb	r3, [r7, #12]
      this->signal = u_signal.real;
 800916c:	7b3a      	ldrb	r2, [r7, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	721a      	strb	r2, [r3, #8]
      offset += sizeof(this->signal);
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	3301      	adds	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
     return offset;
 8009178:	697b      	ldr	r3, [r7, #20]
    }
 800917a:	4618      	mov	r0, r3
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
	...

08009188 <_ZN11utmrbc_msgs4HSPM7getTypeEv>:

    const char * getType(){ return "utmrbc_msgs/HSPM"; };
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	4b03      	ldr	r3, [pc, #12]	; (80091a0 <_ZN11utmrbc_msgs4HSPM7getTypeEv+0x18>)
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	0800b408 	.word	0x0800b408

080091a4 <_ZN11utmrbc_msgs4HSPM6getMD5Ev>:
    const char * getMD5(){ return "5f0f63db1293a5a3d023345ba3cb3ac7"; };
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	4b03      	ldr	r3, [pc, #12]	; (80091bc <_ZN11utmrbc_msgs4HSPM6getMD5Ev+0x18>)
 80091ae:	4618      	mov	r0, r3
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	0800b41c 	.word	0x0800b41c

080091c0 <main>:

/*******************************************************************************
 * Main function
 *******************************************************************************/
int main(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
	Initialize();
 80091c4:	f7fd ffc0 	bl	8007148 <Initialize>
	ROS_Init();
 80091c8:	f000 f850 	bl	800926c <_Z8ROS_Initv>
	System_Start();
 80091cc:	f7fe fbdc 	bl	8007988 <System_Start>

	while (1)
	{
		t = millis();
 80091d0:	f7fd ffae 	bl	8007130 <millis>
 80091d4:	4602      	mov	r2, r0
 80091d6:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <main+0x38>)
 80091d8:	601a      	str	r2, [r3, #0]
		if ((t - prev_update_time) >= 1000 / PUBLISH_FREQUENCY)
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <main+0x38>)
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	4b07      	ldr	r3, [pc, #28]	; (80091fc <main+0x3c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b31      	cmp	r3, #49	; 0x31
 80091e6:	d901      	bls.n	80091ec <main+0x2c>
			ROS_Update();
 80091e8:	f000 f878 	bl	80092dc <_Z10ROS_Updatev>
		nh.spinOnce();
 80091ec:	4804      	ldr	r0, [pc, #16]	; (8009200 <main+0x40>)
 80091ee:	f000 fd61 	bl	8009cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

		System_Run();
 80091f2:	f7fe fbd0 	bl	8007996 <System_Run>
		t = millis();
 80091f6:	e7eb      	b.n	80091d0 <main+0x10>
 80091f8:	20001400 	.word	0x20001400
 80091fc:	20001404 	.word	0x20001404
 8009200:	20001408 	.word	0x20001408

08009204 <TIM6_DAC_IRQHandler>:
extern "C"
{
#endif

	void TIM6_DAC_IRQHandler(void)
	{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
		if (TIM_GetITStatus(TIM6, TIM_IT_Update) % 200)
 8009208:	2101      	movs	r1, #1
 800920a:	4815      	ldr	r0, [pc, #84]	; (8009260 <TIM6_DAC_IRQHandler+0x5c>)
 800920c:	f7f8 fc98 	bl	8001b40 <TIM_GetITStatus>
 8009210:	4603      	mov	r3, r0
 8009212:	4a14      	ldr	r2, [pc, #80]	; (8009264 <TIM6_DAC_IRQHandler+0x60>)
 8009214:	fba2 1203 	umull	r1, r2, r2, r3
 8009218:	0992      	lsrs	r2, r2, #6
 800921a:	21c8      	movs	r1, #200	; 0xc8
 800921c:	fb01 f202 	mul.w	r2, r1, r2
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d013      	beq.n	800925a <TIM6_DAC_IRQHandler+0x56>
		{

			led1 = !led1;
 8009232:	4a0d      	ldr	r2, [pc, #52]	; (8009268 <TIM6_DAC_IRQHandler+0x64>)
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <TIM6_DAC_IRQHandler+0x64>)
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	f003 0320 	and.w	r3, r3, #32
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	bf0c      	ite	eq
 8009242:	2301      	moveq	r3, #1
 8009244:	2300      	movne	r3, #0
 8009246:	b2d9      	uxtb	r1, r3
 8009248:	7853      	ldrb	r3, [r2, #1]
 800924a:	f361 1345 	bfi	r3, r1, #5, #1
 800924e:	7053      	strb	r3, [r2, #1]
			TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8009250:	2101      	movs	r1, #1
 8009252:	4803      	ldr	r0, [pc, #12]	; (8009260 <TIM6_DAC_IRQHandler+0x5c>)
 8009254:	f7f8 fc9e 	bl	8001b94 <TIM_ClearITPendingBit>
		}
		return;
 8009258:	bf00      	nop
 800925a:	bf00      	nop
	}
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	40001000 	.word	0x40001000
 8009264:	51eb851f 	.word	0x51eb851f
 8009268:	40020814 	.word	0x40020814

0800926c <_Z8ROS_Initv>:
#ifdef __cplusplus
}
#endif

void ROS_Init()
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
	nh.initNode();
 8009270:	4813      	ldr	r0, [pc, #76]	; (80092c0 <_Z8ROS_Initv+0x54>)
 8009272:	f000 fef5 	bl	800a060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
	nh.getHardware()->setBaud(115200);
 8009276:	4812      	ldr	r0, [pc, #72]	; (80092c0 <_Z8ROS_Initv+0x54>)
 8009278:	f000 ff0f 	bl	800a09a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800927c:	4603      	mov	r3, r0
 800927e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff fb82 	bl	800898c <_ZN13STM32Hardware7setBaudEl>

	nh.subscribe(led_sub);
 8009288:	490e      	ldr	r1, [pc, #56]	; (80092c4 <_Z8ROS_Initv+0x58>)
 800928a:	480d      	ldr	r0, [pc, #52]	; (80092c0 <_Z8ROS_Initv+0x54>)
 800928c:	f000 ff11 	bl	800a0b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3LEDEvEEEEbRT_>
	nh.subscribe(bdc_sub);
 8009290:	490d      	ldr	r1, [pc, #52]	; (80092c8 <_Z8ROS_Initv+0x5c>)
 8009292:	480b      	ldr	r0, [pc, #44]	; (80092c0 <_Z8ROS_Initv+0x54>)
 8009294:	f000 ff38 	bl	800a108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3BDCEvEEEEbRT_>
	nh.subscribe(hspm_sub);
 8009298:	490c      	ldr	r1, [pc, #48]	; (80092cc <_Z8ROS_Initv+0x60>)
 800929a:	4809      	ldr	r0, [pc, #36]	; (80092c0 <_Z8ROS_Initv+0x54>)
 800929c:	f000 ff5f 	bl	800a15e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs4HSPMEvEEEEbRT_>

	nh.advertise(info_pub);
 80092a0:	490b      	ldr	r1, [pc, #44]	; (80092d0 <_Z8ROS_Initv+0x64>)
 80092a2:	4807      	ldr	r0, [pc, #28]	; (80092c0 <_Z8ROS_Initv+0x54>)
 80092a4:	f000 ff86 	bl	800a1b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(ip_pub);
 80092a8:	490a      	ldr	r1, [pc, #40]	; (80092d4 <_Z8ROS_Initv+0x68>)
 80092aa:	4805      	ldr	r0, [pc, #20]	; (80092c0 <_Z8ROS_Initv+0x54>)
 80092ac:	f000 ff82 	bl	800a1b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>

	prev_update_time = millis();
 80092b0:	f7fd ff3e 	bl	8007130 <millis>
 80092b4:	4602      	mov	r2, r0
 80092b6:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <_Z8ROS_Initv+0x6c>)
 80092b8:	601a      	str	r2, [r3, #0]
}
 80092ba:	bf00      	nop
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20001408 	.word	0x20001408
 80092c4:	20001d48 	.word	0x20001d48
 80092c8:	20001d68 	.word	0x20001d68
 80092cc:	20001d88 	.word	0x20001d88
 80092d0:	20001e78 	.word	0x20001e78
 80092d4:	20001e98 	.word	0x20001e98
 80092d8:	20001404 	.word	0x20001404

080092dc <_Z10ROS_Updatev>:

void ROS_Update()
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
	updateTime();
 80092e0:	f000 fb7c 	bl	80099dc <_Z10updateTimev>
	publishInputPin();
 80092e4:	f000 f9dc 	bl	80096a0 <_Z15publishInputPinv>
	prev_update_time = t;
 80092e8:	4b02      	ldr	r3, [pc, #8]	; (80092f4 <_Z10ROS_Updatev+0x18>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a02      	ldr	r2, [pc, #8]	; (80092f8 <_Z10ROS_Updatev+0x1c>)
 80092ee:	6013      	str	r3, [r2, #0]
}
 80092f0:	bf00      	nop
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20001400 	.word	0x20001400
 80092f8:	20001404 	.word	0x20001404

080092fc <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE>:

/*******************************************************************************
* Callback functions
*******************************************************************************/
void LEDCallback(const utmrbc_msgs::LED &led_msg)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	int32_t led = led_msg.led;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	60fb      	str	r3, [r7, #12]
	bool signal = led_msg.signal;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7a1b      	ldrb	r3, [r3, #8]
 800930e:	72fb      	strb	r3, [r7, #11]

	switch (led)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b02      	cmp	r3, #2
 8009314:	d00f      	beq.n	8009336 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x3a>
 8009316:	2b03      	cmp	r3, #3
 8009318:	d019      	beq.n	800934e <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x52>
 800931a:	2b01      	cmp	r3, #1
 800931c:	d123      	bne.n	8009366 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x6a>
	{
	case 1:
		led1 = signal ? 1 : 0;
 800931e:	4a1a      	ldr	r2, [pc, #104]	; (8009388 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x8c>)
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x2e>
 8009326:	2101      	movs	r1, #1
 8009328:	e000      	b.n	800932c <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x30>
 800932a:	2100      	movs	r1, #0
 800932c:	7853      	ldrb	r3, [r2, #1]
 800932e:	f361 1345 	bfi	r3, r1, #5, #1
 8009332:	7053      	strb	r3, [r2, #1]
		break;
 8009334:	e017      	b.n	8009366 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x6a>
	case 2:
		led2 = signal ? 1 : 0;
 8009336:	4a14      	ldr	r2, [pc, #80]	; (8009388 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x8c>)
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x46>
 800933e:	2101      	movs	r1, #1
 8009340:	e000      	b.n	8009344 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x48>
 8009342:	2100      	movs	r1, #0
 8009344:	7853      	ldrb	r3, [r2, #1]
 8009346:	f361 1386 	bfi	r3, r1, #6, #1
 800934a:	7053      	strb	r3, [r2, #1]
		break;
 800934c:	e00b      	b.n	8009366 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x6a>
	case 3:
		led3 = signal ? 1 : 0;
 800934e:	4a0e      	ldr	r2, [pc, #56]	; (8009388 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x8c>)
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x5e>
 8009356:	2101      	movs	r1, #1
 8009358:	e000      	b.n	800935c <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x60>
 800935a:	2100      	movs	r1, #0
 800935c:	7853      	ldrb	r3, [r2, #1]
 800935e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009362:	7053      	strb	r3, [r2, #1]
		break;
 8009364:	bf00      	nop
	}

	sprintf(buffer, "led: %d, signal: %d", led, signal);
 8009366:	7afb      	ldrb	r3, [r7, #11]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4908      	ldr	r1, [pc, #32]	; (800938c <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x90>)
 800936c:	4808      	ldr	r0, [pc, #32]	; (8009390 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x94>)
 800936e:	f001 fdcd 	bl	800af0c <siprintf>
	info_msg.data = buffer;
 8009372:	4b08      	ldr	r3, [pc, #32]	; (8009394 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x98>)
 8009374:	4a06      	ldr	r2, [pc, #24]	; (8009390 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x94>)
 8009376:	605a      	str	r2, [r3, #4]
	info_pub.publish(&info_msg);
 8009378:	4906      	ldr	r1, [pc, #24]	; (8009394 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x98>)
 800937a:	4807      	ldr	r0, [pc, #28]	; (8009398 <_Z11LEDCallbackRKN11utmrbc_msgs3LEDE+0x9c>)
 800937c:	f7ff fac1 	bl	8008902 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40020814 	.word	0x40020814
 800938c:	0800b440 	.word	0x0800b440
 8009390:	20001da8 	.word	0x20001da8
 8009394:	20001e70 	.word	0x20001e70
 8009398:	20001e78 	.word	0x20001e78

0800939c <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE>:

void BDCCallback(const utmrbc_msgs::BDC &bdc_msg)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
	int32_t bdc = bdc_msg.bdc;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	60fb      	str	r3, [r7, #12]
	int32_t value = bdc_msg.value;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	60bb      	str	r3, [r7, #8]

	switch (bdc)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	2b07      	cmp	r3, #7
 80093b6:	d83b      	bhi.n	8009430 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x94>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x24>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093e1 	.word	0x080093e1
 80093c4:	080093eb 	.word	0x080093eb
 80093c8:	080093f5 	.word	0x080093f5
 80093cc:	080093ff 	.word	0x080093ff
 80093d0:	08009409 	.word	0x08009409
 80093d4:	08009413 	.word	0x08009413
 80093d8:	0800941d 	.word	0x0800941d
 80093dc:	08009427 	.word	0x08009427
	{
	case 1:
		WriteBDC(&BDC1, value);
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	481c      	ldr	r0, [pc, #112]	; (8009454 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xb8>)
 80093e4:	f7f8 fe71 	bl	80020ca <WriteBDC>
		break;
 80093e8:	e022      	b.n	8009430 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x94>
	case 2:
		WriteBDC(&BDC2, value);
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	481a      	ldr	r0, [pc, #104]	; (8009458 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xbc>)
 80093ee:	f7f8 fe6c 	bl	80020ca <WriteBDC>
		break;
 80093f2:	e01d      	b.n	8009430 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x94>
	case 3:
		WriteBDC(&BDC3, value);
 80093f4:	68b9      	ldr	r1, [r7, #8]
 80093f6:	4819      	ldr	r0, [pc, #100]	; (800945c <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xc0>)
 80093f8:	f7f8 fe67 	bl	80020ca <WriteBDC>
		break;
 80093fc:	e018      	b.n	8009430 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x94>
	case 4:
		WriteBDC(&BDC4, value);
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	4817      	ldr	r0, [pc, #92]	; (8009460 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xc4>)
 8009402:	f7f8 fe62 	bl	80020ca <WriteBDC>
		break;
 8009406:	e013      	b.n	8009430 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x94>
	case 5:
		WriteBDC(&BDC5, value);
 8009408:	68b9      	ldr	r1, [r7, #8]
 800940a:	4816      	ldr	r0, [pc, #88]	; (8009464 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xc8>)
 800940c:	f7f8 fe5d 	bl	80020ca <WriteBDC>
		break;
 8009410:	e00e      	b.n	8009430 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x94>
	case 6:
		WriteBDC(&BDC6, value);
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	4814      	ldr	r0, [pc, #80]	; (8009468 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xcc>)
 8009416:	f7f8 fe58 	bl	80020ca <WriteBDC>
		break;
 800941a:	e009      	b.n	8009430 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x94>
	case 7:
		WriteBDC(&BDC7, value);
 800941c:	68b9      	ldr	r1, [r7, #8]
 800941e:	4813      	ldr	r0, [pc, #76]	; (800946c <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xd0>)
 8009420:	f7f8 fe53 	bl	80020ca <WriteBDC>
		break;
 8009424:	e004      	b.n	8009430 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0x94>
	case 8:
		WriteBDC(&BDC8, value);
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	4811      	ldr	r0, [pc, #68]	; (8009470 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xd4>)
 800942a:	f7f8 fe4e 	bl	80020ca <WriteBDC>
		break;
 800942e:	bf00      	nop
	}

	sprintf(buffer, "bdc: %d, value: %d", bdc, value);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	490f      	ldr	r1, [pc, #60]	; (8009474 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xd8>)
 8009436:	4810      	ldr	r0, [pc, #64]	; (8009478 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xdc>)
 8009438:	f001 fd68 	bl	800af0c <siprintf>
	info_msg.data = buffer;
 800943c:	4b0f      	ldr	r3, [pc, #60]	; (800947c <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xe0>)
 800943e:	4a0e      	ldr	r2, [pc, #56]	; (8009478 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xdc>)
 8009440:	605a      	str	r2, [r3, #4]
	info_pub.publish(&info_msg);
 8009442:	490e      	ldr	r1, [pc, #56]	; (800947c <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xe0>)
 8009444:	480e      	ldr	r0, [pc, #56]	; (8009480 <_Z11BDCCallbackRKN11utmrbc_msgs3BDCE+0xe4>)
 8009446:	f7ff fa5c 	bl	8008902 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200012e8 	.word	0x200012e8
 8009458:	20001308 	.word	0x20001308
 800945c:	20001328 	.word	0x20001328
 8009460:	20001348 	.word	0x20001348
 8009464:	20001368 	.word	0x20001368
 8009468:	20001388 	.word	0x20001388
 800946c:	200013a8 	.word	0x200013a8
 8009470:	200013c8 	.word	0x200013c8
 8009474:	0800b454 	.word	0x0800b454
 8009478:	20001da8 	.word	0x20001da8
 800947c:	20001e70 	.word	0x20001e70
 8009480:	20001e78 	.word	0x20001e78

08009484 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME>:

void HSPMCallback(const utmrbc_msgs::HSPM &hspm_msg)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	int32_t hspm = hspm_msg.hspm;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	60fb      	str	r3, [r7, #12]
	bool signal = hspm_msg.signal;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7a1b      	ldrb	r3, [r3, #8]
 8009496:	72fb      	strb	r3, [r7, #11]

	switch (hspm)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3b01      	subs	r3, #1
 800949c:	2b0f      	cmp	r3, #15
 800949e:	f200 80e3 	bhi.w	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
 80094a2:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x24>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	08009501 	.word	0x08009501
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009531 	.word	0x08009531
 80094b8:	08009549 	.word	0x08009549
 80094bc:	08009561 	.word	0x08009561
 80094c0:	08009579 	.word	0x08009579
 80094c4:	08009591 	.word	0x08009591
 80094c8:	080095a9 	.word	0x080095a9
 80094cc:	080095c1 	.word	0x080095c1
 80094d0:	080095d9 	.word	0x080095d9
 80094d4:	080095f1 	.word	0x080095f1
 80094d8:	08009609 	.word	0x08009609
 80094dc:	08009621 	.word	0x08009621
 80094e0:	08009639 	.word	0x08009639
 80094e4:	08009651 	.word	0x08009651
	{
	case 1:
		hspm1s1 = signal ? 1 : 0;
 80094e8:	7afb      	ldrb	r3, [r7, #11]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x6e>
 80094ee:	2101      	movs	r1, #1
 80094f0:	e000      	b.n	80094f4 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x70>
 80094f2:	2100      	movs	r1, #0
 80094f4:	4a65      	ldr	r2, [pc, #404]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 80094f6:	7f13      	ldrb	r3, [r2, #28]
 80094f8:	f361 1386 	bfi	r3, r1, #6, #1
 80094fc:	7713      	strb	r3, [r2, #28]
		break;
 80094fe:	e0b3      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 2:
		hspm1s2 = signal ? 1 : 0;
 8009500:	7afb      	ldrb	r3, [r7, #11]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x86>
 8009506:	2101      	movs	r1, #1
 8009508:	e000      	b.n	800950c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x88>
 800950a:	2100      	movs	r1, #0
 800950c:	4a5f      	ldr	r2, [pc, #380]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 800950e:	7f13      	ldrb	r3, [r2, #28]
 8009510:	f361 13c7 	bfi	r3, r1, #7, #1
 8009514:	7713      	strb	r3, [r2, #28]
		break;
 8009516:	e0a7      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 3:
		hspm2s1 = signal ? 1 : 0;
 8009518:	7afb      	ldrb	r3, [r7, #11]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x9e>
 800951e:	2101      	movs	r1, #1
 8009520:	e000      	b.n	8009524 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0xa0>
 8009522:	2100      	movs	r1, #0
 8009524:	4a59      	ldr	r2, [pc, #356]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 8009526:	7f13      	ldrb	r3, [r2, #28]
 8009528:	f361 1304 	bfi	r3, r1, #4, #1
 800952c:	7713      	strb	r3, [r2, #28]
		break;
 800952e:	e09b      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 4:
		hspm2s2 = signal ? 1 : 0;
 8009530:	7afb      	ldrb	r3, [r7, #11]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0xb6>
 8009536:	2101      	movs	r1, #1
 8009538:	e000      	b.n	800953c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0xb8>
 800953a:	2100      	movs	r1, #0
 800953c:	4a53      	ldr	r2, [pc, #332]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 800953e:	7f13      	ldrb	r3, [r2, #28]
 8009540:	f361 1345 	bfi	r3, r1, #5, #1
 8009544:	7713      	strb	r3, [r2, #28]
		break;
 8009546:	e08f      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 5:
		hspm3s1 = signal ? 1 : 0;
 8009548:	7afb      	ldrb	r3, [r7, #11]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0xce>
 800954e:	2101      	movs	r1, #1
 8009550:	e000      	b.n	8009554 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0xd0>
 8009552:	2100      	movs	r1, #0
 8009554:	4a4d      	ldr	r2, [pc, #308]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 8009556:	7f13      	ldrb	r3, [r2, #28]
 8009558:	f361 0382 	bfi	r3, r1, #2, #1
 800955c:	7713      	strb	r3, [r2, #28]
		break;
 800955e:	e083      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 6:
		hspm3s2 = signal ? 1 : 0;
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0xe6>
 8009566:	2101      	movs	r1, #1
 8009568:	e000      	b.n	800956c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0xe8>
 800956a:	2100      	movs	r1, #0
 800956c:	4a47      	ldr	r2, [pc, #284]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 800956e:	7f13      	ldrb	r3, [r2, #28]
 8009570:	f361 03c3 	bfi	r3, r1, #3, #1
 8009574:	7713      	strb	r3, [r2, #28]
		break;
 8009576:	e077      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 7:
		hspm4s1 = signal ? 1 : 0;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0xfe>
 800957e:	2101      	movs	r1, #1
 8009580:	e000      	b.n	8009584 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x100>
 8009582:	2100      	movs	r1, #0
 8009584:	4a41      	ldr	r2, [pc, #260]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 8009586:	7f13      	ldrb	r3, [r2, #28]
 8009588:	f361 0300 	bfi	r3, r1, #0, #1
 800958c:	7713      	strb	r3, [r2, #28]
		break;
 800958e:	e06b      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 8:
		hspm4s2 = signal ? 1 : 0;
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x116>
 8009596:	2101      	movs	r1, #1
 8009598:	e000      	b.n	800959c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x118>
 800959a:	2100      	movs	r1, #0
 800959c:	4a3b      	ldr	r2, [pc, #236]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 800959e:	7f13      	ldrb	r3, [r2, #28]
 80095a0:	f361 0341 	bfi	r3, r1, #1, #1
 80095a4:	7713      	strb	r3, [r2, #28]
		break;
 80095a6:	e05f      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 9:
		hspm5s1 = signal ? 1 : 0;
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x12e>
 80095ae:	2101      	movs	r1, #1
 80095b0:	e000      	b.n	80095b4 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x130>
 80095b2:	2100      	movs	r1, #0
 80095b4:	4a35      	ldr	r2, [pc, #212]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 80095b6:	7e13      	ldrb	r3, [r2, #24]
 80095b8:	f361 1386 	bfi	r3, r1, #6, #1
 80095bc:	7613      	strb	r3, [r2, #24]
		break;
 80095be:	e053      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 10:
		hspm5s2 = signal ? 1 : 0;
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x146>
 80095c6:	2101      	movs	r1, #1
 80095c8:	e000      	b.n	80095cc <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x148>
 80095ca:	2100      	movs	r1, #0
 80095cc:	4a2f      	ldr	r2, [pc, #188]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 80095ce:	7e13      	ldrb	r3, [r2, #24]
 80095d0:	f361 13c7 	bfi	r3, r1, #7, #1
 80095d4:	7613      	strb	r3, [r2, #24]
		break;
 80095d6:	e047      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 11:
		hspm6s1 = signal ? 1 : 0;
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x15e>
 80095de:	2101      	movs	r1, #1
 80095e0:	e000      	b.n	80095e4 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x160>
 80095e2:	2100      	movs	r1, #0
 80095e4:	4a29      	ldr	r2, [pc, #164]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 80095e6:	7e13      	ldrb	r3, [r2, #24]
 80095e8:	f361 1304 	bfi	r3, r1, #4, #1
 80095ec:	7613      	strb	r3, [r2, #24]
		break;
 80095ee:	e03b      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 12:
		hspm6s2 = signal ? 1 : 0;
 80095f0:	7afb      	ldrb	r3, [r7, #11]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x176>
 80095f6:	2101      	movs	r1, #1
 80095f8:	e000      	b.n	80095fc <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x178>
 80095fa:	2100      	movs	r1, #0
 80095fc:	4a23      	ldr	r2, [pc, #140]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 80095fe:	7e13      	ldrb	r3, [r2, #24]
 8009600:	f361 1345 	bfi	r3, r1, #5, #1
 8009604:	7613      	strb	r3, [r2, #24]
		break;
 8009606:	e02f      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 13:
		hspm7s1 = signal ? 1 : 0;
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x18e>
 800960e:	2101      	movs	r1, #1
 8009610:	e000      	b.n	8009614 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x190>
 8009612:	2100      	movs	r1, #0
 8009614:	4a1d      	ldr	r2, [pc, #116]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 8009616:	7e13      	ldrb	r3, [r2, #24]
 8009618:	f361 0382 	bfi	r3, r1, #2, #1
 800961c:	7613      	strb	r3, [r2, #24]
		break;
 800961e:	e023      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 14:
		hspm7s2 = signal ? 1 : 0;
 8009620:	7afb      	ldrb	r3, [r7, #11]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1a6>
 8009626:	2101      	movs	r1, #1
 8009628:	e000      	b.n	800962c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1a8>
 800962a:	2100      	movs	r1, #0
 800962c:	4a17      	ldr	r2, [pc, #92]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 800962e:	7e13      	ldrb	r3, [r2, #24]
 8009630:	f361 03c3 	bfi	r3, r1, #3, #1
 8009634:	7613      	strb	r3, [r2, #24]
		break;
 8009636:	e017      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 15:
		hspm8s1 = signal ? 1 : 0;
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1be>
 800963e:	2101      	movs	r1, #1
 8009640:	e000      	b.n	8009644 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1c0>
 8009642:	2100      	movs	r1, #0
 8009644:	4a11      	ldr	r2, [pc, #68]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 8009646:	7e13      	ldrb	r3, [r2, #24]
 8009648:	f361 0300 	bfi	r3, r1, #0, #1
 800964c:	7613      	strb	r3, [r2, #24]
		break;
 800964e:	e00b      	b.n	8009668 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1e4>
	case 16:
		hspm8s2 = signal ? 1 : 0;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1d6>
 8009656:	2101      	movs	r1, #1
 8009658:	e000      	b.n	800965c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x1d8>
 800965a:	2100      	movs	r1, #0
 800965c:	4a0b      	ldr	r2, [pc, #44]	; (800968c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x208>)
 800965e:	7e13      	ldrb	r3, [r2, #24]
 8009660:	f361 0341 	bfi	r3, r1, #1, #1
 8009664:	7613      	strb	r3, [r2, #24]
		break;
 8009666:	bf00      	nop
	//    case 14: WriteSR(&SR, hspm, signal, Bit3);
	//    case 15: WriteSR(&SR, hspm, signal, Bit0);
	//    case 16: WriteSR(&SR, hspm, signal, Bit1);
	//    }

	sprintf(buffer, "hspm: %d, signal: %d", hspm, signal);
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4908      	ldr	r1, [pc, #32]	; (8009690 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x20c>)
 800966e:	4809      	ldr	r0, [pc, #36]	; (8009694 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x210>)
 8009670:	f001 fc4c 	bl	800af0c <siprintf>
	info_msg.data = buffer;
 8009674:	4b08      	ldr	r3, [pc, #32]	; (8009698 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x214>)
 8009676:	4a07      	ldr	r2, [pc, #28]	; (8009694 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x210>)
 8009678:	605a      	str	r2, [r3, #4]
	info_pub.publish(&info_msg);
 800967a:	4907      	ldr	r1, [pc, #28]	; (8009698 <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x214>)
 800967c:	4807      	ldr	r0, [pc, #28]	; (800969c <_Z12HSPMCallbackRKN11utmrbc_msgs4HSPME+0x218>)
 800967e:	f7ff f940 	bl	8008902 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	2000125c 	.word	0x2000125c
 8009690:	0800b468 	.word	0x0800b468
 8009694:	20001da8 	.word	0x20001da8
 8009698:	20001e70 	.word	0x20001e70
 800969c:	20001e78 	.word	0x20001e78

080096a0 <_Z15publishInputPinv>:

/*******************************************************************************
* Publish functions
*******************************************************************************/
void publishInputPin()
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
	int pin;
	bool signal;

	if (!IP1)
 80096a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80096aa:	48b1      	ldr	r0, [pc, #708]	; (8009970 <_Z15publishInputPinv+0x2d0>)
 80096ac:	f7f7 faf2 	bl	8000c94 <GPIO_ReadInputDataBit>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	bf0c      	ite	eq
 80096b6:	2301      	moveq	r3, #1
 80096b8:	2300      	movne	r3, #0
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00c      	beq.n	80096da <_Z15publishInputPinv+0x3a>
	{
		pin = 1;
 80096c0:	2301      	movs	r3, #1
 80096c2:	607b      	str	r3, [r7, #4]
		signal = IP1;
 80096c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80096c8:	48a9      	ldr	r0, [pc, #676]	; (8009970 <_Z15publishInputPinv+0x2d0>)
 80096ca:	f7f7 fae3 	bl	8000c94 <GPIO_ReadInputDataBit>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bf14      	ite	ne
 80096d4:	2301      	movne	r3, #1
 80096d6:	2300      	moveq	r3, #0
 80096d8:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP2)
 80096da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80096de:	48a4      	ldr	r0, [pc, #656]	; (8009970 <_Z15publishInputPinv+0x2d0>)
 80096e0:	f7f7 fad8 	bl	8000c94 <GPIO_ReadInputDataBit>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bf0c      	ite	eq
 80096ea:	2301      	moveq	r3, #1
 80096ec:	2300      	movne	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00c      	beq.n	800970e <_Z15publishInputPinv+0x6e>
	{
		pin = 2;
 80096f4:	2302      	movs	r3, #2
 80096f6:	607b      	str	r3, [r7, #4]
		signal = IP2;
 80096f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80096fc:	489c      	ldr	r0, [pc, #624]	; (8009970 <_Z15publishInputPinv+0x2d0>)
 80096fe:	f7f7 fac9 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	bf14      	ite	ne
 8009708:	2301      	movne	r3, #1
 800970a:	2300      	moveq	r3, #0
 800970c:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP3)
 800970e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009712:	4897      	ldr	r0, [pc, #604]	; (8009970 <_Z15publishInputPinv+0x2d0>)
 8009714:	f7f7 fabe 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	bf0c      	ite	eq
 800971e:	2301      	moveq	r3, #1
 8009720:	2300      	movne	r3, #0
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00c      	beq.n	8009742 <_Z15publishInputPinv+0xa2>
	{
		pin = 3;
 8009728:	2303      	movs	r3, #3
 800972a:	607b      	str	r3, [r7, #4]
		signal = IP3;
 800972c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009730:	488f      	ldr	r0, [pc, #572]	; (8009970 <_Z15publishInputPinv+0x2d0>)
 8009732:	f7f7 faaf 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	bf14      	ite	ne
 800973c:	2301      	movne	r3, #1
 800973e:	2300      	moveq	r3, #0
 8009740:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP4)
 8009742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009746:	488a      	ldr	r0, [pc, #552]	; (8009970 <_Z15publishInputPinv+0x2d0>)
 8009748:	f7f7 faa4 	bl	8000c94 <GPIO_ReadInputDataBit>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	bf0c      	ite	eq
 8009752:	2301      	moveq	r3, #1
 8009754:	2300      	movne	r3, #0
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00c      	beq.n	8009776 <_Z15publishInputPinv+0xd6>
	{
		pin = 4;
 800975c:	2304      	movs	r3, #4
 800975e:	607b      	str	r3, [r7, #4]
		signal = IP4;
 8009760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009764:	4882      	ldr	r0, [pc, #520]	; (8009970 <_Z15publishInputPinv+0x2d0>)
 8009766:	f7f7 fa95 	bl	8000c94 <GPIO_ReadInputDataBit>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	bf14      	ite	ne
 8009770:	2301      	movne	r3, #1
 8009772:	2300      	moveq	r3, #0
 8009774:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP5)
 8009776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800977a:	487e      	ldr	r0, [pc, #504]	; (8009974 <_Z15publishInputPinv+0x2d4>)
 800977c:	f7f7 fa8a 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	bf0c      	ite	eq
 8009786:	2301      	moveq	r3, #1
 8009788:	2300      	movne	r3, #0
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00c      	beq.n	80097aa <_Z15publishInputPinv+0x10a>
	{
		pin = 5;
 8009790:	2305      	movs	r3, #5
 8009792:	607b      	str	r3, [r7, #4]
		signal = IP5;
 8009794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009798:	4876      	ldr	r0, [pc, #472]	; (8009974 <_Z15publishInputPinv+0x2d4>)
 800979a:	f7f7 fa7b 	bl	8000c94 <GPIO_ReadInputDataBit>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bf14      	ite	ne
 80097a4:	2301      	movne	r3, #1
 80097a6:	2300      	moveq	r3, #0
 80097a8:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP6)
 80097aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097ae:	4871      	ldr	r0, [pc, #452]	; (8009974 <_Z15publishInputPinv+0x2d4>)
 80097b0:	f7f7 fa70 	bl	8000c94 <GPIO_ReadInputDataBit>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bf0c      	ite	eq
 80097ba:	2301      	moveq	r3, #1
 80097bc:	2300      	movne	r3, #0
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00c      	beq.n	80097de <_Z15publishInputPinv+0x13e>
	{
		pin = 6;
 80097c4:	2306      	movs	r3, #6
 80097c6:	607b      	str	r3, [r7, #4]
		signal = IP6;
 80097c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097cc:	4869      	ldr	r0, [pc, #420]	; (8009974 <_Z15publishInputPinv+0x2d4>)
 80097ce:	f7f7 fa61 	bl	8000c94 <GPIO_ReadInputDataBit>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bf14      	ite	ne
 80097d8:	2301      	movne	r3, #1
 80097da:	2300      	moveq	r3, #0
 80097dc:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP7)
 80097de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097e2:	4865      	ldr	r0, [pc, #404]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 80097e4:	f7f7 fa56 	bl	8000c94 <GPIO_ReadInputDataBit>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bf0c      	ite	eq
 80097ee:	2301      	moveq	r3, #1
 80097f0:	2300      	movne	r3, #0
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <_Z15publishInputPinv+0x172>
	{
		pin = 7;
 80097f8:	2307      	movs	r3, #7
 80097fa:	607b      	str	r3, [r7, #4]
		signal = IP7;
 80097fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009800:	485d      	ldr	r0, [pc, #372]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 8009802:	f7f7 fa47 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	bf14      	ite	ne
 800980c:	2301      	movne	r3, #1
 800980e:	2300      	moveq	r3, #0
 8009810:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP8)
 8009812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009816:	4858      	ldr	r0, [pc, #352]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 8009818:	f7f7 fa3c 	bl	8000c94 <GPIO_ReadInputDataBit>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	bf0c      	ite	eq
 8009822:	2301      	moveq	r3, #1
 8009824:	2300      	movne	r3, #0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00c      	beq.n	8009846 <_Z15publishInputPinv+0x1a6>
	{
		pin = 8;
 800982c:	2308      	movs	r3, #8
 800982e:	607b      	str	r3, [r7, #4]
		signal = IP8;
 8009830:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009834:	4850      	ldr	r0, [pc, #320]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 8009836:	f7f7 fa2d 	bl	8000c94 <GPIO_ReadInputDataBit>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	bf14      	ite	ne
 8009840:	2301      	movne	r3, #1
 8009842:	2300      	moveq	r3, #0
 8009844:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP9)
 8009846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800984a:	484c      	ldr	r0, [pc, #304]	; (800997c <_Z15publishInputPinv+0x2dc>)
 800984c:	f7f7 fa22 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	bf0c      	ite	eq
 8009856:	2301      	moveq	r3, #1
 8009858:	2300      	movne	r3, #0
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00c      	beq.n	800987a <_Z15publishInputPinv+0x1da>
	{
		pin = 9;
 8009860:	2309      	movs	r3, #9
 8009862:	607b      	str	r3, [r7, #4]
		signal = IP9;
 8009864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009868:	4844      	ldr	r0, [pc, #272]	; (800997c <_Z15publishInputPinv+0x2dc>)
 800986a:	f7f7 fa13 	bl	8000c94 <GPIO_ReadInputDataBit>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	bf14      	ite	ne
 8009874:	2301      	movne	r3, #1
 8009876:	2300      	moveq	r3, #0
 8009878:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP10)
 800987a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800987e:	4840      	ldr	r0, [pc, #256]	; (8009980 <_Z15publishInputPinv+0x2e0>)
 8009880:	f7f7 fa08 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	bf0c      	ite	eq
 800988a:	2301      	moveq	r3, #1
 800988c:	2300      	movne	r3, #0
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00c      	beq.n	80098ae <_Z15publishInputPinv+0x20e>
	{
		pin = 10;
 8009894:	230a      	movs	r3, #10
 8009896:	607b      	str	r3, [r7, #4]
		signal = IP10;
 8009898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800989c:	4838      	ldr	r0, [pc, #224]	; (8009980 <_Z15publishInputPinv+0x2e0>)
 800989e:	f7f7 f9f9 	bl	8000c94 <GPIO_ReadInputDataBit>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	bf14      	ite	ne
 80098a8:	2301      	movne	r3, #1
 80098aa:	2300      	moveq	r3, #0
 80098ac:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP11)
 80098ae:	2108      	movs	r1, #8
 80098b0:	4831      	ldr	r0, [pc, #196]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 80098b2:	f7f7 f9ef 	bl	8000c94 <GPIO_ReadInputDataBit>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	bf0c      	ite	eq
 80098bc:	2301      	moveq	r3, #1
 80098be:	2300      	movne	r3, #0
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00b      	beq.n	80098de <_Z15publishInputPinv+0x23e>
	{
		pin = 11;
 80098c6:	230b      	movs	r3, #11
 80098c8:	607b      	str	r3, [r7, #4]
		signal = IP11;
 80098ca:	2108      	movs	r1, #8
 80098cc:	482a      	ldr	r0, [pc, #168]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 80098ce:	f7f7 f9e1 	bl	8000c94 <GPIO_ReadInputDataBit>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bf14      	ite	ne
 80098d8:	2301      	movne	r3, #1
 80098da:	2300      	moveq	r3, #0
 80098dc:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP12)
 80098de:	2110      	movs	r1, #16
 80098e0:	4825      	ldr	r0, [pc, #148]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 80098e2:	f7f7 f9d7 	bl	8000c94 <GPIO_ReadInputDataBit>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bf0c      	ite	eq
 80098ec:	2301      	moveq	r3, #1
 80098ee:	2300      	movne	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00b      	beq.n	800990e <_Z15publishInputPinv+0x26e>
	{
		pin = 12;
 80098f6:	230c      	movs	r3, #12
 80098f8:	607b      	str	r3, [r7, #4]
		signal = IP12;
 80098fa:	2110      	movs	r1, #16
 80098fc:	481e      	ldr	r0, [pc, #120]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 80098fe:	f7f7 f9c9 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	bf14      	ite	ne
 8009908:	2301      	movne	r3, #1
 800990a:	2300      	moveq	r3, #0
 800990c:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP13)
 800990e:	2180      	movs	r1, #128	; 0x80
 8009910:	4819      	ldr	r0, [pc, #100]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 8009912:	f7f7 f9bf 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	bf0c      	ite	eq
 800991c:	2301      	moveq	r3, #1
 800991e:	2300      	movne	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <_Z15publishInputPinv+0x29e>
	{
		pin = 13;
 8009926:	230d      	movs	r3, #13
 8009928:	607b      	str	r3, [r7, #4]
		signal = IP13;
 800992a:	2180      	movs	r1, #128	; 0x80
 800992c:	4812      	ldr	r0, [pc, #72]	; (8009978 <_Z15publishInputPinv+0x2d8>)
 800992e:	f7f7 f9b1 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	bf14      	ite	ne
 8009938:	2301      	movne	r3, #1
 800993a:	2300      	moveq	r3, #0
 800993c:	70fb      	strb	r3, [r7, #3]
	}
	if (!IP14)
 800993e:	2120      	movs	r1, #32
 8009940:	480c      	ldr	r0, [pc, #48]	; (8009974 <_Z15publishInputPinv+0x2d4>)
 8009942:	f7f7 f9a7 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	bf0c      	ite	eq
 800994c:	2301      	moveq	r3, #1
 800994e:	2300      	movne	r3, #0
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d016      	beq.n	8009984 <_Z15publishInputPinv+0x2e4>
	{
		pin = 14;
 8009956:	230e      	movs	r3, #14
 8009958:	607b      	str	r3, [r7, #4]
		signal = IP14;
 800995a:	2120      	movs	r1, #32
 800995c:	4805      	ldr	r0, [pc, #20]	; (8009974 <_Z15publishInputPinv+0x2d4>)
 800995e:	f7f7 f999 	bl	8000c94 <GPIO_ReadInputDataBit>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	bf14      	ite	ne
 8009968:	2301      	movne	r3, #1
 800996a:	2300      	moveq	r3, #0
 800996c:	70fb      	strb	r3, [r7, #3]
 800996e:	e009      	b.n	8009984 <_Z15publishInputPinv+0x2e4>
 8009970:	40021000 	.word	0x40021000
 8009974:	40020400 	.word	0x40020400
 8009978:	40020c00 	.word	0x40020c00
 800997c:	40020800 	.word	0x40020800
 8009980:	40020000 	.word	0x40020000
	}
	if (!IP15)
 8009984:	2140      	movs	r1, #64	; 0x40
 8009986:	4812      	ldr	r0, [pc, #72]	; (80099d0 <_Z15publishInputPinv+0x330>)
 8009988:	f7f7 f984 	bl	8000c94 <GPIO_ReadInputDataBit>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	bf0c      	ite	eq
 8009992:	2301      	moveq	r3, #1
 8009994:	2300      	movne	r3, #0
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <_Z15publishInputPinv+0x314>
	{
		pin = 15;
 800999c:	230f      	movs	r3, #15
 800999e:	607b      	str	r3, [r7, #4]
		signal = IP15;
 80099a0:	2140      	movs	r1, #64	; 0x40
 80099a2:	480b      	ldr	r0, [pc, #44]	; (80099d0 <_Z15publishInputPinv+0x330>)
 80099a4:	f7f7 f976 	bl	8000c94 <GPIO_ReadInputDataBit>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bf14      	ite	ne
 80099ae:	2301      	movne	r3, #1
 80099b0:	2300      	moveq	r3, #0
 80099b2:	70fb      	strb	r3, [r7, #3]
	}

	ip_msg.pin = pin;
 80099b4:	4a07      	ldr	r2, [pc, #28]	; (80099d4 <_Z15publishInputPinv+0x334>)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6053      	str	r3, [r2, #4]
	ip_msg.signal = signal;
 80099ba:	4a06      	ldr	r2, [pc, #24]	; (80099d4 <_Z15publishInputPinv+0x334>)
 80099bc:	78fb      	ldrb	r3, [r7, #3]
 80099be:	7213      	strb	r3, [r2, #8]
	ip_pub.publish(&ip_msg);
 80099c0:	4904      	ldr	r1, [pc, #16]	; (80099d4 <_Z15publishInputPinv+0x334>)
 80099c2:	4805      	ldr	r0, [pc, #20]	; (80099d8 <_Z15publishInputPinv+0x338>)
 80099c4:	f7fe ff9d 	bl	8008902 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	40020400 	.word	0x40020400
 80099d4:	20001e8c 	.word	0x20001e8c
 80099d8:	20001e98 	.word	0x20001e98

080099dc <_Z10updateTimev>:

/*******************************************************************************
* Update the base time for interpolation
*******************************************************************************/
void updateTime()
{
 80099dc:	b590      	push	{r4, r7, lr}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
	current_offset = millis();
 80099e2:	f7fd fba5 	bl	8007130 <millis>
 80099e6:	4602      	mov	r2, r0
 80099e8:	4b08      	ldr	r3, [pc, #32]	; (8009a0c <_Z10updateTimev+0x30>)
 80099ea:	601a      	str	r2, [r3, #0]
	current_time = nh.now();
 80099ec:	4c08      	ldr	r4, [pc, #32]	; (8009a10 <_Z10updateTimev+0x34>)
 80099ee:	463b      	mov	r3, r7
 80099f0:	4908      	ldr	r1, [pc, #32]	; (8009a14 <_Z10updateTimev+0x38>)
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fc0e 	bl	800a214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>
 80099f8:	4622      	mov	r2, r4
 80099fa:	463b      	mov	r3, r7
 80099fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a00:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd90      	pop	{r4, r7, pc}
 8009a0c:	20001d44 	.word	0x20001d44
 8009a10:	20001d3c 	.word	0x20001d3c
 8009a14:	20001408 	.word	0x20001408

08009a18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d80d      	bhi.n	8009a48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	00d2      	lsls	r2, r2, #3
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	fa21 f202 	lsr.w	r2, r1, r2
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3301      	adds	r3, #1
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	e7ee      	b.n	8009a26 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8009a48:	bf00      	nop
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8009a64:	2300      	movs	r3, #0
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d811      	bhi.n	8009a92 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	440a      	add	r2, r1
 8009a78:	7812      	ldrb	r2, [r2, #0]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	00d2      	lsls	r2, r2, #3
 8009a80:	fa01 f202 	lsl.w	r2, r1, r2
 8009a84:	431a      	orrs	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	e7ea      	b.n	8009a68 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8009a92:	bf00      	nop
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
	...

08009aa0 <_ZN3ros15NodeHandleBase_C1Ev>:


namespace ros
{

class NodeHandleBase_
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	4a04      	ldr	r2, [pc, #16]	; (8009abc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	0800b5e8 	.word	0x0800b5e8

08009ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff ffe8 	bl	8009aa0 <_ZN3ros15NodeHandleBase_C1Ev>
 8009ad0:	4a39      	ldr	r2, [pc, #228]	; (8009bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xf8>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe ff42 	bl	8008964 <_ZN13STM32HardwareC1Ev>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe f968 	bl	8007dc4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8009af4:	2300      	movs	r3, #0
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b18      	cmp	r3, #24
 8009afc:	d80b      	bhi.n	8009b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f203 2306 	addw	r3, r3, #518	; 0x206
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	3301      	adds	r3, #1
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	e7f0      	b.n	8009af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	613b      	str	r3, [r7, #16]
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2b18      	cmp	r3, #24
 8009b1e:	d80a      	bhi.n	8009b36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x76>
      subscribers[i] = 0;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8009b28:	2100      	movs	r1, #0
 8009b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	3301      	adds	r3, #1
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	e7f1      	b.n	8009b1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b40:	d209      	bcs.n	8009b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x96>
      message_in[i] = 0;
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	331c      	adds	r3, #28
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3301      	adds	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e7f1      	b.n	8009b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8009b56:	2300      	movs	r3, #0
 8009b58:	60bb      	str	r3, [r7, #8]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b60:	d20a      	bcs.n	8009b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xb8>
      message_out[i] = 0;
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	4413      	add	r3, r2
 8009b68:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	e7f0      	b.n	8009b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    req_param_resp.ints = NULL;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.floats_length = 0;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
    req_param_resp.floats = NULL;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.ints_length = 0;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    req_param_resp.ints = NULL;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918

    spin_timeout_ = 0;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	619a      	str	r2, [r3, #24]
  }
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	0800b544 	.word	0x0800b544

08009bbc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	4a04      	ldr	r2, [pc, #16]	; (8009bd8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	0800b5d0 	.word	0x0800b5d0

08009bdc <_ZN3ros10SubscriberIN11utmrbc_msgs3LEDEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff ffe5 	bl	8009bbc <_ZN3ros11Subscriber_C1Ev>
 8009bf2:	4a0b      	ldr	r2, [pc, #44]	; (8009c20 <_ZN3ros10SubscriberIN11utmrbc_msgs3LEDEvEC1EPKcPFvRKS2_Ei+0x44>)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	330c      	adds	r3, #12
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe ffc5 	bl	8008b8c <_ZN11utmrbc_msgs3LEDC1Ev>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	619a      	str	r2, [r3, #24]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	61da      	str	r2, [r3, #28]
  {
    topic_ = topic_name;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	609a      	str	r2, [r3, #8]
  };
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	0800b52c 	.word	0x0800b52c

08009c24 <_ZN3ros10SubscriberIN11utmrbc_msgs3BDCEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff ffc1 	bl	8009bbc <_ZN3ros11Subscriber_C1Ev>
 8009c3a:	4a0b      	ldr	r2, [pc, #44]	; (8009c68 <_ZN3ros10SubscriberIN11utmrbc_msgs3BDCEvEC1EPKcPFvRKS2_Ei+0x44>)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	330c      	adds	r3, #12
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff f915 	bl	8008e74 <_ZN11utmrbc_msgs3BDCC1Ev>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	619a      	str	r2, [r3, #24]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	61da      	str	r2, [r3, #28]
    topic_ = topic_name;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	609a      	str	r2, [r3, #8]
  };
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	0800b514 	.word	0x0800b514

08009c6c <_ZN3ros10SubscriberIN11utmrbc_msgs4HSPMEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7ff ff9d 	bl	8009bbc <_ZN3ros11Subscriber_C1Ev>
 8009c82:	4a0b      	ldr	r2, [pc, #44]	; (8009cb0 <_ZN3ros10SubscriberIN11utmrbc_msgs4HSPMEvEC1EPKcPFvRKS2_Ei+0x44>)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	330c      	adds	r3, #12
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7ff f9dd 	bl	800904c <_ZN11utmrbc_msgs4HSPMC1Ev>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	619a      	str	r2, [r3, #24]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	61da      	str	r2, [r3, #28]
    topic_ = topic_name;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	609a      	str	r2, [r3, #8]
  };
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	0800b4fc 	.word	0x0800b4fc

08009cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe febc 	bl	8008a3e <_ZN13STM32Hardware4timeEv>
 8009cc6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d903      	bls.n	8009ce2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d009      	beq.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 2904 	ldr.w	r2, [r3, #2308]	; 0x904
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d203      	bcs.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d013      	beq.n	8009d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe fe96 	bl	8008a3e <_ZN13STM32Hardware4timeEv>
 8009d12:	4602      	mov	r2, r0
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	1ad2      	subs	r2, r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	bf8c      	ite	hi
 8009d20:	2301      	movhi	r3, #1
 8009d22:	2300      	movls	r3, #0
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8009d2a:	f06f 0301 	mvn.w	r3, #1
 8009d2e:	e193      	b.n	800a058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a4>
        }
      }
      int data = hardware_.read();
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe fe47 	bl	80089c8 <_ZN13STM32Hardware4readEv>
 8009d3a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f2c0 8173 	blt.w	800a02a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x376>
        break;
      checksum_ += data;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	441a      	add	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009d5a:	2b07      	cmp	r3, #7
 8009d5c:	d11d      	bne.n	8009d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe6>
      {
        message_in[index_++] = data;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8009d64:	1c59      	adds	r1, r3, #1
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	f8c2 18f0 	str.w	r1, [r2, #2288]	; 0x8f0
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	b2d1      	uxtb	r1, r2
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	4413      	add	r3, r2
 8009d74:	460a      	mov	r2, r1
 8009d76:	771a      	strb	r2, [r3, #28]
        bytes_--;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8009d7e:	1e5a      	subs	r2, r3, #1
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1b7      	bne.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2208      	movs	r2, #8
 8009d94:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8009d98:	e7b2      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d128      	bne.n	8009df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x142>
      {
        if (data == 0xff)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2bff      	cmp	r3, #255	; 0xff
 8009da8:	d10d      	bne.n	8009dc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x112>
        {
          mode_++;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f103 0214 	add.w	r2, r3, #20
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8009dc4:	e79c      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fe37 	bl	8008a3e <_ZN13STM32Hardware4timeEv>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	bf8c      	ite	hi
 8009dde:	2301      	movhi	r3, #1
 8009de0:	2300      	movls	r3, #0
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d08b      	beq.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
          return SPIN_TIMEOUT;
 8009df0:	f06f 0301 	mvn.w	r3, #1
 8009df4:	e130      	b.n	800a058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a4>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d11b      	bne.n	8009e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2bfe      	cmp	r3, #254	; 0xfe
 8009e04:	d107      	bne.n	8009e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
        {
          mode_++;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009e0c:	1c5a      	adds	r2, r3, #1
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8009e14:	e774      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
          if (configured_ == false)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 8009e24:	f083 0301 	eor.w	r3, r3, #1
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f43f af68 	beq.w	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fa29 	bl	800a288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8009e36:	e763      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d113      	bne.n	8009e6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        index_ = 0;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        checksum_ = data;               /* first byte for calculating size checksum */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8009e68:	e74a      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d110      	bne.n	8009e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 28e8 	ldr.w	r2, [r3, #2280]	; 0x8e8
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	441a      	add	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_++;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8009e94:	e734      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d116      	bne.n	8009ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8009ea6:	425a      	negs	r2, r3
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	b2d2      	uxtb	r2, r2
 8009eac:	bf58      	it	pl
 8009eae:	4253      	negpl	r3, r2
 8009eb0:	2bff      	cmp	r3, #255	; 0xff
 8009eb2:	d107      	bne.n	8009ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x210>
          mode_++;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8009ec2:	e71d      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8009ecc:	e718      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009ed4:	2b05      	cmp	r3, #5
 8009ed6:	d10f      	bne.n	8009ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_++;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        checksum_ = data;               /* first byte included in checksum */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8009ef6:	e703      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009efe:	2b06      	cmp	r3, #6
 8009f00:	d117      	bne.n	8009f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 28ec 	ldr.w	r2, [r3, #2284]	; 0x8ec
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	021b      	lsls	r3, r3, #8
 8009f0c:	441a      	add	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_ = MODE_MESSAGE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2207      	movs	r2, #7
 8009f18:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if (bytes_ == 0)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f47f aeec 	bne.w	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2208      	movs	r2, #8
 8009f2c:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8009f30:	e6e6      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	f47f aee1 	bne.w	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if ((checksum_ % 256) == 255)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8009f4c:	425a      	negs	r2, r3
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	bf58      	it	pl
 8009f54:	4253      	negpl	r3, r2
 8009f56:	2bff      	cmp	r3, #255	; 0xff
 8009f58:	f47f aed2 	bne.w	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d110      	bne.n	8009f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f98e 	bl	800a288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f9a8 	bl	800a2c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
            last_sync_receive_time = c_time;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            return SPIN_ERR;
 8009f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f86:	e067      	b.n	800a058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a4>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009f8e:	2b0a      	cmp	r3, #10
 8009f90:	d106      	bne.n	8009fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ec>
          {
            syncTime(message_in);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	331c      	adds	r3, #28
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fa71 	bl	800a480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8009f9e:	e6af      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009fa6:	2b06      	cmp	r3, #6
 8009fa8:	d10d      	bne.n	8009fc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x312>
          {
            req_param_resp.deserialize(message_in);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	331c      	adds	r3, #28
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f7fe f839 	bl	800802e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 8009fc4:	e69c      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009fcc:	2b0b      	cmp	r3, #11
 8009fce:	d104      	bne.n	8009fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x326>
          {
            configured_ = false;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8009fd8:	e692      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009fe0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8009fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f43f ae86 	beq.w	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8009ffa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	f8d2 28ec 	ldr.w	r2, [r2, #2284]	; 0x8ec
 800a012:	f1a2 0164 	sub.w	r1, r2, #100	; 0x64
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800a01c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	321c      	adds	r2, #28
 800a024:	4611      	mov	r1, r2
 800a026:	4798      	blx	r3
    while (true)
 800a028:	e66a      	b.n	8009d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 800a02a:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00f      	beq.n	800a056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a044:	4293      	cmp	r3, r2
 800a046:	d906      	bls.n	800a056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a2>
    {
      requestSyncTime();
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f91d 	bl	800a288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
    }

    return SPIN_OK;
 800a056:	2300      	movs	r3, #0
  }
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  void initNode()
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
    hardware_.init();
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fe fc9b 	bl	80089a8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
    bytes_ = 0;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
    index_ = 0;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    topic_ = 0;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
  };
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3304      	adds	r3, #4
  }
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3LEDEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800a0b2:	b480      	push	{r7}
 800a0b4:	b085      	sub	sp, #20
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b18      	cmp	r3, #24
 800a0c4:	dc19      	bgt.n	800a0fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3LEDEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10d      	bne.n	800a0f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3LEDEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a0e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	605a      	str	r2, [r3, #4]
        return true;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e004      	b.n	800a0fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3LEDEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	e7e2      	b.n	800a0c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3LEDEvEEEEbRT_+0xe>
      }
    }
    return false;
 800a0fa:	2300      	movs	r3, #0
  }
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3BDCEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b18      	cmp	r3, #24
 800a11a:	dc19      	bgt.n	800a150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3BDCEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10d      	bne.n	800a148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3BDCEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	605a      	str	r2, [r3, #4]
        return true;
 800a144:	2301      	movs	r3, #1
 800a146:	e004      	b.n	800a152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3BDCEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	3301      	adds	r3, #1
 800a14c:	60fb      	str	r3, [r7, #12]
 800a14e:	e7e2      	b.n	800a116 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs3BDCEvEEEEbRT_+0xe>
    return false;
 800a150:	2300      	movs	r3, #0
  }
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs4HSPMEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800a15e:	b480      	push	{r7}
 800a160:	b085      	sub	sp, #20
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800a168:	2300      	movs	r3, #0
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2b18      	cmp	r3, #24
 800a170:	dc19      	bgt.n	800a1a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs4HSPMEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10d      	bne.n	800a19e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs4HSPMEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a18c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	605a      	str	r2, [r3, #4]
        return true;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e004      	b.n	800a1a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs4HSPMEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e7e2      	b.n	800a16c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN11utmrbc_msgs4HSPMEvEEEEbRT_+0xe>
    return false;
 800a1a6:	2300      	movs	r3, #0
  }
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b18      	cmp	r3, #24
 800a1c6:	dc1e      	bgt.n	800a206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d111      	bne.n	800a1fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	60da      	str	r2, [r3, #12]
        return true;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e004      	b.n	800a208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3301      	adds	r3, #1
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	e7dd      	b.n	800a1c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800a206:	2300      	movs	r3, #0
  }
 800a208:	4618      	mov	r0, r3
 800a20a:	3714      	adds	r7, #20
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>:
  Time now()
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	3304      	adds	r3, #4
 800a222:	4618      	mov	r0, r3
 800a224:	f7fe fc0b 	bl	8008a3e <_ZN13STM32Hardware4timeEv>
 800a228:	60f8      	str	r0, [r7, #12]
    Time current_time;
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7fe fa50 	bl	80086d0 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4a13      	ldr	r2, [pc, #76]	; (800a280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x6c>)
 800a234:	fba2 2303 	umull	r2, r3, r2, r3
 800a238:	099a      	lsrs	r2, r3, #6
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	441a      	add	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4b0e      	ldr	r3, [pc, #56]	; (800a280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x6c>)
 800a248:	fba3 1302 	umull	r1, r3, r3, r2
 800a24c:	099b      	lsrs	r3, r3, #6
 800a24e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	4a0a      	ldr	r2, [pc, #40]	; (800a284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x70>)
 800a25a:	fb02 f203 	mul.w	r2, r2, r3
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	441a      	add	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fb7a 	bl	800a968 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 800a274:	bf00      	nop
  }
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	10624dd3 	.word	0x10624dd3
 800a284:	000f4240 	.word	0x000f4240

0800a288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800a290:	f107 030c 	add.w	r3, r7, #12
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe fa2d 	bl	80086f4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f107 020c 	add.w	r2, r7, #12
 800a2a4:	210a      	movs	r1, #10
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	4798      	blx	r3
    rt_time = hardware_.time();
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe fbc5 	bl	8008a3e <_ZN13STM32Hardware4timeEv>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	60da      	str	r2, [r3, #12]
  }
 800a2ba:	bf00      	nop
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800a2c2:	b590      	push	{r4, r7, lr}
 800a2c4:	b08b      	sub	sp, #44	; 0x2c
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800a2ca:	f107 030c 	add.w	r3, r7, #12
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe f83a 	bl	8008348 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	2b18      	cmp	r3, #24
 800a2dc:	dc63      	bgt.n	800a3a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d056      	beq.n	800a39e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	b29b      	uxth	r3, r3
 800a302:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3308      	adds	r3, #8
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	440b      	add	r3, r1
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	4618      	mov	r0, r3
 800a33e:	4790      	blx	r2
 800a340:	4603      	mov	r3, r0
 800a342:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	330c      	adds	r3, #12
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	4618      	mov	r0, r3
 800a36c:	4790      	blx	r2
 800a36e:	4603      	mov	r3, r0
 800a370:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800a372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a376:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681c      	ldr	r4, [r3, #0]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe facc 	bl	800892a <_ZN3ros9Publisher15getEndpointTypeEv>
 800a392:	4601      	mov	r1, r0
 800a394:	f107 030c 	add.w	r3, r7, #12
 800a398:	461a      	mov	r2, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a4:	e798      	b.n	800a2d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	2b18      	cmp	r3, #24
 800a3ae:	dc5f      	bgt.n	800a470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b4:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d053      	beq.n	800a468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c4:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d6:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e6:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3f8:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800a3fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a400:	4610      	mov	r0, r2
 800a402:	4798      	blx	r3
 800a404:	4603      	mov	r3, r0
 800a406:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40c:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	330c      	adds	r3, #12
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a41e:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800a422:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a426:	4610      	mov	r0, r2
 800a428:	4798      	blx	r3
 800a42a:	4603      	mov	r3, r0
 800a42c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800a42e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a432:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681c      	ldr	r4, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a43e:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3304      	adds	r3, #4
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a450:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800a454:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
 800a45c:	4601      	mov	r1, r0
 800a45e:	f107 030c 	add.w	r3, r7, #12
 800a462:	461a      	mov	r2, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	3301      	adds	r3, #1
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
 800a46e:	e79c      	b.n	800a3aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
  }
 800a478:	bf00      	nop
 800a47a:	372c      	adds	r7, #44	; 0x2c
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd90      	pop	{r4, r7, pc}

0800a480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800a48a:	f107 0308 	add.w	r3, r7, #8
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe f930 	bl	80086f4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fad0 	bl	8008a3e <_ZN13STM32Hardware4timeEv>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800a4a8:	f107 0308 	add.w	r3, r7, #8
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe f990 	bl	80087d4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	4914      	ldr	r1, [pc, #80]	; (800a50c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800a4ba:	fba1 1303 	umull	r1, r3, r1, r3
 800a4be:	099b      	lsrs	r3, r3, #6
 800a4c0:	4413      	add	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800a4c4:	6939      	ldr	r1, [r7, #16]
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	4b10      	ldr	r3, [pc, #64]	; (800a50c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800a4ca:	fba3 0302 	umull	r0, r3, r3, r2
 800a4ce:	099b      	lsrs	r3, r3, #6
 800a4d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a4d4:	fb00 f303 	mul.w	r3, r0, r3
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	4a0d      	ldr	r2, [pc, #52]	; (800a510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 800a4dc:	fb02 f303 	mul.w	r3, r2, r3
 800a4e0:	440b      	add	r3, r1
 800a4e2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f8a3 	bl	800a638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe faa1 	bl	8008a3e <_ZN13STM32Hardware4timeEv>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  }
 800a504:	bf00      	nop
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	10624dd3 	.word	0x10624dd3
 800a510:	000f4240 	.word	0x000f4240

0800a514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800a514:	b580      	push	{r7, lr}
 800a516:	b088      	sub	sp, #32
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b63      	cmp	r3, #99	; 0x63
 800a524:	dd09      	ble.n	800a53a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 800a52c:	f083 0301 	eor.w	r3, r3, #1
 800a530:	b2db      	uxtb	r3, r3
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800a536:	2300      	movs	r3, #0
 800a538:	e077      	b.n	800a62a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 800a546:	3207      	adds	r2, #7
 800a548:	4611      	mov	r1, r2
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	4798      	blx	r3
 800a54e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	22ff      	movs	r2, #255	; 0xff
 800a554:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    message_out[1] = PROTOCOL_VER;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	22fe      	movs	r2, #254	; 0xfe
 800a55c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	b2da      	uxtb	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	121b      	asrs	r3, r3, #8
 800a570:	b2da      	uxtb	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 241e 	ldrb.w	r2, [r3, #1054]	; 0x41e
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800a584:	4413      	add	r3, r2
 800a586:	b2db      	uxtb	r3, r3
 800a588:	43db      	mvns	r3, r3
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	b2da      	uxtb	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	b21b      	sxth	r3, r3
 800a5a0:	121b      	asrs	r3, r3, #8
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422

    /* calculate checksum */
    int chk = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800a5ae:	2305      	movs	r3, #5
 800a5b0:	61bb      	str	r3, [r7, #24]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	1dda      	adds	r2, r3, #7
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	dd0d      	ble.n	800a5d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	61bb      	str	r3, [r7, #24]
 800a5d6:	e7ec      	b.n	800a5b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	3307      	adds	r3, #7
 800a5dc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	1c53      	adds	r3, r2, #1
 800a5e2:	617b      	str	r3, [r7, #20]
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	4259      	negs	r1, r3
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	b2c9      	uxtb	r1, r1
 800a5ec:	bf58      	it	pl
 800a5ee:	424b      	negpl	r3, r1
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	b2d9      	uxtb	r1, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	460a      	mov	r2, r1
 800a5fc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    if (l <= OUTPUT_SIZE)
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a606:	dc0a      	bgt.n	800a61e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	1d18      	adds	r0, r3, #4
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4619      	mov	r1, r3
 800a616:	f7fe f9f5 	bl	8008a04 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	e005      	b.n	800a62a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800a61e:	4905      	ldr	r1, [pc, #20]	; (800a634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x120>)
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 f847 	bl	800a6b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 800a626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800a62a:	4618      	mov	r0, r3
 800a62c:	3720      	adds	r7, #32
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	0800b480 	.word	0x0800b480

0800a638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	3304      	adds	r3, #4
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe f9f9 	bl	8008a3e <_ZN13STM32Hardware4timeEv>
 800a64c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4914      	ldr	r1, [pc, #80]	; (800a6a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 800a656:	fba1 1303 	umull	r1, r3, r1, r3
 800a65a:	099b      	lsrs	r3, r3, #6
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	1e5a      	subs	r2, r3, #1
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	611a      	str	r2, [r3, #16]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	6859      	ldr	r1, [r3, #4]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 800a66c:	fba3 0302 	umull	r0, r3, r3, r2
 800a670:	099b      	lsrs	r3, r3, #6
 800a672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a676:	fb00 f303 	mul.w	r3, r0, r3
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	4a0b      	ldr	r2, [pc, #44]	; (800a6ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800a67e:	fb02 f303 	mul.w	r3, r2, r3
 800a682:	1aca      	subs	r2, r1, r3
 800a684:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 800a686:	4413      	add	r3, r2
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	6153      	str	r3, [r2, #20]
    normalizeSecNSec(sec_offset, nsec_offset);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f103 0210 	add.w	r2, r3, #16
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3314      	adds	r3, #20
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f000 f965 	bl	800a968 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800a69e:	bf00      	nop
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	10624dd3 	.word	0x10624dd3
 800a6ac:	000f4240 	.word	0x000f4240
 800a6b0:	3b9aca00 	.word	0x3b9aca00

0800a6b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	2103      	movs	r1, #3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f804 	bl	800a6d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b088      	sub	sp, #32
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800a6de:	f107 0314 	add.w	r3, r7, #20
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fd fabe 	bl	8007c64 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800a6e8:	7afb      	ldrb	r3, [r7, #11]
 800a6ea:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f107 0214 	add.w	r2, r7, #20
 800a6fa:	2107      	movs	r1, #7
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	4798      	blx	r3
  }
 800a700:	bf00      	nop
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <_Z41__static_initialization_and_destruction_0ii>:
* ros::Time::now() implementation
*******************************************************************************/
ros::Time rosNow()
{
	return nh.now();
}
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d132      	bne.n	800a77e <_Z41__static_initialization_and_destruction_0ii+0x76>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a71e:	4293      	cmp	r3, r2
 800a720:	d12d      	bne.n	800a77e <_Z41__static_initialization_and_destruction_0ii+0x76>
HardwareSerial Serial(SERIAL2);
 800a722:	2100      	movs	r1, #0
 800a724:	4818      	ldr	r0, [pc, #96]	; (800a788 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a726:	f7fe f90c 	bl	8008942 <_ZN14HardwareSerialC1E14Serial_TypeDef>
ros::NodeHandle nh;
 800a72a:	4818      	ldr	r0, [pc, #96]	; (800a78c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800a72c:	f7ff f9c8 	bl	8009ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
ros::Time current_time;
 800a730:	4817      	ldr	r0, [pc, #92]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800a732:	f7fd ffcd 	bl	80086d0 <_ZN3ros4TimeC1Ev>
ros::Subscriber<utmrbc_msgs::LED> led_sub("led", LEDCallback);
 800a736:	2301      	movs	r3, #1
 800a738:	4a16      	ldr	r2, [pc, #88]	; (800a794 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800a73a:	4917      	ldr	r1, [pc, #92]	; (800a798 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800a73c:	4817      	ldr	r0, [pc, #92]	; (800a79c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800a73e:	f7ff fa4d 	bl	8009bdc <_ZN3ros10SubscriberIN11utmrbc_msgs3LEDEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<utmrbc_msgs::BDC> bdc_sub("bdc", BDCCallback);
 800a742:	2301      	movs	r3, #1
 800a744:	4a16      	ldr	r2, [pc, #88]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800a746:	4917      	ldr	r1, [pc, #92]	; (800a7a4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800a748:	4817      	ldr	r0, [pc, #92]	; (800a7a8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800a74a:	f7ff fa6b 	bl	8009c24 <_ZN3ros10SubscriberIN11utmrbc_msgs3BDCEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<utmrbc_msgs::HSPM> hspm_sub("hspm", HSPMCallback);
 800a74e:	2301      	movs	r3, #1
 800a750:	4a16      	ldr	r2, [pc, #88]	; (800a7ac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800a752:	4917      	ldr	r1, [pc, #92]	; (800a7b0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800a754:	4817      	ldr	r0, [pc, #92]	; (800a7b4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800a756:	f7ff fa89 	bl	8009c6c <_ZN3ros10SubscriberIN11utmrbc_msgs4HSPMEvEC1EPKcPFvRKS2_Ei>
std_msgs::String info_msg;
 800a75a:	4817      	ldr	r0, [pc, #92]	; (800a7b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800a75c:	f7fe f97a 	bl	8008a54 <_ZN8std_msgs6StringC1Ev>
ros::Publisher info_pub("mb/info", &info_msg);
 800a760:	2300      	movs	r3, #0
 800a762:	4a15      	ldr	r2, [pc, #84]	; (800a7b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800a764:	4915      	ldr	r1, [pc, #84]	; (800a7bc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800a766:	4816      	ldr	r0, [pc, #88]	; (800a7c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800a768:	f7fe f8b4 	bl	80088d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
utmrbc_msgs::InputPin ip_msg;
 800a76c:	4815      	ldr	r0, [pc, #84]	; (800a7c4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800a76e:	f7fe fac7 	bl	8008d00 <_ZN11utmrbc_msgs8InputPinC1Ev>
ros::Publisher ip_pub("ip", &ip_msg);
 800a772:	2300      	movs	r3, #0
 800a774:	4a13      	ldr	r2, [pc, #76]	; (800a7c4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800a776:	4914      	ldr	r1, [pc, #80]	; (800a7c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800a778:	4814      	ldr	r0, [pc, #80]	; (800a7cc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800a77a:	f7fe f8ab 	bl	80088d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800a77e:	bf00      	nop
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	200013fc 	.word	0x200013fc
 800a78c:	20001408 	.word	0x20001408
 800a790:	20001d3c 	.word	0x20001d3c
 800a794:	080092fd 	.word	0x080092fd
 800a798:	0800b4bc 	.word	0x0800b4bc
 800a79c:	20001d48 	.word	0x20001d48
 800a7a0:	0800939d 	.word	0x0800939d
 800a7a4:	0800b4c0 	.word	0x0800b4c0
 800a7a8:	20001d68 	.word	0x20001d68
 800a7ac:	08009485 	.word	0x08009485
 800a7b0:	0800b4c4 	.word	0x0800b4c4
 800a7b4:	20001d88 	.word	0x20001d88
 800a7b8:	20001e70 	.word	0x20001e70
 800a7bc:	0800b4cc 	.word	0x0800b4cc
 800a7c0:	20001e78 	.word	0x20001e78
 800a7c4:	20001e8c 	.word	0x20001e8c
 800a7c8:	0800b4d4 	.word	0x0800b4d4
 800a7cc:	20001e98 	.word	0x20001e98

0800a7d0 <_ZN3ros10SubscriberIN11utmrbc_msgs4HSPMEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	330c      	adds	r3, #12
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe fc88 	bl	80090f6 <_ZN11utmrbc_msgs4HSPM11deserializeEPh>
    this->cb_(msg);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	320c      	adds	r2, #12
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	4798      	blx	r3
  }
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <_ZN3ros10SubscriberIN11utmrbc_msgs4HSPMEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	69db      	ldr	r3, [r3, #28]
  }
 800a806:	4618      	mov	r0, r3
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <_ZN3ros10SubscriberIN11utmrbc_msgs4HSPMEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	330c      	adds	r3, #12
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fcb2 	bl	8009188 <_ZN11utmrbc_msgs4HSPM7getTypeEv>
 800a824:	4603      	mov	r3, r0
  }
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <_ZN3ros10SubscriberIN11utmrbc_msgs4HSPMEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	330c      	adds	r3, #12
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fcb2 	bl	80091a4 <_ZN11utmrbc_msgs4HSPM6getMD5Ev>
 800a840:	4603      	mov	r3, r0
  }
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <_ZN3ros10SubscriberIN11utmrbc_msgs3BDCEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	330c      	adds	r3, #12
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fb78 	bl	8008f50 <_ZN11utmrbc_msgs3BDC11deserializeEPh>
    this->cb_(msg);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	320c      	adds	r2, #12
 800a868:	4610      	mov	r0, r2
 800a86a:	4798      	blx	r3
  }
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <_ZN3ros10SubscriberIN11utmrbc_msgs3BDCEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	69db      	ldr	r3, [r3, #28]
  }
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <_ZN3ros10SubscriberIN11utmrbc_msgs3BDCEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	330c      	adds	r3, #12
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe fbbb 	bl	8009014 <_ZN11utmrbc_msgs3BDC7getTypeEv>
 800a89e:	4603      	mov	r3, r0
  }
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <_ZN3ros10SubscriberIN11utmrbc_msgs3BDCEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	330c      	adds	r3, #12
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe fbbb 	bl	8009030 <_ZN11utmrbc_msgs3BDC6getMD5Ev>
 800a8ba:	4603      	mov	r3, r0
  }
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <_ZN3ros10SubscriberIN11utmrbc_msgs3LEDEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	330c      	adds	r3, #12
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe f9ae 	bl	8008c36 <_ZN11utmrbc_msgs3LED11deserializeEPh>
    this->cb_(msg);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	320c      	adds	r2, #12
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	4798      	blx	r3
  }
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <_ZN3ros10SubscriberIN11utmrbc_msgs3LEDEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69db      	ldr	r3, [r3, #28]
  }
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <_ZN3ros10SubscriberIN11utmrbc_msgs3LEDEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800a906:	b580      	push	{r7, lr}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	330c      	adds	r3, #12
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe f9d8 	bl	8008cc8 <_ZN11utmrbc_msgs3LED7getTypeEv>
 800a918:	4603      	mov	r3, r0
  }
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <_ZN3ros10SubscriberIN11utmrbc_msgs3LEDEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800a922:	b580      	push	{r7, lr}
 800a924:	b082      	sub	sp, #8
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	330c      	adds	r3, #12
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe f9d8 	bl	8008ce4 <_ZN11utmrbc_msgs3LED6getMD5Ev>
 800a934:	4603      	mov	r3, r0
  }
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
    return configured_;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
  };
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <_GLOBAL__sub_I_BIOSTimingDelay>:
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a960:	2001      	movs	r0, #1
 800a962:	f7ff fed1 	bl	800a708 <_Z41__static_initialization_and_destruction_0ii>
 800a966:	bd80      	pop	{r7, pc}

0800a968 <_ZN3ros16normalizeSecNSecERmS0_>:
#include <ros_lib/ros/time.h>

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	0a5a      	lsrs	r2, r3, #9
 800a978:	490f      	ldr	r1, [pc, #60]	; (800a9b8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800a97a:	fba1 1202 	umull	r1, r2, r1, r2
 800a97e:	09d2      	lsrs	r2, r2, #7
 800a980:	490e      	ldr	r1, [pc, #56]	; (800a9bc <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800a982:	fb01 f202 	mul.w	r2, r1, r2
 800a986:	1a9b      	subs	r3, r3, r2
 800a988:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	0a5b      	lsrs	r3, r3, #9
 800a990:	4a09      	ldr	r2, [pc, #36]	; (800a9b8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800a992:	fba2 2303 	umull	r2, r3, r2, r3
 800a996:	09db      	lsrs	r3, r3, #7
 800a998:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	441a      	add	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	601a      	str	r2, [r3, #0]
}
 800a9ac:	bf00      	nop
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	00044b83 	.word	0x00044b83
 800a9bc:	3b9aca00 	.word	0x3b9aca00

0800a9c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a9c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a9f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a9c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a9c6:	e003      	b.n	800a9d0 <LoopCopyDataInit>

0800a9c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a9ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a9cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a9ce:	3104      	adds	r1, #4

0800a9d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a9d0:	480b      	ldr	r0, [pc, #44]	; (800aa00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a9d2:	4b0c      	ldr	r3, [pc, #48]	; (800aa04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a9d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a9d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a9d8:	d3f6      	bcc.n	800a9c8 <CopyDataInit>
  ldr  r2, =_sbss
 800a9da:	4a0b      	ldr	r2, [pc, #44]	; (800aa08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a9dc:	e002      	b.n	800a9e4 <LoopFillZerobss>

0800a9de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a9de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a9e0:	f842 3b04 	str.w	r3, [r2], #4

0800a9e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a9e4:	4b09      	ldr	r3, [pc, #36]	; (800aa0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a9e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a9e8:	d3f9      	bcc.n	800a9de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a9ea:	f000 f881 	bl	800aaf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a9ee:	f000 fabf 	bl	800af70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a9f2:	f7fe fbe5 	bl	80091c0 <main>
  bx  lr    
 800a9f6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a9f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a9fc:	0800b678 	.word	0x0800b678
  ldr  r0, =_sdata
 800aa00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800aa04:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 800aa08:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 800aa0c:	20001ef0 	.word	0x20001ef0

0800aa10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aa10:	e7fe      	b.n	800aa10 <ADC_IRQHandler>

0800aa12 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800aa12:	b480      	push	{r7}
 800aa14:	af00      	add	r7, sp, #0
}
 800aa16:	bf00      	nop
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800aa24:	e7fe      	b.n	800aa24 <HardFault_Handler+0x4>

0800aa26 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800aa26:	b480      	push	{r7}
 800aa28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800aa2a:	e7fe      	b.n	800aa2a <MemManage_Handler+0x4>

0800aa2c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800aa30:	e7fe      	b.n	800aa30 <BusFault_Handler+0x4>

0800aa32 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800aa32:	b480      	push	{r7}
 800aa34:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800aa36:	e7fe      	b.n	800aa36 <UsageFault_Handler+0x4>

0800aa38 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
}
 800aa3c:	bf00      	nop
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800aa46:	b480      	push	{r7}
 800aa48:	af00      	add	r7, sp, #0
}
 800aa4a:	bf00      	nop
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
}
 800aa58:	bf00      	nop
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
	...

0800aa64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800aa64:	b480      	push	{r7}
 800aa66:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 800aa68:	4b04      	ldr	r3, [pc, #16]	; (800aa7c <_getpid+0x18>)
 800aa6a:	2258      	movs	r2, #88	; 0x58
 800aa6c:	601a      	str	r2, [r3, #0]
	return -1;
 800aa6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	20001eec 	.word	0x20001eec

0800aa80 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <_kill+0x20>)
 800aa8c:	2258      	movs	r2, #88	; 0x58
 800aa8e:	601a      	str	r2, [r3, #0]
	return -1;
 800aa90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20001eec 	.word	0x20001eec

0800aaa4 <_exit>:

void _exit(int32_t status)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 800aaac:	e7fe      	b.n	800aaac <_exit+0x8>
	...

0800aab0 <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800aab8:	4b0b      	ldr	r3, [pc, #44]	; (800aae8 <_sbrk+0x38>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d102      	bne.n	800aac6 <_sbrk+0x16>
		heap_end = & end;
 800aac0:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <_sbrk+0x38>)
 800aac2:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <_sbrk+0x3c>)
 800aac4:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800aac6:	4b08      	ldr	r3, [pc, #32]	; (800aae8 <_sbrk+0x38>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800aacc:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <_sbrk+0x38>)
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4413      	add	r3, r2
 800aad4:	4a04      	ldr	r2, [pc, #16]	; (800aae8 <_sbrk+0x38>)
 800aad6:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 800aad8:	68fb      	ldr	r3, [r7, #12]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	20001eac 	.word	0x20001eac
 800aaec:	20001ef0 	.word	0x20001ef0

0800aaf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aaf4:	4a16      	ldr	r2, [pc, #88]	; (800ab50 <SystemInit+0x60>)
 800aaf6:	4b16      	ldr	r3, [pc, #88]	; (800ab50 <SystemInit+0x60>)
 800aaf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ab04:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <SystemInit+0x64>)
 800ab06:	4b13      	ldr	r3, [pc, #76]	; (800ab54 <SystemInit+0x64>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f043 0301 	orr.w	r3, r3, #1
 800ab0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ab10:	4b10      	ldr	r3, [pc, #64]	; (800ab54 <SystemInit+0x64>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ab16:	4a0f      	ldr	r2, [pc, #60]	; (800ab54 <SystemInit+0x64>)
 800ab18:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <SystemInit+0x64>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ab20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ab26:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <SystemInit+0x64>)
 800ab28:	4a0b      	ldr	r2, [pc, #44]	; (800ab58 <SystemInit+0x68>)
 800ab2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ab2c:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <SystemInit+0x64>)
 800ab2e:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <SystemInit+0x64>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ab38:	4b06      	ldr	r3, [pc, #24]	; (800ab54 <SystemInit+0x64>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800ab3e:	f000 f889 	bl	800ac54 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ab42:	4b03      	ldr	r3, [pc, #12]	; (800ab50 <SystemInit+0x60>)
 800ab44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab48:	609a      	str	r2, [r3, #8]
#endif
}
 800ab4a:	bf00      	nop
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	e000ed00 	.word	0xe000ed00
 800ab54:	40023800 	.word	0x40023800
 800ab58:	24003010 	.word	0x24003010

0800ab5c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800ab62:	2300      	movs	r3, #0
 800ab64:	613b      	str	r3, [r7, #16]
 800ab66:	2300      	movs	r3, #0
 800ab68:	617b      	str	r3, [r7, #20]
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60bb      	str	r3, [r7, #8]
 800ab72:	2302      	movs	r3, #2
 800ab74:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800ab76:	4b32      	ldr	r3, [pc, #200]	; (800ac40 <SystemCoreClockUpdate+0xe4>)
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	f003 030c 	and.w	r3, r3, #12
 800ab7e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	d007      	beq.n	800ab96 <SystemCoreClockUpdate+0x3a>
 800ab86:	2b08      	cmp	r3, #8
 800ab88:	d009      	beq.n	800ab9e <SystemCoreClockUpdate+0x42>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d13d      	bne.n	800ac0a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800ab8e:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <SystemCoreClockUpdate+0xe8>)
 800ab90:	4a2d      	ldr	r2, [pc, #180]	; (800ac48 <SystemCoreClockUpdate+0xec>)
 800ab92:	601a      	str	r2, [r3, #0]
      break;
 800ab94:	e03d      	b.n	800ac12 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800ab96:	4b2b      	ldr	r3, [pc, #172]	; (800ac44 <SystemCoreClockUpdate+0xe8>)
 800ab98:	4a2c      	ldr	r2, [pc, #176]	; (800ac4c <SystemCoreClockUpdate+0xf0>)
 800ab9a:	601a      	str	r2, [r3, #0]
      break;
 800ab9c:	e039      	b.n	800ac12 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800ab9e:	4b28      	ldr	r3, [pc, #160]	; (800ac40 <SystemCoreClockUpdate+0xe4>)
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	0d9b      	lsrs	r3, r3, #22
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800abaa:	4b25      	ldr	r3, [pc, #148]	; (800ac40 <SystemCoreClockUpdate+0xe4>)
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abb2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800abba:	4a24      	ldr	r2, [pc, #144]	; (800ac4c <SystemCoreClockUpdate+0xf0>)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc2:	4a1f      	ldr	r2, [pc, #124]	; (800ac40 <SystemCoreClockUpdate+0xe4>)
 800abc4:	6852      	ldr	r2, [r2, #4]
 800abc6:	0992      	lsrs	r2, r2, #6
 800abc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abcc:	fb02 f303 	mul.w	r3, r2, r3
 800abd0:	617b      	str	r3, [r7, #20]
 800abd2:	e00b      	b.n	800abec <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800abd4:	4a1c      	ldr	r2, [pc, #112]	; (800ac48 <SystemCoreClockUpdate+0xec>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abdc:	4a18      	ldr	r2, [pc, #96]	; (800ac40 <SystemCoreClockUpdate+0xe4>)
 800abde:	6852      	ldr	r2, [r2, #4]
 800abe0:	0992      	lsrs	r2, r2, #6
 800abe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abe6:	fb02 f303 	mul.w	r3, r2, r3
 800abea:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800abec:	4b14      	ldr	r3, [pc, #80]	; (800ac40 <SystemCoreClockUpdate+0xe4>)
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	0c1b      	lsrs	r3, r3, #16
 800abf2:	f003 0303 	and.w	r3, r3, #3
 800abf6:	3301      	adds	r3, #1
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac04:	4a0f      	ldr	r2, [pc, #60]	; (800ac44 <SystemCoreClockUpdate+0xe8>)
 800ac06:	6013      	str	r3, [r2, #0]
      break;
 800ac08:	e003      	b.n	800ac12 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800ac0a:	4b0e      	ldr	r3, [pc, #56]	; (800ac44 <SystemCoreClockUpdate+0xe8>)
 800ac0c:	4a0e      	ldr	r2, [pc, #56]	; (800ac48 <SystemCoreClockUpdate+0xec>)
 800ac0e:	601a      	str	r2, [r3, #0]
      break;
 800ac10:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800ac12:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <SystemCoreClockUpdate+0xe4>)
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	091b      	lsrs	r3, r3, #4
 800ac18:	f003 030f 	and.w	r3, r3, #15
 800ac1c:	4a0c      	ldr	r2, [pc, #48]	; (800ac50 <SystemCoreClockUpdate+0xf4>)
 800ac1e:	5cd3      	ldrb	r3, [r2, r3]
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800ac24:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <SystemCoreClockUpdate+0xe8>)
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2e:	4a05      	ldr	r2, [pc, #20]	; (800ac44 <SystemCoreClockUpdate+0xe8>)
 800ac30:	6013      	str	r3, [r2, #0]
}
 800ac32:	bf00      	nop
 800ac34:	371c      	adds	r7, #28
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	40023800 	.word	0x40023800
 800ac44:	2000001c 	.word	0x2000001c
 800ac48:	00f42400 	.word	0x00f42400
 800ac4c:	007a1200 	.word	0x007a1200
 800ac50:	20000020 	.word	0x20000020

0800ac54 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800ac62:	4a36      	ldr	r2, [pc, #216]	; (800ad3c <SetSysClock+0xe8>)
 800ac64:	4b35      	ldr	r3, [pc, #212]	; (800ad3c <SetSysClock+0xe8>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac6c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800ac6e:	4b33      	ldr	r3, [pc, #204]	; (800ad3c <SetSysClock+0xe8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac76:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d103      	bne.n	800ac8c <SetSysClock+0x38>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800ac8a:	d1f0      	bne.n	800ac6e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800ac8c:	4b2b      	ldr	r3, [pc, #172]	; (800ad3c <SetSysClock+0xe8>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	e001      	b.n	800aca2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d142      	bne.n	800ad2e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800aca8:	4a24      	ldr	r2, [pc, #144]	; (800ad3c <SetSysClock+0xe8>)
 800acaa:	4b24      	ldr	r3, [pc, #144]	; (800ad3c <SetSysClock+0xe8>)
 800acac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acb2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800acb4:	4a22      	ldr	r2, [pc, #136]	; (800ad40 <SetSysClock+0xec>)
 800acb6:	4b22      	ldr	r3, [pc, #136]	; (800ad40 <SetSysClock+0xec>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acbe:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800acc0:	4a1e      	ldr	r2, [pc, #120]	; (800ad3c <SetSysClock+0xe8>)
 800acc2:	4b1e      	ldr	r3, [pc, #120]	; (800ad3c <SetSysClock+0xe8>)
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800acc8:	4a1c      	ldr	r2, [pc, #112]	; (800ad3c <SetSysClock+0xe8>)
 800acca:	4b1c      	ldr	r3, [pc, #112]	; (800ad3c <SetSysClock+0xe8>)
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800acd4:	4a19      	ldr	r2, [pc, #100]	; (800ad3c <SetSysClock+0xe8>)
 800acd6:	4b19      	ldr	r3, [pc, #100]	; (800ad3c <SetSysClock+0xe8>)
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800acde:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800ace0:	4b16      	ldr	r3, [pc, #88]	; (800ad3c <SetSysClock+0xe8>)
 800ace2:	4a18      	ldr	r2, [pc, #96]	; (800ad44 <SetSysClock+0xf0>)
 800ace4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800ace6:	4a15      	ldr	r2, [pc, #84]	; (800ad3c <SetSysClock+0xe8>)
 800ace8:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <SetSysClock+0xe8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acf0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800acf2:	bf00      	nop
 800acf4:	4b11      	ldr	r3, [pc, #68]	; (800ad3c <SetSysClock+0xe8>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0f9      	beq.n	800acf4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <SetSysClock+0xf4>)
 800ad02:	f240 7205 	movw	r2, #1797	; 0x705
 800ad06:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800ad08:	4a0c      	ldr	r2, [pc, #48]	; (800ad3c <SetSysClock+0xe8>)
 800ad0a:	4b0c      	ldr	r3, [pc, #48]	; (800ad3c <SetSysClock+0xe8>)
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f023 0303 	bic.w	r3, r3, #3
 800ad12:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800ad14:	4a09      	ldr	r2, [pc, #36]	; (800ad3c <SetSysClock+0xe8>)
 800ad16:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <SetSysClock+0xe8>)
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f043 0302 	orr.w	r3, r3, #2
 800ad1e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800ad20:	bf00      	nop
 800ad22:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <SetSysClock+0xe8>)
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 030c 	and.w	r3, r3, #12
 800ad2a:	2b08      	cmp	r3, #8
 800ad2c:	d1f9      	bne.n	800ad22 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	40023800 	.word	0x40023800
 800ad40:	40007000 	.word	0x40007000
 800ad44:	07405408 	.word	0x07405408
 800ad48:	40023c00 	.word	0x40023c00

0800ad4c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
	int div = 1;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800ad5c:	e004      	b.n	800ad68 <ts_itoa+0x1c>
		div *= base;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	fb02 f303 	mul.w	r3, r2, r3
 800ad66:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d2f3      	bcs.n	800ad5e <ts_itoa+0x12>

	while (div != 0)
 800ad76:	e029      	b.n	800adcc <ts_itoa+0x80>
	{
		int num = d/div;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad80:	613b      	str	r3, [r7, #16]
		d = d%div;
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad8a:	fb02 f201 	mul.w	r2, r2, r1
 800ad8e:	1a9b      	subs	r3, r3, r2
 800ad90:	60bb      	str	r3, [r7, #8]
		div /= base;
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	fb92 f3f3 	sdiv	r3, r2, r3
 800ad9a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2b09      	cmp	r3, #9
 800ada0:	dd0a      	ble.n	800adb8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	1c59      	adds	r1, r3, #1
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	6011      	str	r1, [r2, #0]
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	b2d2      	uxtb	r2, r2
 800adb0:	3237      	adds	r2, #55	; 0x37
 800adb2:	b2d2      	uxtb	r2, r2
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	e009      	b.n	800adcc <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	1c59      	adds	r1, r3, #1
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	6011      	str	r1, [r2, #0]
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	b2d2      	uxtb	r2, r2
 800adc6:	3230      	adds	r2, #48	; 0x30
 800adc8:	b2d2      	uxtb	r2, r2
 800adca:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1d2      	bne.n	800ad78 <ts_itoa+0x2c>
	}
}
 800add2:	bf00      	nop
 800add4:	371c      	adds	r7, #28
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b088      	sub	sp, #32
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800adee:	e07d      	b.n	800aeec <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b25      	cmp	r3, #37	; 0x25
 800adf6:	d171      	bne.n	800aedc <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	3301      	adds	r3, #1
 800adfc:	60bb      	str	r3, [r7, #8]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b64      	cmp	r3, #100	; 0x64
 800ae04:	d01e      	beq.n	800ae44 <ts_formatstring+0x66>
 800ae06:	2b64      	cmp	r3, #100	; 0x64
 800ae08:	dc06      	bgt.n	800ae18 <ts_formatstring+0x3a>
 800ae0a:	2b58      	cmp	r3, #88	; 0x58
 800ae0c:	d050      	beq.n	800aeb0 <ts_formatstring+0xd2>
 800ae0e:	2b63      	cmp	r3, #99	; 0x63
 800ae10:	d00e      	beq.n	800ae30 <ts_formatstring+0x52>
 800ae12:	2b25      	cmp	r3, #37	; 0x25
 800ae14:	d058      	beq.n	800aec8 <ts_formatstring+0xea>
 800ae16:	e05d      	b.n	800aed4 <ts_formatstring+0xf6>
 800ae18:	2b73      	cmp	r3, #115	; 0x73
 800ae1a:	d02b      	beq.n	800ae74 <ts_formatstring+0x96>
 800ae1c:	2b73      	cmp	r3, #115	; 0x73
 800ae1e:	dc02      	bgt.n	800ae26 <ts_formatstring+0x48>
 800ae20:	2b69      	cmp	r3, #105	; 0x69
 800ae22:	d00f      	beq.n	800ae44 <ts_formatstring+0x66>
 800ae24:	e056      	b.n	800aed4 <ts_formatstring+0xf6>
 800ae26:	2b75      	cmp	r3, #117	; 0x75
 800ae28:	d037      	beq.n	800ae9a <ts_formatstring+0xbc>
 800ae2a:	2b78      	cmp	r3, #120	; 0x78
 800ae2c:	d040      	beq.n	800aeb0 <ts_formatstring+0xd2>
 800ae2e:	e051      	b.n	800aed4 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	60fa      	str	r2, [r7, #12]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	1d11      	adds	r1, r2, #4
 800ae3a:	6079      	str	r1, [r7, #4]
 800ae3c:	6812      	ldr	r2, [r2, #0]
 800ae3e:	b2d2      	uxtb	r2, r2
 800ae40:	701a      	strb	r2, [r3, #0]
				break;
 800ae42:	e047      	b.n	800aed4 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	1d1a      	adds	r2, r3, #4
 800ae48:	607a      	str	r2, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	da07      	bge.n	800ae64 <ts_formatstring+0x86>
					{
						val *= -1;
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	425b      	negs	r3, r3
 800ae58:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	60fa      	str	r2, [r7, #12]
 800ae60:	222d      	movs	r2, #45	; 0x2d
 800ae62:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800ae64:	69f9      	ldr	r1, [r7, #28]
 800ae66:	f107 030c 	add.w	r3, r7, #12
 800ae6a:	220a      	movs	r2, #10
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff ff6d 	bl	800ad4c <ts_itoa>
				}
				break;
 800ae72:	e02f      	b.n	800aed4 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	1d1a      	adds	r2, r3, #4
 800ae78:	607a      	str	r2, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800ae7e:	e007      	b.n	800ae90 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	60fa      	str	r2, [r7, #12]
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	1c51      	adds	r1, r2, #1
 800ae8a:	61b9      	str	r1, [r7, #24]
 800ae8c:	7812      	ldrb	r2, [r2, #0]
 800ae8e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1f3      	bne.n	800ae80 <ts_formatstring+0xa2>
					}
				}
				break;
 800ae98:	e01c      	b.n	800aed4 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	1d1a      	adds	r2, r3, #4
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	6819      	ldr	r1, [r3, #0]
 800aea2:	f107 030c 	add.w	r3, r7, #12
 800aea6:	220a      	movs	r2, #10
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff ff4f 	bl	800ad4c <ts_itoa>
				break;
 800aeae:	e011      	b.n	800aed4 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	1d1a      	adds	r2, r3, #4
 800aeb4:	607a      	str	r2, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	f107 030c 	add.w	r3, r7, #12
 800aebe:	2210      	movs	r2, #16
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff ff43 	bl	800ad4c <ts_itoa>
				break;
 800aec6:	e005      	b.n	800aed4 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	60fa      	str	r2, [r7, #12]
 800aece:	2225      	movs	r2, #37	; 0x25
 800aed0:	701a      	strb	r2, [r3, #0]
				  break;
 800aed2:	bf00      	nop
			}
			fmt++;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	3301      	adds	r3, #1
 800aed8:	60bb      	str	r3, [r7, #8]
 800aeda:	e007      	b.n	800aeec <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	60fa      	str	r2, [r7, #12]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	1c51      	adds	r1, r2, #1
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	7812      	ldrb	r2, [r2, #0]
 800aeea:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f47f af7d 	bne.w	800adf0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	461a      	mov	r2, r3
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	1ad3      	subs	r3, r2, r3
}
 800af04:	4618      	mov	r0, r3
 800af06:	3720      	adds	r7, #32
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800af0c:	b40e      	push	{r1, r2, r3}
 800af0e:	b580      	push	{r7, lr}
 800af10:	b085      	sub	sp, #20
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800af16:	f107 0320 	add.w	r3, r7, #32
 800af1a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	69f9      	ldr	r1, [r7, #28]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff ff5c 	bl	800adde <ts_formatstring>
 800af26:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800af28:	68fb      	ldr	r3, [r7, #12]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af34:	b003      	add	sp, #12
 800af36:	4770      	bx	lr

0800af38 <__cxa_pure_virtual>:
 800af38:	b508      	push	{r3, lr}
 800af3a:	f000 f80d 	bl	800af58 <_ZSt9terminatev>

0800af3e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800af3e:	b508      	push	{r3, lr}
 800af40:	4780      	blx	r0
 800af42:	f000 f80e 	bl	800af62 <abort>
	...

0800af48 <_ZSt13get_terminatev>:
 800af48:	4b02      	ldr	r3, [pc, #8]	; (800af54 <_ZSt13get_terminatev+0xc>)
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	f3bf 8f5b 	dmb	ish
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20000030 	.word	0x20000030

0800af58 <_ZSt9terminatev>:
 800af58:	b508      	push	{r3, lr}
 800af5a:	f7ff fff5 	bl	800af48 <_ZSt13get_terminatev>
 800af5e:	f7ff ffee 	bl	800af3e <_ZN10__cxxabiv111__terminateEPFvvE>

0800af62 <abort>:
 800af62:	b508      	push	{r3, lr}
 800af64:	2006      	movs	r0, #6
 800af66:	f000 f863 	bl	800b030 <raise>
 800af6a:	2001      	movs	r0, #1
 800af6c:	f7ff fd9a 	bl	800aaa4 <_exit>

0800af70 <__libc_init_array>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	4e0d      	ldr	r6, [pc, #52]	; (800afa8 <__libc_init_array+0x38>)
 800af74:	4c0d      	ldr	r4, [pc, #52]	; (800afac <__libc_init_array+0x3c>)
 800af76:	1ba4      	subs	r4, r4, r6
 800af78:	10a4      	asrs	r4, r4, #2
 800af7a:	2500      	movs	r5, #0
 800af7c:	42a5      	cmp	r5, r4
 800af7e:	d109      	bne.n	800af94 <__libc_init_array+0x24>
 800af80:	4e0b      	ldr	r6, [pc, #44]	; (800afb0 <__libc_init_array+0x40>)
 800af82:	4c0c      	ldr	r4, [pc, #48]	; (800afb4 <__libc_init_array+0x44>)
 800af84:	f000 f95e 	bl	800b244 <_init>
 800af88:	1ba4      	subs	r4, r4, r6
 800af8a:	10a4      	asrs	r4, r4, #2
 800af8c:	2500      	movs	r5, #0
 800af8e:	42a5      	cmp	r5, r4
 800af90:	d105      	bne.n	800af9e <__libc_init_array+0x2e>
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af98:	4798      	blx	r3
 800af9a:	3501      	adds	r5, #1
 800af9c:	e7ee      	b.n	800af7c <__libc_init_array+0xc>
 800af9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afa2:	4798      	blx	r3
 800afa4:	3501      	adds	r5, #1
 800afa6:	e7f2      	b.n	800af8e <__libc_init_array+0x1e>
 800afa8:	0800b66c 	.word	0x0800b66c
 800afac:	0800b66c 	.word	0x0800b66c
 800afb0:	0800b66c 	.word	0x0800b66c
 800afb4:	0800b674 	.word	0x0800b674

0800afb8 <memcpy>:
 800afb8:	b510      	push	{r4, lr}
 800afba:	1e43      	subs	r3, r0, #1
 800afbc:	440a      	add	r2, r1
 800afbe:	4291      	cmp	r1, r2
 800afc0:	d100      	bne.n	800afc4 <memcpy+0xc>
 800afc2:	bd10      	pop	{r4, pc}
 800afc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afcc:	e7f7      	b.n	800afbe <memcpy+0x6>
	...

0800afd0 <realloc>:
 800afd0:	4b02      	ldr	r3, [pc, #8]	; (800afdc <realloc+0xc>)
 800afd2:	460a      	mov	r2, r1
 800afd4:	4601      	mov	r1, r0
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	f000 b8f2 	b.w	800b1c0 <_realloc_r>
 800afdc:	20000034 	.word	0x20000034

0800afe0 <_raise_r>:
 800afe0:	291f      	cmp	r1, #31
 800afe2:	b538      	push	{r3, r4, r5, lr}
 800afe4:	4604      	mov	r4, r0
 800afe6:	460d      	mov	r5, r1
 800afe8:	d904      	bls.n	800aff4 <_raise_r+0x14>
 800afea:	2316      	movs	r3, #22
 800afec:	6003      	str	r3, [r0, #0]
 800afee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aff6:	b112      	cbz	r2, 800affe <_raise_r+0x1e>
 800aff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800affc:	b94b      	cbnz	r3, 800b012 <_raise_r+0x32>
 800affe:	4620      	mov	r0, r4
 800b000:	f000 f830 	bl	800b064 <_getpid_r>
 800b004:	462a      	mov	r2, r5
 800b006:	4601      	mov	r1, r0
 800b008:	4620      	mov	r0, r4
 800b00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b00e:	f000 b817 	b.w	800b040 <_kill_r>
 800b012:	2b01      	cmp	r3, #1
 800b014:	d00a      	beq.n	800b02c <_raise_r+0x4c>
 800b016:	1c59      	adds	r1, r3, #1
 800b018:	d103      	bne.n	800b022 <_raise_r+0x42>
 800b01a:	2316      	movs	r3, #22
 800b01c:	6003      	str	r3, [r0, #0]
 800b01e:	2001      	movs	r0, #1
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	2400      	movs	r4, #0
 800b024:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b028:	4628      	mov	r0, r5
 800b02a:	4798      	blx	r3
 800b02c:	2000      	movs	r0, #0
 800b02e:	bd38      	pop	{r3, r4, r5, pc}

0800b030 <raise>:
 800b030:	4b02      	ldr	r3, [pc, #8]	; (800b03c <raise+0xc>)
 800b032:	4601      	mov	r1, r0
 800b034:	6818      	ldr	r0, [r3, #0]
 800b036:	f7ff bfd3 	b.w	800afe0 <_raise_r>
 800b03a:	bf00      	nop
 800b03c:	20000034 	.word	0x20000034

0800b040 <_kill_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	4c07      	ldr	r4, [pc, #28]	; (800b060 <_kill_r+0x20>)
 800b044:	2300      	movs	r3, #0
 800b046:	4605      	mov	r5, r0
 800b048:	4608      	mov	r0, r1
 800b04a:	4611      	mov	r1, r2
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	f7ff fd17 	bl	800aa80 <_kill>
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	d102      	bne.n	800b05c <_kill_r+0x1c>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	b103      	cbz	r3, 800b05c <_kill_r+0x1c>
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	bd38      	pop	{r3, r4, r5, pc}
 800b05e:	bf00      	nop
 800b060:	20001eec 	.word	0x20001eec

0800b064 <_getpid_r>:
 800b064:	f7ff bcfe 	b.w	800aa64 <_getpid>

0800b068 <_free_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4605      	mov	r5, r0
 800b06c:	2900      	cmp	r1, #0
 800b06e:	d045      	beq.n	800b0fc <_free_r+0x94>
 800b070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b074:	1f0c      	subs	r4, r1, #4
 800b076:	2b00      	cmp	r3, #0
 800b078:	bfb8      	it	lt
 800b07a:	18e4      	addlt	r4, r4, r3
 800b07c:	f000 f8d6 	bl	800b22c <__malloc_lock>
 800b080:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <_free_r+0x98>)
 800b082:	6813      	ldr	r3, [r2, #0]
 800b084:	4610      	mov	r0, r2
 800b086:	b933      	cbnz	r3, 800b096 <_free_r+0x2e>
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	6014      	str	r4, [r2, #0]
 800b08c:	4628      	mov	r0, r5
 800b08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b092:	f000 b8cc 	b.w	800b22e <__malloc_unlock>
 800b096:	42a3      	cmp	r3, r4
 800b098:	d90c      	bls.n	800b0b4 <_free_r+0x4c>
 800b09a:	6821      	ldr	r1, [r4, #0]
 800b09c:	1862      	adds	r2, r4, r1
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	bf04      	itt	eq
 800b0a2:	681a      	ldreq	r2, [r3, #0]
 800b0a4:	685b      	ldreq	r3, [r3, #4]
 800b0a6:	6063      	str	r3, [r4, #4]
 800b0a8:	bf04      	itt	eq
 800b0aa:	1852      	addeq	r2, r2, r1
 800b0ac:	6022      	streq	r2, [r4, #0]
 800b0ae:	6004      	str	r4, [r0, #0]
 800b0b0:	e7ec      	b.n	800b08c <_free_r+0x24>
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	b10a      	cbz	r2, 800b0bc <_free_r+0x54>
 800b0b8:	42a2      	cmp	r2, r4
 800b0ba:	d9fa      	bls.n	800b0b2 <_free_r+0x4a>
 800b0bc:	6819      	ldr	r1, [r3, #0]
 800b0be:	1858      	adds	r0, r3, r1
 800b0c0:	42a0      	cmp	r0, r4
 800b0c2:	d10b      	bne.n	800b0dc <_free_r+0x74>
 800b0c4:	6820      	ldr	r0, [r4, #0]
 800b0c6:	4401      	add	r1, r0
 800b0c8:	1858      	adds	r0, r3, r1
 800b0ca:	4282      	cmp	r2, r0
 800b0cc:	6019      	str	r1, [r3, #0]
 800b0ce:	d1dd      	bne.n	800b08c <_free_r+0x24>
 800b0d0:	6810      	ldr	r0, [r2, #0]
 800b0d2:	6852      	ldr	r2, [r2, #4]
 800b0d4:	605a      	str	r2, [r3, #4]
 800b0d6:	4401      	add	r1, r0
 800b0d8:	6019      	str	r1, [r3, #0]
 800b0da:	e7d7      	b.n	800b08c <_free_r+0x24>
 800b0dc:	d902      	bls.n	800b0e4 <_free_r+0x7c>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	602b      	str	r3, [r5, #0]
 800b0e2:	e7d3      	b.n	800b08c <_free_r+0x24>
 800b0e4:	6820      	ldr	r0, [r4, #0]
 800b0e6:	1821      	adds	r1, r4, r0
 800b0e8:	428a      	cmp	r2, r1
 800b0ea:	bf04      	itt	eq
 800b0ec:	6811      	ldreq	r1, [r2, #0]
 800b0ee:	6852      	ldreq	r2, [r2, #4]
 800b0f0:	6062      	str	r2, [r4, #4]
 800b0f2:	bf04      	itt	eq
 800b0f4:	1809      	addeq	r1, r1, r0
 800b0f6:	6021      	streq	r1, [r4, #0]
 800b0f8:	605c      	str	r4, [r3, #4]
 800b0fa:	e7c7      	b.n	800b08c <_free_r+0x24>
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
 800b0fe:	bf00      	nop
 800b100:	20001eb0 	.word	0x20001eb0

0800b104 <_malloc_r>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	1ccd      	adds	r5, r1, #3
 800b108:	f025 0503 	bic.w	r5, r5, #3
 800b10c:	3508      	adds	r5, #8
 800b10e:	2d0c      	cmp	r5, #12
 800b110:	bf38      	it	cc
 800b112:	250c      	movcc	r5, #12
 800b114:	2d00      	cmp	r5, #0
 800b116:	4606      	mov	r6, r0
 800b118:	db01      	blt.n	800b11e <_malloc_r+0x1a>
 800b11a:	42a9      	cmp	r1, r5
 800b11c:	d903      	bls.n	800b126 <_malloc_r+0x22>
 800b11e:	230c      	movs	r3, #12
 800b120:	6033      	str	r3, [r6, #0]
 800b122:	2000      	movs	r0, #0
 800b124:	bd70      	pop	{r4, r5, r6, pc}
 800b126:	f000 f881 	bl	800b22c <__malloc_lock>
 800b12a:	4a23      	ldr	r2, [pc, #140]	; (800b1b8 <_malloc_r+0xb4>)
 800b12c:	6814      	ldr	r4, [r2, #0]
 800b12e:	4621      	mov	r1, r4
 800b130:	b991      	cbnz	r1, 800b158 <_malloc_r+0x54>
 800b132:	4c22      	ldr	r4, [pc, #136]	; (800b1bc <_malloc_r+0xb8>)
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	b91b      	cbnz	r3, 800b140 <_malloc_r+0x3c>
 800b138:	4630      	mov	r0, r6
 800b13a:	f000 f867 	bl	800b20c <_sbrk_r>
 800b13e:	6020      	str	r0, [r4, #0]
 800b140:	4629      	mov	r1, r5
 800b142:	4630      	mov	r0, r6
 800b144:	f000 f862 	bl	800b20c <_sbrk_r>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d126      	bne.n	800b19a <_malloc_r+0x96>
 800b14c:	230c      	movs	r3, #12
 800b14e:	6033      	str	r3, [r6, #0]
 800b150:	4630      	mov	r0, r6
 800b152:	f000 f86c 	bl	800b22e <__malloc_unlock>
 800b156:	e7e4      	b.n	800b122 <_malloc_r+0x1e>
 800b158:	680b      	ldr	r3, [r1, #0]
 800b15a:	1b5b      	subs	r3, r3, r5
 800b15c:	d41a      	bmi.n	800b194 <_malloc_r+0x90>
 800b15e:	2b0b      	cmp	r3, #11
 800b160:	d90f      	bls.n	800b182 <_malloc_r+0x7e>
 800b162:	600b      	str	r3, [r1, #0]
 800b164:	50cd      	str	r5, [r1, r3]
 800b166:	18cc      	adds	r4, r1, r3
 800b168:	4630      	mov	r0, r6
 800b16a:	f000 f860 	bl	800b22e <__malloc_unlock>
 800b16e:	f104 000b 	add.w	r0, r4, #11
 800b172:	1d23      	adds	r3, r4, #4
 800b174:	f020 0007 	bic.w	r0, r0, #7
 800b178:	1ac3      	subs	r3, r0, r3
 800b17a:	d01b      	beq.n	800b1b4 <_malloc_r+0xb0>
 800b17c:	425a      	negs	r2, r3
 800b17e:	50e2      	str	r2, [r4, r3]
 800b180:	bd70      	pop	{r4, r5, r6, pc}
 800b182:	428c      	cmp	r4, r1
 800b184:	bf0d      	iteet	eq
 800b186:	6863      	ldreq	r3, [r4, #4]
 800b188:	684b      	ldrne	r3, [r1, #4]
 800b18a:	6063      	strne	r3, [r4, #4]
 800b18c:	6013      	streq	r3, [r2, #0]
 800b18e:	bf18      	it	ne
 800b190:	460c      	movne	r4, r1
 800b192:	e7e9      	b.n	800b168 <_malloc_r+0x64>
 800b194:	460c      	mov	r4, r1
 800b196:	6849      	ldr	r1, [r1, #4]
 800b198:	e7ca      	b.n	800b130 <_malloc_r+0x2c>
 800b19a:	1cc4      	adds	r4, r0, #3
 800b19c:	f024 0403 	bic.w	r4, r4, #3
 800b1a0:	42a0      	cmp	r0, r4
 800b1a2:	d005      	beq.n	800b1b0 <_malloc_r+0xac>
 800b1a4:	1a21      	subs	r1, r4, r0
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 f830 	bl	800b20c <_sbrk_r>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d0cd      	beq.n	800b14c <_malloc_r+0x48>
 800b1b0:	6025      	str	r5, [r4, #0]
 800b1b2:	e7d9      	b.n	800b168 <_malloc_r+0x64>
 800b1b4:	bd70      	pop	{r4, r5, r6, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20001eb0 	.word	0x20001eb0
 800b1bc:	20001eb4 	.word	0x20001eb4

0800b1c0 <_realloc_r>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	4607      	mov	r7, r0
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	460e      	mov	r6, r1
 800b1c8:	b921      	cbnz	r1, 800b1d4 <_realloc_r+0x14>
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b1d0:	f7ff bf98 	b.w	800b104 <_malloc_r>
 800b1d4:	b922      	cbnz	r2, 800b1e0 <_realloc_r+0x20>
 800b1d6:	f7ff ff47 	bl	800b068 <_free_r>
 800b1da:	4625      	mov	r5, r4
 800b1dc:	4628      	mov	r0, r5
 800b1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1e0:	f000 f826 	bl	800b230 <_malloc_usable_size_r>
 800b1e4:	4284      	cmp	r4, r0
 800b1e6:	d90f      	bls.n	800b208 <_realloc_r+0x48>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	f7ff ff8a 	bl	800b104 <_malloc_r>
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d0f2      	beq.n	800b1dc <_realloc_r+0x1c>
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	f7ff fedd 	bl	800afb8 <memcpy>
 800b1fe:	4631      	mov	r1, r6
 800b200:	4638      	mov	r0, r7
 800b202:	f7ff ff31 	bl	800b068 <_free_r>
 800b206:	e7e9      	b.n	800b1dc <_realloc_r+0x1c>
 800b208:	4635      	mov	r5, r6
 800b20a:	e7e7      	b.n	800b1dc <_realloc_r+0x1c>

0800b20c <_sbrk_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4c06      	ldr	r4, [pc, #24]	; (800b228 <_sbrk_r+0x1c>)
 800b210:	2300      	movs	r3, #0
 800b212:	4605      	mov	r5, r0
 800b214:	4608      	mov	r0, r1
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	f7ff fc4a 	bl	800aab0 <_sbrk>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_sbrk_r+0x1a>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	b103      	cbz	r3, 800b226 <_sbrk_r+0x1a>
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	20001eec 	.word	0x20001eec

0800b22c <__malloc_lock>:
 800b22c:	4770      	bx	lr

0800b22e <__malloc_unlock>:
 800b22e:	4770      	bx	lr

0800b230 <_malloc_usable_size_r>:
 800b230:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b234:	2800      	cmp	r0, #0
 800b236:	f1a0 0004 	sub.w	r0, r0, #4
 800b23a:	bfbc      	itt	lt
 800b23c:	580b      	ldrlt	r3, [r1, r0]
 800b23e:	18c0      	addlt	r0, r0, r3
 800b240:	4770      	bx	lr
	...

0800b244 <_init>:
 800b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b246:	bf00      	nop
 800b248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b24a:	bc08      	pop	{r3}
 800b24c:	469e      	mov	lr, r3
 800b24e:	4770      	bx	lr

0800b250 <_fini>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	bf00      	nop
 800b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b256:	bc08      	pop	{r3}
 800b258:	469e      	mov	lr, r3
 800b25a:	4770      	bx	lr
