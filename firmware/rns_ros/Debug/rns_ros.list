
rns_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f560  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  0800f6f0  0800f6f0  0001f6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080102ac  080102ac  000202ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080102b4  080102b4  000202b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000304  20000000  080102b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030304  2**0
                  CONTENTS
  7 .bss          000017d0  20000304  20000304  00030304  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20001ad4  20001ad4  00030304  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031456  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000450e  00000000  00000000  0006178a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001268  00000000  00000000  00065c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010a0  00000000  00000000  00066f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009f2e  00000000  00000000  00067fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008932  00000000  00000000  00071ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007a800  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005b78  00000000  00000000  0007a87c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000304 	.word	0x20000304
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f6d8 	.word	0x0800f6d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000308 	.word	0x20000308
 80001cc:	0800f6d8 	.word	0x0800f6d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <NVIC_PriorityGroupConfig+0x24>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60d3      	str	r3, [r2, #12]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	2300      	movs	r3, #0
 8000c76:	73bb      	strb	r3, [r7, #14]
 8000c78:	230f      	movs	r3, #15
 8000c7a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	78db      	ldrb	r3, [r3, #3]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d039      	beq.n	8000cf8 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <NVIC_Init+0xbc>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	f1c3 0304 	rsb	r3, r3, #4
 8000c9a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000c9c:	7b7a      	ldrb	r2, [r7, #13]
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	fa42 f303 	asr.w	r3, r2, r3
 8000ca4:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	785b      	ldrb	r3, [r3, #1]
 8000caa:	461a      	mov	r2, r3
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	789a      	ldrb	r2, [r3, #2]
 8000cb8:	7b7b      	ldrb	r3, [r7, #13]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <NVIC_Init+0xc0>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <NVIC_Init+0xc0>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	f003 031f 	and.w	r3, r3, #31
 8000cec:	2101      	movs	r1, #1
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cf2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000cf6:	e00f      	b.n	8000d18 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cf8:	490b      	ldr	r1, [pc, #44]	; (8000d28 <NVIC_Init+0xc0>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d10:	f100 0320 	add.w	r3, r0, #32
 8000d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e076      	b.n	8000e36 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d165      	bne.n	8000e30 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	401a      	ands	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	791b      	ldrb	r3, [r3, #4]
 8000d82:	4619      	mov	r1, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	791b      	ldrb	r3, [r3, #4]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d003      	beq.n	8000da2 <GPIO_Init+0x76>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d12e      	bne.n	8000e00 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2103      	movs	r1, #3
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	795b      	ldrb	r3, [r3, #5]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	2301      	movs	r3, #1
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	43db      	mvns	r3, r3
 8000de0:	401a      	ands	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	7992      	ldrb	r2, [r2, #6]
 8000dee:	4611      	mov	r1, r2
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	b292      	uxth	r2, r2
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	b292      	uxth	r2, r2
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	401a      	ands	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	79db      	ldrb	r3, [r3, #7]
 8000e20:	4619      	mov	r1, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d985      	bls.n	8000d48 <GPIO_Init+0x1c>
    }
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000e58:	787b      	ldrb	r3, [r7, #1]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	887a      	ldrh	r2, [r7, #2]
 8000e62:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000e64:	e002      	b.n	8000e6c <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	887a      	ldrh	r2, [r7, #2]
 8000e6a:	835a      	strh	r2, [r3, #26]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e90:	787a      	ldrb	r2, [r7, #1]
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	08db      	lsrs	r3, r3, #3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	210f      	movs	r1, #15
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	ea02 0103 	and.w	r1, r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f100 0208 	add.w	r2, r0, #8
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3208      	adds	r2, #8
 8000ee2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	08db      	lsrs	r3, r3, #3
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	2302      	movs	r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f2c:	4b47      	ldr	r3, [pc, #284]	; (800104c <RCC_GetClocksFreq+0x140>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d007      	beq.n	8000f4c <RCC_GetClocksFreq+0x40>
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d009      	beq.n	8000f54 <RCC_GetClocksFreq+0x48>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d13d      	bne.n	8000fc0 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a42      	ldr	r2, [pc, #264]	; (8001050 <RCC_GetClocksFreq+0x144>)
 8000f48:	601a      	str	r2, [r3, #0]
      break;
 8000f4a:	e03d      	b.n	8000fc8 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a41      	ldr	r2, [pc, #260]	; (8001054 <RCC_GetClocksFreq+0x148>)
 8000f50:	601a      	str	r2, [r3, #0]
      break;
 8000f52:	e039      	b.n	8000fc8 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000f54:	4b3d      	ldr	r3, [pc, #244]	; (800104c <RCC_GetClocksFreq+0x140>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	0d9b      	lsrs	r3, r3, #22
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <RCC_GetClocksFreq+0x140>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f68:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00c      	beq.n	8000f8a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f70:	4a38      	ldr	r2, [pc, #224]	; (8001054 <RCC_GetClocksFreq+0x148>)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f78:	4a34      	ldr	r2, [pc, #208]	; (800104c <RCC_GetClocksFreq+0x140>)
 8000f7a:	6852      	ldr	r2, [r2, #4]
 8000f7c:	0992      	lsrs	r2, r2, #6
 8000f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	e00b      	b.n	8000fa2 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000f8a:	4a31      	ldr	r2, [pc, #196]	; (8001050 <RCC_GetClocksFreq+0x144>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4a2e      	ldr	r2, [pc, #184]	; (800104c <RCC_GetClocksFreq+0x140>)
 8000f94:	6852      	ldr	r2, [r2, #4]
 8000f96:	0992      	lsrs	r2, r2, #6
 8000f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <RCC_GetClocksFreq+0x140>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	0c1b      	lsrs	r3, r3, #16
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	3301      	adds	r3, #1
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
      break;
 8000fbe:	e003      	b.n	8000fc8 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <RCC_GetClocksFreq+0x144>)
 8000fc4:	601a      	str	r2, [r3, #0]
      break;
 8000fc6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <RCC_GetClocksFreq+0x140>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fd0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <RCC_GetClocksFreq+0x14c>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	40da      	lsrs	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <RCC_GetClocksFreq+0x140>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000ff8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	0a9b      	lsrs	r3, r3, #10
 8000ffe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001000:	4a15      	ldr	r2, [pc, #84]	; (8001058 <RCC_GetClocksFreq+0x14c>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	40da      	lsrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <RCC_GetClocksFreq+0x140>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001020:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	0b5b      	lsrs	r3, r3, #13
 8001026:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <RCC_GetClocksFreq+0x14c>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	40da      	lsrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	60da      	str	r2, [r3, #12]
}
 8001040:	bf00      	nop
 8001042:	3724      	adds	r7, #36	; 0x24
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40023800 	.word	0x40023800
 8001050:	00f42400 	.word	0x00f42400
 8001054:	007a1200 	.word	0x007a1200
 8001058:	20000000 	.word	0x20000000

0800105c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800106e:	490a      	ldr	r1, [pc, #40]	; (8001098 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4313      	orrs	r3, r2
 8001078:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800107a:	e006      	b.n	800108a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800107c:	4906      	ldr	r1, [pc, #24]	; (8001098 <RCC_AHB1PeriphClockCmd+0x3c>)
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	43db      	mvns	r3, r3
 8001086:	4013      	ands	r3, r2
 8001088:	630b      	str	r3, [r1, #48]	; 0x30
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80010ae:	490a      	ldr	r1, [pc, #40]	; (80010d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80010b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80010ba:	e006      	b.n	80010ca <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80010bc:	4906      	ldr	r1, [pc, #24]	; (80010d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80010c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4013      	ands	r3, r2
 80010c8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <RCC_APB2PeriphClockCmd+0x3c>)
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <RCC_APB2PeriphClockCmd+0x3c>)
 80010f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80010fa:	e006      	b.n	800110a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80010fc:	4906      	ldr	r1, [pc, #24]	; (8001118 <RCC_APB2PeriphClockCmd+0x3c>)
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <RCC_APB2PeriphClockCmd+0x3c>)
 8001100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	43db      	mvns	r3, r3
 8001106:	4013      	ands	r3, r2
 8001108:	644b      	str	r3, [r1, #68]	; 0x44
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <TIM_TimeBaseInit+0xbc>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d013      	beq.n	8001160 <TIM_TimeBaseInit+0x44>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <TIM_TimeBaseInit+0xc0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00f      	beq.n	8001160 <TIM_TimeBaseInit+0x44>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001146:	d00b      	beq.n	8001160 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <TIM_TimeBaseInit+0xc4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d007      	beq.n	8001160 <TIM_TimeBaseInit+0x44>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <TIM_TimeBaseInit+0xc8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d003      	beq.n	8001160 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <TIM_TimeBaseInit+0xcc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d108      	bne.n	8001172 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001166:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	885a      	ldrh	r2, [r3, #2]
 800116c:	89fb      	ldrh	r3, [r7, #14]
 800116e:	4313      	orrs	r3, r2
 8001170:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <TIM_TimeBaseInit+0xd0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00c      	beq.n	8001194 <TIM_TimeBaseInit+0x78>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <TIM_TimeBaseInit+0xd4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d008      	beq.n	8001194 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001188:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	891a      	ldrh	r2, [r3, #8]
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	4313      	orrs	r3, r2
 8001192:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	89fa      	ldrh	r2, [r7, #14]
 8001198:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <TIM_TimeBaseInit+0xbc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d003      	beq.n	80011ba <TIM_TimeBaseInit+0x9e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <TIM_TimeBaseInit+0xc0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d104      	bne.n	80011c4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	7a9b      	ldrb	r3, [r3, #10]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	829a      	strh	r2, [r3, #20]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40010400 	.word	0x40010400
 80011e0:	40000400 	.word	0x40000400
 80011e4:	40000800 	.word	0x40000800
 80011e8:	40000c00 	.word	0x40000c00
 80011ec:	40001000 	.word	0x40001000
 80011f0:	40001400 	.word	0x40001400

080011f4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d008      	beq.n	8001218 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8001216:	e007      	b.n	8001228 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b29b      	uxth	r3, r3
 800121e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	801a      	strh	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001256:	e007      	b.n	8001268 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	801a      	strh	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	817b      	strh	r3, [r7, #10]
 8001282:	2300      	movs	r3, #0
 8001284:	81fb      	strh	r3, [r7, #14]
 8001286:	2300      	movs	r3, #0
 8001288:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	8c1b      	ldrh	r3, [r3, #32]
 800128e:	b29b      	uxth	r3, r3
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	8c1b      	ldrh	r3, [r3, #32]
 800129e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	8b1b      	ldrh	r3, [r3, #24]
 80012aa:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80012ac:	897b      	ldrh	r3, [r7, #10]
 80012ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012b2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	881a      	ldrh	r2, [r3, #0]
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	f023 0302 	bic.w	r3, r3, #2
 80012cc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	899a      	ldrh	r2, [r3, #12]
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	885a      	ldrh	r2, [r3, #2]
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	4313      	orrs	r3, r2
 80012e0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <TIM_OC1Init+0xec>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d003      	beq.n	80012f2 <TIM_OC1Init+0x7e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <TIM_OC1Init+0xf0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d123      	bne.n	800133a <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	f023 0308 	bic.w	r3, r3, #8
 80012f8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	89da      	ldrh	r2, [r3, #14]
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	4313      	orrs	r3, r2
 8001302:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001304:	89fb      	ldrh	r3, [r7, #14]
 8001306:	f023 0304 	bic.w	r3, r3, #4
 800130a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	889a      	ldrh	r2, [r3, #4]
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	4313      	orrs	r3, r2
 8001314:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800131e:	89bb      	ldrh	r3, [r7, #12]
 8001320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001324:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	8a1a      	ldrh	r2, [r3, #16]
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	8a5a      	ldrh	r2, [r3, #18]
 8001334:	89bb      	ldrh	r3, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	89ba      	ldrh	r2, [r7, #12]
 800133e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	897a      	ldrh	r2, [r7, #10]
 8001344:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	89fa      	ldrh	r2, [r7, #14]
 8001352:	841a      	strh	r2, [r3, #32]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40010000 	.word	0x40010000
 8001364:	40010400 	.word	0x40010400

08001368 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	817b      	strh	r3, [r7, #10]
 8001376:	2300      	movs	r3, #0
 8001378:	81fb      	strh	r3, [r7, #14]
 800137a:	2300      	movs	r3, #0
 800137c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	8c1b      	ldrh	r3, [r3, #32]
 8001382:	b29b      	uxth	r3, r3
 8001384:	f023 0310 	bic.w	r3, r3, #16
 8001388:	b29a      	uxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8c1b      	ldrh	r3, [r3, #32]
 8001392:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	889b      	ldrh	r3, [r3, #4]
 8001398:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	8b1b      	ldrh	r3, [r3, #24]
 800139e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80013a0:	897b      	ldrh	r3, [r7, #10]
 80013a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013a6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80013a8:	897b      	ldrh	r3, [r7, #10]
 80013aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013ae:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	897b      	ldrh	r3, [r7, #10]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	f023 0320 	bic.w	r3, r3, #32
 80013c4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	899b      	ldrh	r3, [r3, #12]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	885b      	ldrh	r3, [r3, #2]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	b29a      	uxth	r2, r3
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	4313      	orrs	r3, r2
 80013e0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a22      	ldr	r2, [pc, #136]	; (8001470 <TIM_OC2Init+0x108>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d003      	beq.n	80013f2 <TIM_OC2Init+0x8a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <TIM_OC2Init+0x10c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12b      	bne.n	800144a <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013f8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	89db      	ldrh	r3, [r3, #14]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	b29a      	uxth	r2, r3
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	4313      	orrs	r3, r2
 8001406:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001408:	89fb      	ldrh	r3, [r7, #14]
 800140a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800140e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	889b      	ldrh	r3, [r3, #4]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	b29a      	uxth	r2, r3
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	4313      	orrs	r3, r2
 800141c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800141e:	89bb      	ldrh	r3, [r7, #12]
 8001420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001424:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800142c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	8a1b      	ldrh	r3, [r3, #16]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	b29a      	uxth	r2, r3
 8001436:	89bb      	ldrh	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	8a5b      	ldrh	r3, [r3, #18]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	b29a      	uxth	r2, r3
 8001444:	89bb      	ldrh	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	89ba      	ldrh	r2, [r7, #12]
 800144e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	897a      	ldrh	r2, [r7, #10]
 8001454:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	89fa      	ldrh	r2, [r7, #14]
 8001462:	841a      	strh	r2, [r3, #32]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40010000 	.word	0x40010000
 8001474:	40010400 	.word	0x40010400

08001478 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	817b      	strh	r3, [r7, #10]
 8001486:	2300      	movs	r3, #0
 8001488:	81fb      	strh	r3, [r7, #14]
 800148a:	2300      	movs	r3, #0
 800148c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8c1b      	ldrh	r3, [r3, #32]
 8001492:	b29b      	uxth	r3, r3
 8001494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	8c1b      	ldrh	r3, [r3, #32]
 80014a2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	889b      	ldrh	r3, [r3, #4]
 80014a8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	8b9b      	ldrh	r3, [r3, #28]
 80014ae:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014b6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80014b8:	897b      	ldrh	r3, [r7, #10]
 80014ba:	f023 0303 	bic.w	r3, r3, #3
 80014be:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	881a      	ldrh	r2, [r3, #0]
 80014c4:	897b      	ldrh	r3, [r7, #10]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014d0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	899b      	ldrh	r3, [r3, #12]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b29a      	uxth	r2, r3
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	4313      	orrs	r3, r2
 80014de:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	885b      	ldrh	r3, [r3, #2]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	89fb      	ldrh	r3, [r7, #14]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a22      	ldr	r2, [pc, #136]	; (800157c <TIM_OC3Init+0x104>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d003      	beq.n	80014fe <TIM_OC3Init+0x86>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a21      	ldr	r2, [pc, #132]	; (8001580 <TIM_OC3Init+0x108>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12b      	bne.n	8001556 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001504:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	89db      	ldrh	r3, [r3, #14]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b29a      	uxth	r2, r3
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	4313      	orrs	r3, r2
 8001512:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001514:	89fb      	ldrh	r3, [r7, #14]
 8001516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800151a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b29a      	uxth	r2, r3
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	4313      	orrs	r3, r2
 8001528:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800152a:	89bb      	ldrh	r3, [r7, #12]
 800152c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001530:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001532:	89bb      	ldrh	r3, [r7, #12]
 8001534:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001538:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	8a1b      	ldrh	r3, [r3, #16]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	b29a      	uxth	r2, r3
 8001542:	89bb      	ldrh	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	8a5b      	ldrh	r3, [r3, #18]
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	b29a      	uxth	r2, r3
 8001550:	89bb      	ldrh	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	89ba      	ldrh	r2, [r7, #12]
 800155a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	897a      	ldrh	r2, [r7, #10]
 8001560:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	89fa      	ldrh	r2, [r7, #14]
 800156e:	841a      	strh	r2, [r3, #32]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40010000 	.word	0x40010000
 8001580:	40010400 	.word	0x40010400

08001584 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	81bb      	strh	r3, [r7, #12]
 8001592:	2300      	movs	r3, #0
 8001594:	817b      	strh	r3, [r7, #10]
 8001596:	2300      	movs	r3, #0
 8001598:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	8c1b      	ldrh	r3, [r3, #32]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	8c1b      	ldrh	r3, [r3, #32]
 80015ae:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	889b      	ldrh	r3, [r3, #4]
 80015b4:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	8b9b      	ldrh	r3, [r3, #28]
 80015ba:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80015bc:	89bb      	ldrh	r3, [r7, #12]
 80015be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015c2:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80015c4:	89bb      	ldrh	r3, [r7, #12]
 80015c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ca:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	89bb      	ldrh	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80015da:	897b      	ldrh	r3, [r7, #10]
 80015dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015e0:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	899b      	ldrh	r3, [r3, #12]
 80015e6:	031b      	lsls	r3, r3, #12
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	897b      	ldrh	r3, [r7, #10]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	885b      	ldrh	r3, [r3, #2]
 80015f4:	031b      	lsls	r3, r3, #12
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	897b      	ldrh	r3, [r7, #10]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <TIM_OC4Init+0xc8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d003      	beq.n	800160e <TIM_OC4Init+0x8a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <TIM_OC4Init+0xcc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10a      	bne.n	8001624 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001614:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	8a1b      	ldrh	r3, [r3, #16]
 800161a:	019b      	lsls	r3, r3, #6
 800161c:	b29a      	uxth	r2, r3
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	4313      	orrs	r3, r2
 8001622:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	89fa      	ldrh	r2, [r7, #14]
 8001628:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	89ba      	ldrh	r2, [r7, #12]
 800162e:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	897a      	ldrh	r2, [r7, #10]
 800163c:	841a      	strh	r2, [r3, #32]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40010000 	.word	0x40010000
 8001650:	40010400 	.word	0x40010400

08001654 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	8b1b      	ldrh	r3, [r3, #24]
 8001668:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	f023 0308 	bic.w	r3, r3, #8
 8001670:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001672:	89fa      	ldrh	r2, [r7, #14]
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	4313      	orrs	r3, r2
 8001678:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	89fa      	ldrh	r2, [r7, #14]
 800167e:	831a      	strh	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	8b1b      	ldrh	r3, [r3, #24]
 80016a0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016a8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	89fa      	ldrh	r2, [r7, #14]
 80016ba:	831a      	strh	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	8b9b      	ldrh	r3, [r3, #28]
 80016dc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	f023 0308 	bic.w	r3, r3, #8
 80016e4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80016e6:	89fa      	ldrh	r2, [r7, #14]
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	89fa      	ldrh	r2, [r7, #14]
 80016f2:	839a      	strh	r2, [r3, #28]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	8b9b      	ldrh	r3, [r3, #28]
 8001714:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800171c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b29a      	uxth	r2, r3
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	4313      	orrs	r3, r2
 8001728:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	89fa      	ldrh	r2, [r7, #14]
 800172e:	839a      	strh	r2, [r3, #28]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00c      	beq.n	8001768 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001754:	b29b      	uxth	r3, r3
 8001756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800175a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800175e:	b29a      	uxth	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 8001766:	e009      	b.n	800177c <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800176e:	b29b      	uxth	r3, r3
 8001770:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001798:	787b      	ldrb	r3, [r7, #1]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	899b      	ldrh	r3, [r3, #12]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80017ae:	e009      	b.n	80017c4 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	899b      	ldrh	r3, [r3, #12]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	819a      	strh	r2, [r3, #12]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	81bb      	strh	r3, [r7, #12]
 80017e4:	2300      	movs	r3, #0
 80017e6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	8a1b      	ldrh	r3, [r3, #16]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	4013      	ands	r3, r2
 80017f2:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	899b      	ldrh	r3, [r3, #12]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	4013      	ands	r3, r2
 80017fe:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001800:	89bb      	ldrh	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <TIM_GetITStatus+0x42>
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e001      	b.n	8001816 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	43db      	mvns	r3, r3
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	821a      	strh	r2, [r3, #16]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8001846:	b480      	push	{r7}
 8001848:	b087      	sub	sp, #28
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	4608      	mov	r0, r1
 8001850:	4611      	mov	r1, r2
 8001852:	461a      	mov	r2, r3
 8001854:	4603      	mov	r3, r0
 8001856:	817b      	strh	r3, [r7, #10]
 8001858:	460b      	mov	r3, r1
 800185a:	813b      	strh	r3, [r7, #8]
 800185c:	4613      	mov	r3, r2
 800185e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	891b      	ldrh	r3, [r3, #8]
 8001870:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8b1b      	ldrh	r3, [r3, #24]
 8001876:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8c1b      	ldrh	r3, [r3, #32]
 800187c:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800187e:	8afb      	ldrh	r3, [r7, #22]
 8001880:	f023 0307 	bic.w	r3, r3, #7
 8001884:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8001886:	8afa      	ldrh	r2, [r7, #22]
 8001888:	897b      	ldrh	r3, [r7, #10]
 800188a:	4313      	orrs	r3, r2
 800188c:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800188e:	8abb      	ldrh	r3, [r7, #20]
 8001890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001894:	f023 0303 	bic.w	r3, r3, #3
 8001898:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800189a:	8abb      	ldrh	r3, [r7, #20]
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80018a6:	8a7b      	ldrh	r3, [r7, #18]
 80018a8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018ac:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	893b      	ldrh	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	8a7b      	ldrh	r3, [r7, #18]
 80018bc:	4313      	orrs	r3, r2
 80018be:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8afa      	ldrh	r2, [r7, #22]
 80018c4:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8aba      	ldrh	r2, [r7, #20]
 80018ca:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8a7a      	ldrh	r2, [r7, #18]
 80018d0:	841a      	strh	r2, [r3, #32]
}
 80018d2:	bf00      	nop
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	8a1b      	ldrh	r3, [r3, #16]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	88db      	ldrh	r3, [r3, #6]
 800190e:	461a      	mov	r2, r3
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	4313      	orrs	r3, r2
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	899b      	ldrh	r3, [r3, #12]
 8001922:	b29b      	uxth	r3, r3
 8001924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800192c:	f023 030c 	bic.w	r3, r3, #12
 8001930:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	889a      	ldrh	r2, [r3, #4]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	891b      	ldrh	r3, [r3, #8]
 800193a:	4313      	orrs	r3, r2
 800193c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001942:	4313      	orrs	r3, r2
 8001944:	b29b      	uxth	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	4313      	orrs	r3, r2
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	b29a      	uxth	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	8a9b      	ldrh	r3, [r3, #20]
 800195a:	b29b      	uxth	r3, r3
 800195c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001964:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	899b      	ldrh	r3, [r3, #12]
 800196a:	461a      	mov	r2, r3
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	4313      	orrs	r3, r2
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	b29a      	uxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fac4 	bl	8000f0c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a30      	ldr	r2, [pc, #192]	; (8001a48 <USART_Init+0x168>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d003      	beq.n	8001994 <USART_Init+0xb4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <USART_Init+0x16c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d102      	bne.n	800199a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	e001      	b.n	800199e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	899b      	ldrh	r3, [r3, #12]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da0c      	bge.n	80019c4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80019aa:	6a3a      	ldr	r2, [r7, #32]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009a      	lsls	r2, r3, #2
 80019b4:	441a      	add	r2, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e00b      	b.n	80019dc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80019c4:	6a3a      	ldr	r2, [r7, #32]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009a      	lsls	r2, r3, #2
 80019ce:	441a      	add	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <USART_Init+0x170>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	095b      	lsrs	r3, r3, #5
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	2264      	movs	r2, #100	; 0x64
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	899b      	ldrh	r3, [r3, #12]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	da0c      	bge.n	8001a20 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	3332      	adds	r3, #50	; 0x32
 8001a0c:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <USART_Init+0x170>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	e00b      	b.n	8001a38 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	3332      	adds	r3, #50	; 0x32
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <USART_Init+0x170>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	095b      	lsrs	r3, r3, #5
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a34:	4313      	orrs	r3, r2
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	811a      	strh	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40011400 	.word	0x40011400
 8001a50:	51eb851f 	.word	0x51eb851f

08001a54 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	899b      	ldrh	r3, [r3, #12]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001a76:	e007      	b.n	8001a88 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	899b      	ldrh	r3, [r3, #12]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	819a      	strh	r2, [r3, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	809a      	strh	r2, [r3, #4]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	889b      	ldrh	r3, [r3, #4]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aca:	b29b      	uxth	r3, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	095b      	lsrs	r3, r3, #5
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d103      	bne.n	8001b26 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	330c      	adds	r3, #12
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e009      	b.n	8001b3a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d103      	bne.n	8001b34 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3310      	adds	r3, #16
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e002      	b.n	8001b3a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3314      	adds	r3, #20
 8001b38:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001b3a:	787b      	ldrb	r3, [r7, #1]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	6811      	ldr	r1, [r2, #0]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001b4c:	e006      	b.n	8001b5c <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	6811      	ldr	r1, [r2, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	43d2      	mvns	r2, r2
 8001b58:	400a      	ands	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	4013      	ands	r3, r2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e001      	b.n	8001b92 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	899b      	ldrh	r3, [r3, #12]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e011      	b.n	8001c12 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d107      	bne.n	8001c04 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	8a1b      	ldrh	r3, [r3, #16]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e006      	b.n	8001c12 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	8a9b      	ldrh	r3, [r3, #20]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <USART_GetITStatus+0xa4>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	74fb      	strb	r3, [r7, #19]
 8001c42:	e001      	b.n	8001c48 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	81fb      	strh	r3, [r7, #14]
 8001c66:	2300      	movs	r3, #0
 8001c68:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001c70:	89fb      	ldrh	r3, [r7, #14]
 8001c72:	2201      	movs	r2, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001c7a:	89bb      	ldrh	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	801a      	strh	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	ed87 0a07 	vstr	s0, [r7, #28]
 8001c9a:	edc7 0a06 	vstr	s1, [r7, #24]
 8001c9e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001ca2:	edc7 1a04 	vstr	s3, [r7, #16]
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	61da      	str	r2, [r3, #28]
}
 8001cde:	bf00      	nop
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <ABT>:

void ABT(ABT_t *filt)
{
 8001d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d20:	b087      	sub	sp, #28
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	float pos_residual;
	float pos_predict;
	float vel_predict;

	/* Predict position and velocity using previous sample values */
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	ed93 7a00 	vldr	s14, [r3]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	edd3 6a00 	vldr	s13, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	edd3 7a00 	vldr	s15, [r3]
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	ee17 0a90 	vmov	r0, s15
 8001d48:	f7fe fbfe 	bl	8000548 <__aeabi_f2d>
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	460d      	mov	r5, r1
								(*(filt->vel_output)) + filt->sample_time *
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	ed93 7a00 	vldr	s14, [r3]
								filt->sample_time * 0.5 * (*(filt->acc_output));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	edd3 7a00 	vldr	s15, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 8001d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d60:	ee17 0a90 	vmov	r0, s15
 8001d64:	f7fe fbf0 	bl	8000548 <__aeabi_f2d>
								filt->sample_time * 0.5 * (*(filt->acc_output));
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b54      	ldr	r3, [pc, #336]	; (8001ec0 <ABT+0x1a4>)
 8001d6e:	f7fe fc3f 	bl	80005f0 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4690      	mov	r8, r2
 8001d78:	4699      	mov	r9, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbe1 	bl	8000548 <__aeabi_f2d>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4640      	mov	r0, r8
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	f7fe fc2f 	bl	80005f0 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
								(*(filt->vel_output)) + filt->sample_time *
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f7fe fa77 	bl	800028c <__adddf3>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460c      	mov	r4, r1
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001da2:	4618      	mov	r0, r3
 8001da4:	4621      	mov	r1, r4
 8001da6:	f7fe fefb 	bl	8000ba0 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	617b      	str	r3, [r7, #20]
	vel_predict = *(filt->vel_output) + filt->sample_time * (*(filt->acc_output));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	edd3 6a00 	vldr	s13, [r3]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dcc:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Calculate residue */
	pos_residual = *filt->input - pos_predict;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de0:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Update estimate with weighted input (a - b - g) */
	*(filt->pos_output) = pos_predict + filt->alpha * pos_residual;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	ed92 7a01 	vldr	s14, [r2, #4]
 8001dee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfe:	edc3 7a00 	vstr	s15, [r3]
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	edd2 6a02 	vldr	s13, [r2, #8]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	edd2 7a00 	vldr	s15, [r2]
 8001e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
																* pos_residual;
 8001e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 8001e1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e26:	edc3 7a00 	vstr	s15, [r3]
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69dc      	ldr	r4, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb87 	bl	8000548 <__aeabi_f2d>
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	460e      	mov	r6, r1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb80 	bl	8000548 <__aeabi_f2d>
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <ABT+0x1a4>)
 8001e4e:	f7fe fbcf 	bl	80005f0 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4690      	mov	r8, r2
 8001e58:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6a:	ee17 0a90 	vmov	r0, s15
 8001e6e:	f7fe fb6b 	bl	8000548 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 8001e76:	4640      	mov	r0, r8
 8001e78:	4649      	mov	r1, r9
 8001e7a:	f7fe fce3 	bl	8000844 <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4690      	mov	r8, r2
 8001e84:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7fe fb5e 	bl	8000548 <__aeabi_f2d>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4640      	mov	r0, r8
 8001e92:	4649      	mov	r1, r9
 8001e94:	f7fe fbac 	bl	80005f0 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	4631      	mov	r1, r6
 8001ea0:	f7fe f9f4 	bl	800028c <__adddf3>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe fe78 	bl	8000ba0 <__aeabi_d2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	6023      	str	r3, [r4, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ebe:	bf00      	nop
 8001ec0:	3fe00000 	.word	0x3fe00000

08001ec4 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, GPIOMode_TypeDef GPIO_Mode, GPIOOType_TypeDef GPIO_OType, GPIOSpeed_TypeDef GPIO_Speed,  GPIOPuPd_TypeDef GPIO_PuPd)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	807b      	strh	r3, [r7, #2]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	707b      	strb	r3, [r7, #1]
 8001eda:	4613      	mov	r3, r2
 8001edc:	703b      	strb	r3, [r7, #0]
	switch((uint32_t)GPIOx){
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a36      	ldr	r2, [pc, #216]	; (8001fbc <GPIOPinsInit+0xf8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d038      	beq.n	8001f58 <GPIOPinsInit+0x94>
 8001ee6:	4a35      	ldr	r2, [pc, #212]	; (8001fbc <GPIOPinsInit+0xf8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d810      	bhi.n	8001f0e <GPIOPinsInit+0x4a>
 8001eec:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <GPIOPinsInit+0xfc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d023      	beq.n	8001f3a <GPIOPinsInit+0x76>
 8001ef2:	4a33      	ldr	r2, [pc, #204]	; (8001fc0 <GPIOPinsInit+0xfc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d803      	bhi.n	8001f00 <GPIOPinsInit+0x3c>
 8001ef8:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <GPIOPinsInit+0x100>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d018      	beq.n	8001f30 <GPIOPinsInit+0x6c>
	    					break;

		case GPIOI_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	    					break;

		default: break;
 8001efe:	e045      	b.n	8001f8c <GPIOPinsInit+0xc8>
	switch((uint32_t)GPIOx){
 8001f00:	4a31      	ldr	r2, [pc, #196]	; (8001fc8 <GPIOPinsInit+0x104>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01e      	beq.n	8001f44 <GPIOPinsInit+0x80>
 8001f06:	4a31      	ldr	r2, [pc, #196]	; (8001fcc <GPIOPinsInit+0x108>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d020      	beq.n	8001f4e <GPIOPinsInit+0x8a>
		default: break;
 8001f0c:	e03e      	b.n	8001f8c <GPIOPinsInit+0xc8>
	switch((uint32_t)GPIOx){
 8001f0e:	4a30      	ldr	r2, [pc, #192]	; (8001fd0 <GPIOPinsInit+0x10c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d02b      	beq.n	8001f6c <GPIOPinsInit+0xa8>
 8001f14:	4a2e      	ldr	r2, [pc, #184]	; (8001fd0 <GPIOPinsInit+0x10c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d803      	bhi.n	8001f22 <GPIOPinsInit+0x5e>
 8001f1a:	4a2e      	ldr	r2, [pc, #184]	; (8001fd4 <GPIOPinsInit+0x110>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d020      	beq.n	8001f62 <GPIOPinsInit+0x9e>
		default: break;
 8001f20:	e034      	b.n	8001f8c <GPIOPinsInit+0xc8>
	switch((uint32_t)GPIOx){
 8001f22:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <GPIOPinsInit+0x114>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d026      	beq.n	8001f76 <GPIOPinsInit+0xb2>
 8001f28:	4a2c      	ldr	r2, [pc, #176]	; (8001fdc <GPIOPinsInit+0x118>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d028      	beq.n	8001f80 <GPIOPinsInit+0xbc>
		default: break;
 8001f2e:	e02d      	b.n	8001f8c <GPIOPinsInit+0xc8>
	    case GPIOA_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001f30:	2101      	movs	r1, #1
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7ff f892 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f38:	e028      	b.n	8001f8c <GPIOPinsInit+0xc8>
		case GPIOB_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	f7ff f88d 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f42:	e023      	b.n	8001f8c <GPIOPinsInit+0xc8>
		case GPIOC_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001f44:	2101      	movs	r1, #1
 8001f46:	2004      	movs	r0, #4
 8001f48:	f7ff f888 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f4c:	e01e      	b.n	8001f8c <GPIOPinsInit+0xc8>
		case GPIOD_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2008      	movs	r0, #8
 8001f52:	f7ff f883 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f56:	e019      	b.n	8001f8c <GPIOPinsInit+0xc8>
		case GPIOE_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001f58:	2101      	movs	r1, #1
 8001f5a:	2010      	movs	r0, #16
 8001f5c:	f7ff f87e 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f60:	e014      	b.n	8001f8c <GPIOPinsInit+0xc8>
		case GPIOF_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001f62:	2101      	movs	r1, #1
 8001f64:	2020      	movs	r0, #32
 8001f66:	f7ff f879 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f6a:	e00f      	b.n	8001f8c <GPIOPinsInit+0xc8>
		case GPIOG_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2040      	movs	r0, #64	; 0x40
 8001f70:	f7ff f874 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f74:	e00a      	b.n	8001f8c <GPIOPinsInit+0xc8>
		case GPIOH_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001f76:	2101      	movs	r1, #1
 8001f78:	2080      	movs	r0, #128	; 0x80
 8001f7a:	f7ff f86f 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f7e:	e005      	b.n	8001f8c <GPIOPinsInit+0xc8>
		case GPIOI_BASE:	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001f80:	2101      	movs	r1, #1
 8001f82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f86:	f7ff f869 	bl	800105c <RCC_AHB1PeriphClockCmd>
	    					break;
 8001f8a:	bf00      	nop
	  }

		BIOS_GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <GPIOPinsInit+0x11c>)
 8001f90:	6013      	str	r3, [r2, #0]
		BIOS_GPIO_InitStructure.GPIO_Mode	= GPIO_Mode;
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <GPIOPinsInit+0x11c>)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	7113      	strb	r3, [r2, #4]
		BIOS_GPIO_InitStructure.GPIO_OType	= GPIO_OType;
 8001f98:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <GPIOPinsInit+0x11c>)
 8001f9a:	783b      	ldrb	r3, [r7, #0]
 8001f9c:	7193      	strb	r3, [r2, #6]
		BIOS_GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd;
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <GPIOPinsInit+0x11c>)
 8001fa0:	7d3b      	ldrb	r3, [r7, #20]
 8001fa2:	71d3      	strb	r3, [r2, #7]
		BIOS_GPIO_InitStructure.GPIO_Speed  = GPIO_Speed;
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <GPIOPinsInit+0x11c>)
 8001fa6:	7c3b      	ldrb	r3, [r7, #16]
 8001fa8:	7153      	strb	r3, [r2, #5]
		GPIO_Init(GPIOx,&BIOS_GPIO_InitStructure);
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <GPIOPinsInit+0x11c>)
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe febd 	bl	8000d2c <GPIO_Init>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	40021800 	.word	0x40021800
 8001fd4:	40021400 	.word	0x40021400
 8001fd8:	40021c00 	.word	0x40021c00
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	20000754 	.word	0x20000754

08001fe4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(TIM1, 20000, 84);
 */

void PWMTimeBaseInit(TIM_TypeDef* Timer, uint32_t Period, uint32_t Prescaler){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]

	TIM_TimeBaseInitTypeDef     	PWM_TIM_TimeBaseStructure;

	switch((uint32_t)Timer){
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a46      	ldr	r2, [pc, #280]	; (800210c <PWMTimeBaseInit+0x128>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d062      	beq.n	80020be <PWMTimeBaseInit+0xda>
 8001ff8:	4a44      	ldr	r2, [pc, #272]	; (800210c <PWMTimeBaseInit+0x128>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d813      	bhi.n	8002026 <PWMTimeBaseInit+0x42>
 8001ffe:	4a44      	ldr	r2, [pc, #272]	; (8002110 <PWMTimeBaseInit+0x12c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d036      	beq.n	8002072 <PWMTimeBaseInit+0x8e>
 8002004:	4a42      	ldr	r2, [pc, #264]	; (8002110 <PWMTimeBaseInit+0x12c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d806      	bhi.n	8002018 <PWMTimeBaseInit+0x34>
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200e:	d026      	beq.n	800205e <PWMTimeBaseInit+0x7a>
 8002010:	4a40      	ldr	r2, [pc, #256]	; (8002114 <PWMTimeBaseInit+0x130>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d028      	beq.n	8002068 <PWMTimeBaseInit+0x84>
							break;

			case TIM14_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
							break;

			default: break;
 8002016:	e05d      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
	switch((uint32_t)Timer){
 8002018:	4a3f      	ldr	r2, [pc, #252]	; (8002118 <PWMTimeBaseInit+0x134>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d02e      	beq.n	800207c <PWMTimeBaseInit+0x98>
 800201e:	4a3f      	ldr	r2, [pc, #252]	; (800211c <PWMTimeBaseInit+0x138>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d047      	beq.n	80020b4 <PWMTimeBaseInit+0xd0>
			default: break;
 8002024:	e056      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
	switch((uint32_t)Timer){
 8002026:	4a3e      	ldr	r2, [pc, #248]	; (8002120 <PWMTimeBaseInit+0x13c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d02c      	beq.n	8002086 <PWMTimeBaseInit+0xa2>
 800202c:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <PWMTimeBaseInit+0x13c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d806      	bhi.n	8002040 <PWMTimeBaseInit+0x5c>
 8002032:	4a3c      	ldr	r2, [pc, #240]	; (8002124 <PWMTimeBaseInit+0x140>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d047      	beq.n	80020c8 <PWMTimeBaseInit+0xe4>
 8002038:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <PWMTimeBaseInit+0x144>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00a      	beq.n	8002054 <PWMTimeBaseInit+0x70>
			default: break;
 800203e:	e049      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
	switch((uint32_t)Timer){
 8002040:	4a3a      	ldr	r2, [pc, #232]	; (800212c <PWMTimeBaseInit+0x148>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02a      	beq.n	800209c <PWMTimeBaseInit+0xb8>
 8002046:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <PWMTimeBaseInit+0x14c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d02d      	beq.n	80020a8 <PWMTimeBaseInit+0xc4>
 800204c:	4a39      	ldr	r2, [pc, #228]	; (8002134 <PWMTimeBaseInit+0x150>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01e      	beq.n	8002090 <PWMTimeBaseInit+0xac>
			default: break;
 8002052:	e03f      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM1_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002054:	2101      	movs	r1, #1
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff f840 	bl	80010dc <RCC_APB2PeriphClockCmd>
							break;
 800205c:	e03a      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM2_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800205e:	2101      	movs	r1, #1
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff f81b 	bl	800109c <RCC_APB1PeriphClockCmd>
							break;
 8002066:	e035      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM3_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002068:	2101      	movs	r1, #1
 800206a:	2002      	movs	r0, #2
 800206c:	f7ff f816 	bl	800109c <RCC_APB1PeriphClockCmd>
							break;
 8002070:	e030      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM4_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002072:	2101      	movs	r1, #1
 8002074:	2004      	movs	r0, #4
 8002076:	f7ff f811 	bl	800109c <RCC_APB1PeriphClockCmd>
							break;
 800207a:	e02b      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM5_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 800207c:	2101      	movs	r1, #1
 800207e:	2008      	movs	r0, #8
 8002080:	f7ff f80c 	bl	800109c <RCC_APB1PeriphClockCmd>
							break;
 8002084:	e026      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM8_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8002086:	2101      	movs	r1, #1
 8002088:	2002      	movs	r0, #2
 800208a:	f7ff f827 	bl	80010dc <RCC_APB2PeriphClockCmd>
							break;
 800208e:	e021      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM9_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002090:	2101      	movs	r1, #1
 8002092:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002096:	f7ff f821 	bl	80010dc <RCC_APB2PeriphClockCmd>
							break;
 800209a:	e01b      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM10_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 800209c:	2101      	movs	r1, #1
 800209e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020a2:	f7ff f81b 	bl	80010dc <RCC_APB2PeriphClockCmd>
							break;
 80020a6:	e015      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM11_BASE: RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM11, ENABLE);
 80020a8:	2101      	movs	r1, #1
 80020aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80020ae:	f7ff f815 	bl	80010dc <RCC_APB2PeriphClockCmd>
							break;
 80020b2:	e00f      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM12_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80020b4:	2101      	movs	r1, #1
 80020b6:	2040      	movs	r0, #64	; 0x40
 80020b8:	f7fe fff0 	bl	800109c <RCC_APB1PeriphClockCmd>
							break;
 80020bc:	e00a      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM13_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13, ENABLE);
 80020be:	2101      	movs	r1, #1
 80020c0:	2080      	movs	r0, #128	; 0x80
 80020c2:	f7fe ffeb 	bl	800109c <RCC_APB1PeriphClockCmd>
							break;
 80020c6:	e005      	b.n	80020d4 <PWMTimeBaseInit+0xf0>
			case TIM14_BASE: RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 80020c8:	2101      	movs	r1, #1
 80020ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020ce:	f7fe ffe5 	bl	800109c <RCC_APB1PeriphClockCmd>
							break;
 80020d2:	bf00      	nop

		}

	PWM_TIM_TimeBaseStructure.TIM_Period = Period-1;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
	PWM_TIM_TimeBaseStructure.TIM_Prescaler = Prescaler-1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	82bb      	strh	r3, [r7, #20]
	PWM_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80020e4:	2300      	movs	r3, #0
 80020e6:	82fb      	strh	r3, [r7, #22]
	PWM_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	83bb      	strh	r3, [r7, #28]
	PWM_TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	77bb      	strb	r3, [r7, #30]
	TIM_TimeBaseInit(Timer, &PWM_TIM_TimeBaseStructure);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f7ff f810 	bl	800111c <TIM_TimeBaseInit>
	TIM_Cmd(Timer, ENABLE);
 80020fc:	2101      	movs	r1, #1
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7ff f898 	bl	8001234 <TIM_Cmd>

}
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40001c00 	.word	0x40001c00
 8002110:	40000800 	.word	0x40000800
 8002114:	40000400 	.word	0x40000400
 8002118:	40000c00 	.word	0x40000c00
 800211c:	40001800 	.word	0x40001800
 8002120:	40010400 	.word	0x40010400
 8002124:	40002000 	.word	0x40002000
 8002128:	40010000 	.word	0x40010000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800
 8002134:	40014000 	.word	0x40014000

08002138 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(TIM1, PWM_CHANNEL_1, GPIOE, GPIO_Pin_9);
 */

void PWMChannelConfig(TIM_TypeDef* Timer, PWMChannel Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	; 0x30
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	461a      	mov	r2, r3
 8002144:	460b      	mov	r3, r1
 8002146:	72fb      	strb	r3, [r7, #11]
 8002148:	4613      	mov	r3, r2
 800214a:	813b      	strh	r3, [r7, #8]

	TIM_OCInitTypeDef		PWM_TIM_OCInitStructure;

	GPIOPinsInit(GPIOx, GPIO_Pin_x, GPIO_Mode_AF, GPIO_OType_PP, GPIO_Speed_100MHz, GPIO_PuPd_UP);
 800214c:	8939      	ldrh	r1, [r7, #8]
 800214e:	2301      	movs	r3, #1
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	2303      	movs	r3, #3
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2300      	movs	r3, #0
 8002158:	2202      	movs	r2, #2
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff feb2 	bl	8001ec4 <GPIOPinsInit>

	if(Timer == TIM1){
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4ab0      	ldr	r2, [pc, #704]	; (8002424 <PWMChannelConfig+0x2ec>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f040 80a0 	bne.w	80022aa <PWMChannelConfig+0x172>
		AFConfig(TIM1, GPIOx, GPIO_Pin_x);
 800216a:	893b      	ldrh	r3, [r7, #8]
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d05e      	beq.n	800222e <PWMChannelConfig+0xf6>
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d811      	bhi.n	8002198 <PWMChannelConfig+0x60>
 8002174:	2b08      	cmp	r3, #8
 8002176:	d042      	beq.n	80021fe <PWMChannelConfig+0xc6>
 8002178:	2b08      	cmp	r3, #8
 800217a:	d806      	bhi.n	800218a <PWMChannelConfig+0x52>
 800217c:	2b02      	cmp	r3, #2
 800217e:	d032      	beq.n	80021e6 <PWMChannelConfig+0xae>
 8002180:	2b04      	cmp	r3, #4
 8002182:	d036      	beq.n	80021f2 <PWMChannelConfig+0xba>
 8002184:	2b01      	cmp	r3, #1
 8002186:	d028      	beq.n	80021da <PWMChannelConfig+0xa2>
 8002188:	e086      	b.n	8002298 <PWMChannelConfig+0x160>
 800218a:	2b20      	cmp	r3, #32
 800218c:	d043      	beq.n	8002216 <PWMChannelConfig+0xde>
 800218e:	2b40      	cmp	r3, #64	; 0x40
 8002190:	d047      	beq.n	8002222 <PWMChannelConfig+0xea>
 8002192:	2b10      	cmp	r3, #16
 8002194:	d039      	beq.n	800220a <PWMChannelConfig+0xd2>
 8002196:	e07f      	b.n	8002298 <PWMChannelConfig+0x160>
 8002198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800219c:	d05f      	beq.n	800225e <PWMChannelConfig+0x126>
 800219e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a2:	d809      	bhi.n	80021b8 <PWMChannelConfig+0x80>
 80021a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a8:	d04d      	beq.n	8002246 <PWMChannelConfig+0x10e>
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d050      	beq.n	8002252 <PWMChannelConfig+0x11a>
 80021b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b4:	d041      	beq.n	800223a <PWMChannelConfig+0x102>
 80021b6:	e06f      	b.n	8002298 <PWMChannelConfig+0x160>
 80021b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021bc:	d05b      	beq.n	8002276 <PWMChannelConfig+0x13e>
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c2:	d803      	bhi.n	80021cc <PWMChannelConfig+0x94>
 80021c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c8:	d04f      	beq.n	800226a <PWMChannelConfig+0x132>
 80021ca:	e065      	b.n	8002298 <PWMChannelConfig+0x160>
 80021cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021d0:	d057      	beq.n	8002282 <PWMChannelConfig+0x14a>
 80021d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d6:	d05a      	beq.n	800228e <PWMChannelConfig+0x156>
 80021d8:	e05e      	b.n	8002298 <PWMChannelConfig+0x160>
 80021da:	2201      	movs	r2, #1
 80021dc:	2100      	movs	r1, #0
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fe4a 	bl	8000e78 <GPIO_PinAFConfig>
 80021e4:	e058      	b.n	8002298 <PWMChannelConfig+0x160>
 80021e6:	2201      	movs	r2, #1
 80021e8:	2101      	movs	r1, #1
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe fe44 	bl	8000e78 <GPIO_PinAFConfig>
 80021f0:	e052      	b.n	8002298 <PWMChannelConfig+0x160>
 80021f2:	2201      	movs	r2, #1
 80021f4:	2102      	movs	r1, #2
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fe3e 	bl	8000e78 <GPIO_PinAFConfig>
 80021fc:	e04c      	b.n	8002298 <PWMChannelConfig+0x160>
 80021fe:	2201      	movs	r2, #1
 8002200:	2103      	movs	r1, #3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fe38 	bl	8000e78 <GPIO_PinAFConfig>
 8002208:	e046      	b.n	8002298 <PWMChannelConfig+0x160>
 800220a:	2201      	movs	r2, #1
 800220c:	2104      	movs	r1, #4
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fe32 	bl	8000e78 <GPIO_PinAFConfig>
 8002214:	e040      	b.n	8002298 <PWMChannelConfig+0x160>
 8002216:	2201      	movs	r2, #1
 8002218:	2105      	movs	r1, #5
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe fe2c 	bl	8000e78 <GPIO_PinAFConfig>
 8002220:	e03a      	b.n	8002298 <PWMChannelConfig+0x160>
 8002222:	2201      	movs	r2, #1
 8002224:	2106      	movs	r1, #6
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fe26 	bl	8000e78 <GPIO_PinAFConfig>
 800222c:	e034      	b.n	8002298 <PWMChannelConfig+0x160>
 800222e:	2201      	movs	r2, #1
 8002230:	2107      	movs	r1, #7
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fe20 	bl	8000e78 <GPIO_PinAFConfig>
 8002238:	e02e      	b.n	8002298 <PWMChannelConfig+0x160>
 800223a:	2201      	movs	r2, #1
 800223c:	2108      	movs	r1, #8
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fe1a 	bl	8000e78 <GPIO_PinAFConfig>
 8002244:	e028      	b.n	8002298 <PWMChannelConfig+0x160>
 8002246:	2201      	movs	r2, #1
 8002248:	2109      	movs	r1, #9
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fe14 	bl	8000e78 <GPIO_PinAFConfig>
 8002250:	e022      	b.n	8002298 <PWMChannelConfig+0x160>
 8002252:	2201      	movs	r2, #1
 8002254:	210a      	movs	r1, #10
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fe0e 	bl	8000e78 <GPIO_PinAFConfig>
 800225c:	e01c      	b.n	8002298 <PWMChannelConfig+0x160>
 800225e:	2201      	movs	r2, #1
 8002260:	210b      	movs	r1, #11
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fe08 	bl	8000e78 <GPIO_PinAFConfig>
 8002268:	e016      	b.n	8002298 <PWMChannelConfig+0x160>
 800226a:	2201      	movs	r2, #1
 800226c:	210c      	movs	r1, #12
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fe02 	bl	8000e78 <GPIO_PinAFConfig>
 8002274:	e010      	b.n	8002298 <PWMChannelConfig+0x160>
 8002276:	2201      	movs	r2, #1
 8002278:	210d      	movs	r1, #13
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fdfc 	bl	8000e78 <GPIO_PinAFConfig>
 8002280:	e00a      	b.n	8002298 <PWMChannelConfig+0x160>
 8002282:	2201      	movs	r2, #1
 8002284:	210e      	movs	r1, #14
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fdf6 	bl	8000e78 <GPIO_PinAFConfig>
 800228c:	e004      	b.n	8002298 <PWMChannelConfig+0x160>
 800228e:	2201      	movs	r2, #1
 8002290:	210f      	movs	r1, #15
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fdf0 	bl	8000e78 <GPIO_PinAFConfig>
 8002298:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 800229a:	2370      	movs	r3, #112	; 0x70
 800229c:	82bb      	strh	r3, [r7, #20]
		TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800229e:	2101      	movs	r1, #1
 80022a0:	4860      	ldr	r0, [pc, #384]	; (8002424 <PWMChannelConfig+0x2ec>)
 80022a2:	f7ff fa4b 	bl	800173c <TIM_CtrlPWMOutputs>
 80022a6:	f000 bf00 	b.w	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM2){
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	f040 809c 	bne.w	80023ec <PWMChannelConfig+0x2b4>
		AFConfig(TIM2, GPIOx, GPIO_Pin_x);
 80022b4:	893b      	ldrh	r3, [r7, #8]
 80022b6:	2b80      	cmp	r3, #128	; 0x80
 80022b8:	d05e      	beq.n	8002378 <PWMChannelConfig+0x240>
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d811      	bhi.n	80022e2 <PWMChannelConfig+0x1aa>
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d042      	beq.n	8002348 <PWMChannelConfig+0x210>
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d806      	bhi.n	80022d4 <PWMChannelConfig+0x19c>
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d032      	beq.n	8002330 <PWMChannelConfig+0x1f8>
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d036      	beq.n	800233c <PWMChannelConfig+0x204>
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d028      	beq.n	8002324 <PWMChannelConfig+0x1ec>
 80022d2:	e086      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d043      	beq.n	8002360 <PWMChannelConfig+0x228>
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d047      	beq.n	800236c <PWMChannelConfig+0x234>
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d039      	beq.n	8002354 <PWMChannelConfig+0x21c>
 80022e0:	e07f      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 80022e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e6:	d05f      	beq.n	80023a8 <PWMChannelConfig+0x270>
 80022e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ec:	d809      	bhi.n	8002302 <PWMChannelConfig+0x1ca>
 80022ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f2:	d04d      	beq.n	8002390 <PWMChannelConfig+0x258>
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f8:	d050      	beq.n	800239c <PWMChannelConfig+0x264>
 80022fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fe:	d041      	beq.n	8002384 <PWMChannelConfig+0x24c>
 8002300:	e06f      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002306:	d05b      	beq.n	80023c0 <PWMChannelConfig+0x288>
 8002308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230c:	d803      	bhi.n	8002316 <PWMChannelConfig+0x1de>
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002312:	d04f      	beq.n	80023b4 <PWMChannelConfig+0x27c>
 8002314:	e065      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800231a:	d057      	beq.n	80023cc <PWMChannelConfig+0x294>
 800231c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002320:	d05a      	beq.n	80023d8 <PWMChannelConfig+0x2a0>
 8002322:	e05e      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002324:	2201      	movs	r2, #1
 8002326:	2100      	movs	r1, #0
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7fe fda5 	bl	8000e78 <GPIO_PinAFConfig>
 800232e:	e058      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002330:	2201      	movs	r2, #1
 8002332:	2101      	movs	r1, #1
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe fd9f 	bl	8000e78 <GPIO_PinAFConfig>
 800233a:	e052      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 800233c:	2201      	movs	r2, #1
 800233e:	2102      	movs	r1, #2
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe fd99 	bl	8000e78 <GPIO_PinAFConfig>
 8002346:	e04c      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002348:	2201      	movs	r2, #1
 800234a:	2103      	movs	r1, #3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe fd93 	bl	8000e78 <GPIO_PinAFConfig>
 8002352:	e046      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002354:	2201      	movs	r2, #1
 8002356:	2104      	movs	r1, #4
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7fe fd8d 	bl	8000e78 <GPIO_PinAFConfig>
 800235e:	e040      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002360:	2201      	movs	r2, #1
 8002362:	2105      	movs	r1, #5
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe fd87 	bl	8000e78 <GPIO_PinAFConfig>
 800236a:	e03a      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 800236c:	2201      	movs	r2, #1
 800236e:	2106      	movs	r1, #6
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe fd81 	bl	8000e78 <GPIO_PinAFConfig>
 8002376:	e034      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002378:	2201      	movs	r2, #1
 800237a:	2107      	movs	r1, #7
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fe fd7b 	bl	8000e78 <GPIO_PinAFConfig>
 8002382:	e02e      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002384:	2201      	movs	r2, #1
 8002386:	2108      	movs	r1, #8
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe fd75 	bl	8000e78 <GPIO_PinAFConfig>
 800238e:	e028      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 8002390:	2201      	movs	r2, #1
 8002392:	2109      	movs	r1, #9
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fe fd6f 	bl	8000e78 <GPIO_PinAFConfig>
 800239a:	e022      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 800239c:	2201      	movs	r2, #1
 800239e:	210a      	movs	r1, #10
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fe fd69 	bl	8000e78 <GPIO_PinAFConfig>
 80023a6:	e01c      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 80023a8:	2201      	movs	r2, #1
 80023aa:	210b      	movs	r1, #11
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7fe fd63 	bl	8000e78 <GPIO_PinAFConfig>
 80023b2:	e016      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 80023b4:	2201      	movs	r2, #1
 80023b6:	210c      	movs	r1, #12
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fe fd5d 	bl	8000e78 <GPIO_PinAFConfig>
 80023be:	e010      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 80023c0:	2201      	movs	r2, #1
 80023c2:	210d      	movs	r1, #13
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fe fd57 	bl	8000e78 <GPIO_PinAFConfig>
 80023ca:	e00a      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 80023cc:	2201      	movs	r2, #1
 80023ce:	210e      	movs	r1, #14
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7fe fd51 	bl	8000e78 <GPIO_PinAFConfig>
 80023d6:	e004      	b.n	80023e2 <PWMChannelConfig+0x2aa>
 80023d8:	2201      	movs	r2, #1
 80023da:	210f      	movs	r1, #15
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe fd4b 	bl	8000e78 <GPIO_PinAFConfig>
 80023e2:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 80023e4:	2370      	movs	r3, #112	; 0x70
 80023e6:	82bb      	strh	r3, [r7, #20]
 80023e8:	f000 be5f 	b.w	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM3){
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <PWMChannelConfig+0x2f0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	f040 80a0 	bne.w	8002536 <PWMChannelConfig+0x3fe>
		AFConfig(TIM3, GPIOx, GPIO_Pin_x);
 80023f6:	893b      	ldrh	r3, [r7, #8]
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d062      	beq.n	80024c2 <PWMChannelConfig+0x38a>
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d815      	bhi.n	800242c <PWMChannelConfig+0x2f4>
 8002400:	2b08      	cmp	r3, #8
 8002402:	d046      	beq.n	8002492 <PWMChannelConfig+0x35a>
 8002404:	2b08      	cmp	r3, #8
 8002406:	d806      	bhi.n	8002416 <PWMChannelConfig+0x2de>
 8002408:	2b02      	cmp	r3, #2
 800240a:	d036      	beq.n	800247a <PWMChannelConfig+0x342>
 800240c:	2b04      	cmp	r3, #4
 800240e:	d03a      	beq.n	8002486 <PWMChannelConfig+0x34e>
 8002410:	2b01      	cmp	r3, #1
 8002412:	d02c      	beq.n	800246e <PWMChannelConfig+0x336>
 8002414:	e08a      	b.n	800252c <PWMChannelConfig+0x3f4>
 8002416:	2b20      	cmp	r3, #32
 8002418:	d047      	beq.n	80024aa <PWMChannelConfig+0x372>
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d04b      	beq.n	80024b6 <PWMChannelConfig+0x37e>
 800241e:	2b10      	cmp	r3, #16
 8002420:	d03d      	beq.n	800249e <PWMChannelConfig+0x366>
 8002422:	e083      	b.n	800252c <PWMChannelConfig+0x3f4>
 8002424:	40010000 	.word	0x40010000
 8002428:	40000400 	.word	0x40000400
 800242c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002430:	d05f      	beq.n	80024f2 <PWMChannelConfig+0x3ba>
 8002432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002436:	d809      	bhi.n	800244c <PWMChannelConfig+0x314>
 8002438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800243c:	d04d      	beq.n	80024da <PWMChannelConfig+0x3a2>
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d050      	beq.n	80024e6 <PWMChannelConfig+0x3ae>
 8002444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002448:	d041      	beq.n	80024ce <PWMChannelConfig+0x396>
 800244a:	e06f      	b.n	800252c <PWMChannelConfig+0x3f4>
 800244c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002450:	d05b      	beq.n	800250a <PWMChannelConfig+0x3d2>
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002456:	d803      	bhi.n	8002460 <PWMChannelConfig+0x328>
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245c:	d04f      	beq.n	80024fe <PWMChannelConfig+0x3c6>
 800245e:	e065      	b.n	800252c <PWMChannelConfig+0x3f4>
 8002460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002464:	d057      	beq.n	8002516 <PWMChannelConfig+0x3de>
 8002466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246a:	d05a      	beq.n	8002522 <PWMChannelConfig+0x3ea>
 800246c:	e05e      	b.n	800252c <PWMChannelConfig+0x3f4>
 800246e:	2202      	movs	r2, #2
 8002470:	2100      	movs	r1, #0
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fd00 	bl	8000e78 <GPIO_PinAFConfig>
 8002478:	e058      	b.n	800252c <PWMChannelConfig+0x3f4>
 800247a:	2202      	movs	r2, #2
 800247c:	2101      	movs	r1, #1
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fcfa 	bl	8000e78 <GPIO_PinAFConfig>
 8002484:	e052      	b.n	800252c <PWMChannelConfig+0x3f4>
 8002486:	2202      	movs	r2, #2
 8002488:	2102      	movs	r1, #2
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fcf4 	bl	8000e78 <GPIO_PinAFConfig>
 8002490:	e04c      	b.n	800252c <PWMChannelConfig+0x3f4>
 8002492:	2202      	movs	r2, #2
 8002494:	2103      	movs	r1, #3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fcee 	bl	8000e78 <GPIO_PinAFConfig>
 800249c:	e046      	b.n	800252c <PWMChannelConfig+0x3f4>
 800249e:	2202      	movs	r2, #2
 80024a0:	2104      	movs	r1, #4
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fce8 	bl	8000e78 <GPIO_PinAFConfig>
 80024a8:	e040      	b.n	800252c <PWMChannelConfig+0x3f4>
 80024aa:	2202      	movs	r2, #2
 80024ac:	2105      	movs	r1, #5
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fce2 	bl	8000e78 <GPIO_PinAFConfig>
 80024b4:	e03a      	b.n	800252c <PWMChannelConfig+0x3f4>
 80024b6:	2202      	movs	r2, #2
 80024b8:	2106      	movs	r1, #6
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fcdc 	bl	8000e78 <GPIO_PinAFConfig>
 80024c0:	e034      	b.n	800252c <PWMChannelConfig+0x3f4>
 80024c2:	2202      	movs	r2, #2
 80024c4:	2107      	movs	r1, #7
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe fcd6 	bl	8000e78 <GPIO_PinAFConfig>
 80024cc:	e02e      	b.n	800252c <PWMChannelConfig+0x3f4>
 80024ce:	2202      	movs	r2, #2
 80024d0:	2108      	movs	r1, #8
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fcd0 	bl	8000e78 <GPIO_PinAFConfig>
 80024d8:	e028      	b.n	800252c <PWMChannelConfig+0x3f4>
 80024da:	2202      	movs	r2, #2
 80024dc:	2109      	movs	r1, #9
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fcca 	bl	8000e78 <GPIO_PinAFConfig>
 80024e4:	e022      	b.n	800252c <PWMChannelConfig+0x3f4>
 80024e6:	2202      	movs	r2, #2
 80024e8:	210a      	movs	r1, #10
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fcc4 	bl	8000e78 <GPIO_PinAFConfig>
 80024f0:	e01c      	b.n	800252c <PWMChannelConfig+0x3f4>
 80024f2:	2202      	movs	r2, #2
 80024f4:	210b      	movs	r1, #11
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fcbe 	bl	8000e78 <GPIO_PinAFConfig>
 80024fc:	e016      	b.n	800252c <PWMChannelConfig+0x3f4>
 80024fe:	2202      	movs	r2, #2
 8002500:	210c      	movs	r1, #12
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe fcb8 	bl	8000e78 <GPIO_PinAFConfig>
 8002508:	e010      	b.n	800252c <PWMChannelConfig+0x3f4>
 800250a:	2202      	movs	r2, #2
 800250c:	210d      	movs	r1, #13
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fcb2 	bl	8000e78 <GPIO_PinAFConfig>
 8002514:	e00a      	b.n	800252c <PWMChannelConfig+0x3f4>
 8002516:	2202      	movs	r2, #2
 8002518:	210e      	movs	r1, #14
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fcac 	bl	8000e78 <GPIO_PinAFConfig>
 8002520:	e004      	b.n	800252c <PWMChannelConfig+0x3f4>
 8002522:	2202      	movs	r2, #2
 8002524:	210f      	movs	r1, #15
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fca6 	bl	8000e78 <GPIO_PinAFConfig>
 800252c:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 800252e:	2370      	movs	r3, #112	; 0x70
 8002530:	82bb      	strh	r3, [r7, #20]
 8002532:	f000 bdba 	b.w	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM4){
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4ab6      	ldr	r2, [pc, #728]	; (8002814 <PWMChannelConfig+0x6dc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	f040 809c 	bne.w	8002678 <PWMChannelConfig+0x540>
		AFConfig(TIM4, GPIOx, GPIO_Pin_x);
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	2b80      	cmp	r3, #128	; 0x80
 8002544:	d05e      	beq.n	8002604 <PWMChannelConfig+0x4cc>
 8002546:	2b80      	cmp	r3, #128	; 0x80
 8002548:	d811      	bhi.n	800256e <PWMChannelConfig+0x436>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d042      	beq.n	80025d4 <PWMChannelConfig+0x49c>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d806      	bhi.n	8002560 <PWMChannelConfig+0x428>
 8002552:	2b02      	cmp	r3, #2
 8002554:	d032      	beq.n	80025bc <PWMChannelConfig+0x484>
 8002556:	2b04      	cmp	r3, #4
 8002558:	d036      	beq.n	80025c8 <PWMChannelConfig+0x490>
 800255a:	2b01      	cmp	r3, #1
 800255c:	d028      	beq.n	80025b0 <PWMChannelConfig+0x478>
 800255e:	e086      	b.n	800266e <PWMChannelConfig+0x536>
 8002560:	2b20      	cmp	r3, #32
 8002562:	d043      	beq.n	80025ec <PWMChannelConfig+0x4b4>
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d047      	beq.n	80025f8 <PWMChannelConfig+0x4c0>
 8002568:	2b10      	cmp	r3, #16
 800256a:	d039      	beq.n	80025e0 <PWMChannelConfig+0x4a8>
 800256c:	e07f      	b.n	800266e <PWMChannelConfig+0x536>
 800256e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002572:	d05f      	beq.n	8002634 <PWMChannelConfig+0x4fc>
 8002574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002578:	d809      	bhi.n	800258e <PWMChannelConfig+0x456>
 800257a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257e:	d04d      	beq.n	800261c <PWMChannelConfig+0x4e4>
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002584:	d050      	beq.n	8002628 <PWMChannelConfig+0x4f0>
 8002586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258a:	d041      	beq.n	8002610 <PWMChannelConfig+0x4d8>
 800258c:	e06f      	b.n	800266e <PWMChannelConfig+0x536>
 800258e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002592:	d05b      	beq.n	800264c <PWMChannelConfig+0x514>
 8002594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002598:	d803      	bhi.n	80025a2 <PWMChannelConfig+0x46a>
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259e:	d04f      	beq.n	8002640 <PWMChannelConfig+0x508>
 80025a0:	e065      	b.n	800266e <PWMChannelConfig+0x536>
 80025a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a6:	d057      	beq.n	8002658 <PWMChannelConfig+0x520>
 80025a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ac:	d05a      	beq.n	8002664 <PWMChannelConfig+0x52c>
 80025ae:	e05e      	b.n	800266e <PWMChannelConfig+0x536>
 80025b0:	2202      	movs	r2, #2
 80025b2:	2100      	movs	r1, #0
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fe fc5f 	bl	8000e78 <GPIO_PinAFConfig>
 80025ba:	e058      	b.n	800266e <PWMChannelConfig+0x536>
 80025bc:	2202      	movs	r2, #2
 80025be:	2101      	movs	r1, #1
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fe fc59 	bl	8000e78 <GPIO_PinAFConfig>
 80025c6:	e052      	b.n	800266e <PWMChannelConfig+0x536>
 80025c8:	2202      	movs	r2, #2
 80025ca:	2102      	movs	r1, #2
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7fe fc53 	bl	8000e78 <GPIO_PinAFConfig>
 80025d2:	e04c      	b.n	800266e <PWMChannelConfig+0x536>
 80025d4:	2202      	movs	r2, #2
 80025d6:	2103      	movs	r1, #3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe fc4d 	bl	8000e78 <GPIO_PinAFConfig>
 80025de:	e046      	b.n	800266e <PWMChannelConfig+0x536>
 80025e0:	2202      	movs	r2, #2
 80025e2:	2104      	movs	r1, #4
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe fc47 	bl	8000e78 <GPIO_PinAFConfig>
 80025ea:	e040      	b.n	800266e <PWMChannelConfig+0x536>
 80025ec:	2202      	movs	r2, #2
 80025ee:	2105      	movs	r1, #5
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fe fc41 	bl	8000e78 <GPIO_PinAFConfig>
 80025f6:	e03a      	b.n	800266e <PWMChannelConfig+0x536>
 80025f8:	2202      	movs	r2, #2
 80025fa:	2106      	movs	r1, #6
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe fc3b 	bl	8000e78 <GPIO_PinAFConfig>
 8002602:	e034      	b.n	800266e <PWMChannelConfig+0x536>
 8002604:	2202      	movs	r2, #2
 8002606:	2107      	movs	r1, #7
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fe fc35 	bl	8000e78 <GPIO_PinAFConfig>
 800260e:	e02e      	b.n	800266e <PWMChannelConfig+0x536>
 8002610:	2202      	movs	r2, #2
 8002612:	2108      	movs	r1, #8
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fe fc2f 	bl	8000e78 <GPIO_PinAFConfig>
 800261a:	e028      	b.n	800266e <PWMChannelConfig+0x536>
 800261c:	2202      	movs	r2, #2
 800261e:	2109      	movs	r1, #9
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe fc29 	bl	8000e78 <GPIO_PinAFConfig>
 8002626:	e022      	b.n	800266e <PWMChannelConfig+0x536>
 8002628:	2202      	movs	r2, #2
 800262a:	210a      	movs	r1, #10
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7fe fc23 	bl	8000e78 <GPIO_PinAFConfig>
 8002632:	e01c      	b.n	800266e <PWMChannelConfig+0x536>
 8002634:	2202      	movs	r2, #2
 8002636:	210b      	movs	r1, #11
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7fe fc1d 	bl	8000e78 <GPIO_PinAFConfig>
 800263e:	e016      	b.n	800266e <PWMChannelConfig+0x536>
 8002640:	2202      	movs	r2, #2
 8002642:	210c      	movs	r1, #12
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7fe fc17 	bl	8000e78 <GPIO_PinAFConfig>
 800264a:	e010      	b.n	800266e <PWMChannelConfig+0x536>
 800264c:	2202      	movs	r2, #2
 800264e:	210d      	movs	r1, #13
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe fc11 	bl	8000e78 <GPIO_PinAFConfig>
 8002656:	e00a      	b.n	800266e <PWMChannelConfig+0x536>
 8002658:	2202      	movs	r2, #2
 800265a:	210e      	movs	r1, #14
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fe fc0b 	bl	8000e78 <GPIO_PinAFConfig>
 8002662:	e004      	b.n	800266e <PWMChannelConfig+0x536>
 8002664:	2202      	movs	r2, #2
 8002666:	210f      	movs	r1, #15
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fe fc05 	bl	8000e78 <GPIO_PinAFConfig>
 800266e:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002670:	2370      	movs	r3, #112	; 0x70
 8002672:	82bb      	strh	r3, [r7, #20]
 8002674:	f000 bd19 	b.w	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM5){
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a67      	ldr	r2, [pc, #412]	; (8002818 <PWMChannelConfig+0x6e0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	f040 809c 	bne.w	80027ba <PWMChannelConfig+0x682>
		AFConfig(TIM5, GPIOx, GPIO_Pin_x);
 8002682:	893b      	ldrh	r3, [r7, #8]
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d05e      	beq.n	8002746 <PWMChannelConfig+0x60e>
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d811      	bhi.n	80026b0 <PWMChannelConfig+0x578>
 800268c:	2b08      	cmp	r3, #8
 800268e:	d042      	beq.n	8002716 <PWMChannelConfig+0x5de>
 8002690:	2b08      	cmp	r3, #8
 8002692:	d806      	bhi.n	80026a2 <PWMChannelConfig+0x56a>
 8002694:	2b02      	cmp	r3, #2
 8002696:	d032      	beq.n	80026fe <PWMChannelConfig+0x5c6>
 8002698:	2b04      	cmp	r3, #4
 800269a:	d036      	beq.n	800270a <PWMChannelConfig+0x5d2>
 800269c:	2b01      	cmp	r3, #1
 800269e:	d028      	beq.n	80026f2 <PWMChannelConfig+0x5ba>
 80026a0:	e086      	b.n	80027b0 <PWMChannelConfig+0x678>
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d043      	beq.n	800272e <PWMChannelConfig+0x5f6>
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d047      	beq.n	800273a <PWMChannelConfig+0x602>
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d039      	beq.n	8002722 <PWMChannelConfig+0x5ea>
 80026ae:	e07f      	b.n	80027b0 <PWMChannelConfig+0x678>
 80026b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b4:	d05f      	beq.n	8002776 <PWMChannelConfig+0x63e>
 80026b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ba:	d809      	bhi.n	80026d0 <PWMChannelConfig+0x598>
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c0:	d04d      	beq.n	800275e <PWMChannelConfig+0x626>
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c6:	d050      	beq.n	800276a <PWMChannelConfig+0x632>
 80026c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026cc:	d041      	beq.n	8002752 <PWMChannelConfig+0x61a>
 80026ce:	e06f      	b.n	80027b0 <PWMChannelConfig+0x678>
 80026d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d4:	d05b      	beq.n	800278e <PWMChannelConfig+0x656>
 80026d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026da:	d803      	bhi.n	80026e4 <PWMChannelConfig+0x5ac>
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e0:	d04f      	beq.n	8002782 <PWMChannelConfig+0x64a>
 80026e2:	e065      	b.n	80027b0 <PWMChannelConfig+0x678>
 80026e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e8:	d057      	beq.n	800279a <PWMChannelConfig+0x662>
 80026ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ee:	d05a      	beq.n	80027a6 <PWMChannelConfig+0x66e>
 80026f0:	e05e      	b.n	80027b0 <PWMChannelConfig+0x678>
 80026f2:	2202      	movs	r2, #2
 80026f4:	2100      	movs	r1, #0
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fbbe 	bl	8000e78 <GPIO_PinAFConfig>
 80026fc:	e058      	b.n	80027b0 <PWMChannelConfig+0x678>
 80026fe:	2202      	movs	r2, #2
 8002700:	2101      	movs	r1, #1
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fbb8 	bl	8000e78 <GPIO_PinAFConfig>
 8002708:	e052      	b.n	80027b0 <PWMChannelConfig+0x678>
 800270a:	2202      	movs	r2, #2
 800270c:	2102      	movs	r1, #2
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe fbb2 	bl	8000e78 <GPIO_PinAFConfig>
 8002714:	e04c      	b.n	80027b0 <PWMChannelConfig+0x678>
 8002716:	2202      	movs	r2, #2
 8002718:	2103      	movs	r1, #3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fbac 	bl	8000e78 <GPIO_PinAFConfig>
 8002720:	e046      	b.n	80027b0 <PWMChannelConfig+0x678>
 8002722:	2202      	movs	r2, #2
 8002724:	2104      	movs	r1, #4
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fba6 	bl	8000e78 <GPIO_PinAFConfig>
 800272c:	e040      	b.n	80027b0 <PWMChannelConfig+0x678>
 800272e:	2202      	movs	r2, #2
 8002730:	2105      	movs	r1, #5
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe fba0 	bl	8000e78 <GPIO_PinAFConfig>
 8002738:	e03a      	b.n	80027b0 <PWMChannelConfig+0x678>
 800273a:	2202      	movs	r2, #2
 800273c:	2106      	movs	r1, #6
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fb9a 	bl	8000e78 <GPIO_PinAFConfig>
 8002744:	e034      	b.n	80027b0 <PWMChannelConfig+0x678>
 8002746:	2202      	movs	r2, #2
 8002748:	2107      	movs	r1, #7
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fb94 	bl	8000e78 <GPIO_PinAFConfig>
 8002750:	e02e      	b.n	80027b0 <PWMChannelConfig+0x678>
 8002752:	2202      	movs	r2, #2
 8002754:	2108      	movs	r1, #8
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fb8e 	bl	8000e78 <GPIO_PinAFConfig>
 800275c:	e028      	b.n	80027b0 <PWMChannelConfig+0x678>
 800275e:	2202      	movs	r2, #2
 8002760:	2109      	movs	r1, #9
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fb88 	bl	8000e78 <GPIO_PinAFConfig>
 8002768:	e022      	b.n	80027b0 <PWMChannelConfig+0x678>
 800276a:	2202      	movs	r2, #2
 800276c:	210a      	movs	r1, #10
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fb82 	bl	8000e78 <GPIO_PinAFConfig>
 8002774:	e01c      	b.n	80027b0 <PWMChannelConfig+0x678>
 8002776:	2202      	movs	r2, #2
 8002778:	210b      	movs	r1, #11
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fb7c 	bl	8000e78 <GPIO_PinAFConfig>
 8002780:	e016      	b.n	80027b0 <PWMChannelConfig+0x678>
 8002782:	2202      	movs	r2, #2
 8002784:	210c      	movs	r1, #12
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fb76 	bl	8000e78 <GPIO_PinAFConfig>
 800278c:	e010      	b.n	80027b0 <PWMChannelConfig+0x678>
 800278e:	2202      	movs	r2, #2
 8002790:	210d      	movs	r1, #13
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fb70 	bl	8000e78 <GPIO_PinAFConfig>
 8002798:	e00a      	b.n	80027b0 <PWMChannelConfig+0x678>
 800279a:	2202      	movs	r2, #2
 800279c:	210e      	movs	r1, #14
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fb6a 	bl	8000e78 <GPIO_PinAFConfig>
 80027a4:	e004      	b.n	80027b0 <PWMChannelConfig+0x678>
 80027a6:	2202      	movs	r2, #2
 80027a8:	210f      	movs	r1, #15
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe fb64 	bl	8000e78 <GPIO_PinAFConfig>
 80027b0:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 80027b2:	2370      	movs	r3, #112	; 0x70
 80027b4:	82bb      	strh	r3, [r7, #20]
 80027b6:	f000 bc78 	b.w	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM8){
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a17      	ldr	r2, [pc, #92]	; (800281c <PWMChannelConfig+0x6e4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f040 80a6 	bne.w	8002910 <PWMChannelConfig+0x7d8>
		AFConfig(TIM8, GPIOx, GPIO_Pin_x);
 80027c4:	893b      	ldrh	r3, [r7, #8]
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d065      	beq.n	8002896 <PWMChannelConfig+0x75e>
 80027ca:	2b80      	cmp	r3, #128	; 0x80
 80027cc:	d811      	bhi.n	80027f2 <PWMChannelConfig+0x6ba>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d049      	beq.n	8002866 <PWMChannelConfig+0x72e>
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d806      	bhi.n	80027e4 <PWMChannelConfig+0x6ac>
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d039      	beq.n	800284e <PWMChannelConfig+0x716>
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d03d      	beq.n	800285a <PWMChannelConfig+0x722>
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d02f      	beq.n	8002842 <PWMChannelConfig+0x70a>
 80027e2:	e08d      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d04a      	beq.n	800287e <PWMChannelConfig+0x746>
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d04e      	beq.n	800288a <PWMChannelConfig+0x752>
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d040      	beq.n	8002872 <PWMChannelConfig+0x73a>
 80027f0:	e086      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80027f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f6:	d066      	beq.n	80028c6 <PWMChannelConfig+0x78e>
 80027f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027fc:	d810      	bhi.n	8002820 <PWMChannelConfig+0x6e8>
 80027fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002802:	d054      	beq.n	80028ae <PWMChannelConfig+0x776>
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	d057      	beq.n	80028ba <PWMChannelConfig+0x782>
 800280a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280e:	d048      	beq.n	80028a2 <PWMChannelConfig+0x76a>
 8002810:	e076      	b.n	8002900 <PWMChannelConfig+0x7c8>
 8002812:	bf00      	nop
 8002814:	40000800 	.word	0x40000800
 8002818:	40000c00 	.word	0x40000c00
 800281c:	40010400 	.word	0x40010400
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d05b      	beq.n	80028de <PWMChannelConfig+0x7a6>
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282a:	d803      	bhi.n	8002834 <PWMChannelConfig+0x6fc>
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002830:	d04f      	beq.n	80028d2 <PWMChannelConfig+0x79a>
 8002832:	e065      	b.n	8002900 <PWMChannelConfig+0x7c8>
 8002834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002838:	d057      	beq.n	80028ea <PWMChannelConfig+0x7b2>
 800283a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283e:	d05a      	beq.n	80028f6 <PWMChannelConfig+0x7be>
 8002840:	e05e      	b.n	8002900 <PWMChannelConfig+0x7c8>
 8002842:	2203      	movs	r2, #3
 8002844:	2100      	movs	r1, #0
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe fb16 	bl	8000e78 <GPIO_PinAFConfig>
 800284c:	e058      	b.n	8002900 <PWMChannelConfig+0x7c8>
 800284e:	2203      	movs	r2, #3
 8002850:	2101      	movs	r1, #1
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fb10 	bl	8000e78 <GPIO_PinAFConfig>
 8002858:	e052      	b.n	8002900 <PWMChannelConfig+0x7c8>
 800285a:	2203      	movs	r2, #3
 800285c:	2102      	movs	r1, #2
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe fb0a 	bl	8000e78 <GPIO_PinAFConfig>
 8002864:	e04c      	b.n	8002900 <PWMChannelConfig+0x7c8>
 8002866:	2203      	movs	r2, #3
 8002868:	2103      	movs	r1, #3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fb04 	bl	8000e78 <GPIO_PinAFConfig>
 8002870:	e046      	b.n	8002900 <PWMChannelConfig+0x7c8>
 8002872:	2203      	movs	r2, #3
 8002874:	2104      	movs	r1, #4
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fafe 	bl	8000e78 <GPIO_PinAFConfig>
 800287c:	e040      	b.n	8002900 <PWMChannelConfig+0x7c8>
 800287e:	2203      	movs	r2, #3
 8002880:	2105      	movs	r1, #5
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe faf8 	bl	8000e78 <GPIO_PinAFConfig>
 8002888:	e03a      	b.n	8002900 <PWMChannelConfig+0x7c8>
 800288a:	2203      	movs	r2, #3
 800288c:	2106      	movs	r1, #6
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe faf2 	bl	8000e78 <GPIO_PinAFConfig>
 8002894:	e034      	b.n	8002900 <PWMChannelConfig+0x7c8>
 8002896:	2203      	movs	r2, #3
 8002898:	2107      	movs	r1, #7
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe faec 	bl	8000e78 <GPIO_PinAFConfig>
 80028a0:	e02e      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80028a2:	2203      	movs	r2, #3
 80028a4:	2108      	movs	r1, #8
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fae6 	bl	8000e78 <GPIO_PinAFConfig>
 80028ac:	e028      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80028ae:	2203      	movs	r2, #3
 80028b0:	2109      	movs	r1, #9
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fae0 	bl	8000e78 <GPIO_PinAFConfig>
 80028b8:	e022      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80028ba:	2203      	movs	r2, #3
 80028bc:	210a      	movs	r1, #10
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fada 	bl	8000e78 <GPIO_PinAFConfig>
 80028c4:	e01c      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80028c6:	2203      	movs	r2, #3
 80028c8:	210b      	movs	r1, #11
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fad4 	bl	8000e78 <GPIO_PinAFConfig>
 80028d0:	e016      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80028d2:	2203      	movs	r2, #3
 80028d4:	210c      	movs	r1, #12
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe face 	bl	8000e78 <GPIO_PinAFConfig>
 80028dc:	e010      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80028de:	2203      	movs	r2, #3
 80028e0:	210d      	movs	r1, #13
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fac8 	bl	8000e78 <GPIO_PinAFConfig>
 80028e8:	e00a      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80028ea:	2203      	movs	r2, #3
 80028ec:	210e      	movs	r1, #14
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fac2 	bl	8000e78 <GPIO_PinAFConfig>
 80028f4:	e004      	b.n	8002900 <PWMChannelConfig+0x7c8>
 80028f6:	2203      	movs	r2, #3
 80028f8:	210f      	movs	r1, #15
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fabc 	bl	8000e78 <GPIO_PinAFConfig>
 8002900:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002902:	2370      	movs	r3, #112	; 0x70
 8002904:	82bb      	strh	r3, [r7, #20]
		TIM_CtrlPWMOutputs(TIM8, ENABLE);
 8002906:	2101      	movs	r1, #1
 8002908:	48af      	ldr	r0, [pc, #700]	; (8002bc8 <PWMChannelConfig+0xa90>)
 800290a:	f7fe ff17 	bl	800173c <TIM_CtrlPWMOutputs>
 800290e:	e3cc      	b.n	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM9){
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4aae      	ldr	r2, [pc, #696]	; (8002bcc <PWMChannelConfig+0xa94>)
 8002914:	4293      	cmp	r3, r2
 8002916:	f040 809b 	bne.w	8002a50 <PWMChannelConfig+0x918>
		AFConfig(TIM9, GPIOx, GPIO_Pin_x);
 800291a:	893b      	ldrh	r3, [r7, #8]
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d05e      	beq.n	80029de <PWMChannelConfig+0x8a6>
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d811      	bhi.n	8002948 <PWMChannelConfig+0x810>
 8002924:	2b08      	cmp	r3, #8
 8002926:	d042      	beq.n	80029ae <PWMChannelConfig+0x876>
 8002928:	2b08      	cmp	r3, #8
 800292a:	d806      	bhi.n	800293a <PWMChannelConfig+0x802>
 800292c:	2b02      	cmp	r3, #2
 800292e:	d032      	beq.n	8002996 <PWMChannelConfig+0x85e>
 8002930:	2b04      	cmp	r3, #4
 8002932:	d036      	beq.n	80029a2 <PWMChannelConfig+0x86a>
 8002934:	2b01      	cmp	r3, #1
 8002936:	d028      	beq.n	800298a <PWMChannelConfig+0x852>
 8002938:	e086      	b.n	8002a48 <PWMChannelConfig+0x910>
 800293a:	2b20      	cmp	r3, #32
 800293c:	d043      	beq.n	80029c6 <PWMChannelConfig+0x88e>
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	d047      	beq.n	80029d2 <PWMChannelConfig+0x89a>
 8002942:	2b10      	cmp	r3, #16
 8002944:	d039      	beq.n	80029ba <PWMChannelConfig+0x882>
 8002946:	e07f      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294c:	d05f      	beq.n	8002a0e <PWMChannelConfig+0x8d6>
 800294e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002952:	d809      	bhi.n	8002968 <PWMChannelConfig+0x830>
 8002954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002958:	d04d      	beq.n	80029f6 <PWMChannelConfig+0x8be>
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295e:	d050      	beq.n	8002a02 <PWMChannelConfig+0x8ca>
 8002960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002964:	d041      	beq.n	80029ea <PWMChannelConfig+0x8b2>
 8002966:	e06f      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296c:	d05b      	beq.n	8002a26 <PWMChannelConfig+0x8ee>
 800296e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002972:	d803      	bhi.n	800297c <PWMChannelConfig+0x844>
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002978:	d04f      	beq.n	8002a1a <PWMChannelConfig+0x8e2>
 800297a:	e065      	b.n	8002a48 <PWMChannelConfig+0x910>
 800297c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002980:	d057      	beq.n	8002a32 <PWMChannelConfig+0x8fa>
 8002982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002986:	d05a      	beq.n	8002a3e <PWMChannelConfig+0x906>
 8002988:	e05e      	b.n	8002a48 <PWMChannelConfig+0x910>
 800298a:	2203      	movs	r2, #3
 800298c:	2100      	movs	r1, #0
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fa72 	bl	8000e78 <GPIO_PinAFConfig>
 8002994:	e058      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002996:	2203      	movs	r2, #3
 8002998:	2101      	movs	r1, #1
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fa6c 	bl	8000e78 <GPIO_PinAFConfig>
 80029a0:	e052      	b.n	8002a48 <PWMChannelConfig+0x910>
 80029a2:	2203      	movs	r2, #3
 80029a4:	2102      	movs	r1, #2
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fa66 	bl	8000e78 <GPIO_PinAFConfig>
 80029ac:	e04c      	b.n	8002a48 <PWMChannelConfig+0x910>
 80029ae:	2203      	movs	r2, #3
 80029b0:	2103      	movs	r1, #3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fa60 	bl	8000e78 <GPIO_PinAFConfig>
 80029b8:	e046      	b.n	8002a48 <PWMChannelConfig+0x910>
 80029ba:	2203      	movs	r2, #3
 80029bc:	2104      	movs	r1, #4
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe fa5a 	bl	8000e78 <GPIO_PinAFConfig>
 80029c4:	e040      	b.n	8002a48 <PWMChannelConfig+0x910>
 80029c6:	2203      	movs	r2, #3
 80029c8:	2105      	movs	r1, #5
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe fa54 	bl	8000e78 <GPIO_PinAFConfig>
 80029d0:	e03a      	b.n	8002a48 <PWMChannelConfig+0x910>
 80029d2:	2203      	movs	r2, #3
 80029d4:	2106      	movs	r1, #6
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fa4e 	bl	8000e78 <GPIO_PinAFConfig>
 80029dc:	e034      	b.n	8002a48 <PWMChannelConfig+0x910>
 80029de:	2203      	movs	r2, #3
 80029e0:	2107      	movs	r1, #7
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fa48 	bl	8000e78 <GPIO_PinAFConfig>
 80029e8:	e02e      	b.n	8002a48 <PWMChannelConfig+0x910>
 80029ea:	2203      	movs	r2, #3
 80029ec:	2108      	movs	r1, #8
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fa42 	bl	8000e78 <GPIO_PinAFConfig>
 80029f4:	e028      	b.n	8002a48 <PWMChannelConfig+0x910>
 80029f6:	2203      	movs	r2, #3
 80029f8:	2109      	movs	r1, #9
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fa3c 	bl	8000e78 <GPIO_PinAFConfig>
 8002a00:	e022      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002a02:	2203      	movs	r2, #3
 8002a04:	210a      	movs	r1, #10
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fa36 	bl	8000e78 <GPIO_PinAFConfig>
 8002a0c:	e01c      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002a0e:	2203      	movs	r2, #3
 8002a10:	210b      	movs	r1, #11
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fa30 	bl	8000e78 <GPIO_PinAFConfig>
 8002a18:	e016      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	210c      	movs	r1, #12
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fa2a 	bl	8000e78 <GPIO_PinAFConfig>
 8002a24:	e010      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002a26:	2203      	movs	r2, #3
 8002a28:	210d      	movs	r1, #13
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fa24 	bl	8000e78 <GPIO_PinAFConfig>
 8002a30:	e00a      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002a32:	2203      	movs	r2, #3
 8002a34:	210e      	movs	r1, #14
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fa1e 	bl	8000e78 <GPIO_PinAFConfig>
 8002a3c:	e004      	b.n	8002a48 <PWMChannelConfig+0x910>
 8002a3e:	2203      	movs	r2, #3
 8002a40:	210f      	movs	r1, #15
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fa18 	bl	8000e78 <GPIO_PinAFConfig>
 8002a48:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002a4a:	2370      	movs	r3, #112	; 0x70
 8002a4c:	82bb      	strh	r3, [r7, #20]
 8002a4e:	e32c      	b.n	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM10){
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a5f      	ldr	r2, [pc, #380]	; (8002bd0 <PWMChannelConfig+0xa98>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	f040 809b 	bne.w	8002b90 <PWMChannelConfig+0xa58>
		AFConfig(TIM10, GPIOx, GPIO_Pin_x);
 8002a5a:	893b      	ldrh	r3, [r7, #8]
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d05e      	beq.n	8002b1e <PWMChannelConfig+0x9e6>
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d811      	bhi.n	8002a88 <PWMChannelConfig+0x950>
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d042      	beq.n	8002aee <PWMChannelConfig+0x9b6>
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d806      	bhi.n	8002a7a <PWMChannelConfig+0x942>
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d032      	beq.n	8002ad6 <PWMChannelConfig+0x99e>
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d036      	beq.n	8002ae2 <PWMChannelConfig+0x9aa>
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d028      	beq.n	8002aca <PWMChannelConfig+0x992>
 8002a78:	e086      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d043      	beq.n	8002b06 <PWMChannelConfig+0x9ce>
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d047      	beq.n	8002b12 <PWMChannelConfig+0x9da>
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d039      	beq.n	8002afa <PWMChannelConfig+0x9c2>
 8002a86:	e07f      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8c:	d05f      	beq.n	8002b4e <PWMChannelConfig+0xa16>
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a92:	d809      	bhi.n	8002aa8 <PWMChannelConfig+0x970>
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d04d      	beq.n	8002b36 <PWMChannelConfig+0x9fe>
 8002a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9e:	d050      	beq.n	8002b42 <PWMChannelConfig+0xa0a>
 8002aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa4:	d041      	beq.n	8002b2a <PWMChannelConfig+0x9f2>
 8002aa6:	e06f      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aac:	d05b      	beq.n	8002b66 <PWMChannelConfig+0xa2e>
 8002aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab2:	d803      	bhi.n	8002abc <PWMChannelConfig+0x984>
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	d04f      	beq.n	8002b5a <PWMChannelConfig+0xa22>
 8002aba:	e065      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac0:	d057      	beq.n	8002b72 <PWMChannelConfig+0xa3a>
 8002ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac6:	d05a      	beq.n	8002b7e <PWMChannelConfig+0xa46>
 8002ac8:	e05e      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002aca:	2203      	movs	r2, #3
 8002acc:	2100      	movs	r1, #0
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f9d2 	bl	8000e78 <GPIO_PinAFConfig>
 8002ad4:	e058      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	2101      	movs	r1, #1
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe f9cc 	bl	8000e78 <GPIO_PinAFConfig>
 8002ae0:	e052      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe f9c6 	bl	8000e78 <GPIO_PinAFConfig>
 8002aec:	e04c      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002aee:	2203      	movs	r2, #3
 8002af0:	2103      	movs	r1, #3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe f9c0 	bl	8000e78 <GPIO_PinAFConfig>
 8002af8:	e046      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002afa:	2203      	movs	r2, #3
 8002afc:	2104      	movs	r1, #4
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe f9ba 	bl	8000e78 <GPIO_PinAFConfig>
 8002b04:	e040      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b06:	2203      	movs	r2, #3
 8002b08:	2105      	movs	r1, #5
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe f9b4 	bl	8000e78 <GPIO_PinAFConfig>
 8002b10:	e03a      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b12:	2203      	movs	r2, #3
 8002b14:	2106      	movs	r1, #6
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f9ae 	bl	8000e78 <GPIO_PinAFConfig>
 8002b1c:	e034      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b1e:	2203      	movs	r2, #3
 8002b20:	2107      	movs	r1, #7
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f9a8 	bl	8000e78 <GPIO_PinAFConfig>
 8002b28:	e02e      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	2108      	movs	r1, #8
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe f9a2 	bl	8000e78 <GPIO_PinAFConfig>
 8002b34:	e028      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b36:	2203      	movs	r2, #3
 8002b38:	2109      	movs	r1, #9
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe f99c 	bl	8000e78 <GPIO_PinAFConfig>
 8002b40:	e022      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b42:	2203      	movs	r2, #3
 8002b44:	210a      	movs	r1, #10
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe f996 	bl	8000e78 <GPIO_PinAFConfig>
 8002b4c:	e01c      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b4e:	2203      	movs	r2, #3
 8002b50:	210b      	movs	r1, #11
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe f990 	bl	8000e78 <GPIO_PinAFConfig>
 8002b58:	e016      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	210c      	movs	r1, #12
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe f98a 	bl	8000e78 <GPIO_PinAFConfig>
 8002b64:	e010      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b66:	2203      	movs	r2, #3
 8002b68:	210d      	movs	r1, #13
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe f984 	bl	8000e78 <GPIO_PinAFConfig>
 8002b70:	e00a      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b72:	2203      	movs	r2, #3
 8002b74:	210e      	movs	r1, #14
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe f97e 	bl	8000e78 <GPIO_PinAFConfig>
 8002b7c:	e004      	b.n	8002b88 <PWMChannelConfig+0xa50>
 8002b7e:	2203      	movs	r2, #3
 8002b80:	210f      	movs	r1, #15
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f978 	bl	8000e78 <GPIO_PinAFConfig>
 8002b88:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002b8a:	2370      	movs	r3, #112	; 0x70
 8002b8c:	82bb      	strh	r3, [r7, #20]
 8002b8e:	e28c      	b.n	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM11){
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <PWMChannelConfig+0xa9c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	f040 80a3 	bne.w	8002ce0 <PWMChannelConfig+0xba8>
		AFConfig(TIM11, GPIOx, GPIO_Pin_x);
 8002b9a:	893b      	ldrh	r3, [r7, #8]
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d066      	beq.n	8002c6e <PWMChannelConfig+0xb36>
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d819      	bhi.n	8002bd8 <PWMChannelConfig+0xaa0>
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d04a      	beq.n	8002c3e <PWMChannelConfig+0xb06>
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d806      	bhi.n	8002bba <PWMChannelConfig+0xa82>
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d03a      	beq.n	8002c26 <PWMChannelConfig+0xaee>
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d03e      	beq.n	8002c32 <PWMChannelConfig+0xafa>
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d030      	beq.n	8002c1a <PWMChannelConfig+0xae2>
 8002bb8:	e08e      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d04b      	beq.n	8002c56 <PWMChannelConfig+0xb1e>
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d04f      	beq.n	8002c62 <PWMChannelConfig+0xb2a>
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d041      	beq.n	8002c4a <PWMChannelConfig+0xb12>
 8002bc6:	e087      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002bc8:	40010400 	.word	0x40010400
 8002bcc:	40014000 	.word	0x40014000
 8002bd0:	40014400 	.word	0x40014400
 8002bd4:	40014800 	.word	0x40014800
 8002bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bdc:	d05f      	beq.n	8002c9e <PWMChannelConfig+0xb66>
 8002bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be2:	d809      	bhi.n	8002bf8 <PWMChannelConfig+0xac0>
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be8:	d04d      	beq.n	8002c86 <PWMChannelConfig+0xb4e>
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d050      	beq.n	8002c92 <PWMChannelConfig+0xb5a>
 8002bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf4:	d041      	beq.n	8002c7a <PWMChannelConfig+0xb42>
 8002bf6:	e06f      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfc:	d05b      	beq.n	8002cb6 <PWMChannelConfig+0xb7e>
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c02:	d803      	bhi.n	8002c0c <PWMChannelConfig+0xad4>
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c08:	d04f      	beq.n	8002caa <PWMChannelConfig+0xb72>
 8002c0a:	e065      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c10:	d057      	beq.n	8002cc2 <PWMChannelConfig+0xb8a>
 8002c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c16:	d05a      	beq.n	8002cce <PWMChannelConfig+0xb96>
 8002c18:	e05e      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe f92a 	bl	8000e78 <GPIO_PinAFConfig>
 8002c24:	e058      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c26:	2203      	movs	r2, #3
 8002c28:	2101      	movs	r1, #1
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe f924 	bl	8000e78 <GPIO_PinAFConfig>
 8002c30:	e052      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c32:	2203      	movs	r2, #3
 8002c34:	2102      	movs	r1, #2
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe f91e 	bl	8000e78 <GPIO_PinAFConfig>
 8002c3c:	e04c      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c3e:	2203      	movs	r2, #3
 8002c40:	2103      	movs	r1, #3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fe f918 	bl	8000e78 <GPIO_PinAFConfig>
 8002c48:	e046      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe f912 	bl	8000e78 <GPIO_PinAFConfig>
 8002c54:	e040      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c56:	2203      	movs	r2, #3
 8002c58:	2105      	movs	r1, #5
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe f90c 	bl	8000e78 <GPIO_PinAFConfig>
 8002c60:	e03a      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c62:	2203      	movs	r2, #3
 8002c64:	2106      	movs	r1, #6
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f906 	bl	8000e78 <GPIO_PinAFConfig>
 8002c6c:	e034      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c6e:	2203      	movs	r2, #3
 8002c70:	2107      	movs	r1, #7
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe f900 	bl	8000e78 <GPIO_PinAFConfig>
 8002c78:	e02e      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	2108      	movs	r1, #8
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe f8fa 	bl	8000e78 <GPIO_PinAFConfig>
 8002c84:	e028      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c86:	2203      	movs	r2, #3
 8002c88:	2109      	movs	r1, #9
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe f8f4 	bl	8000e78 <GPIO_PinAFConfig>
 8002c90:	e022      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c92:	2203      	movs	r2, #3
 8002c94:	210a      	movs	r1, #10
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe f8ee 	bl	8000e78 <GPIO_PinAFConfig>
 8002c9c:	e01c      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	210b      	movs	r1, #11
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe f8e8 	bl	8000e78 <GPIO_PinAFConfig>
 8002ca8:	e016      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002caa:	2203      	movs	r2, #3
 8002cac:	210c      	movs	r1, #12
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe f8e2 	bl	8000e78 <GPIO_PinAFConfig>
 8002cb4:	e010      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	210d      	movs	r1, #13
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe f8dc 	bl	8000e78 <GPIO_PinAFConfig>
 8002cc0:	e00a      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	210e      	movs	r1, #14
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe f8d6 	bl	8000e78 <GPIO_PinAFConfig>
 8002ccc:	e004      	b.n	8002cd8 <PWMChannelConfig+0xba0>
 8002cce:	2203      	movs	r2, #3
 8002cd0:	210f      	movs	r1, #15
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe f8d0 	bl	8000e78 <GPIO_PinAFConfig>
 8002cd8:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002cda:	2370      	movs	r3, #112	; 0x70
 8002cdc:	82bb      	strh	r3, [r7, #20]
 8002cde:	e1e4      	b.n	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM12){
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4ab5      	ldr	r2, [pc, #724]	; (8002fb8 <PWMChannelConfig+0xe80>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	f040 809b 	bne.w	8002e20 <PWMChannelConfig+0xce8>
		AFConfig(TIM12, GPIOx, GPIO_Pin_x);
 8002cea:	893b      	ldrh	r3, [r7, #8]
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d05e      	beq.n	8002dae <PWMChannelConfig+0xc76>
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d811      	bhi.n	8002d18 <PWMChannelConfig+0xbe0>
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d042      	beq.n	8002d7e <PWMChannelConfig+0xc46>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d806      	bhi.n	8002d0a <PWMChannelConfig+0xbd2>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d032      	beq.n	8002d66 <PWMChannelConfig+0xc2e>
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d036      	beq.n	8002d72 <PWMChannelConfig+0xc3a>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d028      	beq.n	8002d5a <PWMChannelConfig+0xc22>
 8002d08:	e086      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d043      	beq.n	8002d96 <PWMChannelConfig+0xc5e>
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d047      	beq.n	8002da2 <PWMChannelConfig+0xc6a>
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d039      	beq.n	8002d8a <PWMChannelConfig+0xc52>
 8002d16:	e07f      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d1c:	d05f      	beq.n	8002dde <PWMChannelConfig+0xca6>
 8002d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d22:	d809      	bhi.n	8002d38 <PWMChannelConfig+0xc00>
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d28:	d04d      	beq.n	8002dc6 <PWMChannelConfig+0xc8e>
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d050      	beq.n	8002dd2 <PWMChannelConfig+0xc9a>
 8002d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d34:	d041      	beq.n	8002dba <PWMChannelConfig+0xc82>
 8002d36:	e06f      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3c:	d05b      	beq.n	8002df6 <PWMChannelConfig+0xcbe>
 8002d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d42:	d803      	bhi.n	8002d4c <PWMChannelConfig+0xc14>
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d04f      	beq.n	8002dea <PWMChannelConfig+0xcb2>
 8002d4a:	e065      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d50:	d057      	beq.n	8002e02 <PWMChannelConfig+0xcca>
 8002d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d56:	d05a      	beq.n	8002e0e <PWMChannelConfig+0xcd6>
 8002d58:	e05e      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d5a:	2209      	movs	r2, #9
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe f88a 	bl	8000e78 <GPIO_PinAFConfig>
 8002d64:	e058      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d66:	2209      	movs	r2, #9
 8002d68:	2101      	movs	r1, #1
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe f884 	bl	8000e78 <GPIO_PinAFConfig>
 8002d70:	e052      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d72:	2209      	movs	r2, #9
 8002d74:	2102      	movs	r1, #2
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe f87e 	bl	8000e78 <GPIO_PinAFConfig>
 8002d7c:	e04c      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d7e:	2209      	movs	r2, #9
 8002d80:	2103      	movs	r1, #3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe f878 	bl	8000e78 <GPIO_PinAFConfig>
 8002d88:	e046      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d8a:	2209      	movs	r2, #9
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f872 	bl	8000e78 <GPIO_PinAFConfig>
 8002d94:	e040      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002d96:	2209      	movs	r2, #9
 8002d98:	2105      	movs	r1, #5
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe f86c 	bl	8000e78 <GPIO_PinAFConfig>
 8002da0:	e03a      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002da2:	2209      	movs	r2, #9
 8002da4:	2106      	movs	r1, #6
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe f866 	bl	8000e78 <GPIO_PinAFConfig>
 8002dac:	e034      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002dae:	2209      	movs	r2, #9
 8002db0:	2107      	movs	r1, #7
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe f860 	bl	8000e78 <GPIO_PinAFConfig>
 8002db8:	e02e      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002dba:	2209      	movs	r2, #9
 8002dbc:	2108      	movs	r1, #8
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe f85a 	bl	8000e78 <GPIO_PinAFConfig>
 8002dc4:	e028      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002dc6:	2209      	movs	r2, #9
 8002dc8:	2109      	movs	r1, #9
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f854 	bl	8000e78 <GPIO_PinAFConfig>
 8002dd0:	e022      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002dd2:	2209      	movs	r2, #9
 8002dd4:	210a      	movs	r1, #10
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe f84e 	bl	8000e78 <GPIO_PinAFConfig>
 8002ddc:	e01c      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002dde:	2209      	movs	r2, #9
 8002de0:	210b      	movs	r1, #11
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe f848 	bl	8000e78 <GPIO_PinAFConfig>
 8002de8:	e016      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002dea:	2209      	movs	r2, #9
 8002dec:	210c      	movs	r1, #12
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe f842 	bl	8000e78 <GPIO_PinAFConfig>
 8002df4:	e010      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002df6:	2209      	movs	r2, #9
 8002df8:	210d      	movs	r1, #13
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe f83c 	bl	8000e78 <GPIO_PinAFConfig>
 8002e00:	e00a      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002e02:	2209      	movs	r2, #9
 8002e04:	210e      	movs	r1, #14
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe f836 	bl	8000e78 <GPIO_PinAFConfig>
 8002e0c:	e004      	b.n	8002e18 <PWMChannelConfig+0xce0>
 8002e0e:	2209      	movs	r2, #9
 8002e10:	210f      	movs	r1, #15
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f830 	bl	8000e78 <GPIO_PinAFConfig>
 8002e18:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002e1a:	2370      	movs	r3, #112	; 0x70
 8002e1c:	82bb      	strh	r3, [r7, #20]
 8002e1e:	e144      	b.n	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM13){
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a66      	ldr	r2, [pc, #408]	; (8002fbc <PWMChannelConfig+0xe84>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	f040 809b 	bne.w	8002f60 <PWMChannelConfig+0xe28>
		AFConfig(TIM13, GPIOx, GPIO_Pin_x);
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d05e      	beq.n	8002eee <PWMChannelConfig+0xdb6>
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d811      	bhi.n	8002e58 <PWMChannelConfig+0xd20>
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d042      	beq.n	8002ebe <PWMChannelConfig+0xd86>
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d806      	bhi.n	8002e4a <PWMChannelConfig+0xd12>
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d032      	beq.n	8002ea6 <PWMChannelConfig+0xd6e>
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d036      	beq.n	8002eb2 <PWMChannelConfig+0xd7a>
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d028      	beq.n	8002e9a <PWMChannelConfig+0xd62>
 8002e48:	e086      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d043      	beq.n	8002ed6 <PWMChannelConfig+0xd9e>
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d047      	beq.n	8002ee2 <PWMChannelConfig+0xdaa>
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d039      	beq.n	8002eca <PWMChannelConfig+0xd92>
 8002e56:	e07f      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5c:	d05f      	beq.n	8002f1e <PWMChannelConfig+0xde6>
 8002e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e62:	d809      	bhi.n	8002e78 <PWMChannelConfig+0xd40>
 8002e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e68:	d04d      	beq.n	8002f06 <PWMChannelConfig+0xdce>
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	d050      	beq.n	8002f12 <PWMChannelConfig+0xdda>
 8002e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e74:	d041      	beq.n	8002efa <PWMChannelConfig+0xdc2>
 8002e76:	e06f      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7c:	d05b      	beq.n	8002f36 <PWMChannelConfig+0xdfe>
 8002e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e82:	d803      	bhi.n	8002e8c <PWMChannelConfig+0xd54>
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e88:	d04f      	beq.n	8002f2a <PWMChannelConfig+0xdf2>
 8002e8a:	e065      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e90:	d057      	beq.n	8002f42 <PWMChannelConfig+0xe0a>
 8002e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e96:	d05a      	beq.n	8002f4e <PWMChannelConfig+0xe16>
 8002e98:	e05e      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002e9a:	2209      	movs	r2, #9
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd ffea 	bl	8000e78 <GPIO_PinAFConfig>
 8002ea4:	e058      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002ea6:	2209      	movs	r2, #9
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd ffe4 	bl	8000e78 <GPIO_PinAFConfig>
 8002eb0:	e052      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002eb2:	2209      	movs	r2, #9
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd ffde 	bl	8000e78 <GPIO_PinAFConfig>
 8002ebc:	e04c      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002ebe:	2209      	movs	r2, #9
 8002ec0:	2103      	movs	r1, #3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd ffd8 	bl	8000e78 <GPIO_PinAFConfig>
 8002ec8:	e046      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002eca:	2209      	movs	r2, #9
 8002ecc:	2104      	movs	r1, #4
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fd ffd2 	bl	8000e78 <GPIO_PinAFConfig>
 8002ed4:	e040      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002ed6:	2209      	movs	r2, #9
 8002ed8:	2105      	movs	r1, #5
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fd ffcc 	bl	8000e78 <GPIO_PinAFConfig>
 8002ee0:	e03a      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002ee2:	2209      	movs	r2, #9
 8002ee4:	2106      	movs	r1, #6
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd ffc6 	bl	8000e78 <GPIO_PinAFConfig>
 8002eec:	e034      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002eee:	2209      	movs	r2, #9
 8002ef0:	2107      	movs	r1, #7
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd ffc0 	bl	8000e78 <GPIO_PinAFConfig>
 8002ef8:	e02e      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002efa:	2209      	movs	r2, #9
 8002efc:	2108      	movs	r1, #8
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd ffba 	bl	8000e78 <GPIO_PinAFConfig>
 8002f04:	e028      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002f06:	2209      	movs	r2, #9
 8002f08:	2109      	movs	r1, #9
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd ffb4 	bl	8000e78 <GPIO_PinAFConfig>
 8002f10:	e022      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002f12:	2209      	movs	r2, #9
 8002f14:	210a      	movs	r1, #10
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd ffae 	bl	8000e78 <GPIO_PinAFConfig>
 8002f1c:	e01c      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002f1e:	2209      	movs	r2, #9
 8002f20:	210b      	movs	r1, #11
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd ffa8 	bl	8000e78 <GPIO_PinAFConfig>
 8002f28:	e016      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002f2a:	2209      	movs	r2, #9
 8002f2c:	210c      	movs	r1, #12
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd ffa2 	bl	8000e78 <GPIO_PinAFConfig>
 8002f34:	e010      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002f36:	2209      	movs	r2, #9
 8002f38:	210d      	movs	r1, #13
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fd ff9c 	bl	8000e78 <GPIO_PinAFConfig>
 8002f40:	e00a      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002f42:	2209      	movs	r2, #9
 8002f44:	210e      	movs	r1, #14
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd ff96 	bl	8000e78 <GPIO_PinAFConfig>
 8002f4c:	e004      	b.n	8002f58 <PWMChannelConfig+0xe20>
 8002f4e:	2209      	movs	r2, #9
 8002f50:	210f      	movs	r1, #15
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd ff90 	bl	8000e78 <GPIO_PinAFConfig>
 8002f58:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8002f5a:	2370      	movs	r3, #112	; 0x70
 8002f5c:	82bb      	strh	r3, [r7, #20]
 8002f5e:	e0a4      	b.n	80030aa <PWMChannelConfig+0xf72>
	}else if(Timer == TIM14){
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <PWMChannelConfig+0xe88>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	f040 80a0 	bne.w	80030aa <PWMChannelConfig+0xf72>
		AFConfig(TIM14, GPIOx, GPIO_Pin_x);
 8002f6a:	893b      	ldrh	r3, [r7, #8]
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d064      	beq.n	800303a <PWMChannelConfig+0xf02>
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d811      	bhi.n	8002f98 <PWMChannelConfig+0xe60>
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d048      	beq.n	800300a <PWMChannelConfig+0xed2>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d806      	bhi.n	8002f8a <PWMChannelConfig+0xe52>
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d038      	beq.n	8002ff2 <PWMChannelConfig+0xeba>
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d03c      	beq.n	8002ffe <PWMChannelConfig+0xec6>
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d02e      	beq.n	8002fe6 <PWMChannelConfig+0xeae>
 8002f88:	e08c      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d049      	beq.n	8003022 <PWMChannelConfig+0xeea>
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d04d      	beq.n	800302e <PWMChannelConfig+0xef6>
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d03f      	beq.n	8003016 <PWMChannelConfig+0xede>
 8002f96:	e085      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8002f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9c:	d065      	beq.n	800306a <PWMChannelConfig+0xf32>
 8002f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa2:	d80f      	bhi.n	8002fc4 <PWMChannelConfig+0xe8c>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d053      	beq.n	8003052 <PWMChannelConfig+0xf1a>
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d056      	beq.n	800305e <PWMChannelConfig+0xf26>
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d047      	beq.n	8003046 <PWMChannelConfig+0xf0e>
 8002fb6:	e075      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8002fb8:	40001800 	.word	0x40001800
 8002fbc:	40001c00 	.word	0x40001c00
 8002fc0:	40002000 	.word	0x40002000
 8002fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc8:	d05b      	beq.n	8003082 <PWMChannelConfig+0xf4a>
 8002fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fce:	d803      	bhi.n	8002fd8 <PWMChannelConfig+0xea0>
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d04f      	beq.n	8003076 <PWMChannelConfig+0xf3e>
 8002fd6:	e065      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8002fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fdc:	d057      	beq.n	800308e <PWMChannelConfig+0xf56>
 8002fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe2:	d05a      	beq.n	800309a <PWMChannelConfig+0xf62>
 8002fe4:	e05e      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8002fe6:	2209      	movs	r2, #9
 8002fe8:	2100      	movs	r1, #0
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd ff44 	bl	8000e78 <GPIO_PinAFConfig>
 8002ff0:	e058      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8002ff2:	2209      	movs	r2, #9
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd ff3e 	bl	8000e78 <GPIO_PinAFConfig>
 8002ffc:	e052      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8002ffe:	2209      	movs	r2, #9
 8003000:	2102      	movs	r1, #2
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd ff38 	bl	8000e78 <GPIO_PinAFConfig>
 8003008:	e04c      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 800300a:	2209      	movs	r2, #9
 800300c:	2103      	movs	r1, #3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd ff32 	bl	8000e78 <GPIO_PinAFConfig>
 8003014:	e046      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8003016:	2209      	movs	r2, #9
 8003018:	2104      	movs	r1, #4
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd ff2c 	bl	8000e78 <GPIO_PinAFConfig>
 8003020:	e040      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8003022:	2209      	movs	r2, #9
 8003024:	2105      	movs	r1, #5
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd ff26 	bl	8000e78 <GPIO_PinAFConfig>
 800302c:	e03a      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 800302e:	2209      	movs	r2, #9
 8003030:	2106      	movs	r1, #6
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd ff20 	bl	8000e78 <GPIO_PinAFConfig>
 8003038:	e034      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 800303a:	2209      	movs	r2, #9
 800303c:	2107      	movs	r1, #7
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd ff1a 	bl	8000e78 <GPIO_PinAFConfig>
 8003044:	e02e      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8003046:	2209      	movs	r2, #9
 8003048:	2108      	movs	r1, #8
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd ff14 	bl	8000e78 <GPIO_PinAFConfig>
 8003050:	e028      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8003052:	2209      	movs	r2, #9
 8003054:	2109      	movs	r1, #9
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd ff0e 	bl	8000e78 <GPIO_PinAFConfig>
 800305c:	e022      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 800305e:	2209      	movs	r2, #9
 8003060:	210a      	movs	r1, #10
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd ff08 	bl	8000e78 <GPIO_PinAFConfig>
 8003068:	e01c      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 800306a:	2209      	movs	r2, #9
 800306c:	210b      	movs	r1, #11
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd ff02 	bl	8000e78 <GPIO_PinAFConfig>
 8003074:	e016      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8003076:	2209      	movs	r2, #9
 8003078:	210c      	movs	r1, #12
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd fefc 	bl	8000e78 <GPIO_PinAFConfig>
 8003080:	e010      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 8003082:	2209      	movs	r2, #9
 8003084:	210d      	movs	r1, #13
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fef6 	bl	8000e78 <GPIO_PinAFConfig>
 800308c:	e00a      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 800308e:	2209      	movs	r2, #9
 8003090:	210e      	movs	r1, #14
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fef0 	bl	8000e78 <GPIO_PinAFConfig>
 8003098:	e004      	b.n	80030a4 <PWMChannelConfig+0xf6c>
 800309a:	2209      	movs	r2, #9
 800309c:	210f      	movs	r1, #15
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd feea 	bl	8000e78 <GPIO_PinAFConfig>
 80030a4:	bf00      	nop
		PWM_TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 80030a6:	2370      	movs	r3, #112	; 0x70
 80030a8:	82bb      	strh	r3, [r7, #20]
	}


	PWM_TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80030aa:	2301      	movs	r3, #1
 80030ac:	82fb      	strh	r3, [r7, #22]

	switch(Channel){
 80030ae:	7afb      	ldrb	r3, [r7, #11]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d837      	bhi.n	8003124 <PWMChannelConfig+0xfec>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <PWMChannelConfig+0xf84>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030e3 	.word	0x080030e3
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	0800310f 	.word	0x0800310f

		case PWM_CHANNEL_1 :	TIM_OC1Init(Timer, &PWM_TIM_OCInitStructure);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7fe f8ce 	bl	8001274 <TIM_OC1Init>
								TIM_OC1PreloadConfig(Timer, TIM_OCPreload_Enable);
 80030d8:	2108      	movs	r1, #8
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7fe faba 	bl	8001654 <TIM_OC1PreloadConfig>
								break;
 80030e0:	e020      	b.n	8003124 <PWMChannelConfig+0xfec>

		case PWM_CHANNEL_2 :	TIM_OC2Init(Timer, &PWM_TIM_OCInitStructure);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7fe f93d 	bl	8001368 <TIM_OC2Init>
								TIM_OC2PreloadConfig(Timer, TIM_OCPreload_Enable);
 80030ee:	2108      	movs	r1, #8
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7fe facb 	bl	800168c <TIM_OC2PreloadConfig>
								break;
 80030f6:	e015      	b.n	8003124 <PWMChannelConfig+0xfec>

		case PWM_CHANNEL_3 :	TIM_OC3Init(Timer, &PWM_TIM_OCInitStructure);
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4619      	mov	r1, r3
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7fe f9ba 	bl	8001478 <TIM_OC3Init>
								TIM_OC3PreloadConfig(Timer, TIM_OCPreload_Enable);
 8003104:	2108      	movs	r1, #8
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7fe fade 	bl	80016c8 <TIM_OC3PreloadConfig>
								break;
 800310c:	e00a      	b.n	8003124 <PWMChannelConfig+0xfec>

		case PWM_CHANNEL_4 :	TIM_OC4Init(Timer, &PWM_TIM_OCInitStructure);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7fe fa35 	bl	8001584 <TIM_OC4Init>
								TIM_OC4PreloadConfig(Timer, TIM_OCPreload_Enable);
 800311a:	2108      	movs	r1, #8
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7fe faef 	bl	8001700 <TIM_OC4PreloadConfig>
								break;
 8003122:	bf00      	nop

	}

	TIM_ARRPreloadConfig(Timer, ENABLE);
 8003124:	2101      	movs	r1, #1
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7fe f864 	bl	80011f4 <TIM_ARRPreloadConfig>

}
 800312c:	bf00      	nop
 800312e:	3728      	adds	r7, #40	; 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <QEIInit>:
 * 						  QEIInit(QEI6, 3, 8, GPIOE, GPIO_Pin_9, GPIOE, GPIO_Pin_11);	//Initialize QEI6
 */

void QEIInit(QEI_TypeDef QEIx, uint16_t preemptionpriority,uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	460b      	mov	r3, r1
 8003142:	81bb      	strh	r3, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	817b      	strh	r3, [r7, #10]
	switch(QEIx)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	3b01      	subs	r3, #1
 800314c:	2b05      	cmp	r3, #5
 800314e:	d857      	bhi.n	8003200 <QEIInit+0xcc>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <QEIInit+0x24>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	08003171 	.word	0x08003171
 800315c:	08003189 	.word	0x08003189
 8003160:	080031a1 	.word	0x080031a1
 8003164:	080031b9 	.word	0x080031b9
 8003168:	080031d1 	.word	0x080031d1
 800316c:	080031e9 	.word	0x080031e9
	{
	case QEI1:
		QEI1Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 8003170:	8b3a      	ldrh	r2, [r7, #24]
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	89b8      	ldrh	r0, [r7, #12]
 8003176:	8c3b      	ldrh	r3, [r7, #32]
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	f000 fa47 	bl	8003614 <QEI1Init>
		break;
 8003186:	e03c      	b.n	8003202 <QEIInit+0xce>
	case QEI2:
		QEI2Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 8003188:	8b3a      	ldrh	r2, [r7, #24]
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	89b8      	ldrh	r0, [r7, #12]
 800318e:	8c3b      	ldrh	r3, [r7, #32]
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	f000 fbd1 	bl	8003940 <QEI2Init>
		break;
 800319e:	e030      	b.n	8003202 <QEIInit+0xce>
	case QEI3:
		QEI3Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 80031a0:	8b3a      	ldrh	r2, [r7, #24]
 80031a2:	8979      	ldrh	r1, [r7, #10]
 80031a4:	89b8      	ldrh	r0, [r7, #12]
 80031a6:	8c3b      	ldrh	r3, [r7, #32]
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	f000 fd5f 	bl	8003c74 <QEI3Init>
		break;
 80031b6:	e024      	b.n	8003202 <QEIInit+0xce>
	case QEI4:
		QEI4Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 80031b8:	8b3a      	ldrh	r2, [r7, #24]
 80031ba:	8979      	ldrh	r1, [r7, #10]
 80031bc:	89b8      	ldrh	r0, [r7, #12]
 80031be:	8c3b      	ldrh	r3, [r7, #32]
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	f000 fee9 	bl	8003fa0 <QEI4Init>
		break;
 80031ce:	e018      	b.n	8003202 <QEIInit+0xce>
	case QEI5:
		QEI5Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 80031d0:	8b3a      	ldrh	r2, [r7, #24]
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	89b8      	ldrh	r0, [r7, #12]
 80031d6:	8c3b      	ldrh	r3, [r7, #32]
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	f001 f873 	bl	80042cc <QEI5Init>
		break;
 80031e6:	e00c      	b.n	8003202 <QEIInit+0xce>
	case QEI6:
		QEI6Init(preemptionpriority,subpriority, GPIOx_pulseA, GPIO_Pin_pulseA, GPIOx_pulseB, GPIO_Pin_pulseB);
 80031e8:	8b3a      	ldrh	r2, [r7, #24]
 80031ea:	8979      	ldrh	r1, [r7, #10]
 80031ec:	89b8      	ldrh	r0, [r7, #12]
 80031ee:	8c3b      	ldrh	r3, [r7, #32]
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	f001 f9fd 	bl	80045f8 <QEI6Init>
		break;
 80031fe:	e000      	b.n	8003202 <QEIInit+0xce>
	default: break;
 8003200:	bf00      	nop
	}
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <QEIWrite>:
 * Function Return		: None
 * Function Example		: QEIWrite(QEI1, 10000);
 */

void QEIWrite(QEI_TypeDef QEIx, int32_t value)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	3b01      	subs	r3, #1
 800321c:	2b05      	cmp	r3, #5
 800321e:	d840      	bhi.n	80032a2 <QEIWrite+0x96>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <QEIWrite+0x1c>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	08003241 	.word	0x08003241
 800322c:	08003251 	.word	0x08003251
 8003230:	08003263 	.word	0x08003263
 8003234:	08003273 	.word	0x08003273
 8003238:	08003283 	.word	0x08003283
 800323c:	08003293 	.word	0x08003293

		case QEI1:	BIOS_QEI1.count = value;
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <QEIWrite+0xa4>)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6013      	str	r3, [r2, #0]
					TIM1->CNT = BIOS_QEI1.poscnt;
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <QEIWrite+0xa8>)
 8003248:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <QEIWrite+0xa4>)
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 800324e:	e028      	b.n	80032a2 <QEIWrite+0x96>

		case QEI2:	BIOS_QEI2.count = value;
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <QEIWrite+0xac>)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6013      	str	r3, [r2, #0]
					TIM2->CNT = BIOS_QEI2.poscnt;
 8003256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800325a:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <QEIWrite+0xac>)
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8003260:	e01f      	b.n	80032a2 <QEIWrite+0x96>

		case QEI3:  BIOS_QEI3.count = value;
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <QEIWrite+0xb0>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6013      	str	r3, [r2, #0]
					TIM3->CNT = BIOS_QEI3.poscnt;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <QEIWrite+0xb4>)
 800326a:	4a14      	ldr	r2, [pc, #80]	; (80032bc <QEIWrite+0xb0>)
 800326c:	8812      	ldrh	r2, [r2, #0]
 800326e:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8003270:	e017      	b.n	80032a2 <QEIWrite+0x96>

		case QEI4:  BIOS_QEI4.count = value;
 8003272:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <QEIWrite+0xb8>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6013      	str	r3, [r2, #0]
					TIM4->CNT = BIOS_QEI4.poscnt;
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <QEIWrite+0xbc>)
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <QEIWrite+0xb8>)
 800327c:	8812      	ldrh	r2, [r2, #0]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8003280:	e00f      	b.n	80032a2 <QEIWrite+0x96>

		case QEI5:	BIOS_QEI5.count = value;
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <QEIWrite+0xc0>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6013      	str	r3, [r2, #0]
					TIM5->CNT = BIOS_QEI5.poscnt;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <QEIWrite+0xc4>)
 800328a:	4a10      	ldr	r2, [pc, #64]	; (80032cc <QEIWrite+0xc0>)
 800328c:	8812      	ldrh	r2, [r2, #0]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8003290:	e007      	b.n	80032a2 <QEIWrite+0x96>

		case QEI6:	BIOS_QEI6.count = value;
 8003292:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <QEIWrite+0xc8>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6013      	str	r3, [r2, #0]
					TIM8->CNT = BIOS_QEI6.poscnt;
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <QEIWrite+0xcc>)
 800329a:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <QEIWrite+0xc8>)
 800329c:	8812      	ldrh	r2, [r2, #0]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 80032a0:	bf00      	nop

	}

}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20001aa0 	.word	0x20001aa0
 80032b4:	40010000 	.word	0x40010000
 80032b8:	20001aa4 	.word	0x20001aa4
 80032bc:	20001a9c 	.word	0x20001a9c
 80032c0:	40000400 	.word	0x40000400
 80032c4:	20001ac4 	.word	0x20001ac4
 80032c8:	40000800 	.word	0x40000800
 80032cc:	20001ac0 	.word	0x20001ac0
 80032d0:	40000c00 	.word	0x40000c00
 80032d4:	20001ac8 	.word	0x20001ac8
 80032d8:	40010400 	.word	0x40010400

080032dc <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d839      	bhi.n	8003362 <QEIReset+0x86>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <QEIReset+0x18>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	0800330d 	.word	0x0800330d
 80032f8:	0800331b 	.word	0x0800331b
 80032fc:	0800332b 	.word	0x0800332b
 8003300:	08003339 	.word	0x08003339
 8003304:	08003347 	.word	0x08003347
 8003308:	08003355 	.word	0x08003355

		case QEI1:	TIM1->CNT = 0;
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <QEIReset+0x94>)
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
					BIOS_QEI1.count = 0;
 8003312:	4b18      	ldr	r3, [pc, #96]	; (8003374 <QEIReset+0x98>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
					break;
 8003318:	e023      	b.n	8003362 <QEIReset+0x86>

		case QEI2:	TIM2->CNT = 0;
 800331a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800331e:	2200      	movs	r2, #0
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
					BIOS_QEI2.count = 0;
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <QEIReset+0x9c>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
					break;
 8003328:	e01b      	b.n	8003362 <QEIReset+0x86>

		case QEI3:	TIM3->CNT = 0;
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <QEIReset+0xa0>)
 800332c:	2200      	movs	r2, #0
 800332e:	625a      	str	r2, [r3, #36]	; 0x24
					BIOS_QEI3.count = 0;
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <QEIReset+0xa4>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
					break;
 8003336:	e014      	b.n	8003362 <QEIReset+0x86>

		case QEI4:	TIM4->CNT = 0;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <QEIReset+0xa8>)
 800333a:	2200      	movs	r2, #0
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
					BIOS_QEI4.count = 0;
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <QEIReset+0xac>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
					break;
 8003344:	e00d      	b.n	8003362 <QEIReset+0x86>

		case QEI5:	TIM5->CNT = 0;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <QEIReset+0xb0>)
 8003348:	2200      	movs	r2, #0
 800334a:	625a      	str	r2, [r3, #36]	; 0x24
					BIOS_QEI5.count = 0;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <QEIReset+0xb4>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
					break;
 8003352:	e006      	b.n	8003362 <QEIReset+0x86>

		case QEI6:	TIM8->CNT = 0;
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <QEIReset+0xb8>)
 8003356:	2200      	movs	r2, #0
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
					BIOS_QEI6.count = 0;
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <QEIReset+0xbc>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
					break;
 8003360:	bf00      	nop

	}
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	20001aa0 	.word	0x20001aa0
 8003378:	20001aa4 	.word	0x20001aa4
 800337c:	40000400 	.word	0x40000400
 8003380:	20001a9c 	.word	0x20001a9c
 8003384:	40000800 	.word	0x40000800
 8003388:	20001ac4 	.word	0x20001ac4
 800338c:	40000c00 	.word	0x40000c00
 8003390:	20001ac0 	.word	0x20001ac0
 8003394:	40010400 	.word	0x40010400
 8003398:	20001ac8 	.word	0x20001ac8

0800339c <QEISwap>:
 * Function Return		: None
 * Function Example		: QEISwap(QEI1, QEI_Swap);
 */

void QEISwap(QEI_TypeDef QEIx, QEI_Direction_TypeDef swap )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	460a      	mov	r2, r1
 80033a6:	71fb      	strb	r3, [r7, #7]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71bb      	strb	r3, [r7, #6]

	switch(QEIx){
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	f200 8089 	bhi.w	80034c8 <QEISwap+0x12c>
 80033b6:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <QEISwap+0x20>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	080033d5 	.word	0x080033d5
 80033c0:	080033fd 	.word	0x080033fd
 80033c4:	08003429 	.word	0x08003429
 80033c8:	08003451 	.word	0x08003451
 80033cc:	08003479 	.word	0x08003479
 80033d0:	080034a1 	.word	0x080034a1

		case QEI1:	if(swap == QEI_No_Swap)
 80033d4:	79bb      	ldrb	r3, [r7, #6]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <QEISwap+0x4c>
						TIM_EncoderInterfaceConfig(TIM1, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 80033da:	2300      	movs	r3, #0
 80033dc:	2200      	movs	r2, #0
 80033de:	2103      	movs	r1, #3
 80033e0:	4842      	ldr	r0, [pc, #264]	; (80034ec <QEISwap+0x150>)
 80033e2:	f7fe fa30 	bl	8001846 <TIM_EncoderInterfaceConfig>
					else if(swap == QEI_Swap)
						TIM_EncoderInterfaceConfig(TIM1, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);

					break;
 80033e6:	e071      	b.n	80034cc <QEISwap+0x130>
					else if(swap == QEI_Swap)
 80033e8:	79bb      	ldrb	r3, [r7, #6]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d16e      	bne.n	80034cc <QEISwap+0x130>
						TIM_EncoderInterfaceConfig(TIM1, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);
 80033ee:	2300      	movs	r3, #0
 80033f0:	2202      	movs	r2, #2
 80033f2:	2103      	movs	r1, #3
 80033f4:	483d      	ldr	r0, [pc, #244]	; (80034ec <QEISwap+0x150>)
 80033f6:	f7fe fa26 	bl	8001846 <TIM_EncoderInterfaceConfig>
					break;
 80033fa:	e067      	b.n	80034cc <QEISwap+0x130>

		case QEI2:	if(swap == QEI_No_Swap)
 80033fc:	79bb      	ldrb	r3, [r7, #6]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <QEISwap+0x76>
						TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8003402:	2300      	movs	r3, #0
 8003404:	2200      	movs	r2, #0
 8003406:	2103      	movs	r1, #3
 8003408:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800340c:	f7fe fa1b 	bl	8001846 <TIM_EncoderInterfaceConfig>
					else if(swap == QEI_Swap)
						TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);

					break;
 8003410:	e05e      	b.n	80034d0 <QEISwap+0x134>
					else if(swap == QEI_Swap)
 8003412:	79bb      	ldrb	r3, [r7, #6]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d15b      	bne.n	80034d0 <QEISwap+0x134>
						TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);
 8003418:	2300      	movs	r3, #0
 800341a:	2202      	movs	r2, #2
 800341c:	2103      	movs	r1, #3
 800341e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003422:	f7fe fa10 	bl	8001846 <TIM_EncoderInterfaceConfig>
					break;
 8003426:	e053      	b.n	80034d0 <QEISwap+0x134>

		case QEI3:	if(swap == QEI_No_Swap)
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <QEISwap+0xa0>
						TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 800342e:	2300      	movs	r3, #0
 8003430:	2200      	movs	r2, #0
 8003432:	2103      	movs	r1, #3
 8003434:	482e      	ldr	r0, [pc, #184]	; (80034f0 <QEISwap+0x154>)
 8003436:	f7fe fa06 	bl	8001846 <TIM_EncoderInterfaceConfig>
					else if(swap == QEI_Swap)
						TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);

					break;
 800343a:	e04b      	b.n	80034d4 <QEISwap+0x138>
					else if(swap == QEI_Swap)
 800343c:	79bb      	ldrb	r3, [r7, #6]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d148      	bne.n	80034d4 <QEISwap+0x138>
						TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);
 8003442:	2300      	movs	r3, #0
 8003444:	2202      	movs	r2, #2
 8003446:	2103      	movs	r1, #3
 8003448:	4829      	ldr	r0, [pc, #164]	; (80034f0 <QEISwap+0x154>)
 800344a:	f7fe f9fc 	bl	8001846 <TIM_EncoderInterfaceConfig>
					break;
 800344e:	e041      	b.n	80034d4 <QEISwap+0x138>

		case QEI4:	if(swap == QEI_No_Swap)
 8003450:	79bb      	ldrb	r3, [r7, #6]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <QEISwap+0xc8>
						TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8003456:	2300      	movs	r3, #0
 8003458:	2200      	movs	r2, #0
 800345a:	2103      	movs	r1, #3
 800345c:	4825      	ldr	r0, [pc, #148]	; (80034f4 <QEISwap+0x158>)
 800345e:	f7fe f9f2 	bl	8001846 <TIM_EncoderInterfaceConfig>
					else if(swap == QEI_Swap)
						TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);

					break;
 8003462:	e039      	b.n	80034d8 <QEISwap+0x13c>
					else if(swap == QEI_Swap)
 8003464:	79bb      	ldrb	r3, [r7, #6]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d136      	bne.n	80034d8 <QEISwap+0x13c>
						TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);
 800346a:	2300      	movs	r3, #0
 800346c:	2202      	movs	r2, #2
 800346e:	2103      	movs	r1, #3
 8003470:	4820      	ldr	r0, [pc, #128]	; (80034f4 <QEISwap+0x158>)
 8003472:	f7fe f9e8 	bl	8001846 <TIM_EncoderInterfaceConfig>
					break;
 8003476:	e02f      	b.n	80034d8 <QEISwap+0x13c>

		case QEI5:	if(swap == QEI_No_Swap)
 8003478:	79bb      	ldrb	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <QEISwap+0xf0>
						TIM_EncoderInterfaceConfig(TIM5, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 800347e:	2300      	movs	r3, #0
 8003480:	2200      	movs	r2, #0
 8003482:	2103      	movs	r1, #3
 8003484:	481c      	ldr	r0, [pc, #112]	; (80034f8 <QEISwap+0x15c>)
 8003486:	f7fe f9de 	bl	8001846 <TIM_EncoderInterfaceConfig>
					else if(swap == QEI_Swap)
						TIM_EncoderInterfaceConfig(TIM5, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);

					break;
 800348a:	e027      	b.n	80034dc <QEISwap+0x140>
					else if(swap == QEI_Swap)
 800348c:	79bb      	ldrb	r3, [r7, #6]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d124      	bne.n	80034dc <QEISwap+0x140>
						TIM_EncoderInterfaceConfig(TIM5, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);
 8003492:	2300      	movs	r3, #0
 8003494:	2202      	movs	r2, #2
 8003496:	2103      	movs	r1, #3
 8003498:	4817      	ldr	r0, [pc, #92]	; (80034f8 <QEISwap+0x15c>)
 800349a:	f7fe f9d4 	bl	8001846 <TIM_EncoderInterfaceConfig>
					break;
 800349e:	e01d      	b.n	80034dc <QEISwap+0x140>

		case QEI6:	if(swap == QEI_No_Swap)
 80034a0:	79bb      	ldrb	r3, [r7, #6]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <QEISwap+0x118>
						TIM_EncoderInterfaceConfig(TIM8, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 80034a6:	2300      	movs	r3, #0
 80034a8:	2200      	movs	r2, #0
 80034aa:	2103      	movs	r1, #3
 80034ac:	4813      	ldr	r0, [pc, #76]	; (80034fc <QEISwap+0x160>)
 80034ae:	f7fe f9ca 	bl	8001846 <TIM_EncoderInterfaceConfig>
					else if(swap == QEI_Swap)
						TIM_EncoderInterfaceConfig(TIM8, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);

					break;
 80034b2:	e015      	b.n	80034e0 <QEISwap+0x144>
					else if(swap == QEI_Swap)
 80034b4:	79bb      	ldrb	r3, [r7, #6]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d112      	bne.n	80034e0 <QEISwap+0x144>
						TIM_EncoderInterfaceConfig(TIM8, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Rising);
 80034ba:	2300      	movs	r3, #0
 80034bc:	2202      	movs	r2, #2
 80034be:	2103      	movs	r1, #3
 80034c0:	480e      	ldr	r0, [pc, #56]	; (80034fc <QEISwap+0x160>)
 80034c2:	f7fe f9c0 	bl	8001846 <TIM_EncoderInterfaceConfig>
					break;
 80034c6:	e00b      	b.n	80034e0 <QEISwap+0x144>

		default: break;
 80034c8:	bf00      	nop
 80034ca:	e00a      	b.n	80034e2 <QEISwap+0x146>
					break;
 80034cc:	bf00      	nop
 80034ce:	e008      	b.n	80034e2 <QEISwap+0x146>
					break;
 80034d0:	bf00      	nop
 80034d2:	e006      	b.n	80034e2 <QEISwap+0x146>
					break;
 80034d4:	bf00      	nop
 80034d6:	e004      	b.n	80034e2 <QEISwap+0x146>
					break;
 80034d8:	bf00      	nop
 80034da:	e002      	b.n	80034e2 <QEISwap+0x146>
					break;
 80034dc:	bf00      	nop
 80034de:	e000      	b.n	80034e2 <QEISwap+0x146>
					break;
 80034e0:	bf00      	nop

	}

}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40010000 	.word	0x40010000
 80034f0:	40000400 	.word	0x40000400
 80034f4:	40000800 	.word	0x40000800
 80034f8:	40000c00 	.word	0x40000c00
 80034fc:	40010400 	.word	0x40010400

08003500 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	461a      	mov	r2, r3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8003516:	e002      	b.n	800351e <QEIDelay+0x1e>
	{
		currentvalues++;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	3301      	adds	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	429a      	cmp	r2, r3
 8003524:	d3f8      	bcc.n	8003518 <QEIDelay+0x18>
	}
	currentvalues = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	3b01      	subs	r3, #1
 8003546:	2b05      	cmp	r3, #5
 8003548:	d845      	bhi.n	80035d6 <QEIRead+0x9e>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <QEIRead+0x18>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003569 	.word	0x08003569
 8003554:	0800357b 	.word	0x0800357b
 8003558:	0800358f 	.word	0x0800358f
 800355c:	080035a1 	.word	0x080035a1
 8003560:	080035b3 	.word	0x080035b3
 8003564:	080035c5 	.word	0x080035c5

		case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <QEIRead+0xb0>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	b29a      	uxth	r2, r3
 800356e:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <QEIRead+0xb4>)
 8003570:	801a      	strh	r2, [r3, #0]
					value = BIOS_QEI1.count;
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <QEIRead+0xb4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]
					break;
 8003578:	e02e      	b.n	80035d8 <QEIRead+0xa0>

		case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 800357a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	b29a      	uxth	r2, r3
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <QEIRead+0xb8>)
 8003584:	801a      	strh	r2, [r3, #0]
					value = BIOS_QEI2.count;
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <QEIRead+0xb8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]
					break;
 800358c:	e024      	b.n	80035d8 <QEIRead+0xa0>

		case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <QEIRead+0xbc>)
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b29a      	uxth	r2, r3
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <QEIRead+0xc0>)
 8003596:	801a      	strh	r2, [r3, #0]
					value = BIOS_QEI3.count;
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <QEIRead+0xc0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
					break;
 800359e:	e01b      	b.n	80035d8 <QEIRead+0xa0>

		case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 80035a0:	4b16      	ldr	r3, [pc, #88]	; (80035fc <QEIRead+0xc4>)
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <QEIRead+0xc8>)
 80035a8:	801a      	strh	r2, [r3, #0]
					value = BIOS_QEI4.count;
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <QEIRead+0xc8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
					break;
 80035b0:	e012      	b.n	80035d8 <QEIRead+0xa0>

		case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <QEIRead+0xcc>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <QEIRead+0xd0>)
 80035ba:	801a      	strh	r2, [r3, #0]
					value = BIOS_QEI5.count;
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <QEIRead+0xd0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
					break;
 80035c2:	e009      	b.n	80035d8 <QEIRead+0xa0>

		case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <QEIRead+0xd4>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <QEIRead+0xd8>)
 80035cc:	801a      	strh	r2, [r3, #0]
					value = BIOS_QEI6.count;
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <QEIRead+0xd8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
					break;
 80035d4:	e000      	b.n	80035d8 <QEIRead+0xa0>

		default: break;
 80035d6:	bf00      	nop
	}

	return value;
 80035d8:	68fb      	ldr	r3, [r7, #12]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40010000 	.word	0x40010000
 80035ec:	20001aa0 	.word	0x20001aa0
 80035f0:	20001aa4 	.word	0x20001aa4
 80035f4:	40000400 	.word	0x40000400
 80035f8:	20001a9c 	.word	0x20001a9c
 80035fc:	40000800 	.word	0x40000800
 8003600:	20001ac4 	.word	0x20001ac4
 8003604:	40000c00 	.word	0x40000c00
 8003608:	20001ac0 	.word	0x20001ac0
 800360c:	40010400 	.word	0x40010400
 8003610:	20001ac8 	.word	0x20001ac8

08003614 <QEI1Init>:
 * Function Example		: QEI1Init();
 */

void QEI1Init(uint16_t preemptionpriority, uint16_t subpriority,
				  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af02      	add	r7, sp, #8
 800361a:	60ba      	str	r2, [r7, #8]
 800361c:	461a      	mov	r2, r3
 800361e:	4603      	mov	r3, r0
 8003620:	81fb      	strh	r3, [r7, #14]
 8003622:	460b      	mov	r3, r1
 8003624:	81bb      	strh	r3, [r7, #12]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800362a:	2101      	movs	r1, #1
 800362c:	2001      	movs	r0, #1
 800362e:	f7fd fd55 	bl	80010dc <RCC_APB2PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003632:	88f9      	ldrh	r1, [r7, #6]
 8003634:	2301      	movs	r3, #1
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	2302      	movs	r3, #2
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	2202      	movs	r2, #2
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f7fe fc3f 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003646:	8bb9      	ldrh	r1, [r7, #28]
 8003648:	2301      	movs	r3, #1
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	2302      	movs	r3, #2
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	2202      	movs	r2, #2
 8003654:	69b8      	ldr	r0, [r7, #24]
 8003656:	f7fe fc35 	bl	8001ec4 <GPIOPinsInit>
	AFConfig(TIM1,GPIOx_pulseA, GPIO_Pin_pulseA);
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d05e      	beq.n	800371e <QEI1Init+0x10a>
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d811      	bhi.n	8003688 <QEI1Init+0x74>
 8003664:	2b08      	cmp	r3, #8
 8003666:	d042      	beq.n	80036ee <QEI1Init+0xda>
 8003668:	2b08      	cmp	r3, #8
 800366a:	d806      	bhi.n	800367a <QEI1Init+0x66>
 800366c:	2b02      	cmp	r3, #2
 800366e:	d032      	beq.n	80036d6 <QEI1Init+0xc2>
 8003670:	2b04      	cmp	r3, #4
 8003672:	d036      	beq.n	80036e2 <QEI1Init+0xce>
 8003674:	2b01      	cmp	r3, #1
 8003676:	d028      	beq.n	80036ca <QEI1Init+0xb6>
 8003678:	e086      	b.n	8003788 <QEI1Init+0x174>
 800367a:	2b20      	cmp	r3, #32
 800367c:	d043      	beq.n	8003706 <QEI1Init+0xf2>
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d047      	beq.n	8003712 <QEI1Init+0xfe>
 8003682:	2b10      	cmp	r3, #16
 8003684:	d039      	beq.n	80036fa <QEI1Init+0xe6>
 8003686:	e07f      	b.n	8003788 <QEI1Init+0x174>
 8003688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800368c:	d05f      	beq.n	800374e <QEI1Init+0x13a>
 800368e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003692:	d809      	bhi.n	80036a8 <QEI1Init+0x94>
 8003694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003698:	d04d      	beq.n	8003736 <QEI1Init+0x122>
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d050      	beq.n	8003742 <QEI1Init+0x12e>
 80036a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a4:	d041      	beq.n	800372a <QEI1Init+0x116>
 80036a6:	e06f      	b.n	8003788 <QEI1Init+0x174>
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ac:	d05b      	beq.n	8003766 <QEI1Init+0x152>
 80036ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b2:	d803      	bhi.n	80036bc <QEI1Init+0xa8>
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b8:	d04f      	beq.n	800375a <QEI1Init+0x146>
 80036ba:	e065      	b.n	8003788 <QEI1Init+0x174>
 80036bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c0:	d057      	beq.n	8003772 <QEI1Init+0x15e>
 80036c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c6:	d05a      	beq.n	800377e <QEI1Init+0x16a>
 80036c8:	e05e      	b.n	8003788 <QEI1Init+0x174>
 80036ca:	2201      	movs	r2, #1
 80036cc:	2100      	movs	r1, #0
 80036ce:	68b8      	ldr	r0, [r7, #8]
 80036d0:	f7fd fbd2 	bl	8000e78 <GPIO_PinAFConfig>
 80036d4:	e058      	b.n	8003788 <QEI1Init+0x174>
 80036d6:	2201      	movs	r2, #1
 80036d8:	2101      	movs	r1, #1
 80036da:	68b8      	ldr	r0, [r7, #8]
 80036dc:	f7fd fbcc 	bl	8000e78 <GPIO_PinAFConfig>
 80036e0:	e052      	b.n	8003788 <QEI1Init+0x174>
 80036e2:	2201      	movs	r2, #1
 80036e4:	2102      	movs	r1, #2
 80036e6:	68b8      	ldr	r0, [r7, #8]
 80036e8:	f7fd fbc6 	bl	8000e78 <GPIO_PinAFConfig>
 80036ec:	e04c      	b.n	8003788 <QEI1Init+0x174>
 80036ee:	2201      	movs	r2, #1
 80036f0:	2103      	movs	r1, #3
 80036f2:	68b8      	ldr	r0, [r7, #8]
 80036f4:	f7fd fbc0 	bl	8000e78 <GPIO_PinAFConfig>
 80036f8:	e046      	b.n	8003788 <QEI1Init+0x174>
 80036fa:	2201      	movs	r2, #1
 80036fc:	2104      	movs	r1, #4
 80036fe:	68b8      	ldr	r0, [r7, #8]
 8003700:	f7fd fbba 	bl	8000e78 <GPIO_PinAFConfig>
 8003704:	e040      	b.n	8003788 <QEI1Init+0x174>
 8003706:	2201      	movs	r2, #1
 8003708:	2105      	movs	r1, #5
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f7fd fbb4 	bl	8000e78 <GPIO_PinAFConfig>
 8003710:	e03a      	b.n	8003788 <QEI1Init+0x174>
 8003712:	2201      	movs	r2, #1
 8003714:	2106      	movs	r1, #6
 8003716:	68b8      	ldr	r0, [r7, #8]
 8003718:	f7fd fbae 	bl	8000e78 <GPIO_PinAFConfig>
 800371c:	e034      	b.n	8003788 <QEI1Init+0x174>
 800371e:	2201      	movs	r2, #1
 8003720:	2107      	movs	r1, #7
 8003722:	68b8      	ldr	r0, [r7, #8]
 8003724:	f7fd fba8 	bl	8000e78 <GPIO_PinAFConfig>
 8003728:	e02e      	b.n	8003788 <QEI1Init+0x174>
 800372a:	2201      	movs	r2, #1
 800372c:	2108      	movs	r1, #8
 800372e:	68b8      	ldr	r0, [r7, #8]
 8003730:	f7fd fba2 	bl	8000e78 <GPIO_PinAFConfig>
 8003734:	e028      	b.n	8003788 <QEI1Init+0x174>
 8003736:	2201      	movs	r2, #1
 8003738:	2109      	movs	r1, #9
 800373a:	68b8      	ldr	r0, [r7, #8]
 800373c:	f7fd fb9c 	bl	8000e78 <GPIO_PinAFConfig>
 8003740:	e022      	b.n	8003788 <QEI1Init+0x174>
 8003742:	2201      	movs	r2, #1
 8003744:	210a      	movs	r1, #10
 8003746:	68b8      	ldr	r0, [r7, #8]
 8003748:	f7fd fb96 	bl	8000e78 <GPIO_PinAFConfig>
 800374c:	e01c      	b.n	8003788 <QEI1Init+0x174>
 800374e:	2201      	movs	r2, #1
 8003750:	210b      	movs	r1, #11
 8003752:	68b8      	ldr	r0, [r7, #8]
 8003754:	f7fd fb90 	bl	8000e78 <GPIO_PinAFConfig>
 8003758:	e016      	b.n	8003788 <QEI1Init+0x174>
 800375a:	2201      	movs	r2, #1
 800375c:	210c      	movs	r1, #12
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7fd fb8a 	bl	8000e78 <GPIO_PinAFConfig>
 8003764:	e010      	b.n	8003788 <QEI1Init+0x174>
 8003766:	2201      	movs	r2, #1
 8003768:	210d      	movs	r1, #13
 800376a:	68b8      	ldr	r0, [r7, #8]
 800376c:	f7fd fb84 	bl	8000e78 <GPIO_PinAFConfig>
 8003770:	e00a      	b.n	8003788 <QEI1Init+0x174>
 8003772:	2201      	movs	r2, #1
 8003774:	210e      	movs	r1, #14
 8003776:	68b8      	ldr	r0, [r7, #8]
 8003778:	f7fd fb7e 	bl	8000e78 <GPIO_PinAFConfig>
 800377c:	e004      	b.n	8003788 <QEI1Init+0x174>
 800377e:	2201      	movs	r2, #1
 8003780:	210f      	movs	r1, #15
 8003782:	68b8      	ldr	r0, [r7, #8]
 8003784:	f7fd fb78 	bl	8000e78 <GPIO_PinAFConfig>
 8003788:	bf00      	nop
	AFConfig(TIM1,GPIOx_pulseB, GPIO_Pin_pulseB);
 800378a:	8bbb      	ldrh	r3, [r7, #28]
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d05e      	beq.n	800384e <QEI1Init+0x23a>
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d811      	bhi.n	80037b8 <QEI1Init+0x1a4>
 8003794:	2b08      	cmp	r3, #8
 8003796:	d042      	beq.n	800381e <QEI1Init+0x20a>
 8003798:	2b08      	cmp	r3, #8
 800379a:	d806      	bhi.n	80037aa <QEI1Init+0x196>
 800379c:	2b02      	cmp	r3, #2
 800379e:	d032      	beq.n	8003806 <QEI1Init+0x1f2>
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d036      	beq.n	8003812 <QEI1Init+0x1fe>
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d028      	beq.n	80037fa <QEI1Init+0x1e6>
 80037a8:	e086      	b.n	80038b8 <QEI1Init+0x2a4>
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d043      	beq.n	8003836 <QEI1Init+0x222>
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d047      	beq.n	8003842 <QEI1Init+0x22e>
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d039      	beq.n	800382a <QEI1Init+0x216>
 80037b6:	e07f      	b.n	80038b8 <QEI1Init+0x2a4>
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037bc:	d05f      	beq.n	800387e <QEI1Init+0x26a>
 80037be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c2:	d809      	bhi.n	80037d8 <QEI1Init+0x1c4>
 80037c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c8:	d04d      	beq.n	8003866 <QEI1Init+0x252>
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ce:	d050      	beq.n	8003872 <QEI1Init+0x25e>
 80037d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d4:	d041      	beq.n	800385a <QEI1Init+0x246>
 80037d6:	e06f      	b.n	80038b8 <QEI1Init+0x2a4>
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	d05b      	beq.n	8003896 <QEI1Init+0x282>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	d803      	bhi.n	80037ec <QEI1Init+0x1d8>
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e8:	d04f      	beq.n	800388a <QEI1Init+0x276>
 80037ea:	e065      	b.n	80038b8 <QEI1Init+0x2a4>
 80037ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037f0:	d057      	beq.n	80038a2 <QEI1Init+0x28e>
 80037f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f6:	d05a      	beq.n	80038ae <QEI1Init+0x29a>
 80037f8:	e05e      	b.n	80038b8 <QEI1Init+0x2a4>
 80037fa:	2201      	movs	r2, #1
 80037fc:	2100      	movs	r1, #0
 80037fe:	69b8      	ldr	r0, [r7, #24]
 8003800:	f7fd fb3a 	bl	8000e78 <GPIO_PinAFConfig>
 8003804:	e058      	b.n	80038b8 <QEI1Init+0x2a4>
 8003806:	2201      	movs	r2, #1
 8003808:	2101      	movs	r1, #1
 800380a:	69b8      	ldr	r0, [r7, #24]
 800380c:	f7fd fb34 	bl	8000e78 <GPIO_PinAFConfig>
 8003810:	e052      	b.n	80038b8 <QEI1Init+0x2a4>
 8003812:	2201      	movs	r2, #1
 8003814:	2102      	movs	r1, #2
 8003816:	69b8      	ldr	r0, [r7, #24]
 8003818:	f7fd fb2e 	bl	8000e78 <GPIO_PinAFConfig>
 800381c:	e04c      	b.n	80038b8 <QEI1Init+0x2a4>
 800381e:	2201      	movs	r2, #1
 8003820:	2103      	movs	r1, #3
 8003822:	69b8      	ldr	r0, [r7, #24]
 8003824:	f7fd fb28 	bl	8000e78 <GPIO_PinAFConfig>
 8003828:	e046      	b.n	80038b8 <QEI1Init+0x2a4>
 800382a:	2201      	movs	r2, #1
 800382c:	2104      	movs	r1, #4
 800382e:	69b8      	ldr	r0, [r7, #24]
 8003830:	f7fd fb22 	bl	8000e78 <GPIO_PinAFConfig>
 8003834:	e040      	b.n	80038b8 <QEI1Init+0x2a4>
 8003836:	2201      	movs	r2, #1
 8003838:	2105      	movs	r1, #5
 800383a:	69b8      	ldr	r0, [r7, #24]
 800383c:	f7fd fb1c 	bl	8000e78 <GPIO_PinAFConfig>
 8003840:	e03a      	b.n	80038b8 <QEI1Init+0x2a4>
 8003842:	2201      	movs	r2, #1
 8003844:	2106      	movs	r1, #6
 8003846:	69b8      	ldr	r0, [r7, #24]
 8003848:	f7fd fb16 	bl	8000e78 <GPIO_PinAFConfig>
 800384c:	e034      	b.n	80038b8 <QEI1Init+0x2a4>
 800384e:	2201      	movs	r2, #1
 8003850:	2107      	movs	r1, #7
 8003852:	69b8      	ldr	r0, [r7, #24]
 8003854:	f7fd fb10 	bl	8000e78 <GPIO_PinAFConfig>
 8003858:	e02e      	b.n	80038b8 <QEI1Init+0x2a4>
 800385a:	2201      	movs	r2, #1
 800385c:	2108      	movs	r1, #8
 800385e:	69b8      	ldr	r0, [r7, #24]
 8003860:	f7fd fb0a 	bl	8000e78 <GPIO_PinAFConfig>
 8003864:	e028      	b.n	80038b8 <QEI1Init+0x2a4>
 8003866:	2201      	movs	r2, #1
 8003868:	2109      	movs	r1, #9
 800386a:	69b8      	ldr	r0, [r7, #24]
 800386c:	f7fd fb04 	bl	8000e78 <GPIO_PinAFConfig>
 8003870:	e022      	b.n	80038b8 <QEI1Init+0x2a4>
 8003872:	2201      	movs	r2, #1
 8003874:	210a      	movs	r1, #10
 8003876:	69b8      	ldr	r0, [r7, #24]
 8003878:	f7fd fafe 	bl	8000e78 <GPIO_PinAFConfig>
 800387c:	e01c      	b.n	80038b8 <QEI1Init+0x2a4>
 800387e:	2201      	movs	r2, #1
 8003880:	210b      	movs	r1, #11
 8003882:	69b8      	ldr	r0, [r7, #24]
 8003884:	f7fd faf8 	bl	8000e78 <GPIO_PinAFConfig>
 8003888:	e016      	b.n	80038b8 <QEI1Init+0x2a4>
 800388a:	2201      	movs	r2, #1
 800388c:	210c      	movs	r1, #12
 800388e:	69b8      	ldr	r0, [r7, #24]
 8003890:	f7fd faf2 	bl	8000e78 <GPIO_PinAFConfig>
 8003894:	e010      	b.n	80038b8 <QEI1Init+0x2a4>
 8003896:	2201      	movs	r2, #1
 8003898:	210d      	movs	r1, #13
 800389a:	69b8      	ldr	r0, [r7, #24]
 800389c:	f7fd faec 	bl	8000e78 <GPIO_PinAFConfig>
 80038a0:	e00a      	b.n	80038b8 <QEI1Init+0x2a4>
 80038a2:	2201      	movs	r2, #1
 80038a4:	210e      	movs	r1, #14
 80038a6:	69b8      	ldr	r0, [r7, #24]
 80038a8:	f7fd fae6 	bl	8000e78 <GPIO_PinAFConfig>
 80038ac:	e004      	b.n	80038b8 <QEI1Init+0x2a4>
 80038ae:	2201      	movs	r2, #1
 80038b0:	210f      	movs	r1, #15
 80038b2:	69b8      	ldr	r0, [r7, #24]
 80038b4:	f7fd fae0 	bl	8000e78 <GPIO_PinAFConfig>
 80038b8:	bf00      	nop

	BIOS_QEI1_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 80038ba:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <QEI1Init+0x320>)
 80038bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038c0:	605a      	str	r2, [r3, #4]
	BIOS_QEI1_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <QEI1Init+0x320>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	801a      	strh	r2, [r3, #0]
	BIOS_QEI1_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <QEI1Init+0x320>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	811a      	strh	r2, [r3, #8]
	BIOS_QEI1_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <QEI1Init+0x320>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM1, &BIOS_QEI1_TIM_TimeBaseStructure);
 80038d4:	4917      	ldr	r1, [pc, #92]	; (8003934 <QEI1Init+0x320>)
 80038d6:	4818      	ldr	r0, [pc, #96]	; (8003938 <QEI1Init+0x324>)
 80038d8:	f7fd fc20 	bl	800111c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM1, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 80038dc:	2300      	movs	r3, #0
 80038de:	2200      	movs	r2, #0
 80038e0:	2103      	movs	r1, #3
 80038e2:	4815      	ldr	r0, [pc, #84]	; (8003938 <QEI1Init+0x324>)
 80038e4:	f7fd ffaf 	bl	8001846 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 80038e8:	2101      	movs	r1, #1
 80038ea:	4813      	ldr	r0, [pc, #76]	; (8003938 <QEI1Init+0x324>)
 80038ec:	f7fd fc82 	bl	80011f4 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM1, TIM_IT_Update );
 80038f0:	2101      	movs	r1, #1
 80038f2:	4811      	ldr	r0, [pc, #68]	; (8003938 <QEI1Init+0x324>)
 80038f4:	f7fd ff96 	bl	8001824 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 80038f8:	2201      	movs	r2, #1
 80038fa:	2101      	movs	r1, #1
 80038fc:	480e      	ldr	r0, [pc, #56]	; (8003938 <QEI1Init+0x324>)
 80038fe:	f7fd ff43 	bl	8001788 <TIM_ITConfig>

	BIOS_QEI1_NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn;
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <QEI1Init+0x328>)
 8003904:	2219      	movs	r2, #25
 8003906:	701a      	strb	r2, [r3, #0]
	BIOS_QEI1_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8003908:	89fb      	ldrh	r3, [r7, #14]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <QEI1Init+0x328>)
 800390e:	705a      	strb	r2, [r3, #1]
	BIOS_QEI1_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8003910:	89bb      	ldrh	r3, [r7, #12]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <QEI1Init+0x328>)
 8003916:	709a      	strb	r2, [r3, #2]
	BIOS_QEI1_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <QEI1Init+0x328>)
 800391a:	2201      	movs	r2, #1
 800391c:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI1_NVIC_InitStructure);
 800391e:	4807      	ldr	r0, [pc, #28]	; (800393c <QEI1Init+0x328>)
 8003920:	f7fd f9a2 	bl	8000c68 <NVIC_Init>
	TIM_Cmd(TIM1, ENABLE);
 8003924:	2101      	movs	r1, #1
 8003926:	4804      	ldr	r0, [pc, #16]	; (8003938 <QEI1Init+0x324>)
 8003928:	f7fd fc84 	bl	8001234 <TIM_Cmd>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000780 	.word	0x20000780
 8003938:	40010000 	.word	0x40010000
 800393c:	2000078c 	.word	0x2000078c

08003940 <QEI2Init>:
 * Function Example		: QEI2Init();
 */

void QEI2Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	60ba      	str	r2, [r7, #8]
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	81fb      	strh	r3, [r7, #14]
 800394e:	460b      	mov	r3, r1
 8003950:	81bb      	strh	r3, [r7, #12]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003956:	2101      	movs	r1, #1
 8003958:	2001      	movs	r0, #1
 800395a:	f7fd fb9f 	bl	800109c <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 800395e:	88f9      	ldrh	r1, [r7, #6]
 8003960:	2301      	movs	r3, #1
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	2302      	movs	r3, #2
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2300      	movs	r3, #0
 800396a:	2202      	movs	r2, #2
 800396c:	68b8      	ldr	r0, [r7, #8]
 800396e:	f7fe faa9 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003972:	8bb9      	ldrh	r1, [r7, #28]
 8003974:	2301      	movs	r3, #1
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	2302      	movs	r3, #2
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	2202      	movs	r2, #2
 8003980:	69b8      	ldr	r0, [r7, #24]
 8003982:	f7fe fa9f 	bl	8001ec4 <GPIOPinsInit>
	AFConfig(TIM2,GPIOx_pulseA, GPIO_Pin_pulseA);
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d05e      	beq.n	8003a4a <QEI2Init+0x10a>
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d811      	bhi.n	80039b4 <QEI2Init+0x74>
 8003990:	2b08      	cmp	r3, #8
 8003992:	d042      	beq.n	8003a1a <QEI2Init+0xda>
 8003994:	2b08      	cmp	r3, #8
 8003996:	d806      	bhi.n	80039a6 <QEI2Init+0x66>
 8003998:	2b02      	cmp	r3, #2
 800399a:	d032      	beq.n	8003a02 <QEI2Init+0xc2>
 800399c:	2b04      	cmp	r3, #4
 800399e:	d036      	beq.n	8003a0e <QEI2Init+0xce>
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d028      	beq.n	80039f6 <QEI2Init+0xb6>
 80039a4:	e086      	b.n	8003ab4 <QEI2Init+0x174>
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d043      	beq.n	8003a32 <QEI2Init+0xf2>
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d047      	beq.n	8003a3e <QEI2Init+0xfe>
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d039      	beq.n	8003a26 <QEI2Init+0xe6>
 80039b2:	e07f      	b.n	8003ab4 <QEI2Init+0x174>
 80039b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b8:	d05f      	beq.n	8003a7a <QEI2Init+0x13a>
 80039ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039be:	d809      	bhi.n	80039d4 <QEI2Init+0x94>
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d04d      	beq.n	8003a62 <QEI2Init+0x122>
 80039c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ca:	d050      	beq.n	8003a6e <QEI2Init+0x12e>
 80039cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d0:	d041      	beq.n	8003a56 <QEI2Init+0x116>
 80039d2:	e06f      	b.n	8003ab4 <QEI2Init+0x174>
 80039d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d8:	d05b      	beq.n	8003a92 <QEI2Init+0x152>
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039de:	d803      	bhi.n	80039e8 <QEI2Init+0xa8>
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d04f      	beq.n	8003a86 <QEI2Init+0x146>
 80039e6:	e065      	b.n	8003ab4 <QEI2Init+0x174>
 80039e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ec:	d057      	beq.n	8003a9e <QEI2Init+0x15e>
 80039ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f2:	d05a      	beq.n	8003aaa <QEI2Init+0x16a>
 80039f4:	e05e      	b.n	8003ab4 <QEI2Init+0x174>
 80039f6:	2201      	movs	r2, #1
 80039f8:	2100      	movs	r1, #0
 80039fa:	68b8      	ldr	r0, [r7, #8]
 80039fc:	f7fd fa3c 	bl	8000e78 <GPIO_PinAFConfig>
 8003a00:	e058      	b.n	8003ab4 <QEI2Init+0x174>
 8003a02:	2201      	movs	r2, #1
 8003a04:	2101      	movs	r1, #1
 8003a06:	68b8      	ldr	r0, [r7, #8]
 8003a08:	f7fd fa36 	bl	8000e78 <GPIO_PinAFConfig>
 8003a0c:	e052      	b.n	8003ab4 <QEI2Init+0x174>
 8003a0e:	2201      	movs	r2, #1
 8003a10:	2102      	movs	r1, #2
 8003a12:	68b8      	ldr	r0, [r7, #8]
 8003a14:	f7fd fa30 	bl	8000e78 <GPIO_PinAFConfig>
 8003a18:	e04c      	b.n	8003ab4 <QEI2Init+0x174>
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2103      	movs	r1, #3
 8003a1e:	68b8      	ldr	r0, [r7, #8]
 8003a20:	f7fd fa2a 	bl	8000e78 <GPIO_PinAFConfig>
 8003a24:	e046      	b.n	8003ab4 <QEI2Init+0x174>
 8003a26:	2201      	movs	r2, #1
 8003a28:	2104      	movs	r1, #4
 8003a2a:	68b8      	ldr	r0, [r7, #8]
 8003a2c:	f7fd fa24 	bl	8000e78 <GPIO_PinAFConfig>
 8003a30:	e040      	b.n	8003ab4 <QEI2Init+0x174>
 8003a32:	2201      	movs	r2, #1
 8003a34:	2105      	movs	r1, #5
 8003a36:	68b8      	ldr	r0, [r7, #8]
 8003a38:	f7fd fa1e 	bl	8000e78 <GPIO_PinAFConfig>
 8003a3c:	e03a      	b.n	8003ab4 <QEI2Init+0x174>
 8003a3e:	2201      	movs	r2, #1
 8003a40:	2106      	movs	r1, #6
 8003a42:	68b8      	ldr	r0, [r7, #8]
 8003a44:	f7fd fa18 	bl	8000e78 <GPIO_PinAFConfig>
 8003a48:	e034      	b.n	8003ab4 <QEI2Init+0x174>
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	2107      	movs	r1, #7
 8003a4e:	68b8      	ldr	r0, [r7, #8]
 8003a50:	f7fd fa12 	bl	8000e78 <GPIO_PinAFConfig>
 8003a54:	e02e      	b.n	8003ab4 <QEI2Init+0x174>
 8003a56:	2201      	movs	r2, #1
 8003a58:	2108      	movs	r1, #8
 8003a5a:	68b8      	ldr	r0, [r7, #8]
 8003a5c:	f7fd fa0c 	bl	8000e78 <GPIO_PinAFConfig>
 8003a60:	e028      	b.n	8003ab4 <QEI2Init+0x174>
 8003a62:	2201      	movs	r2, #1
 8003a64:	2109      	movs	r1, #9
 8003a66:	68b8      	ldr	r0, [r7, #8]
 8003a68:	f7fd fa06 	bl	8000e78 <GPIO_PinAFConfig>
 8003a6c:	e022      	b.n	8003ab4 <QEI2Init+0x174>
 8003a6e:	2201      	movs	r2, #1
 8003a70:	210a      	movs	r1, #10
 8003a72:	68b8      	ldr	r0, [r7, #8]
 8003a74:	f7fd fa00 	bl	8000e78 <GPIO_PinAFConfig>
 8003a78:	e01c      	b.n	8003ab4 <QEI2Init+0x174>
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	210b      	movs	r1, #11
 8003a7e:	68b8      	ldr	r0, [r7, #8]
 8003a80:	f7fd f9fa 	bl	8000e78 <GPIO_PinAFConfig>
 8003a84:	e016      	b.n	8003ab4 <QEI2Init+0x174>
 8003a86:	2201      	movs	r2, #1
 8003a88:	210c      	movs	r1, #12
 8003a8a:	68b8      	ldr	r0, [r7, #8]
 8003a8c:	f7fd f9f4 	bl	8000e78 <GPIO_PinAFConfig>
 8003a90:	e010      	b.n	8003ab4 <QEI2Init+0x174>
 8003a92:	2201      	movs	r2, #1
 8003a94:	210d      	movs	r1, #13
 8003a96:	68b8      	ldr	r0, [r7, #8]
 8003a98:	f7fd f9ee 	bl	8000e78 <GPIO_PinAFConfig>
 8003a9c:	e00a      	b.n	8003ab4 <QEI2Init+0x174>
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	210e      	movs	r1, #14
 8003aa2:	68b8      	ldr	r0, [r7, #8]
 8003aa4:	f7fd f9e8 	bl	8000e78 <GPIO_PinAFConfig>
 8003aa8:	e004      	b.n	8003ab4 <QEI2Init+0x174>
 8003aaa:	2201      	movs	r2, #1
 8003aac:	210f      	movs	r1, #15
 8003aae:	68b8      	ldr	r0, [r7, #8]
 8003ab0:	f7fd f9e2 	bl	8000e78 <GPIO_PinAFConfig>
 8003ab4:	bf00      	nop
	AFConfig(TIM2,GPIOx_pulseB, GPIO_Pin_pulseB);
 8003ab6:	8bbb      	ldrh	r3, [r7, #28]
 8003ab8:	2b80      	cmp	r3, #128	; 0x80
 8003aba:	d05e      	beq.n	8003b7a <QEI2Init+0x23a>
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d811      	bhi.n	8003ae4 <QEI2Init+0x1a4>
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d042      	beq.n	8003b4a <QEI2Init+0x20a>
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d806      	bhi.n	8003ad6 <QEI2Init+0x196>
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d032      	beq.n	8003b32 <QEI2Init+0x1f2>
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d036      	beq.n	8003b3e <QEI2Init+0x1fe>
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d028      	beq.n	8003b26 <QEI2Init+0x1e6>
 8003ad4:	e086      	b.n	8003be4 <QEI2Init+0x2a4>
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d043      	beq.n	8003b62 <QEI2Init+0x222>
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d047      	beq.n	8003b6e <QEI2Init+0x22e>
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d039      	beq.n	8003b56 <QEI2Init+0x216>
 8003ae2:	e07f      	b.n	8003be4 <QEI2Init+0x2a4>
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae8:	d05f      	beq.n	8003baa <QEI2Init+0x26a>
 8003aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aee:	d809      	bhi.n	8003b04 <QEI2Init+0x1c4>
 8003af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af4:	d04d      	beq.n	8003b92 <QEI2Init+0x252>
 8003af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afa:	d050      	beq.n	8003b9e <QEI2Init+0x25e>
 8003afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b00:	d041      	beq.n	8003b86 <QEI2Init+0x246>
 8003b02:	e06f      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b08:	d05b      	beq.n	8003bc2 <QEI2Init+0x282>
 8003b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b0e:	d803      	bhi.n	8003b18 <QEI2Init+0x1d8>
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d04f      	beq.n	8003bb6 <QEI2Init+0x276>
 8003b16:	e065      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b1c:	d057      	beq.n	8003bce <QEI2Init+0x28e>
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d05a      	beq.n	8003bda <QEI2Init+0x29a>
 8003b24:	e05e      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b26:	2201      	movs	r2, #1
 8003b28:	2100      	movs	r1, #0
 8003b2a:	69b8      	ldr	r0, [r7, #24]
 8003b2c:	f7fd f9a4 	bl	8000e78 <GPIO_PinAFConfig>
 8003b30:	e058      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b32:	2201      	movs	r2, #1
 8003b34:	2101      	movs	r1, #1
 8003b36:	69b8      	ldr	r0, [r7, #24]
 8003b38:	f7fd f99e 	bl	8000e78 <GPIO_PinAFConfig>
 8003b3c:	e052      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b3e:	2201      	movs	r2, #1
 8003b40:	2102      	movs	r1, #2
 8003b42:	69b8      	ldr	r0, [r7, #24]
 8003b44:	f7fd f998 	bl	8000e78 <GPIO_PinAFConfig>
 8003b48:	e04c      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	2103      	movs	r1, #3
 8003b4e:	69b8      	ldr	r0, [r7, #24]
 8003b50:	f7fd f992 	bl	8000e78 <GPIO_PinAFConfig>
 8003b54:	e046      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b56:	2201      	movs	r2, #1
 8003b58:	2104      	movs	r1, #4
 8003b5a:	69b8      	ldr	r0, [r7, #24]
 8003b5c:	f7fd f98c 	bl	8000e78 <GPIO_PinAFConfig>
 8003b60:	e040      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b62:	2201      	movs	r2, #1
 8003b64:	2105      	movs	r1, #5
 8003b66:	69b8      	ldr	r0, [r7, #24]
 8003b68:	f7fd f986 	bl	8000e78 <GPIO_PinAFConfig>
 8003b6c:	e03a      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b6e:	2201      	movs	r2, #1
 8003b70:	2106      	movs	r1, #6
 8003b72:	69b8      	ldr	r0, [r7, #24]
 8003b74:	f7fd f980 	bl	8000e78 <GPIO_PinAFConfig>
 8003b78:	e034      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2107      	movs	r1, #7
 8003b7e:	69b8      	ldr	r0, [r7, #24]
 8003b80:	f7fd f97a 	bl	8000e78 <GPIO_PinAFConfig>
 8003b84:	e02e      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b86:	2201      	movs	r2, #1
 8003b88:	2108      	movs	r1, #8
 8003b8a:	69b8      	ldr	r0, [r7, #24]
 8003b8c:	f7fd f974 	bl	8000e78 <GPIO_PinAFConfig>
 8003b90:	e028      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b92:	2201      	movs	r2, #1
 8003b94:	2109      	movs	r1, #9
 8003b96:	69b8      	ldr	r0, [r7, #24]
 8003b98:	f7fd f96e 	bl	8000e78 <GPIO_PinAFConfig>
 8003b9c:	e022      	b.n	8003be4 <QEI2Init+0x2a4>
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	210a      	movs	r1, #10
 8003ba2:	69b8      	ldr	r0, [r7, #24]
 8003ba4:	f7fd f968 	bl	8000e78 <GPIO_PinAFConfig>
 8003ba8:	e01c      	b.n	8003be4 <QEI2Init+0x2a4>
 8003baa:	2201      	movs	r2, #1
 8003bac:	210b      	movs	r1, #11
 8003bae:	69b8      	ldr	r0, [r7, #24]
 8003bb0:	f7fd f962 	bl	8000e78 <GPIO_PinAFConfig>
 8003bb4:	e016      	b.n	8003be4 <QEI2Init+0x2a4>
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	210c      	movs	r1, #12
 8003bba:	69b8      	ldr	r0, [r7, #24]
 8003bbc:	f7fd f95c 	bl	8000e78 <GPIO_PinAFConfig>
 8003bc0:	e010      	b.n	8003be4 <QEI2Init+0x2a4>
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	210d      	movs	r1, #13
 8003bc6:	69b8      	ldr	r0, [r7, #24]
 8003bc8:	f7fd f956 	bl	8000e78 <GPIO_PinAFConfig>
 8003bcc:	e00a      	b.n	8003be4 <QEI2Init+0x2a4>
 8003bce:	2201      	movs	r2, #1
 8003bd0:	210e      	movs	r1, #14
 8003bd2:	69b8      	ldr	r0, [r7, #24]
 8003bd4:	f7fd f950 	bl	8000e78 <GPIO_PinAFConfig>
 8003bd8:	e004      	b.n	8003be4 <QEI2Init+0x2a4>
 8003bda:	2201      	movs	r2, #1
 8003bdc:	210f      	movs	r1, #15
 8003bde:	69b8      	ldr	r0, [r7, #24]
 8003be0:	f7fd f94a 	bl	8000e78 <GPIO_PinAFConfig>
 8003be4:	bf00      	nop

	BIOS_QEI2_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <QEI2Init+0x32c>)
 8003be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bec:	605a      	str	r2, [r3, #4]
	BIOS_QEI2_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003bee:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <QEI2Init+0x32c>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	801a      	strh	r2, [r3, #0]
	BIOS_QEI2_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <QEI2Init+0x32c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	811a      	strh	r2, [r3, #8]
	BIOS_QEI2_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <QEI2Init+0x32c>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM2, &BIOS_QEI2_TIM_TimeBaseStructure);
 8003c00:	491a      	ldr	r1, [pc, #104]	; (8003c6c <QEI2Init+0x32c>)
 8003c02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c06:	f7fd fa89 	bl	800111c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2103      	movs	r1, #3
 8003c10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c14:	f7fd fe17 	bl	8001846 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM2, ENABLE);
 8003c18:	2101      	movs	r1, #1
 8003c1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c1e:	f7fd fae9 	bl	80011f4 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003c22:	2101      	movs	r1, #1
 8003c24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c28:	f7fd fdfc 	bl	8001824 <TIM_ClearITPendingBit>
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	2101      	movs	r1, #1
 8003c30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c34:	f7fd fda8 	bl	8001788 <TIM_ITConfig>

	BIOS_QEI2_NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <QEI2Init+0x330>)
 8003c3a:	221c      	movs	r2, #28
 8003c3c:	701a      	strb	r2, [r3, #0]
	BIOS_QEI2_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <QEI2Init+0x330>)
 8003c44:	705a      	strb	r2, [r3, #1]
	BIOS_QEI2_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8003c46:	89bb      	ldrh	r3, [r7, #12]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <QEI2Init+0x330>)
 8003c4c:	709a      	strb	r2, [r3, #2]
	BIOS_QEI2_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <QEI2Init+0x330>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI2_NVIC_InitStructure);
 8003c54:	4806      	ldr	r0, [pc, #24]	; (8003c70 <QEI2Init+0x330>)
 8003c56:	f7fd f807 	bl	8000c68 <NVIC_Init>

	TIM_Cmd(TIM2, ENABLE);
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c60:	f7fd fae8 	bl	8001234 <TIM_Cmd>
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000790 	.word	0x20000790
 8003c70:	2000079c 	.word	0x2000079c

08003c74 <QEI3Init>:
 * Function Example		: QEI3Init();
 */

void QEI3Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60ba      	str	r2, [r7, #8]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	81fb      	strh	r3, [r7, #14]
 8003c82:	460b      	mov	r3, r1
 8003c84:	81bb      	strh	r3, [r7, #12]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	2002      	movs	r0, #2
 8003c8e:	f7fd fa05 	bl	800109c <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003c92:	88f9      	ldrh	r1, [r7, #6]
 8003c94:	2301      	movs	r3, #1
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	2302      	movs	r3, #2
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	68b8      	ldr	r0, [r7, #8]
 8003ca2:	f7fe f90f 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003ca6:	8bb9      	ldrh	r1, [r7, #28]
 8003ca8:	2301      	movs	r3, #1
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2302      	movs	r3, #2
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	69b8      	ldr	r0, [r7, #24]
 8003cb6:	f7fe f905 	bl	8001ec4 <GPIOPinsInit>
	AFConfig(TIM3,GPIOx_pulseA, GPIO_Pin_pulseA);
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d05e      	beq.n	8003d7e <QEI3Init+0x10a>
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d811      	bhi.n	8003ce8 <QEI3Init+0x74>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d042      	beq.n	8003d4e <QEI3Init+0xda>
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d806      	bhi.n	8003cda <QEI3Init+0x66>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d032      	beq.n	8003d36 <QEI3Init+0xc2>
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d036      	beq.n	8003d42 <QEI3Init+0xce>
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d028      	beq.n	8003d2a <QEI3Init+0xb6>
 8003cd8:	e086      	b.n	8003de8 <QEI3Init+0x174>
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d043      	beq.n	8003d66 <QEI3Init+0xf2>
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d047      	beq.n	8003d72 <QEI3Init+0xfe>
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d039      	beq.n	8003d5a <QEI3Init+0xe6>
 8003ce6:	e07f      	b.n	8003de8 <QEI3Init+0x174>
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cec:	d05f      	beq.n	8003dae <QEI3Init+0x13a>
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf2:	d809      	bhi.n	8003d08 <QEI3Init+0x94>
 8003cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf8:	d04d      	beq.n	8003d96 <QEI3Init+0x122>
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d050      	beq.n	8003da2 <QEI3Init+0x12e>
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d041      	beq.n	8003d8a <QEI3Init+0x116>
 8003d06:	e06f      	b.n	8003de8 <QEI3Init+0x174>
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	d05b      	beq.n	8003dc6 <QEI3Init+0x152>
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d12:	d803      	bhi.n	8003d1c <QEI3Init+0xa8>
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d04f      	beq.n	8003dba <QEI3Init+0x146>
 8003d1a:	e065      	b.n	8003de8 <QEI3Init+0x174>
 8003d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d20:	d057      	beq.n	8003dd2 <QEI3Init+0x15e>
 8003d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d26:	d05a      	beq.n	8003dde <QEI3Init+0x16a>
 8003d28:	e05e      	b.n	8003de8 <QEI3Init+0x174>
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	68b8      	ldr	r0, [r7, #8]
 8003d30:	f7fd f8a2 	bl	8000e78 <GPIO_PinAFConfig>
 8003d34:	e058      	b.n	8003de8 <QEI3Init+0x174>
 8003d36:	2202      	movs	r2, #2
 8003d38:	2101      	movs	r1, #1
 8003d3a:	68b8      	ldr	r0, [r7, #8]
 8003d3c:	f7fd f89c 	bl	8000e78 <GPIO_PinAFConfig>
 8003d40:	e052      	b.n	8003de8 <QEI3Init+0x174>
 8003d42:	2202      	movs	r2, #2
 8003d44:	2102      	movs	r1, #2
 8003d46:	68b8      	ldr	r0, [r7, #8]
 8003d48:	f7fd f896 	bl	8000e78 <GPIO_PinAFConfig>
 8003d4c:	e04c      	b.n	8003de8 <QEI3Init+0x174>
 8003d4e:	2202      	movs	r2, #2
 8003d50:	2103      	movs	r1, #3
 8003d52:	68b8      	ldr	r0, [r7, #8]
 8003d54:	f7fd f890 	bl	8000e78 <GPIO_PinAFConfig>
 8003d58:	e046      	b.n	8003de8 <QEI3Init+0x174>
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	2104      	movs	r1, #4
 8003d5e:	68b8      	ldr	r0, [r7, #8]
 8003d60:	f7fd f88a 	bl	8000e78 <GPIO_PinAFConfig>
 8003d64:	e040      	b.n	8003de8 <QEI3Init+0x174>
 8003d66:	2202      	movs	r2, #2
 8003d68:	2105      	movs	r1, #5
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f7fd f884 	bl	8000e78 <GPIO_PinAFConfig>
 8003d70:	e03a      	b.n	8003de8 <QEI3Init+0x174>
 8003d72:	2202      	movs	r2, #2
 8003d74:	2106      	movs	r1, #6
 8003d76:	68b8      	ldr	r0, [r7, #8]
 8003d78:	f7fd f87e 	bl	8000e78 <GPIO_PinAFConfig>
 8003d7c:	e034      	b.n	8003de8 <QEI3Init+0x174>
 8003d7e:	2202      	movs	r2, #2
 8003d80:	2107      	movs	r1, #7
 8003d82:	68b8      	ldr	r0, [r7, #8]
 8003d84:	f7fd f878 	bl	8000e78 <GPIO_PinAFConfig>
 8003d88:	e02e      	b.n	8003de8 <QEI3Init+0x174>
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	68b8      	ldr	r0, [r7, #8]
 8003d90:	f7fd f872 	bl	8000e78 <GPIO_PinAFConfig>
 8003d94:	e028      	b.n	8003de8 <QEI3Init+0x174>
 8003d96:	2202      	movs	r2, #2
 8003d98:	2109      	movs	r1, #9
 8003d9a:	68b8      	ldr	r0, [r7, #8]
 8003d9c:	f7fd f86c 	bl	8000e78 <GPIO_PinAFConfig>
 8003da0:	e022      	b.n	8003de8 <QEI3Init+0x174>
 8003da2:	2202      	movs	r2, #2
 8003da4:	210a      	movs	r1, #10
 8003da6:	68b8      	ldr	r0, [r7, #8]
 8003da8:	f7fd f866 	bl	8000e78 <GPIO_PinAFConfig>
 8003dac:	e01c      	b.n	8003de8 <QEI3Init+0x174>
 8003dae:	2202      	movs	r2, #2
 8003db0:	210b      	movs	r1, #11
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	f7fd f860 	bl	8000e78 <GPIO_PinAFConfig>
 8003db8:	e016      	b.n	8003de8 <QEI3Init+0x174>
 8003dba:	2202      	movs	r2, #2
 8003dbc:	210c      	movs	r1, #12
 8003dbe:	68b8      	ldr	r0, [r7, #8]
 8003dc0:	f7fd f85a 	bl	8000e78 <GPIO_PinAFConfig>
 8003dc4:	e010      	b.n	8003de8 <QEI3Init+0x174>
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	210d      	movs	r1, #13
 8003dca:	68b8      	ldr	r0, [r7, #8]
 8003dcc:	f7fd f854 	bl	8000e78 <GPIO_PinAFConfig>
 8003dd0:	e00a      	b.n	8003de8 <QEI3Init+0x174>
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	210e      	movs	r1, #14
 8003dd6:	68b8      	ldr	r0, [r7, #8]
 8003dd8:	f7fd f84e 	bl	8000e78 <GPIO_PinAFConfig>
 8003ddc:	e004      	b.n	8003de8 <QEI3Init+0x174>
 8003dde:	2202      	movs	r2, #2
 8003de0:	210f      	movs	r1, #15
 8003de2:	68b8      	ldr	r0, [r7, #8]
 8003de4:	f7fd f848 	bl	8000e78 <GPIO_PinAFConfig>
 8003de8:	bf00      	nop
	AFConfig(TIM3,GPIOx_pulseB, GPIO_Pin_pulseB);
 8003dea:	8bbb      	ldrh	r3, [r7, #28]
 8003dec:	2b80      	cmp	r3, #128	; 0x80
 8003dee:	d05e      	beq.n	8003eae <QEI3Init+0x23a>
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d811      	bhi.n	8003e18 <QEI3Init+0x1a4>
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d042      	beq.n	8003e7e <QEI3Init+0x20a>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d806      	bhi.n	8003e0a <QEI3Init+0x196>
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d032      	beq.n	8003e66 <QEI3Init+0x1f2>
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d036      	beq.n	8003e72 <QEI3Init+0x1fe>
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d028      	beq.n	8003e5a <QEI3Init+0x1e6>
 8003e08:	e086      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d043      	beq.n	8003e96 <QEI3Init+0x222>
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d047      	beq.n	8003ea2 <QEI3Init+0x22e>
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d039      	beq.n	8003e8a <QEI3Init+0x216>
 8003e16:	e07f      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1c:	d05f      	beq.n	8003ede <QEI3Init+0x26a>
 8003e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e22:	d809      	bhi.n	8003e38 <QEI3Init+0x1c4>
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d04d      	beq.n	8003ec6 <QEI3Init+0x252>
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d050      	beq.n	8003ed2 <QEI3Init+0x25e>
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d041      	beq.n	8003eba <QEI3Init+0x246>
 8003e36:	e06f      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3c:	d05b      	beq.n	8003ef6 <QEI3Init+0x282>
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	d803      	bhi.n	8003e4c <QEI3Init+0x1d8>
 8003e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e48:	d04f      	beq.n	8003eea <QEI3Init+0x276>
 8003e4a:	e065      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e50:	d057      	beq.n	8003f02 <QEI3Init+0x28e>
 8003e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e56:	d05a      	beq.n	8003f0e <QEI3Init+0x29a>
 8003e58:	e05e      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	69b8      	ldr	r0, [r7, #24]
 8003e60:	f7fd f80a 	bl	8000e78 <GPIO_PinAFConfig>
 8003e64:	e058      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e66:	2202      	movs	r2, #2
 8003e68:	2101      	movs	r1, #1
 8003e6a:	69b8      	ldr	r0, [r7, #24]
 8003e6c:	f7fd f804 	bl	8000e78 <GPIO_PinAFConfig>
 8003e70:	e052      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e72:	2202      	movs	r2, #2
 8003e74:	2102      	movs	r1, #2
 8003e76:	69b8      	ldr	r0, [r7, #24]
 8003e78:	f7fc fffe 	bl	8000e78 <GPIO_PinAFConfig>
 8003e7c:	e04c      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e7e:	2202      	movs	r2, #2
 8003e80:	2103      	movs	r1, #3
 8003e82:	69b8      	ldr	r0, [r7, #24]
 8003e84:	f7fc fff8 	bl	8000e78 <GPIO_PinAFConfig>
 8003e88:	e046      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	2104      	movs	r1, #4
 8003e8e:	69b8      	ldr	r0, [r7, #24]
 8003e90:	f7fc fff2 	bl	8000e78 <GPIO_PinAFConfig>
 8003e94:	e040      	b.n	8003f18 <QEI3Init+0x2a4>
 8003e96:	2202      	movs	r2, #2
 8003e98:	2105      	movs	r1, #5
 8003e9a:	69b8      	ldr	r0, [r7, #24]
 8003e9c:	f7fc ffec 	bl	8000e78 <GPIO_PinAFConfig>
 8003ea0:	e03a      	b.n	8003f18 <QEI3Init+0x2a4>
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	2106      	movs	r1, #6
 8003ea6:	69b8      	ldr	r0, [r7, #24]
 8003ea8:	f7fc ffe6 	bl	8000e78 <GPIO_PinAFConfig>
 8003eac:	e034      	b.n	8003f18 <QEI3Init+0x2a4>
 8003eae:	2202      	movs	r2, #2
 8003eb0:	2107      	movs	r1, #7
 8003eb2:	69b8      	ldr	r0, [r7, #24]
 8003eb4:	f7fc ffe0 	bl	8000e78 <GPIO_PinAFConfig>
 8003eb8:	e02e      	b.n	8003f18 <QEI3Init+0x2a4>
 8003eba:	2202      	movs	r2, #2
 8003ebc:	2108      	movs	r1, #8
 8003ebe:	69b8      	ldr	r0, [r7, #24]
 8003ec0:	f7fc ffda 	bl	8000e78 <GPIO_PinAFConfig>
 8003ec4:	e028      	b.n	8003f18 <QEI3Init+0x2a4>
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	2109      	movs	r1, #9
 8003eca:	69b8      	ldr	r0, [r7, #24]
 8003ecc:	f7fc ffd4 	bl	8000e78 <GPIO_PinAFConfig>
 8003ed0:	e022      	b.n	8003f18 <QEI3Init+0x2a4>
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	210a      	movs	r1, #10
 8003ed6:	69b8      	ldr	r0, [r7, #24]
 8003ed8:	f7fc ffce 	bl	8000e78 <GPIO_PinAFConfig>
 8003edc:	e01c      	b.n	8003f18 <QEI3Init+0x2a4>
 8003ede:	2202      	movs	r2, #2
 8003ee0:	210b      	movs	r1, #11
 8003ee2:	69b8      	ldr	r0, [r7, #24]
 8003ee4:	f7fc ffc8 	bl	8000e78 <GPIO_PinAFConfig>
 8003ee8:	e016      	b.n	8003f18 <QEI3Init+0x2a4>
 8003eea:	2202      	movs	r2, #2
 8003eec:	210c      	movs	r1, #12
 8003eee:	69b8      	ldr	r0, [r7, #24]
 8003ef0:	f7fc ffc2 	bl	8000e78 <GPIO_PinAFConfig>
 8003ef4:	e010      	b.n	8003f18 <QEI3Init+0x2a4>
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	210d      	movs	r1, #13
 8003efa:	69b8      	ldr	r0, [r7, #24]
 8003efc:	f7fc ffbc 	bl	8000e78 <GPIO_PinAFConfig>
 8003f00:	e00a      	b.n	8003f18 <QEI3Init+0x2a4>
 8003f02:	2202      	movs	r2, #2
 8003f04:	210e      	movs	r1, #14
 8003f06:	69b8      	ldr	r0, [r7, #24]
 8003f08:	f7fc ffb6 	bl	8000e78 <GPIO_PinAFConfig>
 8003f0c:	e004      	b.n	8003f18 <QEI3Init+0x2a4>
 8003f0e:	2202      	movs	r2, #2
 8003f10:	210f      	movs	r1, #15
 8003f12:	69b8      	ldr	r0, [r7, #24]
 8003f14:	f7fc ffb0 	bl	8000e78 <GPIO_PinAFConfig>
 8003f18:	bf00      	nop

	BIOS_QEI3_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <QEI3Init+0x320>)
 8003f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f20:	605a      	str	r2, [r3, #4]
	BIOS_QEI3_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003f22:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <QEI3Init+0x320>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	801a      	strh	r2, [r3, #0]
	BIOS_QEI3_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <QEI3Init+0x320>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	811a      	strh	r2, [r3, #8]
	BIOS_QEI3_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <QEI3Init+0x320>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM3, &BIOS_QEI3_TIM_TimeBaseStructure);
 8003f34:	4917      	ldr	r1, [pc, #92]	; (8003f94 <QEI3Init+0x320>)
 8003f36:	4818      	ldr	r0, [pc, #96]	; (8003f98 <QEI3Init+0x324>)
 8003f38:	f7fd f8f0 	bl	800111c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2103      	movs	r1, #3
 8003f42:	4815      	ldr	r0, [pc, #84]	; (8003f98 <QEI3Init+0x324>)
 8003f44:	f7fd fc7f 	bl	8001846 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4813      	ldr	r0, [pc, #76]	; (8003f98 <QEI3Init+0x324>)
 8003f4c:	f7fd f952 	bl	80011f4 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM3, TIM_IT_Update );
 8003f50:	2101      	movs	r1, #1
 8003f52:	4811      	ldr	r0, [pc, #68]	; (8003f98 <QEI3Init+0x324>)
 8003f54:	f7fd fc66 	bl	8001824 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	480e      	ldr	r0, [pc, #56]	; (8003f98 <QEI3Init+0x324>)
 8003f5e:	f7fd fc13 	bl	8001788 <TIM_ITConfig>

	BIOS_QEI3_NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <QEI3Init+0x328>)
 8003f64:	221d      	movs	r2, #29
 8003f66:	701a      	strb	r2, [r3, #0]
	BIOS_QEI3_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8003f68:	89fb      	ldrh	r3, [r7, #14]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <QEI3Init+0x328>)
 8003f6e:	705a      	strb	r2, [r3, #1]
	BIOS_QEI3_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8003f70:	89bb      	ldrh	r3, [r7, #12]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <QEI3Init+0x328>)
 8003f76:	709a      	strb	r2, [r3, #2]
	BIOS_QEI3_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <QEI3Init+0x328>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI3_NVIC_InitStructure);
 8003f7e:	4807      	ldr	r0, [pc, #28]	; (8003f9c <QEI3Init+0x328>)
 8003f80:	f7fc fe72 	bl	8000c68 <NVIC_Init>
	TIM_Cmd(TIM3, ENABLE);
 8003f84:	2101      	movs	r1, #1
 8003f86:	4804      	ldr	r0, [pc, #16]	; (8003f98 <QEI3Init+0x324>)
 8003f88:	f7fd f954 	bl	8001234 <TIM_Cmd>
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	200007a0 	.word	0x200007a0
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	200007ac 	.word	0x200007ac

08003fa0 <QEI4Init>:
 * Function Example		: QEI4Init();
 */

void QEI4Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60ba      	str	r2, [r7, #8]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	81fb      	strh	r3, [r7, #14]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	81bb      	strh	r3, [r7, #12]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	2004      	movs	r0, #4
 8003fba:	f7fd f86f 	bl	800109c <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003fbe:	88f9      	ldrh	r1, [r7, #6]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2202      	movs	r2, #2
 8003fcc:	68b8      	ldr	r0, [r7, #8]
 8003fce:	f7fd ff79 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8003fd2:	8bb9      	ldrh	r1, [r7, #28]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	2302      	movs	r3, #2
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2202      	movs	r2, #2
 8003fe0:	69b8      	ldr	r0, [r7, #24]
 8003fe2:	f7fd ff6f 	bl	8001ec4 <GPIOPinsInit>
	AFConfig(TIM4,GPIOx_pulseA, GPIO_Pin_pulseA);
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d05e      	beq.n	80040aa <QEI4Init+0x10a>
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d811      	bhi.n	8004014 <QEI4Init+0x74>
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d042      	beq.n	800407a <QEI4Init+0xda>
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d806      	bhi.n	8004006 <QEI4Init+0x66>
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d032      	beq.n	8004062 <QEI4Init+0xc2>
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d036      	beq.n	800406e <QEI4Init+0xce>
 8004000:	2b01      	cmp	r3, #1
 8004002:	d028      	beq.n	8004056 <QEI4Init+0xb6>
 8004004:	e086      	b.n	8004114 <QEI4Init+0x174>
 8004006:	2b20      	cmp	r3, #32
 8004008:	d043      	beq.n	8004092 <QEI4Init+0xf2>
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d047      	beq.n	800409e <QEI4Init+0xfe>
 800400e:	2b10      	cmp	r3, #16
 8004010:	d039      	beq.n	8004086 <QEI4Init+0xe6>
 8004012:	e07f      	b.n	8004114 <QEI4Init+0x174>
 8004014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004018:	d05f      	beq.n	80040da <QEI4Init+0x13a>
 800401a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800401e:	d809      	bhi.n	8004034 <QEI4Init+0x94>
 8004020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004024:	d04d      	beq.n	80040c2 <QEI4Init+0x122>
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402a:	d050      	beq.n	80040ce <QEI4Init+0x12e>
 800402c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004030:	d041      	beq.n	80040b6 <QEI4Init+0x116>
 8004032:	e06f      	b.n	8004114 <QEI4Init+0x174>
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004038:	d05b      	beq.n	80040f2 <QEI4Init+0x152>
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403e:	d803      	bhi.n	8004048 <QEI4Init+0xa8>
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d04f      	beq.n	80040e6 <QEI4Init+0x146>
 8004046:	e065      	b.n	8004114 <QEI4Init+0x174>
 8004048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800404c:	d057      	beq.n	80040fe <QEI4Init+0x15e>
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	d05a      	beq.n	800410a <QEI4Init+0x16a>
 8004054:	e05e      	b.n	8004114 <QEI4Init+0x174>
 8004056:	2202      	movs	r2, #2
 8004058:	2100      	movs	r1, #0
 800405a:	68b8      	ldr	r0, [r7, #8]
 800405c:	f7fc ff0c 	bl	8000e78 <GPIO_PinAFConfig>
 8004060:	e058      	b.n	8004114 <QEI4Init+0x174>
 8004062:	2202      	movs	r2, #2
 8004064:	2101      	movs	r1, #1
 8004066:	68b8      	ldr	r0, [r7, #8]
 8004068:	f7fc ff06 	bl	8000e78 <GPIO_PinAFConfig>
 800406c:	e052      	b.n	8004114 <QEI4Init+0x174>
 800406e:	2202      	movs	r2, #2
 8004070:	2102      	movs	r1, #2
 8004072:	68b8      	ldr	r0, [r7, #8]
 8004074:	f7fc ff00 	bl	8000e78 <GPIO_PinAFConfig>
 8004078:	e04c      	b.n	8004114 <QEI4Init+0x174>
 800407a:	2202      	movs	r2, #2
 800407c:	2103      	movs	r1, #3
 800407e:	68b8      	ldr	r0, [r7, #8]
 8004080:	f7fc fefa 	bl	8000e78 <GPIO_PinAFConfig>
 8004084:	e046      	b.n	8004114 <QEI4Init+0x174>
 8004086:	2202      	movs	r2, #2
 8004088:	2104      	movs	r1, #4
 800408a:	68b8      	ldr	r0, [r7, #8]
 800408c:	f7fc fef4 	bl	8000e78 <GPIO_PinAFConfig>
 8004090:	e040      	b.n	8004114 <QEI4Init+0x174>
 8004092:	2202      	movs	r2, #2
 8004094:	2105      	movs	r1, #5
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7fc feee 	bl	8000e78 <GPIO_PinAFConfig>
 800409c:	e03a      	b.n	8004114 <QEI4Init+0x174>
 800409e:	2202      	movs	r2, #2
 80040a0:	2106      	movs	r1, #6
 80040a2:	68b8      	ldr	r0, [r7, #8]
 80040a4:	f7fc fee8 	bl	8000e78 <GPIO_PinAFConfig>
 80040a8:	e034      	b.n	8004114 <QEI4Init+0x174>
 80040aa:	2202      	movs	r2, #2
 80040ac:	2107      	movs	r1, #7
 80040ae:	68b8      	ldr	r0, [r7, #8]
 80040b0:	f7fc fee2 	bl	8000e78 <GPIO_PinAFConfig>
 80040b4:	e02e      	b.n	8004114 <QEI4Init+0x174>
 80040b6:	2202      	movs	r2, #2
 80040b8:	2108      	movs	r1, #8
 80040ba:	68b8      	ldr	r0, [r7, #8]
 80040bc:	f7fc fedc 	bl	8000e78 <GPIO_PinAFConfig>
 80040c0:	e028      	b.n	8004114 <QEI4Init+0x174>
 80040c2:	2202      	movs	r2, #2
 80040c4:	2109      	movs	r1, #9
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7fc fed6 	bl	8000e78 <GPIO_PinAFConfig>
 80040cc:	e022      	b.n	8004114 <QEI4Init+0x174>
 80040ce:	2202      	movs	r2, #2
 80040d0:	210a      	movs	r1, #10
 80040d2:	68b8      	ldr	r0, [r7, #8]
 80040d4:	f7fc fed0 	bl	8000e78 <GPIO_PinAFConfig>
 80040d8:	e01c      	b.n	8004114 <QEI4Init+0x174>
 80040da:	2202      	movs	r2, #2
 80040dc:	210b      	movs	r1, #11
 80040de:	68b8      	ldr	r0, [r7, #8]
 80040e0:	f7fc feca 	bl	8000e78 <GPIO_PinAFConfig>
 80040e4:	e016      	b.n	8004114 <QEI4Init+0x174>
 80040e6:	2202      	movs	r2, #2
 80040e8:	210c      	movs	r1, #12
 80040ea:	68b8      	ldr	r0, [r7, #8]
 80040ec:	f7fc fec4 	bl	8000e78 <GPIO_PinAFConfig>
 80040f0:	e010      	b.n	8004114 <QEI4Init+0x174>
 80040f2:	2202      	movs	r2, #2
 80040f4:	210d      	movs	r1, #13
 80040f6:	68b8      	ldr	r0, [r7, #8]
 80040f8:	f7fc febe 	bl	8000e78 <GPIO_PinAFConfig>
 80040fc:	e00a      	b.n	8004114 <QEI4Init+0x174>
 80040fe:	2202      	movs	r2, #2
 8004100:	210e      	movs	r1, #14
 8004102:	68b8      	ldr	r0, [r7, #8]
 8004104:	f7fc feb8 	bl	8000e78 <GPIO_PinAFConfig>
 8004108:	e004      	b.n	8004114 <QEI4Init+0x174>
 800410a:	2202      	movs	r2, #2
 800410c:	210f      	movs	r1, #15
 800410e:	68b8      	ldr	r0, [r7, #8]
 8004110:	f7fc feb2 	bl	8000e78 <GPIO_PinAFConfig>
 8004114:	bf00      	nop
	AFConfig(TIM4,GPIOx_pulseB, GPIO_Pin_pulseB);
 8004116:	8bbb      	ldrh	r3, [r7, #28]
 8004118:	2b80      	cmp	r3, #128	; 0x80
 800411a:	d05e      	beq.n	80041da <QEI4Init+0x23a>
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d811      	bhi.n	8004144 <QEI4Init+0x1a4>
 8004120:	2b08      	cmp	r3, #8
 8004122:	d042      	beq.n	80041aa <QEI4Init+0x20a>
 8004124:	2b08      	cmp	r3, #8
 8004126:	d806      	bhi.n	8004136 <QEI4Init+0x196>
 8004128:	2b02      	cmp	r3, #2
 800412a:	d032      	beq.n	8004192 <QEI4Init+0x1f2>
 800412c:	2b04      	cmp	r3, #4
 800412e:	d036      	beq.n	800419e <QEI4Init+0x1fe>
 8004130:	2b01      	cmp	r3, #1
 8004132:	d028      	beq.n	8004186 <QEI4Init+0x1e6>
 8004134:	e086      	b.n	8004244 <QEI4Init+0x2a4>
 8004136:	2b20      	cmp	r3, #32
 8004138:	d043      	beq.n	80041c2 <QEI4Init+0x222>
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d047      	beq.n	80041ce <QEI4Init+0x22e>
 800413e:	2b10      	cmp	r3, #16
 8004140:	d039      	beq.n	80041b6 <QEI4Init+0x216>
 8004142:	e07f      	b.n	8004244 <QEI4Init+0x2a4>
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004148:	d05f      	beq.n	800420a <QEI4Init+0x26a>
 800414a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414e:	d809      	bhi.n	8004164 <QEI4Init+0x1c4>
 8004150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004154:	d04d      	beq.n	80041f2 <QEI4Init+0x252>
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415a:	d050      	beq.n	80041fe <QEI4Init+0x25e>
 800415c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004160:	d041      	beq.n	80041e6 <QEI4Init+0x246>
 8004162:	e06f      	b.n	8004244 <QEI4Init+0x2a4>
 8004164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004168:	d05b      	beq.n	8004222 <QEI4Init+0x282>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416e:	d803      	bhi.n	8004178 <QEI4Init+0x1d8>
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d04f      	beq.n	8004216 <QEI4Init+0x276>
 8004176:	e065      	b.n	8004244 <QEI4Init+0x2a4>
 8004178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800417c:	d057      	beq.n	800422e <QEI4Init+0x28e>
 800417e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004182:	d05a      	beq.n	800423a <QEI4Init+0x29a>
 8004184:	e05e      	b.n	8004244 <QEI4Init+0x2a4>
 8004186:	2202      	movs	r2, #2
 8004188:	2100      	movs	r1, #0
 800418a:	69b8      	ldr	r0, [r7, #24]
 800418c:	f7fc fe74 	bl	8000e78 <GPIO_PinAFConfig>
 8004190:	e058      	b.n	8004244 <QEI4Init+0x2a4>
 8004192:	2202      	movs	r2, #2
 8004194:	2101      	movs	r1, #1
 8004196:	69b8      	ldr	r0, [r7, #24]
 8004198:	f7fc fe6e 	bl	8000e78 <GPIO_PinAFConfig>
 800419c:	e052      	b.n	8004244 <QEI4Init+0x2a4>
 800419e:	2202      	movs	r2, #2
 80041a0:	2102      	movs	r1, #2
 80041a2:	69b8      	ldr	r0, [r7, #24]
 80041a4:	f7fc fe68 	bl	8000e78 <GPIO_PinAFConfig>
 80041a8:	e04c      	b.n	8004244 <QEI4Init+0x2a4>
 80041aa:	2202      	movs	r2, #2
 80041ac:	2103      	movs	r1, #3
 80041ae:	69b8      	ldr	r0, [r7, #24]
 80041b0:	f7fc fe62 	bl	8000e78 <GPIO_PinAFConfig>
 80041b4:	e046      	b.n	8004244 <QEI4Init+0x2a4>
 80041b6:	2202      	movs	r2, #2
 80041b8:	2104      	movs	r1, #4
 80041ba:	69b8      	ldr	r0, [r7, #24]
 80041bc:	f7fc fe5c 	bl	8000e78 <GPIO_PinAFConfig>
 80041c0:	e040      	b.n	8004244 <QEI4Init+0x2a4>
 80041c2:	2202      	movs	r2, #2
 80041c4:	2105      	movs	r1, #5
 80041c6:	69b8      	ldr	r0, [r7, #24]
 80041c8:	f7fc fe56 	bl	8000e78 <GPIO_PinAFConfig>
 80041cc:	e03a      	b.n	8004244 <QEI4Init+0x2a4>
 80041ce:	2202      	movs	r2, #2
 80041d0:	2106      	movs	r1, #6
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	f7fc fe50 	bl	8000e78 <GPIO_PinAFConfig>
 80041d8:	e034      	b.n	8004244 <QEI4Init+0x2a4>
 80041da:	2202      	movs	r2, #2
 80041dc:	2107      	movs	r1, #7
 80041de:	69b8      	ldr	r0, [r7, #24]
 80041e0:	f7fc fe4a 	bl	8000e78 <GPIO_PinAFConfig>
 80041e4:	e02e      	b.n	8004244 <QEI4Init+0x2a4>
 80041e6:	2202      	movs	r2, #2
 80041e8:	2108      	movs	r1, #8
 80041ea:	69b8      	ldr	r0, [r7, #24]
 80041ec:	f7fc fe44 	bl	8000e78 <GPIO_PinAFConfig>
 80041f0:	e028      	b.n	8004244 <QEI4Init+0x2a4>
 80041f2:	2202      	movs	r2, #2
 80041f4:	2109      	movs	r1, #9
 80041f6:	69b8      	ldr	r0, [r7, #24]
 80041f8:	f7fc fe3e 	bl	8000e78 <GPIO_PinAFConfig>
 80041fc:	e022      	b.n	8004244 <QEI4Init+0x2a4>
 80041fe:	2202      	movs	r2, #2
 8004200:	210a      	movs	r1, #10
 8004202:	69b8      	ldr	r0, [r7, #24]
 8004204:	f7fc fe38 	bl	8000e78 <GPIO_PinAFConfig>
 8004208:	e01c      	b.n	8004244 <QEI4Init+0x2a4>
 800420a:	2202      	movs	r2, #2
 800420c:	210b      	movs	r1, #11
 800420e:	69b8      	ldr	r0, [r7, #24]
 8004210:	f7fc fe32 	bl	8000e78 <GPIO_PinAFConfig>
 8004214:	e016      	b.n	8004244 <QEI4Init+0x2a4>
 8004216:	2202      	movs	r2, #2
 8004218:	210c      	movs	r1, #12
 800421a:	69b8      	ldr	r0, [r7, #24]
 800421c:	f7fc fe2c 	bl	8000e78 <GPIO_PinAFConfig>
 8004220:	e010      	b.n	8004244 <QEI4Init+0x2a4>
 8004222:	2202      	movs	r2, #2
 8004224:	210d      	movs	r1, #13
 8004226:	69b8      	ldr	r0, [r7, #24]
 8004228:	f7fc fe26 	bl	8000e78 <GPIO_PinAFConfig>
 800422c:	e00a      	b.n	8004244 <QEI4Init+0x2a4>
 800422e:	2202      	movs	r2, #2
 8004230:	210e      	movs	r1, #14
 8004232:	69b8      	ldr	r0, [r7, #24]
 8004234:	f7fc fe20 	bl	8000e78 <GPIO_PinAFConfig>
 8004238:	e004      	b.n	8004244 <QEI4Init+0x2a4>
 800423a:	2202      	movs	r2, #2
 800423c:	210f      	movs	r1, #15
 800423e:	69b8      	ldr	r0, [r7, #24]
 8004240:	f7fc fe1a 	bl	8000e78 <GPIO_PinAFConfig>
 8004244:	bf00      	nop

	BIOS_QEI4_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8004246:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <QEI4Init+0x320>)
 8004248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424c:	605a      	str	r2, [r3, #4]
	BIOS_QEI4_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800424e:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <QEI4Init+0x320>)
 8004250:	2200      	movs	r2, #0
 8004252:	801a      	strh	r2, [r3, #0]
	BIOS_QEI4_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <QEI4Init+0x320>)
 8004256:	2200      	movs	r2, #0
 8004258:	811a      	strh	r2, [r3, #8]
	BIOS_QEI4_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800425a:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <QEI4Init+0x320>)
 800425c:	2200      	movs	r2, #0
 800425e:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM4, &BIOS_QEI4_TIM_TimeBaseStructure);
 8004260:	4917      	ldr	r1, [pc, #92]	; (80042c0 <QEI4Init+0x320>)
 8004262:	4818      	ldr	r0, [pc, #96]	; (80042c4 <QEI4Init+0x324>)
 8004264:	f7fc ff5a 	bl	800111c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8004268:	2300      	movs	r3, #0
 800426a:	2200      	movs	r2, #0
 800426c:	2103      	movs	r1, #3
 800426e:	4815      	ldr	r0, [pc, #84]	; (80042c4 <QEI4Init+0x324>)
 8004270:	f7fd fae9 	bl	8001846 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8004274:	2101      	movs	r1, #1
 8004276:	4813      	ldr	r0, [pc, #76]	; (80042c4 <QEI4Init+0x324>)
 8004278:	f7fc ffbc 	bl	80011f4 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM4, TIM_IT_Update );
 800427c:	2101      	movs	r1, #1
 800427e:	4811      	ldr	r0, [pc, #68]	; (80042c4 <QEI4Init+0x324>)
 8004280:	f7fd fad0 	bl	8001824 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8004284:	2201      	movs	r2, #1
 8004286:	2101      	movs	r1, #1
 8004288:	480e      	ldr	r0, [pc, #56]	; (80042c4 <QEI4Init+0x324>)
 800428a:	f7fd fa7d 	bl	8001788 <TIM_ITConfig>

	BIOS_QEI4_NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 800428e:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <QEI4Init+0x328>)
 8004290:	221e      	movs	r2, #30
 8004292:	701a      	strb	r2, [r3, #0]
	BIOS_QEI4_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8004294:	89fb      	ldrh	r3, [r7, #14]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <QEI4Init+0x328>)
 800429a:	705a      	strb	r2, [r3, #1]
	BIOS_QEI4_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 800429c:	89bb      	ldrh	r3, [r7, #12]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <QEI4Init+0x328>)
 80042a2:	709a      	strb	r2, [r3, #2]
	BIOS_QEI4_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <QEI4Init+0x328>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI4_NVIC_InitStructure);
 80042aa:	4807      	ldr	r0, [pc, #28]	; (80042c8 <QEI4Init+0x328>)
 80042ac:	f7fc fcdc 	bl	8000c68 <NVIC_Init>
	TIM_Cmd(TIM4, ENABLE);
 80042b0:	2101      	movs	r1, #1
 80042b2:	4804      	ldr	r0, [pc, #16]	; (80042c4 <QEI4Init+0x324>)
 80042b4:	f7fc ffbe 	bl	8001234 <TIM_Cmd>
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200007b0 	.word	0x200007b0
 80042c4:	40000800 	.word	0x40000800
 80042c8:	200007bc 	.word	0x200007bc

080042cc <QEI5Init>:
 * Function Example		: QEI5Init();
 */

void QEI5Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60ba      	str	r2, [r7, #8]
 80042d4:	461a      	mov	r2, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	81fb      	strh	r3, [r7, #14]
 80042da:	460b      	mov	r3, r1
 80042dc:	81bb      	strh	r3, [r7, #12]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 80042e2:	2101      	movs	r1, #1
 80042e4:	2008      	movs	r0, #8
 80042e6:	f7fc fed9 	bl	800109c <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 80042ea:	88f9      	ldrh	r1, [r7, #6]
 80042ec:	2301      	movs	r3, #1
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	2302      	movs	r3, #2
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	2202      	movs	r2, #2
 80042f8:	68b8      	ldr	r0, [r7, #8]
 80042fa:	f7fd fde3 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 80042fe:	8bb9      	ldrh	r1, [r7, #28]
 8004300:	2301      	movs	r3, #1
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	2302      	movs	r3, #2
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2300      	movs	r3, #0
 800430a:	2202      	movs	r2, #2
 800430c:	69b8      	ldr	r0, [r7, #24]
 800430e:	f7fd fdd9 	bl	8001ec4 <GPIOPinsInit>
	AFConfig(TIM5,GPIOx_pulseA, GPIO_Pin_pulseA);
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d05e      	beq.n	80043d6 <QEI5Init+0x10a>
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d811      	bhi.n	8004340 <QEI5Init+0x74>
 800431c:	2b08      	cmp	r3, #8
 800431e:	d042      	beq.n	80043a6 <QEI5Init+0xda>
 8004320:	2b08      	cmp	r3, #8
 8004322:	d806      	bhi.n	8004332 <QEI5Init+0x66>
 8004324:	2b02      	cmp	r3, #2
 8004326:	d032      	beq.n	800438e <QEI5Init+0xc2>
 8004328:	2b04      	cmp	r3, #4
 800432a:	d036      	beq.n	800439a <QEI5Init+0xce>
 800432c:	2b01      	cmp	r3, #1
 800432e:	d028      	beq.n	8004382 <QEI5Init+0xb6>
 8004330:	e086      	b.n	8004440 <QEI5Init+0x174>
 8004332:	2b20      	cmp	r3, #32
 8004334:	d043      	beq.n	80043be <QEI5Init+0xf2>
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d047      	beq.n	80043ca <QEI5Init+0xfe>
 800433a:	2b10      	cmp	r3, #16
 800433c:	d039      	beq.n	80043b2 <QEI5Init+0xe6>
 800433e:	e07f      	b.n	8004440 <QEI5Init+0x174>
 8004340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004344:	d05f      	beq.n	8004406 <QEI5Init+0x13a>
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434a:	d809      	bhi.n	8004360 <QEI5Init+0x94>
 800434c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004350:	d04d      	beq.n	80043ee <QEI5Init+0x122>
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004356:	d050      	beq.n	80043fa <QEI5Init+0x12e>
 8004358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435c:	d041      	beq.n	80043e2 <QEI5Init+0x116>
 800435e:	e06f      	b.n	8004440 <QEI5Init+0x174>
 8004360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004364:	d05b      	beq.n	800441e <QEI5Init+0x152>
 8004366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436a:	d803      	bhi.n	8004374 <QEI5Init+0xa8>
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d04f      	beq.n	8004412 <QEI5Init+0x146>
 8004372:	e065      	b.n	8004440 <QEI5Init+0x174>
 8004374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004378:	d057      	beq.n	800442a <QEI5Init+0x15e>
 800437a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437e:	d05a      	beq.n	8004436 <QEI5Init+0x16a>
 8004380:	e05e      	b.n	8004440 <QEI5Init+0x174>
 8004382:	2202      	movs	r2, #2
 8004384:	2100      	movs	r1, #0
 8004386:	68b8      	ldr	r0, [r7, #8]
 8004388:	f7fc fd76 	bl	8000e78 <GPIO_PinAFConfig>
 800438c:	e058      	b.n	8004440 <QEI5Init+0x174>
 800438e:	2202      	movs	r2, #2
 8004390:	2101      	movs	r1, #1
 8004392:	68b8      	ldr	r0, [r7, #8]
 8004394:	f7fc fd70 	bl	8000e78 <GPIO_PinAFConfig>
 8004398:	e052      	b.n	8004440 <QEI5Init+0x174>
 800439a:	2202      	movs	r2, #2
 800439c:	2102      	movs	r1, #2
 800439e:	68b8      	ldr	r0, [r7, #8]
 80043a0:	f7fc fd6a 	bl	8000e78 <GPIO_PinAFConfig>
 80043a4:	e04c      	b.n	8004440 <QEI5Init+0x174>
 80043a6:	2202      	movs	r2, #2
 80043a8:	2103      	movs	r1, #3
 80043aa:	68b8      	ldr	r0, [r7, #8]
 80043ac:	f7fc fd64 	bl	8000e78 <GPIO_PinAFConfig>
 80043b0:	e046      	b.n	8004440 <QEI5Init+0x174>
 80043b2:	2202      	movs	r2, #2
 80043b4:	2104      	movs	r1, #4
 80043b6:	68b8      	ldr	r0, [r7, #8]
 80043b8:	f7fc fd5e 	bl	8000e78 <GPIO_PinAFConfig>
 80043bc:	e040      	b.n	8004440 <QEI5Init+0x174>
 80043be:	2202      	movs	r2, #2
 80043c0:	2105      	movs	r1, #5
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f7fc fd58 	bl	8000e78 <GPIO_PinAFConfig>
 80043c8:	e03a      	b.n	8004440 <QEI5Init+0x174>
 80043ca:	2202      	movs	r2, #2
 80043cc:	2106      	movs	r1, #6
 80043ce:	68b8      	ldr	r0, [r7, #8]
 80043d0:	f7fc fd52 	bl	8000e78 <GPIO_PinAFConfig>
 80043d4:	e034      	b.n	8004440 <QEI5Init+0x174>
 80043d6:	2202      	movs	r2, #2
 80043d8:	2107      	movs	r1, #7
 80043da:	68b8      	ldr	r0, [r7, #8]
 80043dc:	f7fc fd4c 	bl	8000e78 <GPIO_PinAFConfig>
 80043e0:	e02e      	b.n	8004440 <QEI5Init+0x174>
 80043e2:	2202      	movs	r2, #2
 80043e4:	2108      	movs	r1, #8
 80043e6:	68b8      	ldr	r0, [r7, #8]
 80043e8:	f7fc fd46 	bl	8000e78 <GPIO_PinAFConfig>
 80043ec:	e028      	b.n	8004440 <QEI5Init+0x174>
 80043ee:	2202      	movs	r2, #2
 80043f0:	2109      	movs	r1, #9
 80043f2:	68b8      	ldr	r0, [r7, #8]
 80043f4:	f7fc fd40 	bl	8000e78 <GPIO_PinAFConfig>
 80043f8:	e022      	b.n	8004440 <QEI5Init+0x174>
 80043fa:	2202      	movs	r2, #2
 80043fc:	210a      	movs	r1, #10
 80043fe:	68b8      	ldr	r0, [r7, #8]
 8004400:	f7fc fd3a 	bl	8000e78 <GPIO_PinAFConfig>
 8004404:	e01c      	b.n	8004440 <QEI5Init+0x174>
 8004406:	2202      	movs	r2, #2
 8004408:	210b      	movs	r1, #11
 800440a:	68b8      	ldr	r0, [r7, #8]
 800440c:	f7fc fd34 	bl	8000e78 <GPIO_PinAFConfig>
 8004410:	e016      	b.n	8004440 <QEI5Init+0x174>
 8004412:	2202      	movs	r2, #2
 8004414:	210c      	movs	r1, #12
 8004416:	68b8      	ldr	r0, [r7, #8]
 8004418:	f7fc fd2e 	bl	8000e78 <GPIO_PinAFConfig>
 800441c:	e010      	b.n	8004440 <QEI5Init+0x174>
 800441e:	2202      	movs	r2, #2
 8004420:	210d      	movs	r1, #13
 8004422:	68b8      	ldr	r0, [r7, #8]
 8004424:	f7fc fd28 	bl	8000e78 <GPIO_PinAFConfig>
 8004428:	e00a      	b.n	8004440 <QEI5Init+0x174>
 800442a:	2202      	movs	r2, #2
 800442c:	210e      	movs	r1, #14
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f7fc fd22 	bl	8000e78 <GPIO_PinAFConfig>
 8004434:	e004      	b.n	8004440 <QEI5Init+0x174>
 8004436:	2202      	movs	r2, #2
 8004438:	210f      	movs	r1, #15
 800443a:	68b8      	ldr	r0, [r7, #8]
 800443c:	f7fc fd1c 	bl	8000e78 <GPIO_PinAFConfig>
 8004440:	bf00      	nop
	AFConfig(TIM5,GPIOx_pulseB, GPIO_Pin_pulseB);
 8004442:	8bbb      	ldrh	r3, [r7, #28]
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d05e      	beq.n	8004506 <QEI5Init+0x23a>
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d811      	bhi.n	8004470 <QEI5Init+0x1a4>
 800444c:	2b08      	cmp	r3, #8
 800444e:	d042      	beq.n	80044d6 <QEI5Init+0x20a>
 8004450:	2b08      	cmp	r3, #8
 8004452:	d806      	bhi.n	8004462 <QEI5Init+0x196>
 8004454:	2b02      	cmp	r3, #2
 8004456:	d032      	beq.n	80044be <QEI5Init+0x1f2>
 8004458:	2b04      	cmp	r3, #4
 800445a:	d036      	beq.n	80044ca <QEI5Init+0x1fe>
 800445c:	2b01      	cmp	r3, #1
 800445e:	d028      	beq.n	80044b2 <QEI5Init+0x1e6>
 8004460:	e086      	b.n	8004570 <QEI5Init+0x2a4>
 8004462:	2b20      	cmp	r3, #32
 8004464:	d043      	beq.n	80044ee <QEI5Init+0x222>
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d047      	beq.n	80044fa <QEI5Init+0x22e>
 800446a:	2b10      	cmp	r3, #16
 800446c:	d039      	beq.n	80044e2 <QEI5Init+0x216>
 800446e:	e07f      	b.n	8004570 <QEI5Init+0x2a4>
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d05f      	beq.n	8004536 <QEI5Init+0x26a>
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447a:	d809      	bhi.n	8004490 <QEI5Init+0x1c4>
 800447c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004480:	d04d      	beq.n	800451e <QEI5Init+0x252>
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004486:	d050      	beq.n	800452a <QEI5Init+0x25e>
 8004488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448c:	d041      	beq.n	8004512 <QEI5Init+0x246>
 800448e:	e06f      	b.n	8004570 <QEI5Init+0x2a4>
 8004490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004494:	d05b      	beq.n	800454e <QEI5Init+0x282>
 8004496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449a:	d803      	bhi.n	80044a4 <QEI5Init+0x1d8>
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a0:	d04f      	beq.n	8004542 <QEI5Init+0x276>
 80044a2:	e065      	b.n	8004570 <QEI5Init+0x2a4>
 80044a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044a8:	d057      	beq.n	800455a <QEI5Init+0x28e>
 80044aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ae:	d05a      	beq.n	8004566 <QEI5Init+0x29a>
 80044b0:	e05e      	b.n	8004570 <QEI5Init+0x2a4>
 80044b2:	2202      	movs	r2, #2
 80044b4:	2100      	movs	r1, #0
 80044b6:	69b8      	ldr	r0, [r7, #24]
 80044b8:	f7fc fcde 	bl	8000e78 <GPIO_PinAFConfig>
 80044bc:	e058      	b.n	8004570 <QEI5Init+0x2a4>
 80044be:	2202      	movs	r2, #2
 80044c0:	2101      	movs	r1, #1
 80044c2:	69b8      	ldr	r0, [r7, #24]
 80044c4:	f7fc fcd8 	bl	8000e78 <GPIO_PinAFConfig>
 80044c8:	e052      	b.n	8004570 <QEI5Init+0x2a4>
 80044ca:	2202      	movs	r2, #2
 80044cc:	2102      	movs	r1, #2
 80044ce:	69b8      	ldr	r0, [r7, #24]
 80044d0:	f7fc fcd2 	bl	8000e78 <GPIO_PinAFConfig>
 80044d4:	e04c      	b.n	8004570 <QEI5Init+0x2a4>
 80044d6:	2202      	movs	r2, #2
 80044d8:	2103      	movs	r1, #3
 80044da:	69b8      	ldr	r0, [r7, #24]
 80044dc:	f7fc fccc 	bl	8000e78 <GPIO_PinAFConfig>
 80044e0:	e046      	b.n	8004570 <QEI5Init+0x2a4>
 80044e2:	2202      	movs	r2, #2
 80044e4:	2104      	movs	r1, #4
 80044e6:	69b8      	ldr	r0, [r7, #24]
 80044e8:	f7fc fcc6 	bl	8000e78 <GPIO_PinAFConfig>
 80044ec:	e040      	b.n	8004570 <QEI5Init+0x2a4>
 80044ee:	2202      	movs	r2, #2
 80044f0:	2105      	movs	r1, #5
 80044f2:	69b8      	ldr	r0, [r7, #24]
 80044f4:	f7fc fcc0 	bl	8000e78 <GPIO_PinAFConfig>
 80044f8:	e03a      	b.n	8004570 <QEI5Init+0x2a4>
 80044fa:	2202      	movs	r2, #2
 80044fc:	2106      	movs	r1, #6
 80044fe:	69b8      	ldr	r0, [r7, #24]
 8004500:	f7fc fcba 	bl	8000e78 <GPIO_PinAFConfig>
 8004504:	e034      	b.n	8004570 <QEI5Init+0x2a4>
 8004506:	2202      	movs	r2, #2
 8004508:	2107      	movs	r1, #7
 800450a:	69b8      	ldr	r0, [r7, #24]
 800450c:	f7fc fcb4 	bl	8000e78 <GPIO_PinAFConfig>
 8004510:	e02e      	b.n	8004570 <QEI5Init+0x2a4>
 8004512:	2202      	movs	r2, #2
 8004514:	2108      	movs	r1, #8
 8004516:	69b8      	ldr	r0, [r7, #24]
 8004518:	f7fc fcae 	bl	8000e78 <GPIO_PinAFConfig>
 800451c:	e028      	b.n	8004570 <QEI5Init+0x2a4>
 800451e:	2202      	movs	r2, #2
 8004520:	2109      	movs	r1, #9
 8004522:	69b8      	ldr	r0, [r7, #24]
 8004524:	f7fc fca8 	bl	8000e78 <GPIO_PinAFConfig>
 8004528:	e022      	b.n	8004570 <QEI5Init+0x2a4>
 800452a:	2202      	movs	r2, #2
 800452c:	210a      	movs	r1, #10
 800452e:	69b8      	ldr	r0, [r7, #24]
 8004530:	f7fc fca2 	bl	8000e78 <GPIO_PinAFConfig>
 8004534:	e01c      	b.n	8004570 <QEI5Init+0x2a4>
 8004536:	2202      	movs	r2, #2
 8004538:	210b      	movs	r1, #11
 800453a:	69b8      	ldr	r0, [r7, #24]
 800453c:	f7fc fc9c 	bl	8000e78 <GPIO_PinAFConfig>
 8004540:	e016      	b.n	8004570 <QEI5Init+0x2a4>
 8004542:	2202      	movs	r2, #2
 8004544:	210c      	movs	r1, #12
 8004546:	69b8      	ldr	r0, [r7, #24]
 8004548:	f7fc fc96 	bl	8000e78 <GPIO_PinAFConfig>
 800454c:	e010      	b.n	8004570 <QEI5Init+0x2a4>
 800454e:	2202      	movs	r2, #2
 8004550:	210d      	movs	r1, #13
 8004552:	69b8      	ldr	r0, [r7, #24]
 8004554:	f7fc fc90 	bl	8000e78 <GPIO_PinAFConfig>
 8004558:	e00a      	b.n	8004570 <QEI5Init+0x2a4>
 800455a:	2202      	movs	r2, #2
 800455c:	210e      	movs	r1, #14
 800455e:	69b8      	ldr	r0, [r7, #24]
 8004560:	f7fc fc8a 	bl	8000e78 <GPIO_PinAFConfig>
 8004564:	e004      	b.n	8004570 <QEI5Init+0x2a4>
 8004566:	2202      	movs	r2, #2
 8004568:	210f      	movs	r1, #15
 800456a:	69b8      	ldr	r0, [r7, #24]
 800456c:	f7fc fc84 	bl	8000e78 <GPIO_PinAFConfig>
 8004570:	bf00      	nop

	BIOS_QEI5_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8004572:	4b1e      	ldr	r3, [pc, #120]	; (80045ec <QEI5Init+0x320>)
 8004574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004578:	605a      	str	r2, [r3, #4]
	BIOS_QEI5_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800457a:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <QEI5Init+0x320>)
 800457c:	2200      	movs	r2, #0
 800457e:	801a      	strh	r2, [r3, #0]
	BIOS_QEI5_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <QEI5Init+0x320>)
 8004582:	2200      	movs	r2, #0
 8004584:	811a      	strh	r2, [r3, #8]
	BIOS_QEI5_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <QEI5Init+0x320>)
 8004588:	2200      	movs	r2, #0
 800458a:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM5, &BIOS_QEI5_TIM_TimeBaseStructure);
 800458c:	4917      	ldr	r1, [pc, #92]	; (80045ec <QEI5Init+0x320>)
 800458e:	4818      	ldr	r0, [pc, #96]	; (80045f0 <QEI5Init+0x324>)
 8004590:	f7fc fdc4 	bl	800111c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM5, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8004594:	2300      	movs	r3, #0
 8004596:	2200      	movs	r2, #0
 8004598:	2103      	movs	r1, #3
 800459a:	4815      	ldr	r0, [pc, #84]	; (80045f0 <QEI5Init+0x324>)
 800459c:	f7fd f953 	bl	8001846 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM5, ENABLE);
 80045a0:	2101      	movs	r1, #1
 80045a2:	4813      	ldr	r0, [pc, #76]	; (80045f0 <QEI5Init+0x324>)
 80045a4:	f7fc fe26 	bl	80011f4 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM5, TIM_IT_Update );
 80045a8:	2101      	movs	r1, #1
 80045aa:	4811      	ldr	r0, [pc, #68]	; (80045f0 <QEI5Init+0x324>)
 80045ac:	f7fd f93a 	bl	8001824 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 80045b0:	2201      	movs	r2, #1
 80045b2:	2101      	movs	r1, #1
 80045b4:	480e      	ldr	r0, [pc, #56]	; (80045f0 <QEI5Init+0x324>)
 80045b6:	f7fd f8e7 	bl	8001788 <TIM_ITConfig>

	BIOS_QEI5_NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 80045ba:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <QEI5Init+0x328>)
 80045bc:	2232      	movs	r2, #50	; 0x32
 80045be:	701a      	strb	r2, [r3, #0]
	BIOS_QEI5_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 80045c0:	89fb      	ldrh	r3, [r7, #14]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <QEI5Init+0x328>)
 80045c6:	705a      	strb	r2, [r3, #1]
	BIOS_QEI5_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 80045c8:	89bb      	ldrh	r3, [r7, #12]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <QEI5Init+0x328>)
 80045ce:	709a      	strb	r2, [r3, #2]
	BIOS_QEI5_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <QEI5Init+0x328>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI5_NVIC_InitStructure);
 80045d6:	4807      	ldr	r0, [pc, #28]	; (80045f4 <QEI5Init+0x328>)
 80045d8:	f7fc fb46 	bl	8000c68 <NVIC_Init>
	TIM_Cmd(TIM5, ENABLE);
 80045dc:	2101      	movs	r1, #1
 80045de:	4804      	ldr	r0, [pc, #16]	; (80045f0 <QEI5Init+0x324>)
 80045e0:	f7fc fe28 	bl	8001234 <TIM_Cmd>
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	200007c0 	.word	0x200007c0
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	200007cc 	.word	0x200007cc

080045f8 <QEI6Init>:
 * Function Example		: QEI6Init(0,1);
 */

void QEI6Init(uint16_t preemptionpriority, uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_pulseA, uint16_t GPIO_Pin_pulseA, GPIO_TypeDef* GPIOx_pulseB, uint16_t GPIO_Pin_pulseB)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60ba      	str	r2, [r7, #8]
 8004600:	461a      	mov	r2, r3
 8004602:	4603      	mov	r3, r0
 8004604:	81fb      	strh	r3, [r7, #14]
 8004606:	460b      	mov	r3, r1
 8004608:	81bb      	strh	r3, [r7, #12]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 800460e:	2101      	movs	r1, #1
 8004610:	2002      	movs	r0, #2
 8004612:	f7fc fd63 	bl	80010dc <RCC_APB2PeriphClockCmd>

	GPIOPinsInit (GPIOx_pulseA, GPIO_Pin_pulseA, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 8004616:	88f9      	ldrh	r1, [r7, #6]
 8004618:	2301      	movs	r3, #1
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	2302      	movs	r3, #2
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	2202      	movs	r2, #2
 8004624:	68b8      	ldr	r0, [r7, #8]
 8004626:	f7fd fc4d 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_pulseB, GPIO_Pin_pulseB, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_UP);
 800462a:	8bb9      	ldrh	r1, [r7, #28]
 800462c:	2301      	movs	r3, #1
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	2302      	movs	r3, #2
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	2300      	movs	r3, #0
 8004636:	2202      	movs	r2, #2
 8004638:	69b8      	ldr	r0, [r7, #24]
 800463a:	f7fd fc43 	bl	8001ec4 <GPIOPinsInit>
	AFConfig(TIM8,GPIOx_pulseA, GPIO_Pin_pulseA);
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b80      	cmp	r3, #128	; 0x80
 8004642:	d05e      	beq.n	8004702 <QEI6Init+0x10a>
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	d811      	bhi.n	800466c <QEI6Init+0x74>
 8004648:	2b08      	cmp	r3, #8
 800464a:	d042      	beq.n	80046d2 <QEI6Init+0xda>
 800464c:	2b08      	cmp	r3, #8
 800464e:	d806      	bhi.n	800465e <QEI6Init+0x66>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d032      	beq.n	80046ba <QEI6Init+0xc2>
 8004654:	2b04      	cmp	r3, #4
 8004656:	d036      	beq.n	80046c6 <QEI6Init+0xce>
 8004658:	2b01      	cmp	r3, #1
 800465a:	d028      	beq.n	80046ae <QEI6Init+0xb6>
 800465c:	e086      	b.n	800476c <QEI6Init+0x174>
 800465e:	2b20      	cmp	r3, #32
 8004660:	d043      	beq.n	80046ea <QEI6Init+0xf2>
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d047      	beq.n	80046f6 <QEI6Init+0xfe>
 8004666:	2b10      	cmp	r3, #16
 8004668:	d039      	beq.n	80046de <QEI6Init+0xe6>
 800466a:	e07f      	b.n	800476c <QEI6Init+0x174>
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d05f      	beq.n	8004732 <QEI6Init+0x13a>
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004676:	d809      	bhi.n	800468c <QEI6Init+0x94>
 8004678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467c:	d04d      	beq.n	800471a <QEI6Init+0x122>
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004682:	d050      	beq.n	8004726 <QEI6Init+0x12e>
 8004684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004688:	d041      	beq.n	800470e <QEI6Init+0x116>
 800468a:	e06f      	b.n	800476c <QEI6Init+0x174>
 800468c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004690:	d05b      	beq.n	800474a <QEI6Init+0x152>
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	d803      	bhi.n	80046a0 <QEI6Init+0xa8>
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d04f      	beq.n	800473e <QEI6Init+0x146>
 800469e:	e065      	b.n	800476c <QEI6Init+0x174>
 80046a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a4:	d057      	beq.n	8004756 <QEI6Init+0x15e>
 80046a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046aa:	d05a      	beq.n	8004762 <QEI6Init+0x16a>
 80046ac:	e05e      	b.n	800476c <QEI6Init+0x174>
 80046ae:	2203      	movs	r2, #3
 80046b0:	2100      	movs	r1, #0
 80046b2:	68b8      	ldr	r0, [r7, #8]
 80046b4:	f7fc fbe0 	bl	8000e78 <GPIO_PinAFConfig>
 80046b8:	e058      	b.n	800476c <QEI6Init+0x174>
 80046ba:	2203      	movs	r2, #3
 80046bc:	2101      	movs	r1, #1
 80046be:	68b8      	ldr	r0, [r7, #8]
 80046c0:	f7fc fbda 	bl	8000e78 <GPIO_PinAFConfig>
 80046c4:	e052      	b.n	800476c <QEI6Init+0x174>
 80046c6:	2203      	movs	r2, #3
 80046c8:	2102      	movs	r1, #2
 80046ca:	68b8      	ldr	r0, [r7, #8]
 80046cc:	f7fc fbd4 	bl	8000e78 <GPIO_PinAFConfig>
 80046d0:	e04c      	b.n	800476c <QEI6Init+0x174>
 80046d2:	2203      	movs	r2, #3
 80046d4:	2103      	movs	r1, #3
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	f7fc fbce 	bl	8000e78 <GPIO_PinAFConfig>
 80046dc:	e046      	b.n	800476c <QEI6Init+0x174>
 80046de:	2203      	movs	r2, #3
 80046e0:	2104      	movs	r1, #4
 80046e2:	68b8      	ldr	r0, [r7, #8]
 80046e4:	f7fc fbc8 	bl	8000e78 <GPIO_PinAFConfig>
 80046e8:	e040      	b.n	800476c <QEI6Init+0x174>
 80046ea:	2203      	movs	r2, #3
 80046ec:	2105      	movs	r1, #5
 80046ee:	68b8      	ldr	r0, [r7, #8]
 80046f0:	f7fc fbc2 	bl	8000e78 <GPIO_PinAFConfig>
 80046f4:	e03a      	b.n	800476c <QEI6Init+0x174>
 80046f6:	2203      	movs	r2, #3
 80046f8:	2106      	movs	r1, #6
 80046fa:	68b8      	ldr	r0, [r7, #8]
 80046fc:	f7fc fbbc 	bl	8000e78 <GPIO_PinAFConfig>
 8004700:	e034      	b.n	800476c <QEI6Init+0x174>
 8004702:	2203      	movs	r2, #3
 8004704:	2107      	movs	r1, #7
 8004706:	68b8      	ldr	r0, [r7, #8]
 8004708:	f7fc fbb6 	bl	8000e78 <GPIO_PinAFConfig>
 800470c:	e02e      	b.n	800476c <QEI6Init+0x174>
 800470e:	2203      	movs	r2, #3
 8004710:	2108      	movs	r1, #8
 8004712:	68b8      	ldr	r0, [r7, #8]
 8004714:	f7fc fbb0 	bl	8000e78 <GPIO_PinAFConfig>
 8004718:	e028      	b.n	800476c <QEI6Init+0x174>
 800471a:	2203      	movs	r2, #3
 800471c:	2109      	movs	r1, #9
 800471e:	68b8      	ldr	r0, [r7, #8]
 8004720:	f7fc fbaa 	bl	8000e78 <GPIO_PinAFConfig>
 8004724:	e022      	b.n	800476c <QEI6Init+0x174>
 8004726:	2203      	movs	r2, #3
 8004728:	210a      	movs	r1, #10
 800472a:	68b8      	ldr	r0, [r7, #8]
 800472c:	f7fc fba4 	bl	8000e78 <GPIO_PinAFConfig>
 8004730:	e01c      	b.n	800476c <QEI6Init+0x174>
 8004732:	2203      	movs	r2, #3
 8004734:	210b      	movs	r1, #11
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	f7fc fb9e 	bl	8000e78 <GPIO_PinAFConfig>
 800473c:	e016      	b.n	800476c <QEI6Init+0x174>
 800473e:	2203      	movs	r2, #3
 8004740:	210c      	movs	r1, #12
 8004742:	68b8      	ldr	r0, [r7, #8]
 8004744:	f7fc fb98 	bl	8000e78 <GPIO_PinAFConfig>
 8004748:	e010      	b.n	800476c <QEI6Init+0x174>
 800474a:	2203      	movs	r2, #3
 800474c:	210d      	movs	r1, #13
 800474e:	68b8      	ldr	r0, [r7, #8]
 8004750:	f7fc fb92 	bl	8000e78 <GPIO_PinAFConfig>
 8004754:	e00a      	b.n	800476c <QEI6Init+0x174>
 8004756:	2203      	movs	r2, #3
 8004758:	210e      	movs	r1, #14
 800475a:	68b8      	ldr	r0, [r7, #8]
 800475c:	f7fc fb8c 	bl	8000e78 <GPIO_PinAFConfig>
 8004760:	e004      	b.n	800476c <QEI6Init+0x174>
 8004762:	2203      	movs	r2, #3
 8004764:	210f      	movs	r1, #15
 8004766:	68b8      	ldr	r0, [r7, #8]
 8004768:	f7fc fb86 	bl	8000e78 <GPIO_PinAFConfig>
 800476c:	bf00      	nop
	AFConfig(TIM8,GPIOx_pulseB, GPIO_Pin_pulseB);
 800476e:	8bbb      	ldrh	r3, [r7, #28]
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d05e      	beq.n	8004832 <QEI6Init+0x23a>
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	d811      	bhi.n	800479c <QEI6Init+0x1a4>
 8004778:	2b08      	cmp	r3, #8
 800477a:	d042      	beq.n	8004802 <QEI6Init+0x20a>
 800477c:	2b08      	cmp	r3, #8
 800477e:	d806      	bhi.n	800478e <QEI6Init+0x196>
 8004780:	2b02      	cmp	r3, #2
 8004782:	d032      	beq.n	80047ea <QEI6Init+0x1f2>
 8004784:	2b04      	cmp	r3, #4
 8004786:	d036      	beq.n	80047f6 <QEI6Init+0x1fe>
 8004788:	2b01      	cmp	r3, #1
 800478a:	d028      	beq.n	80047de <QEI6Init+0x1e6>
 800478c:	e086      	b.n	800489c <QEI6Init+0x2a4>
 800478e:	2b20      	cmp	r3, #32
 8004790:	d043      	beq.n	800481a <QEI6Init+0x222>
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d047      	beq.n	8004826 <QEI6Init+0x22e>
 8004796:	2b10      	cmp	r3, #16
 8004798:	d039      	beq.n	800480e <QEI6Init+0x216>
 800479a:	e07f      	b.n	800489c <QEI6Init+0x2a4>
 800479c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a0:	d05f      	beq.n	8004862 <QEI6Init+0x26a>
 80047a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a6:	d809      	bhi.n	80047bc <QEI6Init+0x1c4>
 80047a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ac:	d04d      	beq.n	800484a <QEI6Init+0x252>
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b2:	d050      	beq.n	8004856 <QEI6Init+0x25e>
 80047b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b8:	d041      	beq.n	800483e <QEI6Init+0x246>
 80047ba:	e06f      	b.n	800489c <QEI6Init+0x2a4>
 80047bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c0:	d05b      	beq.n	800487a <QEI6Init+0x282>
 80047c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c6:	d803      	bhi.n	80047d0 <QEI6Init+0x1d8>
 80047c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047cc:	d04f      	beq.n	800486e <QEI6Init+0x276>
 80047ce:	e065      	b.n	800489c <QEI6Init+0x2a4>
 80047d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047d4:	d057      	beq.n	8004886 <QEI6Init+0x28e>
 80047d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047da:	d05a      	beq.n	8004892 <QEI6Init+0x29a>
 80047dc:	e05e      	b.n	800489c <QEI6Init+0x2a4>
 80047de:	2203      	movs	r2, #3
 80047e0:	2100      	movs	r1, #0
 80047e2:	69b8      	ldr	r0, [r7, #24]
 80047e4:	f7fc fb48 	bl	8000e78 <GPIO_PinAFConfig>
 80047e8:	e058      	b.n	800489c <QEI6Init+0x2a4>
 80047ea:	2203      	movs	r2, #3
 80047ec:	2101      	movs	r1, #1
 80047ee:	69b8      	ldr	r0, [r7, #24]
 80047f0:	f7fc fb42 	bl	8000e78 <GPIO_PinAFConfig>
 80047f4:	e052      	b.n	800489c <QEI6Init+0x2a4>
 80047f6:	2203      	movs	r2, #3
 80047f8:	2102      	movs	r1, #2
 80047fa:	69b8      	ldr	r0, [r7, #24]
 80047fc:	f7fc fb3c 	bl	8000e78 <GPIO_PinAFConfig>
 8004800:	e04c      	b.n	800489c <QEI6Init+0x2a4>
 8004802:	2203      	movs	r2, #3
 8004804:	2103      	movs	r1, #3
 8004806:	69b8      	ldr	r0, [r7, #24]
 8004808:	f7fc fb36 	bl	8000e78 <GPIO_PinAFConfig>
 800480c:	e046      	b.n	800489c <QEI6Init+0x2a4>
 800480e:	2203      	movs	r2, #3
 8004810:	2104      	movs	r1, #4
 8004812:	69b8      	ldr	r0, [r7, #24]
 8004814:	f7fc fb30 	bl	8000e78 <GPIO_PinAFConfig>
 8004818:	e040      	b.n	800489c <QEI6Init+0x2a4>
 800481a:	2203      	movs	r2, #3
 800481c:	2105      	movs	r1, #5
 800481e:	69b8      	ldr	r0, [r7, #24]
 8004820:	f7fc fb2a 	bl	8000e78 <GPIO_PinAFConfig>
 8004824:	e03a      	b.n	800489c <QEI6Init+0x2a4>
 8004826:	2203      	movs	r2, #3
 8004828:	2106      	movs	r1, #6
 800482a:	69b8      	ldr	r0, [r7, #24]
 800482c:	f7fc fb24 	bl	8000e78 <GPIO_PinAFConfig>
 8004830:	e034      	b.n	800489c <QEI6Init+0x2a4>
 8004832:	2203      	movs	r2, #3
 8004834:	2107      	movs	r1, #7
 8004836:	69b8      	ldr	r0, [r7, #24]
 8004838:	f7fc fb1e 	bl	8000e78 <GPIO_PinAFConfig>
 800483c:	e02e      	b.n	800489c <QEI6Init+0x2a4>
 800483e:	2203      	movs	r2, #3
 8004840:	2108      	movs	r1, #8
 8004842:	69b8      	ldr	r0, [r7, #24]
 8004844:	f7fc fb18 	bl	8000e78 <GPIO_PinAFConfig>
 8004848:	e028      	b.n	800489c <QEI6Init+0x2a4>
 800484a:	2203      	movs	r2, #3
 800484c:	2109      	movs	r1, #9
 800484e:	69b8      	ldr	r0, [r7, #24]
 8004850:	f7fc fb12 	bl	8000e78 <GPIO_PinAFConfig>
 8004854:	e022      	b.n	800489c <QEI6Init+0x2a4>
 8004856:	2203      	movs	r2, #3
 8004858:	210a      	movs	r1, #10
 800485a:	69b8      	ldr	r0, [r7, #24]
 800485c:	f7fc fb0c 	bl	8000e78 <GPIO_PinAFConfig>
 8004860:	e01c      	b.n	800489c <QEI6Init+0x2a4>
 8004862:	2203      	movs	r2, #3
 8004864:	210b      	movs	r1, #11
 8004866:	69b8      	ldr	r0, [r7, #24]
 8004868:	f7fc fb06 	bl	8000e78 <GPIO_PinAFConfig>
 800486c:	e016      	b.n	800489c <QEI6Init+0x2a4>
 800486e:	2203      	movs	r2, #3
 8004870:	210c      	movs	r1, #12
 8004872:	69b8      	ldr	r0, [r7, #24]
 8004874:	f7fc fb00 	bl	8000e78 <GPIO_PinAFConfig>
 8004878:	e010      	b.n	800489c <QEI6Init+0x2a4>
 800487a:	2203      	movs	r2, #3
 800487c:	210d      	movs	r1, #13
 800487e:	69b8      	ldr	r0, [r7, #24]
 8004880:	f7fc fafa 	bl	8000e78 <GPIO_PinAFConfig>
 8004884:	e00a      	b.n	800489c <QEI6Init+0x2a4>
 8004886:	2203      	movs	r2, #3
 8004888:	210e      	movs	r1, #14
 800488a:	69b8      	ldr	r0, [r7, #24]
 800488c:	f7fc faf4 	bl	8000e78 <GPIO_PinAFConfig>
 8004890:	e004      	b.n	800489c <QEI6Init+0x2a4>
 8004892:	2203      	movs	r2, #3
 8004894:	210f      	movs	r1, #15
 8004896:	69b8      	ldr	r0, [r7, #24]
 8004898:	f7fc faee 	bl	8000e78 <GPIO_PinAFConfig>
 800489c:	bf00      	nop

	BIOS_QEI6_TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <QEI6Init+0x320>)
 80048a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a4:	605a      	str	r2, [r3, #4]
	BIOS_QEI6_TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <QEI6Init+0x320>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	801a      	strh	r2, [r3, #0]
	BIOS_QEI6_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80048ac:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <QEI6Init+0x320>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	811a      	strh	r2, [r3, #8]
	BIOS_QEI6_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80048b2:	4b19      	ldr	r3, [pc, #100]	; (8004918 <QEI6Init+0x320>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM8, &BIOS_QEI6_TIM_TimeBaseStructure);
 80048b8:	4917      	ldr	r1, [pc, #92]	; (8004918 <QEI6Init+0x320>)
 80048ba:	4818      	ldr	r0, [pc, #96]	; (800491c <QEI6Init+0x324>)
 80048bc:	f7fc fc2e 	bl	800111c <TIM_TimeBaseInit>
	TIM_EncoderInterfaceConfig(TIM8, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 80048c0:	2300      	movs	r3, #0
 80048c2:	2200      	movs	r2, #0
 80048c4:	2103      	movs	r1, #3
 80048c6:	4815      	ldr	r0, [pc, #84]	; (800491c <QEI6Init+0x324>)
 80048c8:	f7fc ffbd 	bl	8001846 <TIM_EncoderInterfaceConfig>
	TIM_ARRPreloadConfig(TIM8, ENABLE);
 80048cc:	2101      	movs	r1, #1
 80048ce:	4813      	ldr	r0, [pc, #76]	; (800491c <QEI6Init+0x324>)
 80048d0:	f7fc fc90 	bl	80011f4 <TIM_ARRPreloadConfig>

	TIM_ClearITPendingBit(TIM8, TIM_IT_Update );
 80048d4:	2101      	movs	r1, #1
 80048d6:	4811      	ldr	r0, [pc, #68]	; (800491c <QEI6Init+0x324>)
 80048d8:	f7fc ffa4 	bl	8001824 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM8, TIM_IT_Update, ENABLE);
 80048dc:	2201      	movs	r2, #1
 80048de:	2101      	movs	r1, #1
 80048e0:	480e      	ldr	r0, [pc, #56]	; (800491c <QEI6Init+0x324>)
 80048e2:	f7fc ff51 	bl	8001788 <TIM_ITConfig>

	BIOS_QEI6_NVIC_InitStructure.NVIC_IRQChannel = TIM8_UP_TIM13_IRQn;
 80048e6:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <QEI6Init+0x328>)
 80048e8:	222c      	movs	r2, #44	; 0x2c
 80048ea:	701a      	strb	r2, [r3, #0]
	BIOS_QEI6_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 80048ec:	89fb      	ldrh	r3, [r7, #14]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <QEI6Init+0x328>)
 80048f2:	705a      	strb	r2, [r3, #1]
	BIOS_QEI6_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 80048f4:	89bb      	ldrh	r3, [r7, #12]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <QEI6Init+0x328>)
 80048fa:	709a      	strb	r2, [r3, #2]
	BIOS_QEI6_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <QEI6Init+0x328>)
 80048fe:	2201      	movs	r2, #1
 8004900:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_QEI6_NVIC_InitStructure);
 8004902:	4807      	ldr	r0, [pc, #28]	; (8004920 <QEI6Init+0x328>)
 8004904:	f7fc f9b0 	bl	8000c68 <NVIC_Init>
	TIM_Cmd(TIM8, ENABLE);
 8004908:	2101      	movs	r1, #1
 800490a:	4804      	ldr	r0, [pc, #16]	; (800491c <QEI6Init+0x324>)
 800490c:	f7fc fc92 	bl	8001234 <TIM_Cmd>
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200007d0 	.word	0x200007d0
 800491c:	40010400 	.word	0x40010400
 8004920:	200007dc 	.word	0x200007dc

08004924 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	461a      	mov	r2, r3
 8004930:	460b      	mov	r3, r1
 8004932:	72fb      	strb	r3, [r7, #11]
 8004934:	4613      	mov	r3, r2
 8004936:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	7afa      	ldrb	r2, [r7, #11]
 800493c:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	893a      	ldrh	r2, [r7, #8]
 8004948:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8bba      	ldrh	r2, [r7, #28]
 8004954:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a3a      	ldr	r2, [r7, #32]
 800495a:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004960:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8899      	ldrh	r1, [r3, #4]
 800496a:	2301      	movs	r3, #1
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	2302      	movs	r3, #2
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	2201      	movs	r2, #1
 8004976:	f7fd faa5 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz, GPIO_PuPd_UP);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6898      	ldr	r0, [r3, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8999      	ldrh	r1, [r3, #12]
 8004982:	2301      	movs	r3, #1
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	2302      	movs	r3, #2
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	2300      	movs	r3, #0
 800498c:	2201      	movs	r2, #1
 800498e:	f7fd fa99 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_Mode_OUT,GPIO_OType_PP,GPIO_Speed_50MHz, GPIO_PuPd_UP);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6918      	ldr	r0, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8a99      	ldrh	r1, [r3, #20]
 800499a:	2301      	movs	r3, #1
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	2302      	movs	r3, #2
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	2201      	movs	r2, #1
 80049a6:	f7fd fa8d 	bl	8001ec4 <GPIOPinsInit>

}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	7d9b      	ldrb	r3, [r3, #22]
 80049be:	73bb      	strb	r3, [r7, #14]

	GPIO_WriteBit(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, Bit_RESET);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	889b      	ldrh	r3, [r3, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	4619      	mov	r1, r3
 80049cc:	f7fc fa3c 	bl	8000e48 <GPIO_WriteBit>
	GPIO_WriteBit(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, Bit_RESET);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6898      	ldr	r0, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	899b      	ldrh	r3, [r3, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	4619      	mov	r1, r3
 80049dc:	f7fc fa34 	bl	8000e48 <GPIO_WriteBit>

	do{
		out = shiftreg->cast[i].Byte;
 80049e0:	7bba      	ldrb	r2, [r7, #14]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3206      	adds	r2, #6
 80049e6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80049ea:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 80049ec:	2308      	movs	r3, #8
 80049ee:	737b      	strb	r3, [r7, #13]
 80049f0:	e02a      	b.n	8004a48 <SHIFTREGShift+0x96>
			(out & 0x80) ? GPIO_WriteBit(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, Bit_SET) : GPIO_WriteBit(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, Bit_RESET);
 80049f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da08      	bge.n	8004a0c <SHIFTREGShift+0x5a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6918      	ldr	r0, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8a9b      	ldrh	r3, [r3, #20]
 8004a02:	2201      	movs	r2, #1
 8004a04:	4619      	mov	r1, r3
 8004a06:	f7fc fa1f 	bl	8000e48 <GPIO_WriteBit>
 8004a0a:	e007      	b.n	8004a1c <SHIFTREGShift+0x6a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6918      	ldr	r0, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8a9b      	ldrh	r3, [r3, #20]
 8004a14:	2200      	movs	r2, #0
 8004a16:	4619      	mov	r1, r3
 8004a18:	f7fc fa16 	bl	8000e48 <GPIO_WriteBit>
			out <<= 1;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
			GPIO_WriteBit(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, Bit_SET);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	889b      	ldrh	r3, [r3, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f7fc fa0b 	bl	8000e48 <GPIO_WriteBit>
			GPIO_WriteBit(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, Bit_RESET);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	889b      	ldrh	r3, [r3, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f7fc fa03 	bl	8000e48 <GPIO_WriteBit>
		for (j = 8; j; j--){
 8004a42:	7b7b      	ldrb	r3, [r7, #13]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	737b      	strb	r3, [r7, #13]
 8004a48:	7b7b      	ldrb	r3, [r7, #13]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1d1      	bne.n	80049f2 <SHIFTREGShift+0x40>
		}
	}while(i--);
 8004a4e:	7bbb      	ldrb	r3, [r7, #14]
 8004a50:	1e5a      	subs	r2, r3, #1
 8004a52:	73ba      	strb	r2, [r7, #14]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1c3      	bne.n	80049e0 <SHIFTREGShift+0x2e>

	GPIO_WriteBit(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, Bit_SET);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6898      	ldr	r0, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	899b      	ldrh	r3, [r3, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7fc f9f0 	bl	8000e48 <GPIO_WriteBit>
	GPIO_WriteBit(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, Bit_RESET);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6898      	ldr	r0, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	899b      	ldrh	r3, [r3, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fc f9e8 	bl	8000e48 <GPIO_WriteBit>

}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8004a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	da0b      	bge.n	8004aac <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8004a94:	490d      	ldr	r1, [pc, #52]	; (8004acc <NVIC_SetPriority+0x4c>)
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	0112      	lsls	r2, r2, #4
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8004aaa:	e009      	b.n	8004ac0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8004aac:	4908      	ldr	r1, [pc, #32]	; (8004ad0 <NVIC_SetPriority+0x50>)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	440b      	add	r3, r1
 8004abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000ed00 	.word	0xe000ed00
 8004ad0:	e000e100 	.word	0xe000e100

08004ad4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae2:	d301      	bcc.n	8004ae8 <SysTick_Config+0x14>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e011      	b.n	8004b0c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <SysTick_Config+0x40>)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004af0:	3b01      	subs	r3, #1
 8004af2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8004af4:	210f      	movs	r1, #15
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afa:	f7ff ffc1 	bl	8004a80 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8004afe:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <SysTick_Config+0x40>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <SysTick_Config+0x40>)
 8004b06:	2207      	movs	r2, #7
 8004b08:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	e000e010 	.word	0xe000e010

08004b18 <BIOSInit>:
 * Function Return		: None
 * Function Example		: BIOSInit();
 */

void BIOSInit(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
	SystemInit();
 8004b1c:	f007 fb00 	bl	800c120 <SystemInit>
	SystemCoreClockUpdate();
 8004b20:	f007 fb34 	bl	800c18c <SystemCoreClockUpdate>
	RCC_GetClocksFreq(&BIOS_RCC_Clocks);
 8004b24:	4808      	ldr	r0, [pc, #32]	; (8004b48 <BIOSInit+0x30>)
 8004b26:	f7fc f9f1 	bl	8000f0c <RCC_GetClocksFreq>
	SysTick_Config(BIOS_RCC_Clocks.HCLK_Frequency / 1000);
 8004b2a:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <BIOSInit+0x30>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <BIOSInit+0x34>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ffcc 	bl	8004ad4 <SysTick_Config>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8004b3c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004b40:	f7fc f87e 	bl	8000c40 <NVIC_PriorityGroupConfig>

}
 8004b44:	bf00      	nop
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000744 	.word	0x20000744
 8004b4c:	10624dd3 	.word	0x10624dd3

08004b50 <BIOSTIMx_Init>:
 * 						  BIOSTIMx_Init (TIM2, 1000, 84, 2, 0);  //1ms  interrupt
 * 						  BIOSTIMx_Init (TIM3, 20000, 84, 2, 1); //20ms interrupt
 */

void BIOSTIMx_Init(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler,uint16_t preemptionpriority,uint16_t subpriority)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	817b      	strh	r3, [r7, #10]
 8004b62:	460b      	mov	r3, r1
 8004b64:	813b      	strh	r3, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
	switch((uint32_t)TIMx)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a6f      	ldr	r2, [pc, #444]	; (8004d2c <BIOSTIMx_Init+0x1dc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f000 808f 	beq.w	8004c92 <BIOSTIMx_Init+0x142>
 8004b74:	4a6d      	ldr	r2, [pc, #436]	; (8004d2c <BIOSTIMx_Init+0x1dc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d816      	bhi.n	8004ba8 <BIOSTIMx_Init+0x58>
 8004b7a:	4a6d      	ldr	r2, [pc, #436]	; (8004d30 <BIOSTIMx_Init+0x1e0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d068      	beq.n	8004c52 <BIOSTIMx_Init+0x102>
 8004b80:	4a6b      	ldr	r2, [pc, #428]	; (8004d30 <BIOSTIMx_Init+0x1e0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d806      	bhi.n	8004b94 <BIOSTIMx_Init+0x44>
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8a:	d052      	beq.n	8004c32 <BIOSTIMx_Init+0xe2>
 8004b8c:	4a69      	ldr	r2, [pc, #420]	; (8004d34 <BIOSTIMx_Init+0x1e4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d057      	beq.n	8004c42 <BIOSTIMx_Init+0xf2>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_TRG_COM_TIM14_IRQn ;

			break;
		}

		default: break;
 8004b92:	e097      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
	switch((uint32_t)TIMx)
 8004b94:	4a68      	ldr	r2, [pc, #416]	; (8004d38 <BIOSTIMx_Init+0x1e8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d06b      	beq.n	8004c72 <BIOSTIMx_Init+0x122>
 8004b9a:	4a68      	ldr	r2, [pc, #416]	; (8004d3c <BIOSTIMx_Init+0x1ec>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d070      	beq.n	8004c82 <BIOSTIMx_Init+0x132>
 8004ba0:	4a67      	ldr	r2, [pc, #412]	; (8004d40 <BIOSTIMx_Init+0x1f0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d05d      	beq.n	8004c62 <BIOSTIMx_Init+0x112>
		default: break;
 8004ba6:	e08d      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
	switch((uint32_t)TIMx)
 8004ba8:	4a66      	ldr	r2, [pc, #408]	; (8004d44 <BIOSTIMx_Init+0x1f4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01e      	beq.n	8004bec <BIOSTIMx_Init+0x9c>
 8004bae:	4a65      	ldr	r2, [pc, #404]	; (8004d44 <BIOSTIMx_Init+0x1f4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d809      	bhi.n	8004bc8 <BIOSTIMx_Init+0x78>
 8004bb4:	4a64      	ldr	r2, [pc, #400]	; (8004d48 <BIOSTIMx_Init+0x1f8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d07b      	beq.n	8004cb2 <BIOSTIMx_Init+0x162>
 8004bba:	4a64      	ldr	r2, [pc, #400]	; (8004d4c <BIOSTIMx_Init+0x1fc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00d      	beq.n	8004bdc <BIOSTIMx_Init+0x8c>
 8004bc0:	4a63      	ldr	r2, [pc, #396]	; (8004d50 <BIOSTIMx_Init+0x200>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d06d      	beq.n	8004ca2 <BIOSTIMx_Init+0x152>
		default: break;
 8004bc6:	e07d      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
	switch((uint32_t)TIMx)
 8004bc8:	4a62      	ldr	r2, [pc, #392]	; (8004d54 <BIOSTIMx_Init+0x204>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01f      	beq.n	8004c0e <BIOSTIMx_Init+0xbe>
 8004bce:	4a62      	ldr	r2, [pc, #392]	; (8004d58 <BIOSTIMx_Init+0x208>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d025      	beq.n	8004c20 <BIOSTIMx_Init+0xd0>
 8004bd4:	4a61      	ldr	r2, [pc, #388]	; (8004d5c <BIOSTIMx_Init+0x20c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d010      	beq.n	8004bfc <BIOSTIMx_Init+0xac>
		default: break;
 8004bda:	e073      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004bdc:	2101      	movs	r1, #1
 8004bde:	2001      	movs	r0, #1
 8004be0:	f7fc fa7c 	bl	80010dc <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn ;
 8004be4:	4b5e      	ldr	r3, [pc, #376]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004be6:	2219      	movs	r2, #25
 8004be8:	701a      	strb	r2, [r3, #0]
			break;
 8004bea:	e06b      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8004bec:	2101      	movs	r1, #1
 8004bee:	2002      	movs	r0, #2
 8004bf0:	f7fc fa74 	bl	80010dc <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_UP_TIM13_IRQn ;
 8004bf4:	4b5a      	ldr	r3, [pc, #360]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004bf6:	222c      	movs	r2, #44	; 0x2c
 8004bf8:	701a      	strb	r2, [r3, #0]
			break;
 8004bfa:	e063      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004c02:	f7fc fa6b 	bl	80010dc <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM1_BRK_TIM9_IRQn ;
 8004c06:	4b56      	ldr	r3, [pc, #344]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c08:	2218      	movs	r2, #24
 8004c0a:	701a      	strb	r2, [r3, #0]
			break;
 8004c0c:	e05a      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 8004c0e:	2101      	movs	r1, #1
 8004c10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004c14:	f7fc fa62 	bl	80010dc <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn ;
 8004c18:	4b51      	ldr	r3, [pc, #324]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c1a:	2219      	movs	r2, #25
 8004c1c:	701a      	strb	r2, [r3, #0]
			break;
 8004c1e:	e051      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM11, ENABLE);
 8004c20:	2101      	movs	r1, #1
 8004c22:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004c26:	f7fc fa59 	bl	80010dc <RCC_APB2PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM1_TRG_COM_TIM11_IRQn ;
 8004c2a:	4b4d      	ldr	r3, [pc, #308]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c2c:	221a      	movs	r2, #26
 8004c2e:	701a      	strb	r2, [r3, #0]
			break;
 8004c30:	e048      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8004c32:	2101      	movs	r1, #1
 8004c34:	2001      	movs	r0, #1
 8004c36:	f7fc fa31 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn ;
 8004c3a:	4b49      	ldr	r3, [pc, #292]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c3c:	221c      	movs	r2, #28
 8004c3e:	701a      	strb	r2, [r3, #0]
			break;
 8004c40:	e040      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8004c42:	2101      	movs	r1, #1
 8004c44:	2002      	movs	r0, #2
 8004c46:	f7fc fa29 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn ;
 8004c4a:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c4c:	221d      	movs	r2, #29
 8004c4e:	701a      	strb	r2, [r3, #0]
			break;
 8004c50:	e038      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8004c52:	2101      	movs	r1, #1
 8004c54:	2004      	movs	r0, #4
 8004c56:	f7fc fa21 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn ;
 8004c5a:	4b41      	ldr	r3, [pc, #260]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c5c:	221e      	movs	r2, #30
 8004c5e:	701a      	strb	r2, [r3, #0]
			break;
 8004c60:	e030      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8004c62:	2101      	movs	r1, #1
 8004c64:	2008      	movs	r0, #8
 8004c66:	f7fc fa19 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn ;
 8004c6a:	4b3d      	ldr	r3, [pc, #244]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c6c:	2232      	movs	r2, #50	; 0x32
 8004c6e:	701a      	strb	r2, [r3, #0]
			break;
 8004c70:	e028      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8004c72:	2101      	movs	r1, #1
 8004c74:	2010      	movs	r0, #16
 8004c76:	f7fc fa11 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn ;
 8004c7a:	4b39      	ldr	r3, [pc, #228]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c7c:	2236      	movs	r2, #54	; 0x36
 8004c7e:	701a      	strb	r2, [r3, #0]
			break;
 8004c80:	e020      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8004c82:	2101      	movs	r1, #1
 8004c84:	2020      	movs	r0, #32
 8004c86:	f7fc fa09 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn ;
 8004c8a:	4b35      	ldr	r3, [pc, #212]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c8c:	2237      	movs	r2, #55	; 0x37
 8004c8e:	701a      	strb	r2, [r3, #0]
			break;
 8004c90:	e018      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 8004c92:	2101      	movs	r1, #1
 8004c94:	2040      	movs	r0, #64	; 0x40
 8004c96:	f7fc fa01 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_BRK_TIM12_IRQn ;
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004c9c:	222b      	movs	r2, #43	; 0x2b
 8004c9e:	701a      	strb	r2, [r3, #0]
			break;
 8004ca0:	e010      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13, ENABLE);
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	2080      	movs	r0, #128	; 0x80
 8004ca6:	f7fc f9f9 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_UP_TIM13_IRQn ;
 8004caa:	4b2d      	ldr	r3, [pc, #180]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004cac:	222c      	movs	r2, #44	; 0x2c
 8004cae:	701a      	strb	r2, [r3, #0]
			break;
 8004cb0:	e008      	b.n	8004cc4 <BIOSTIMx_Init+0x174>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004cb8:	f7fc f9f0 	bl	800109c <RCC_APB1PeriphClockCmd>
			BIOS_NVIC_InitStructure.NVIC_IRQChannel = TIM8_TRG_COM_TIM14_IRQn ;
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004cbe:	222d      	movs	r2, #45	; 0x2d
 8004cc0:	701a      	strb	r2, [r3, #0]
			break;
 8004cc2:	bf00      	nop
	}

	//Initialize TIMx
	BIOS_TIM_TimeBaseStructure.TIM_Period = period - 1;
 8004cc4:	897b      	ldrh	r3, [r7, #10]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <BIOSTIMx_Init+0x214>)
 8004ccc:	605a      	str	r2, [r3, #4]
	BIOS_TIM_TimeBaseStructure.TIM_Prescaler = prescaler - 1;
 8004cce:	893b      	ldrh	r3, [r7, #8]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <BIOSTIMx_Init+0x214>)
 8004cd6:	801a      	strh	r2, [r3, #0]
	BIOS_TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8004cd8:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <BIOSTIMx_Init+0x214>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	811a      	strh	r2, [r3, #8]
	BIOS_TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004cde:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <BIOSTIMx_Init+0x214>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIMx, &BIOS_TIM_TimeBaseStructure);
 8004ce4:	491f      	ldr	r1, [pc, #124]	; (8004d64 <BIOSTIMx_Init+0x214>)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7fc fa18 	bl	800111c <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMx, TIM_IT_Update);
 8004cec:	2101      	movs	r1, #1
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7fc fd98 	bl	8001824 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMx,TIM_IT_Update,ENABLE);
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7fc fd45 	bl	8001788 <TIM_ITConfig>
	//NVIC Configuration
	BIOS_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004d04:	705a      	strb	r2, [r3, #1]
	BIOS_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8004d06:	8b3b      	ldrh	r3, [r7, #24]
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004d0c:	709a      	strb	r2, [r3, #2]
	BIOS_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_NVIC_InitStructure);
 8004d14:	4812      	ldr	r0, [pc, #72]	; (8004d60 <BIOSTIMx_Init+0x210>)
 8004d16:	f7fb ffa7 	bl	8000c68 <NVIC_Init>
	//Enable TIMx
	TIM_Cmd(TIMx,ENABLE);
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7fc fa89 	bl	8001234 <TIM_Cmd>
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40001800 	.word	0x40001800
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40001000 	.word	0x40001000
 8004d3c:	40001400 	.word	0x40001400
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40002000 	.word	0x40002000
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40001c00 	.word	0x40001c00
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	20000778 	.word	0x20000778
 8004d64:	2000076c 	.word	0x2000076c

08004d68 <UART2Init>:
 * Function Example		: UART2Init(115200, ENABLE, 0, 0, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1);
 */

void UART2Init(uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_Tx, uint16_t GPIO_Pin_Tx, GPIO_TypeDef* GPIOx_Rx, uint16_t GPIO_Pin_Rx)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	72fb      	strb	r3, [r7, #11]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	813b      	strh	r3, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8004d82:	2101      	movs	r1, #1
 8004d84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004d88:	f7fc f988 	bl	800109c <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_Tx, GPIO_Pin_Tx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 8004d8c:	8bb9      	ldrh	r1, [r7, #28]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	2302      	movs	r3, #2
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	2300      	movs	r3, #0
 8004d98:	2202      	movs	r2, #2
 8004d9a:	69b8      	ldr	r0, [r7, #24]
 8004d9c:	f7fd f892 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_Rx, GPIO_Pin_Rx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 8004da0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004da2:	2300      	movs	r3, #0
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	2302      	movs	r3, #2
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2300      	movs	r3, #0
 8004dac:	2202      	movs	r2, #2
 8004dae:	6a38      	ldr	r0, [r7, #32]
 8004db0:	f7fd f888 	bl	8001ec4 <GPIOPinsInit>
	AFConfig(USART2,GPIOx_Tx, GPIO_Pin_Tx);
 8004db4:	8bbb      	ldrh	r3, [r7, #28]
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d05e      	beq.n	8004e78 <UART2Init+0x110>
 8004dba:	2b80      	cmp	r3, #128	; 0x80
 8004dbc:	d811      	bhi.n	8004de2 <UART2Init+0x7a>
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d042      	beq.n	8004e48 <UART2Init+0xe0>
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d806      	bhi.n	8004dd4 <UART2Init+0x6c>
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d032      	beq.n	8004e30 <UART2Init+0xc8>
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d036      	beq.n	8004e3c <UART2Init+0xd4>
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d028      	beq.n	8004e24 <UART2Init+0xbc>
 8004dd2:	e086      	b.n	8004ee2 <UART2Init+0x17a>
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d043      	beq.n	8004e60 <UART2Init+0xf8>
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d047      	beq.n	8004e6c <UART2Init+0x104>
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d039      	beq.n	8004e54 <UART2Init+0xec>
 8004de0:	e07f      	b.n	8004ee2 <UART2Init+0x17a>
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de6:	d05f      	beq.n	8004ea8 <UART2Init+0x140>
 8004de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dec:	d809      	bhi.n	8004e02 <UART2Init+0x9a>
 8004dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df2:	d04d      	beq.n	8004e90 <UART2Init+0x128>
 8004df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df8:	d050      	beq.n	8004e9c <UART2Init+0x134>
 8004dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfe:	d041      	beq.n	8004e84 <UART2Init+0x11c>
 8004e00:	e06f      	b.n	8004ee2 <UART2Init+0x17a>
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	d05b      	beq.n	8004ec0 <UART2Init+0x158>
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0c:	d803      	bhi.n	8004e16 <UART2Init+0xae>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e12:	d04f      	beq.n	8004eb4 <UART2Init+0x14c>
 8004e14:	e065      	b.n	8004ee2 <UART2Init+0x17a>
 8004e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1a:	d057      	beq.n	8004ecc <UART2Init+0x164>
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e20:	d05a      	beq.n	8004ed8 <UART2Init+0x170>
 8004e22:	e05e      	b.n	8004ee2 <UART2Init+0x17a>
 8004e24:	2207      	movs	r2, #7
 8004e26:	2100      	movs	r1, #0
 8004e28:	69b8      	ldr	r0, [r7, #24]
 8004e2a:	f7fc f825 	bl	8000e78 <GPIO_PinAFConfig>
 8004e2e:	e058      	b.n	8004ee2 <UART2Init+0x17a>
 8004e30:	2207      	movs	r2, #7
 8004e32:	2101      	movs	r1, #1
 8004e34:	69b8      	ldr	r0, [r7, #24]
 8004e36:	f7fc f81f 	bl	8000e78 <GPIO_PinAFConfig>
 8004e3a:	e052      	b.n	8004ee2 <UART2Init+0x17a>
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	2102      	movs	r1, #2
 8004e40:	69b8      	ldr	r0, [r7, #24]
 8004e42:	f7fc f819 	bl	8000e78 <GPIO_PinAFConfig>
 8004e46:	e04c      	b.n	8004ee2 <UART2Init+0x17a>
 8004e48:	2207      	movs	r2, #7
 8004e4a:	2103      	movs	r1, #3
 8004e4c:	69b8      	ldr	r0, [r7, #24]
 8004e4e:	f7fc f813 	bl	8000e78 <GPIO_PinAFConfig>
 8004e52:	e046      	b.n	8004ee2 <UART2Init+0x17a>
 8004e54:	2207      	movs	r2, #7
 8004e56:	2104      	movs	r1, #4
 8004e58:	69b8      	ldr	r0, [r7, #24]
 8004e5a:	f7fc f80d 	bl	8000e78 <GPIO_PinAFConfig>
 8004e5e:	e040      	b.n	8004ee2 <UART2Init+0x17a>
 8004e60:	2207      	movs	r2, #7
 8004e62:	2105      	movs	r1, #5
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f7fc f807 	bl	8000e78 <GPIO_PinAFConfig>
 8004e6a:	e03a      	b.n	8004ee2 <UART2Init+0x17a>
 8004e6c:	2207      	movs	r2, #7
 8004e6e:	2106      	movs	r1, #6
 8004e70:	69b8      	ldr	r0, [r7, #24]
 8004e72:	f7fc f801 	bl	8000e78 <GPIO_PinAFConfig>
 8004e76:	e034      	b.n	8004ee2 <UART2Init+0x17a>
 8004e78:	2207      	movs	r2, #7
 8004e7a:	2107      	movs	r1, #7
 8004e7c:	69b8      	ldr	r0, [r7, #24]
 8004e7e:	f7fb fffb 	bl	8000e78 <GPIO_PinAFConfig>
 8004e82:	e02e      	b.n	8004ee2 <UART2Init+0x17a>
 8004e84:	2207      	movs	r2, #7
 8004e86:	2108      	movs	r1, #8
 8004e88:	69b8      	ldr	r0, [r7, #24]
 8004e8a:	f7fb fff5 	bl	8000e78 <GPIO_PinAFConfig>
 8004e8e:	e028      	b.n	8004ee2 <UART2Init+0x17a>
 8004e90:	2207      	movs	r2, #7
 8004e92:	2109      	movs	r1, #9
 8004e94:	69b8      	ldr	r0, [r7, #24]
 8004e96:	f7fb ffef 	bl	8000e78 <GPIO_PinAFConfig>
 8004e9a:	e022      	b.n	8004ee2 <UART2Init+0x17a>
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	210a      	movs	r1, #10
 8004ea0:	69b8      	ldr	r0, [r7, #24]
 8004ea2:	f7fb ffe9 	bl	8000e78 <GPIO_PinAFConfig>
 8004ea6:	e01c      	b.n	8004ee2 <UART2Init+0x17a>
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	210b      	movs	r1, #11
 8004eac:	69b8      	ldr	r0, [r7, #24]
 8004eae:	f7fb ffe3 	bl	8000e78 <GPIO_PinAFConfig>
 8004eb2:	e016      	b.n	8004ee2 <UART2Init+0x17a>
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	210c      	movs	r1, #12
 8004eb8:	69b8      	ldr	r0, [r7, #24]
 8004eba:	f7fb ffdd 	bl	8000e78 <GPIO_PinAFConfig>
 8004ebe:	e010      	b.n	8004ee2 <UART2Init+0x17a>
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	210d      	movs	r1, #13
 8004ec4:	69b8      	ldr	r0, [r7, #24]
 8004ec6:	f7fb ffd7 	bl	8000e78 <GPIO_PinAFConfig>
 8004eca:	e00a      	b.n	8004ee2 <UART2Init+0x17a>
 8004ecc:	2207      	movs	r2, #7
 8004ece:	210e      	movs	r1, #14
 8004ed0:	69b8      	ldr	r0, [r7, #24]
 8004ed2:	f7fb ffd1 	bl	8000e78 <GPIO_PinAFConfig>
 8004ed6:	e004      	b.n	8004ee2 <UART2Init+0x17a>
 8004ed8:	2207      	movs	r2, #7
 8004eda:	210f      	movs	r1, #15
 8004edc:	69b8      	ldr	r0, [r7, #24]
 8004ede:	f7fb ffcb 	bl	8000e78 <GPIO_PinAFConfig>
 8004ee2:	bf00      	nop
	AFConfig(USART2,GPIOx_Rx, GPIO_Pin_Rx);
 8004ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ee6:	2b80      	cmp	r3, #128	; 0x80
 8004ee8:	d05e      	beq.n	8004fa8 <UART2Init+0x240>
 8004eea:	2b80      	cmp	r3, #128	; 0x80
 8004eec:	d811      	bhi.n	8004f12 <UART2Init+0x1aa>
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d042      	beq.n	8004f78 <UART2Init+0x210>
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d806      	bhi.n	8004f04 <UART2Init+0x19c>
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d032      	beq.n	8004f60 <UART2Init+0x1f8>
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d036      	beq.n	8004f6c <UART2Init+0x204>
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d028      	beq.n	8004f54 <UART2Init+0x1ec>
 8004f02:	e086      	b.n	8005012 <UART2Init+0x2aa>
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d043      	beq.n	8004f90 <UART2Init+0x228>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d047      	beq.n	8004f9c <UART2Init+0x234>
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d039      	beq.n	8004f84 <UART2Init+0x21c>
 8004f10:	e07f      	b.n	8005012 <UART2Init+0x2aa>
 8004f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f16:	d05f      	beq.n	8004fd8 <UART2Init+0x270>
 8004f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1c:	d809      	bhi.n	8004f32 <UART2Init+0x1ca>
 8004f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f22:	d04d      	beq.n	8004fc0 <UART2Init+0x258>
 8004f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f28:	d050      	beq.n	8004fcc <UART2Init+0x264>
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2e:	d041      	beq.n	8004fb4 <UART2Init+0x24c>
 8004f30:	e06f      	b.n	8005012 <UART2Init+0x2aa>
 8004f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f36:	d05b      	beq.n	8004ff0 <UART2Init+0x288>
 8004f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3c:	d803      	bhi.n	8004f46 <UART2Init+0x1de>
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f42:	d04f      	beq.n	8004fe4 <UART2Init+0x27c>
 8004f44:	e065      	b.n	8005012 <UART2Init+0x2aa>
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	d057      	beq.n	8004ffc <UART2Init+0x294>
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f50:	d05a      	beq.n	8005008 <UART2Init+0x2a0>
 8004f52:	e05e      	b.n	8005012 <UART2Init+0x2aa>
 8004f54:	2207      	movs	r2, #7
 8004f56:	2100      	movs	r1, #0
 8004f58:	6a38      	ldr	r0, [r7, #32]
 8004f5a:	f7fb ff8d 	bl	8000e78 <GPIO_PinAFConfig>
 8004f5e:	e058      	b.n	8005012 <UART2Init+0x2aa>
 8004f60:	2207      	movs	r2, #7
 8004f62:	2101      	movs	r1, #1
 8004f64:	6a38      	ldr	r0, [r7, #32]
 8004f66:	f7fb ff87 	bl	8000e78 <GPIO_PinAFConfig>
 8004f6a:	e052      	b.n	8005012 <UART2Init+0x2aa>
 8004f6c:	2207      	movs	r2, #7
 8004f6e:	2102      	movs	r1, #2
 8004f70:	6a38      	ldr	r0, [r7, #32]
 8004f72:	f7fb ff81 	bl	8000e78 <GPIO_PinAFConfig>
 8004f76:	e04c      	b.n	8005012 <UART2Init+0x2aa>
 8004f78:	2207      	movs	r2, #7
 8004f7a:	2103      	movs	r1, #3
 8004f7c:	6a38      	ldr	r0, [r7, #32]
 8004f7e:	f7fb ff7b 	bl	8000e78 <GPIO_PinAFConfig>
 8004f82:	e046      	b.n	8005012 <UART2Init+0x2aa>
 8004f84:	2207      	movs	r2, #7
 8004f86:	2104      	movs	r1, #4
 8004f88:	6a38      	ldr	r0, [r7, #32]
 8004f8a:	f7fb ff75 	bl	8000e78 <GPIO_PinAFConfig>
 8004f8e:	e040      	b.n	8005012 <UART2Init+0x2aa>
 8004f90:	2207      	movs	r2, #7
 8004f92:	2105      	movs	r1, #5
 8004f94:	6a38      	ldr	r0, [r7, #32]
 8004f96:	f7fb ff6f 	bl	8000e78 <GPIO_PinAFConfig>
 8004f9a:	e03a      	b.n	8005012 <UART2Init+0x2aa>
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	2106      	movs	r1, #6
 8004fa0:	6a38      	ldr	r0, [r7, #32]
 8004fa2:	f7fb ff69 	bl	8000e78 <GPIO_PinAFConfig>
 8004fa6:	e034      	b.n	8005012 <UART2Init+0x2aa>
 8004fa8:	2207      	movs	r2, #7
 8004faa:	2107      	movs	r1, #7
 8004fac:	6a38      	ldr	r0, [r7, #32]
 8004fae:	f7fb ff63 	bl	8000e78 <GPIO_PinAFConfig>
 8004fb2:	e02e      	b.n	8005012 <UART2Init+0x2aa>
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	2108      	movs	r1, #8
 8004fb8:	6a38      	ldr	r0, [r7, #32]
 8004fba:	f7fb ff5d 	bl	8000e78 <GPIO_PinAFConfig>
 8004fbe:	e028      	b.n	8005012 <UART2Init+0x2aa>
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	2109      	movs	r1, #9
 8004fc4:	6a38      	ldr	r0, [r7, #32]
 8004fc6:	f7fb ff57 	bl	8000e78 <GPIO_PinAFConfig>
 8004fca:	e022      	b.n	8005012 <UART2Init+0x2aa>
 8004fcc:	2207      	movs	r2, #7
 8004fce:	210a      	movs	r1, #10
 8004fd0:	6a38      	ldr	r0, [r7, #32]
 8004fd2:	f7fb ff51 	bl	8000e78 <GPIO_PinAFConfig>
 8004fd6:	e01c      	b.n	8005012 <UART2Init+0x2aa>
 8004fd8:	2207      	movs	r2, #7
 8004fda:	210b      	movs	r1, #11
 8004fdc:	6a38      	ldr	r0, [r7, #32]
 8004fde:	f7fb ff4b 	bl	8000e78 <GPIO_PinAFConfig>
 8004fe2:	e016      	b.n	8005012 <UART2Init+0x2aa>
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	210c      	movs	r1, #12
 8004fe8:	6a38      	ldr	r0, [r7, #32]
 8004fea:	f7fb ff45 	bl	8000e78 <GPIO_PinAFConfig>
 8004fee:	e010      	b.n	8005012 <UART2Init+0x2aa>
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	210d      	movs	r1, #13
 8004ff4:	6a38      	ldr	r0, [r7, #32]
 8004ff6:	f7fb ff3f 	bl	8000e78 <GPIO_PinAFConfig>
 8004ffa:	e00a      	b.n	8005012 <UART2Init+0x2aa>
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	210e      	movs	r1, #14
 8005000:	6a38      	ldr	r0, [r7, #32]
 8005002:	f7fb ff39 	bl	8000e78 <GPIO_PinAFConfig>
 8005006:	e004      	b.n	8005012 <UART2Init+0x2aa>
 8005008:	2207      	movs	r2, #7
 800500a:	210f      	movs	r1, #15
 800500c:	6a38      	ldr	r0, [r7, #32]
 800500e:	f7fb ff33 	bl	8000e78 <GPIO_PinAFConfig>
 8005012:	bf00      	nop

	BIOS_USART_InitStructure.USART_BaudRate            = baudrate;
 8005014:	4a1a      	ldr	r2, [pc, #104]	; (8005080 <UART2Init+0x318>)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6013      	str	r3, [r2, #0]
	BIOS_USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 800501a:	4b19      	ldr	r3, [pc, #100]	; (8005080 <UART2Init+0x318>)
 800501c:	2200      	movs	r2, #0
 800501e:	809a      	strh	r2, [r3, #4]
	BIOS_USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8005020:	4b17      	ldr	r3, [pc, #92]	; (8005080 <UART2Init+0x318>)
 8005022:	2200      	movs	r2, #0
 8005024:	80da      	strh	r2, [r3, #6]
	BIOS_USART_InitStructure.USART_Parity              = USART_Parity_No;
 8005026:	4b16      	ldr	r3, [pc, #88]	; (8005080 <UART2Init+0x318>)
 8005028:	2200      	movs	r2, #0
 800502a:	811a      	strh	r2, [r3, #8]
	BIOS_USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800502c:	4b14      	ldr	r3, [pc, #80]	; (8005080 <UART2Init+0x318>)
 800502e:	2200      	movs	r2, #0
 8005030:	819a      	strh	r2, [r3, #12]
	BIOS_USART_InitStructure.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <UART2Init+0x318>)
 8005034:	220c      	movs	r2, #12
 8005036:	815a      	strh	r2, [r3, #10]
	USART_Init(USART2, &BIOS_USART_InitStructure);
 8005038:	4911      	ldr	r1, [pc, #68]	; (8005080 <UART2Init+0x318>)
 800503a:	4812      	ldr	r0, [pc, #72]	; (8005084 <UART2Init+0x31c>)
 800503c:	f7fc fc50 	bl	80018e0 <USART_Init>

	USART_ITConfig(USART2, USART_IT_RXNE, rxstate);
 8005040:	7afb      	ldrb	r3, [r7, #11]
 8005042:	461a      	mov	r2, r3
 8005044:	f240 5125 	movw	r1, #1317	; 0x525
 8005048:	480e      	ldr	r0, [pc, #56]	; (8005084 <UART2Init+0x31c>)
 800504a:	f7fc fd45 	bl	8001ad8 <USART_ITConfig>

	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 800504e:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <UART2Init+0x320>)
 8005050:	2226      	movs	r2, #38	; 0x26
 8005052:	701a      	strb	r2, [r3, #0]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8005054:	893b      	ldrh	r3, [r7, #8]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <UART2Init+0x320>)
 800505a:	705a      	strb	r2, [r3, #1]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	b2da      	uxtb	r2, r3
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <UART2Init+0x320>)
 8005062:	709a      	strb	r2, [r3, #2]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005064:	4b08      	ldr	r3, [pc, #32]	; (8005088 <UART2Init+0x320>)
 8005066:	2201      	movs	r2, #1
 8005068:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_UART_NVIC_InitStructure);
 800506a:	4807      	ldr	r0, [pc, #28]	; (8005088 <UART2Init+0x320>)
 800506c:	f7fb fdfc 	bl	8000c68 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8005070:	2101      	movs	r1, #1
 8005072:	4804      	ldr	r0, [pc, #16]	; (8005084 <UART2Init+0x31c>)
 8005074:	f7fc fcee 	bl	8001a54 <USART_Cmd>
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	2000075c 	.word	0x2000075c
 8005084:	40004400 	.word	0x40004400
 8005088:	2000077c 	.word	0x2000077c

0800508c <UART5Init>:
 * Function Example		: UART5Init(115200, ENABLE, 0, 0, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1);
 */

void UART5Init(uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority,
		  GPIO_TypeDef* GPIOx_Tx, uint16_t GPIO_Pin_Tx, GPIO_TypeDef* GPIOx_Rx, uint16_t GPIO_Pin_Rx)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	4608      	mov	r0, r1
 8005096:	4611      	mov	r1, r2
 8005098:	461a      	mov	r2, r3
 800509a:	4603      	mov	r3, r0
 800509c:	72fb      	strb	r3, [r7, #11]
 800509e:	460b      	mov	r3, r1
 80050a0:	813b      	strh	r3, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 80050a6:	2101      	movs	r1, #1
 80050a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80050ac:	f7fb fff6 	bl	800109c <RCC_APB1PeriphClockCmd>

	GPIOPinsInit (GPIOx_Tx, GPIO_Pin_Tx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 80050b0:	8bb9      	ldrh	r1, [r7, #28]
 80050b2:	2300      	movs	r3, #0
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	2302      	movs	r3, #2
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	2300      	movs	r3, #0
 80050bc:	2202      	movs	r2, #2
 80050be:	69b8      	ldr	r0, [r7, #24]
 80050c0:	f7fc ff00 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit (GPIOx_Rx, GPIO_Pin_Rx, GPIO_Mode_AF, GPIO_OType_PP,GPIO_Speed_50MHz,GPIO_PuPd_NOPULL);
 80050c4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80050c6:	2300      	movs	r3, #0
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	2302      	movs	r3, #2
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	2202      	movs	r2, #2
 80050d2:	6a38      	ldr	r0, [r7, #32]
 80050d4:	f7fc fef6 	bl	8001ec4 <GPIOPinsInit>
	AFConfig(UART5,GPIOx_Tx, GPIO_Pin_Tx);
 80050d8:	8bbb      	ldrh	r3, [r7, #28]
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d05e      	beq.n	800519c <UART5Init+0x110>
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d811      	bhi.n	8005106 <UART5Init+0x7a>
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d042      	beq.n	800516c <UART5Init+0xe0>
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d806      	bhi.n	80050f8 <UART5Init+0x6c>
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d032      	beq.n	8005154 <UART5Init+0xc8>
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d036      	beq.n	8005160 <UART5Init+0xd4>
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d028      	beq.n	8005148 <UART5Init+0xbc>
 80050f6:	e086      	b.n	8005206 <UART5Init+0x17a>
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d043      	beq.n	8005184 <UART5Init+0xf8>
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d047      	beq.n	8005190 <UART5Init+0x104>
 8005100:	2b10      	cmp	r3, #16
 8005102:	d039      	beq.n	8005178 <UART5Init+0xec>
 8005104:	e07f      	b.n	8005206 <UART5Init+0x17a>
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510a:	d05f      	beq.n	80051cc <UART5Init+0x140>
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005110:	d809      	bhi.n	8005126 <UART5Init+0x9a>
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d04d      	beq.n	80051b4 <UART5Init+0x128>
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511c:	d050      	beq.n	80051c0 <UART5Init+0x134>
 800511e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005122:	d041      	beq.n	80051a8 <UART5Init+0x11c>
 8005124:	e06f      	b.n	8005206 <UART5Init+0x17a>
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	d05b      	beq.n	80051e4 <UART5Init+0x158>
 800512c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005130:	d803      	bhi.n	800513a <UART5Init+0xae>
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005136:	d04f      	beq.n	80051d8 <UART5Init+0x14c>
 8005138:	e065      	b.n	8005206 <UART5Init+0x17a>
 800513a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800513e:	d057      	beq.n	80051f0 <UART5Init+0x164>
 8005140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005144:	d05a      	beq.n	80051fc <UART5Init+0x170>
 8005146:	e05e      	b.n	8005206 <UART5Init+0x17a>
 8005148:	2208      	movs	r2, #8
 800514a:	2100      	movs	r1, #0
 800514c:	69b8      	ldr	r0, [r7, #24]
 800514e:	f7fb fe93 	bl	8000e78 <GPIO_PinAFConfig>
 8005152:	e058      	b.n	8005206 <UART5Init+0x17a>
 8005154:	2208      	movs	r2, #8
 8005156:	2101      	movs	r1, #1
 8005158:	69b8      	ldr	r0, [r7, #24]
 800515a:	f7fb fe8d 	bl	8000e78 <GPIO_PinAFConfig>
 800515e:	e052      	b.n	8005206 <UART5Init+0x17a>
 8005160:	2208      	movs	r2, #8
 8005162:	2102      	movs	r1, #2
 8005164:	69b8      	ldr	r0, [r7, #24]
 8005166:	f7fb fe87 	bl	8000e78 <GPIO_PinAFConfig>
 800516a:	e04c      	b.n	8005206 <UART5Init+0x17a>
 800516c:	2208      	movs	r2, #8
 800516e:	2103      	movs	r1, #3
 8005170:	69b8      	ldr	r0, [r7, #24]
 8005172:	f7fb fe81 	bl	8000e78 <GPIO_PinAFConfig>
 8005176:	e046      	b.n	8005206 <UART5Init+0x17a>
 8005178:	2208      	movs	r2, #8
 800517a:	2104      	movs	r1, #4
 800517c:	69b8      	ldr	r0, [r7, #24]
 800517e:	f7fb fe7b 	bl	8000e78 <GPIO_PinAFConfig>
 8005182:	e040      	b.n	8005206 <UART5Init+0x17a>
 8005184:	2208      	movs	r2, #8
 8005186:	2105      	movs	r1, #5
 8005188:	69b8      	ldr	r0, [r7, #24]
 800518a:	f7fb fe75 	bl	8000e78 <GPIO_PinAFConfig>
 800518e:	e03a      	b.n	8005206 <UART5Init+0x17a>
 8005190:	2208      	movs	r2, #8
 8005192:	2106      	movs	r1, #6
 8005194:	69b8      	ldr	r0, [r7, #24]
 8005196:	f7fb fe6f 	bl	8000e78 <GPIO_PinAFConfig>
 800519a:	e034      	b.n	8005206 <UART5Init+0x17a>
 800519c:	2208      	movs	r2, #8
 800519e:	2107      	movs	r1, #7
 80051a0:	69b8      	ldr	r0, [r7, #24]
 80051a2:	f7fb fe69 	bl	8000e78 <GPIO_PinAFConfig>
 80051a6:	e02e      	b.n	8005206 <UART5Init+0x17a>
 80051a8:	2208      	movs	r2, #8
 80051aa:	2108      	movs	r1, #8
 80051ac:	69b8      	ldr	r0, [r7, #24]
 80051ae:	f7fb fe63 	bl	8000e78 <GPIO_PinAFConfig>
 80051b2:	e028      	b.n	8005206 <UART5Init+0x17a>
 80051b4:	2208      	movs	r2, #8
 80051b6:	2109      	movs	r1, #9
 80051b8:	69b8      	ldr	r0, [r7, #24]
 80051ba:	f7fb fe5d 	bl	8000e78 <GPIO_PinAFConfig>
 80051be:	e022      	b.n	8005206 <UART5Init+0x17a>
 80051c0:	2208      	movs	r2, #8
 80051c2:	210a      	movs	r1, #10
 80051c4:	69b8      	ldr	r0, [r7, #24]
 80051c6:	f7fb fe57 	bl	8000e78 <GPIO_PinAFConfig>
 80051ca:	e01c      	b.n	8005206 <UART5Init+0x17a>
 80051cc:	2208      	movs	r2, #8
 80051ce:	210b      	movs	r1, #11
 80051d0:	69b8      	ldr	r0, [r7, #24]
 80051d2:	f7fb fe51 	bl	8000e78 <GPIO_PinAFConfig>
 80051d6:	e016      	b.n	8005206 <UART5Init+0x17a>
 80051d8:	2208      	movs	r2, #8
 80051da:	210c      	movs	r1, #12
 80051dc:	69b8      	ldr	r0, [r7, #24]
 80051de:	f7fb fe4b 	bl	8000e78 <GPIO_PinAFConfig>
 80051e2:	e010      	b.n	8005206 <UART5Init+0x17a>
 80051e4:	2208      	movs	r2, #8
 80051e6:	210d      	movs	r1, #13
 80051e8:	69b8      	ldr	r0, [r7, #24]
 80051ea:	f7fb fe45 	bl	8000e78 <GPIO_PinAFConfig>
 80051ee:	e00a      	b.n	8005206 <UART5Init+0x17a>
 80051f0:	2208      	movs	r2, #8
 80051f2:	210e      	movs	r1, #14
 80051f4:	69b8      	ldr	r0, [r7, #24]
 80051f6:	f7fb fe3f 	bl	8000e78 <GPIO_PinAFConfig>
 80051fa:	e004      	b.n	8005206 <UART5Init+0x17a>
 80051fc:	2208      	movs	r2, #8
 80051fe:	210f      	movs	r1, #15
 8005200:	69b8      	ldr	r0, [r7, #24]
 8005202:	f7fb fe39 	bl	8000e78 <GPIO_PinAFConfig>
 8005206:	bf00      	nop
	AFConfig(UART5,GPIOx_Rx, GPIO_Pin_Rx);
 8005208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800520a:	2b80      	cmp	r3, #128	; 0x80
 800520c:	d05e      	beq.n	80052cc <UART5Init+0x240>
 800520e:	2b80      	cmp	r3, #128	; 0x80
 8005210:	d811      	bhi.n	8005236 <UART5Init+0x1aa>
 8005212:	2b08      	cmp	r3, #8
 8005214:	d042      	beq.n	800529c <UART5Init+0x210>
 8005216:	2b08      	cmp	r3, #8
 8005218:	d806      	bhi.n	8005228 <UART5Init+0x19c>
 800521a:	2b02      	cmp	r3, #2
 800521c:	d032      	beq.n	8005284 <UART5Init+0x1f8>
 800521e:	2b04      	cmp	r3, #4
 8005220:	d036      	beq.n	8005290 <UART5Init+0x204>
 8005222:	2b01      	cmp	r3, #1
 8005224:	d028      	beq.n	8005278 <UART5Init+0x1ec>
 8005226:	e086      	b.n	8005336 <UART5Init+0x2aa>
 8005228:	2b20      	cmp	r3, #32
 800522a:	d043      	beq.n	80052b4 <UART5Init+0x228>
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d047      	beq.n	80052c0 <UART5Init+0x234>
 8005230:	2b10      	cmp	r3, #16
 8005232:	d039      	beq.n	80052a8 <UART5Init+0x21c>
 8005234:	e07f      	b.n	8005336 <UART5Init+0x2aa>
 8005236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523a:	d05f      	beq.n	80052fc <UART5Init+0x270>
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005240:	d809      	bhi.n	8005256 <UART5Init+0x1ca>
 8005242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005246:	d04d      	beq.n	80052e4 <UART5Init+0x258>
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	d050      	beq.n	80052f0 <UART5Init+0x264>
 800524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005252:	d041      	beq.n	80052d8 <UART5Init+0x24c>
 8005254:	e06f      	b.n	8005336 <UART5Init+0x2aa>
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525a:	d05b      	beq.n	8005314 <UART5Init+0x288>
 800525c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005260:	d803      	bhi.n	800526a <UART5Init+0x1de>
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d04f      	beq.n	8005308 <UART5Init+0x27c>
 8005268:	e065      	b.n	8005336 <UART5Init+0x2aa>
 800526a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526e:	d057      	beq.n	8005320 <UART5Init+0x294>
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005274:	d05a      	beq.n	800532c <UART5Init+0x2a0>
 8005276:	e05e      	b.n	8005336 <UART5Init+0x2aa>
 8005278:	2208      	movs	r2, #8
 800527a:	2100      	movs	r1, #0
 800527c:	6a38      	ldr	r0, [r7, #32]
 800527e:	f7fb fdfb 	bl	8000e78 <GPIO_PinAFConfig>
 8005282:	e058      	b.n	8005336 <UART5Init+0x2aa>
 8005284:	2208      	movs	r2, #8
 8005286:	2101      	movs	r1, #1
 8005288:	6a38      	ldr	r0, [r7, #32]
 800528a:	f7fb fdf5 	bl	8000e78 <GPIO_PinAFConfig>
 800528e:	e052      	b.n	8005336 <UART5Init+0x2aa>
 8005290:	2208      	movs	r2, #8
 8005292:	2102      	movs	r1, #2
 8005294:	6a38      	ldr	r0, [r7, #32]
 8005296:	f7fb fdef 	bl	8000e78 <GPIO_PinAFConfig>
 800529a:	e04c      	b.n	8005336 <UART5Init+0x2aa>
 800529c:	2208      	movs	r2, #8
 800529e:	2103      	movs	r1, #3
 80052a0:	6a38      	ldr	r0, [r7, #32]
 80052a2:	f7fb fde9 	bl	8000e78 <GPIO_PinAFConfig>
 80052a6:	e046      	b.n	8005336 <UART5Init+0x2aa>
 80052a8:	2208      	movs	r2, #8
 80052aa:	2104      	movs	r1, #4
 80052ac:	6a38      	ldr	r0, [r7, #32]
 80052ae:	f7fb fde3 	bl	8000e78 <GPIO_PinAFConfig>
 80052b2:	e040      	b.n	8005336 <UART5Init+0x2aa>
 80052b4:	2208      	movs	r2, #8
 80052b6:	2105      	movs	r1, #5
 80052b8:	6a38      	ldr	r0, [r7, #32]
 80052ba:	f7fb fddd 	bl	8000e78 <GPIO_PinAFConfig>
 80052be:	e03a      	b.n	8005336 <UART5Init+0x2aa>
 80052c0:	2208      	movs	r2, #8
 80052c2:	2106      	movs	r1, #6
 80052c4:	6a38      	ldr	r0, [r7, #32]
 80052c6:	f7fb fdd7 	bl	8000e78 <GPIO_PinAFConfig>
 80052ca:	e034      	b.n	8005336 <UART5Init+0x2aa>
 80052cc:	2208      	movs	r2, #8
 80052ce:	2107      	movs	r1, #7
 80052d0:	6a38      	ldr	r0, [r7, #32]
 80052d2:	f7fb fdd1 	bl	8000e78 <GPIO_PinAFConfig>
 80052d6:	e02e      	b.n	8005336 <UART5Init+0x2aa>
 80052d8:	2208      	movs	r2, #8
 80052da:	2108      	movs	r1, #8
 80052dc:	6a38      	ldr	r0, [r7, #32]
 80052de:	f7fb fdcb 	bl	8000e78 <GPIO_PinAFConfig>
 80052e2:	e028      	b.n	8005336 <UART5Init+0x2aa>
 80052e4:	2208      	movs	r2, #8
 80052e6:	2109      	movs	r1, #9
 80052e8:	6a38      	ldr	r0, [r7, #32]
 80052ea:	f7fb fdc5 	bl	8000e78 <GPIO_PinAFConfig>
 80052ee:	e022      	b.n	8005336 <UART5Init+0x2aa>
 80052f0:	2208      	movs	r2, #8
 80052f2:	210a      	movs	r1, #10
 80052f4:	6a38      	ldr	r0, [r7, #32]
 80052f6:	f7fb fdbf 	bl	8000e78 <GPIO_PinAFConfig>
 80052fa:	e01c      	b.n	8005336 <UART5Init+0x2aa>
 80052fc:	2208      	movs	r2, #8
 80052fe:	210b      	movs	r1, #11
 8005300:	6a38      	ldr	r0, [r7, #32]
 8005302:	f7fb fdb9 	bl	8000e78 <GPIO_PinAFConfig>
 8005306:	e016      	b.n	8005336 <UART5Init+0x2aa>
 8005308:	2208      	movs	r2, #8
 800530a:	210c      	movs	r1, #12
 800530c:	6a38      	ldr	r0, [r7, #32]
 800530e:	f7fb fdb3 	bl	8000e78 <GPIO_PinAFConfig>
 8005312:	e010      	b.n	8005336 <UART5Init+0x2aa>
 8005314:	2208      	movs	r2, #8
 8005316:	210d      	movs	r1, #13
 8005318:	6a38      	ldr	r0, [r7, #32]
 800531a:	f7fb fdad 	bl	8000e78 <GPIO_PinAFConfig>
 800531e:	e00a      	b.n	8005336 <UART5Init+0x2aa>
 8005320:	2208      	movs	r2, #8
 8005322:	210e      	movs	r1, #14
 8005324:	6a38      	ldr	r0, [r7, #32]
 8005326:	f7fb fda7 	bl	8000e78 <GPIO_PinAFConfig>
 800532a:	e004      	b.n	8005336 <UART5Init+0x2aa>
 800532c:	2208      	movs	r2, #8
 800532e:	210f      	movs	r1, #15
 8005330:	6a38      	ldr	r0, [r7, #32]
 8005332:	f7fb fda1 	bl	8000e78 <GPIO_PinAFConfig>
 8005336:	bf00      	nop

	BIOS_USART_InitStructure.USART_BaudRate            = baudrate;
 8005338:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <UART5Init+0x318>)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6013      	str	r3, [r2, #0]
	BIOS_USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
 800533e:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <UART5Init+0x318>)
 8005340:	2200      	movs	r2, #0
 8005342:	809a      	strh	r2, [r3, #4]
	BIOS_USART_InitStructure.USART_StopBits            = USART_StopBits_1;
 8005344:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <UART5Init+0x318>)
 8005346:	2200      	movs	r2, #0
 8005348:	80da      	strh	r2, [r3, #6]
	BIOS_USART_InitStructure.USART_Parity              = USART_Parity_No;
 800534a:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <UART5Init+0x318>)
 800534c:	2200      	movs	r2, #0
 800534e:	811a      	strh	r2, [r3, #8]
	BIOS_USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <UART5Init+0x318>)
 8005352:	2200      	movs	r2, #0
 8005354:	819a      	strh	r2, [r3, #12]
	BIOS_USART_InitStructure.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <UART5Init+0x318>)
 8005358:	220c      	movs	r2, #12
 800535a:	815a      	strh	r2, [r3, #10]
	USART_Init(UART5, & BIOS_USART_InitStructure);
 800535c:	4911      	ldr	r1, [pc, #68]	; (80053a4 <UART5Init+0x318>)
 800535e:	4812      	ldr	r0, [pc, #72]	; (80053a8 <UART5Init+0x31c>)
 8005360:	f7fc fabe 	bl	80018e0 <USART_Init>

	USART_ITConfig(UART5, USART_IT_RXNE, rxstate);
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	461a      	mov	r2, r3
 8005368:	f240 5125 	movw	r1, #1317	; 0x525
 800536c:	480e      	ldr	r0, [pc, #56]	; (80053a8 <UART5Init+0x31c>)
 800536e:	f7fc fbb3 	bl	8001ad8 <USART_ITConfig>

	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <UART5Init+0x320>)
 8005374:	2235      	movs	r2, #53	; 0x35
 8005376:	701a      	strb	r2, [r3, #0]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preemptionpriority;
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <UART5Init+0x320>)
 800537e:	705a      	strb	r2, [r3, #1]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelSubPriority = subpriority;
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <UART5Init+0x320>)
 8005386:	709a      	strb	r2, [r3, #2]
	BIOS_UART_NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005388:	4b08      	ldr	r3, [pc, #32]	; (80053ac <UART5Init+0x320>)
 800538a:	2201      	movs	r2, #1
 800538c:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&BIOS_UART_NVIC_InitStructure);
 800538e:	4807      	ldr	r0, [pc, #28]	; (80053ac <UART5Init+0x320>)
 8005390:	f7fb fc6a 	bl	8000c68 <NVIC_Init>

	USART_Cmd(UART5, ENABLE);
 8005394:	2101      	movs	r1, #1
 8005396:	4804      	ldr	r0, [pc, #16]	; (80053a8 <UART5Init+0x31c>)
 8005398:	f7fc fb5c 	bl	8001a54 <USART_Cmd>
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	2000075c 	.word	0x2000075c
 80053a8:	40005000 	.word	0x40005000
 80053ac:	2000077c 	.word	0x2000077c

080053b0 <ReadUART>:
 * Function Return		: USARTx's received data
 * Function Example		: rx = ReadUART(UART4);
 */

char ReadUART(USART_TypeDef* USARTx)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	while(USART_GetFlagStatus(USARTx, USART_FLAG_RXNE) == 0x00);
 80053b8:	bf00      	nop
 80053ba:	2120      	movs	r1, #32
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fc fbd3 	bl	8001b68 <USART_GetFlagStatus>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f8      	beq.n	80053ba <ReadUART+0xa>
		return((char)USART_ReceiveData(USARTx));
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fc fb75 	bl	8001ab8 <USART_ReceiveData>
 80053ce:	4603      	mov	r3, r0
 80053d0:	b2db      	uxtb	r3, r3
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <MODNRobotBaseInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void MODNRobotBaseInit(unsigned char base, float d, float e, MODN_t *modn)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	ed87 0a02 	vstr	s0, [r7, #8]
 80053e6:	edc7 0a01 	vstr	s1, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
 80053ec:	73fb      	strb	r3, [r7, #15]
	modn->base = base;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	7bfa      	ldrb	r2, [r7, #15]
 80053f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	modn->d	= d;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	61da      	str	r2, [r3, #28]
	modn->e	= e;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <MODNRobotVelInit>:

void MODNRobotVelInit(float *x_vel, float *y_vel, float *w_vel, MODN_t *modn)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
	modn->x_vel	= x_vel;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]
	modn->y_vel	= y_vel;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	605a      	str	r2, [r3, #4]
	modn->w_vel	= w_vel;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	609a      	str	r2, [r3, #8]
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <MODNWheelVelInit>:

void MODNWheelVelInit(float *vel1, float *vel2, float *vel3, float *vel4, MODN_t *modn)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	603b      	str	r3, [r7, #0]
	modn->vel1	= vel1;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	60da      	str	r2, [r3, #12]
	modn->vel2	= vel2;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	611a      	str	r2, [r3, #16]
	modn->vel3	= vel3;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	615a      	str	r2, [r3, #20]
	modn->vel4	= vel4;
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	619a      	str	r2, [r3, #24]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	0000      	movs	r0, r0
	...

08005470 <MODN>:

void MODN(MODN_t *modn)
{
 8005470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
	if(modn->base == MODN_FWD_OMNI) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 8109 	bne.w	8005698 <MODN+0x228>
		*(modn->vel1) = *(modn->x_vel) * (0.70711) +  *(modn->y_vel) * (0.70711)  + *(modn->w_vel) * modn->d;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68dc      	ldr	r4, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7fb f859 	bl	8000548 <__aeabi_f2d>
 8005496:	f20f 43e8 	addw	r3, pc, #1256	; 0x4e8
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f8a7 	bl	80005f0 <__aeabi_dmul>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4615      	mov	r5, r2
 80054a8:	461e      	mov	r6, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fb f849 	bl	8000548 <__aeabi_f2d>
 80054b6:	f20f 43c8 	addw	r3, pc, #1224	; 0x4c8
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f7fb f897 	bl	80005f0 <__aeabi_dmul>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4628      	mov	r0, r5
 80054c8:	4631      	mov	r1, r6
 80054ca:	f7fa fedf 	bl	800028c <__adddf3>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4615      	mov	r5, r2
 80054d4:	461e      	mov	r6, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	ed93 7a00 	vldr	s14, [r3]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80054e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e8:	ee17 0a90 	vmov	r0, s15
 80054ec:	f7fb f82c 	bl	8000548 <__aeabi_f2d>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4628      	mov	r0, r5
 80054f6:	4631      	mov	r1, r6
 80054f8:	f7fa fec8 	bl	800028c <__adddf3>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	f7fb fb4c 	bl	8000ba0 <__aeabi_d2f>
 8005508:	4603      	mov	r3, r0
 800550a:	6023      	str	r3, [r4, #0]
		*(modn->vel2) = *(modn->x_vel) * (-0.70711) +  *(modn->y_vel) * (0.70711) - *(modn->w_vel) * modn->d;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691c      	ldr	r4, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7fb f816 	bl	8000548 <__aeabi_f2d>
 800551c:	f20f 4368 	addw	r3, pc, #1128	; 0x468
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f7fb f864 	bl	80005f0 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4615      	mov	r5, r2
 800552e:	461e      	mov	r6, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f7fb f806 	bl	8000548 <__aeabi_f2d>
 800553c:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	f7fb f854 	bl	80005f0 <__aeabi_dmul>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4628      	mov	r0, r5
 800554e:	4631      	mov	r1, r6
 8005550:	f7fa fe9c 	bl	800028c <__adddf3>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4615      	mov	r5, r2
 800555a:	461e      	mov	r6, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	ed93 7a00 	vldr	s14, [r3]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	edd3 7a07 	vldr	s15, [r3, #28]
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	ee17 0a90 	vmov	r0, s15
 8005572:	f7fa ffe9 	bl	8000548 <__aeabi_f2d>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4628      	mov	r0, r5
 800557c:	4631      	mov	r1, r6
 800557e:	f7fa fe83 	bl	8000288 <__aeabi_dsub>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4610      	mov	r0, r2
 8005588:	4619      	mov	r1, r3
 800558a:	f7fb fb09 	bl	8000ba0 <__aeabi_d2f>
 800558e:	4603      	mov	r3, r0
 8005590:	6023      	str	r3, [r4, #0]
		*(modn->vel3) = *(modn->x_vel) * (-0.70711)  +  *(modn->y_vel) * (0.70711) + *(modn->w_vel) * modn->d;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695c      	ldr	r4, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f7fa ffd3 	bl	8000548 <__aeabi_f2d>
 80055a2:	a3f9      	add	r3, pc, #996	; (adr r3, 8005988 <MODN+0x518>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fb f822 	bl	80005f0 <__aeabi_dmul>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4615      	mov	r5, r2
 80055b2:	461e      	mov	r6, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fa ffc4 	bl	8000548 <__aeabi_f2d>
 80055c0:	a3ef      	add	r3, pc, #956	; (adr r3, 8005980 <MODN+0x510>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fb f813 	bl	80005f0 <__aeabi_dmul>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4628      	mov	r0, r5
 80055d0:	4631      	mov	r1, r6
 80055d2:	f7fa fe5b 	bl	800028c <__adddf3>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4615      	mov	r5, r2
 80055dc:	461e      	mov	r6, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	ed93 7a00 	vldr	s14, [r3]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80055ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f0:	ee17 0a90 	vmov	r0, s15
 80055f4:	f7fa ffa8 	bl	8000548 <__aeabi_f2d>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4628      	mov	r0, r5
 80055fe:	4631      	mov	r1, r6
 8005600:	f7fa fe44 	bl	800028c <__adddf3>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	f7fb fac8 	bl	8000ba0 <__aeabi_d2f>
 8005610:	4603      	mov	r3, r0
 8005612:	6023      	str	r3, [r4, #0]
		*(modn->vel4) = *(modn->x_vel) * (0.70711)  +  *(modn->y_vel) * (0.70711)  - *(modn->w_vel) * modn->d;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699c      	ldr	r4, [r3, #24]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fa ff92 	bl	8000548 <__aeabi_f2d>
 8005624:	a3d6      	add	r3, pc, #856	; (adr r3, 8005980 <MODN+0x510>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f7fa ffe1 	bl	80005f0 <__aeabi_dmul>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4615      	mov	r5, r2
 8005634:	461e      	mov	r6, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fa ff83 	bl	8000548 <__aeabi_f2d>
 8005642:	a3cf      	add	r3, pc, #828	; (adr r3, 8005980 <MODN+0x510>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa ffd2 	bl	80005f0 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4628      	mov	r0, r5
 8005652:	4631      	mov	r1, r6
 8005654:	f7fa fe1a 	bl	800028c <__adddf3>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4615      	mov	r5, r2
 800565e:	461e      	mov	r6, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	ed93 7a00 	vldr	s14, [r3]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	edd3 7a07 	vldr	s15, [r3, #28]
 800566e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005672:	ee17 0a90 	vmov	r0, s15
 8005676:	f7fa ff67 	bl	8000548 <__aeabi_f2d>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4628      	mov	r0, r5
 8005680:	4631      	mov	r1, r6
 8005682:	f7fa fe01 	bl	8000288 <__aeabi_dsub>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4610      	mov	r0, r2
 800568c:	4619      	mov	r1, r3
 800568e:	f7fb fa87 	bl	8000ba0 <__aeabi_d2f>
 8005692:	4603      	mov	r3, r0
 8005694:	6023      	str	r3, [r4, #0]
		*(modn->vel1) =   *(modn->x_vel) * (1.0)  + *(modn->w_vel) * modn->d;
		*(modn->vel3) = *(modn->y_vel) * (0.866) +  *(modn->x_vel) * (-0.5) + *(modn->w_vel) * modn->d;
		*(modn->vel2) = *(modn->y_vel) * (0.866)  +  *(modn->x_vel) * (0.5) + *(modn->w_vel)*(-1.0) * modn->d;
	}

}
 8005696:	e164      	b.n	8005962 <MODN+0x4f2>
	}else if(modn->base == MODN_MECANUM){
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800569e:	2b03      	cmp	r3, #3
 80056a0:	f040 80b9 	bne.w	8005816 <MODN+0x3a6>
		*(modn->vel1) = *(modn->y_vel)*(1.0) + *(modn->x_vel)*(1.0)  + *(modn->w_vel)/*(modn->d + modn->e)*/;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68dc      	ldr	r4, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fa ff4a 	bl	8000548 <__aeabi_f2d>
 80056b4:	4605      	mov	r5, r0
 80056b6:	460e      	mov	r6, r1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fa ff42 	bl	8000548 <__aeabi_f2d>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4628      	mov	r0, r5
 80056ca:	4631      	mov	r1, r6
 80056cc:	f7fa fdde 	bl	800028c <__adddf3>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4615      	mov	r5, r2
 80056d6:	461e      	mov	r6, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fa ff32 	bl	8000548 <__aeabi_f2d>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4628      	mov	r0, r5
 80056ea:	4631      	mov	r1, r6
 80056ec:	f7fa fdce 	bl	800028c <__adddf3>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	f7fb fa52 	bl	8000ba0 <__aeabi_d2f>
 80056fc:	4603      	mov	r3, r0
 80056fe:	6023      	str	r3, [r4, #0]
		*(modn->vel2) = *(modn->y_vel)*(1.0) + *(modn->x_vel)*(-1.0) - *(modn->w_vel)/*(modn->d + modn->e)*/;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691c      	ldr	r4, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fa ff1c 	bl	8000548 <__aeabi_f2d>
 8005710:	4605      	mov	r5, r0
 8005712:	460e      	mov	r6, r1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fa ff14 	bl	8000548 <__aeabi_f2d>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4628      	mov	r0, r5
 8005726:	4631      	mov	r1, r6
 8005728:	f7fa fdae 	bl	8000288 <__aeabi_dsub>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4615      	mov	r5, r2
 8005732:	461e      	mov	r6, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f7fa ff04 	bl	8000548 <__aeabi_f2d>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4628      	mov	r0, r5
 8005746:	4631      	mov	r1, r6
 8005748:	f7fa fd9e 	bl	8000288 <__aeabi_dsub>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4610      	mov	r0, r2
 8005752:	4619      	mov	r1, r3
 8005754:	f7fb fa24 	bl	8000ba0 <__aeabi_d2f>
 8005758:	4603      	mov	r3, r0
 800575a:	6023      	str	r3, [r4, #0]
		*(modn->vel3) = *(modn->y_vel)*(1.0) + *(modn->x_vel)*(-1.0) + *(modn->w_vel)/*(modn->d + modn->e)*/;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695c      	ldr	r4, [r3, #20]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fa feee 	bl	8000548 <__aeabi_f2d>
 800576c:	4605      	mov	r5, r0
 800576e:	460e      	mov	r6, r1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fa fee6 	bl	8000548 <__aeabi_f2d>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4628      	mov	r0, r5
 8005782:	4631      	mov	r1, r6
 8005784:	f7fa fd80 	bl	8000288 <__aeabi_dsub>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4615      	mov	r5, r2
 800578e:	461e      	mov	r6, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fa fed6 	bl	8000548 <__aeabi_f2d>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4628      	mov	r0, r5
 80057a2:	4631      	mov	r1, r6
 80057a4:	f7fa fd72 	bl	800028c <__adddf3>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4610      	mov	r0, r2
 80057ae:	4619      	mov	r1, r3
 80057b0:	f7fb f9f6 	bl	8000ba0 <__aeabi_d2f>
 80057b4:	4603      	mov	r3, r0
 80057b6:	6023      	str	r3, [r4, #0]
		*(modn->vel4) = *(modn->y_vel)*(1.0) + *(modn->x_vel)*(1.0)  - *(modn->w_vel)/*(modn->d + modn->e)*/;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699c      	ldr	r4, [r3, #24]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fa fec0 	bl	8000548 <__aeabi_f2d>
 80057c8:	4605      	mov	r5, r0
 80057ca:	460e      	mov	r6, r1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fa feb8 	bl	8000548 <__aeabi_f2d>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4628      	mov	r0, r5
 80057de:	4631      	mov	r1, r6
 80057e0:	f7fa fd54 	bl	800028c <__adddf3>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4615      	mov	r5, r2
 80057ea:	461e      	mov	r6, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fa fea8 	bl	8000548 <__aeabi_f2d>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4628      	mov	r0, r5
 80057fe:	4631      	mov	r1, r6
 8005800:	f7fa fd42 	bl	8000288 <__aeabi_dsub>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4610      	mov	r0, r2
 800580a:	4619      	mov	r1, r3
 800580c:	f7fb f9c8 	bl	8000ba0 <__aeabi_d2f>
 8005810:	4603      	mov	r3, r0
 8005812:	6023      	str	r3, [r4, #0]
}
 8005814:	e0a5      	b.n	8005962 <MODN+0x4f2>
	else if (modn->base == MODN_TRI_OMNI){
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800581c:	2b01      	cmp	r3, #1
 800581e:	f040 80a0 	bne.w	8005962 <MODN+0x4f2>
		*(modn->vel1) =   *(modn->x_vel) * (1.0)  + *(modn->w_vel) * modn->d;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	ed92 7a00 	vldr	s14, [r2]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	edd2 6a00 	vldr	s13, [r2]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	edd2 7a07 	vldr	s15, [r2, #28]
 800583c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005844:	edc3 7a00 	vstr	s15, [r3]
		*(modn->vel3) = *(modn->y_vel) * (0.866) +  *(modn->x_vel) * (-0.5) + *(modn->w_vel) * modn->d;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695e      	ldr	r6, [r3, #20]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fa fe78 	bl	8000548 <__aeabi_f2d>
 8005858:	a345      	add	r3, pc, #276	; (adr r3, 8005970 <MODN+0x500>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f7fa fec7 	bl	80005f0 <__aeabi_dmul>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4690      	mov	r8, r2
 8005868:	4699      	mov	r9, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f7fa fe69 	bl	8000548 <__aeabi_f2d>
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	4b3f      	ldr	r3, [pc, #252]	; (8005978 <MODN+0x508>)
 800587c:	f7fa feb8 	bl	80005f0 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fa fd00 	bl	800028c <__adddf3>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4690      	mov	r8, r2
 8005892:	4699      	mov	r9, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	ed93 7a00 	vldr	s14, [r3]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	edd3 7a07 	vldr	s15, [r3, #28]
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	ee17 0a90 	vmov	r0, s15
 80058aa:	f7fa fe4d 	bl	8000548 <__aeabi_f2d>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4640      	mov	r0, r8
 80058b4:	4649      	mov	r1, r9
 80058b6:	f7fa fce9 	bl	800028c <__adddf3>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	f7fb f96d 	bl	8000ba0 <__aeabi_d2f>
 80058c6:	4603      	mov	r3, r0
 80058c8:	6033      	str	r3, [r6, #0]
		*(modn->vel2) = *(modn->y_vel) * (0.866)  +  *(modn->x_vel) * (0.5) + *(modn->w_vel)*(-1.0) * modn->d;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691e      	ldr	r6, [r3, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fa fe37 	bl	8000548 <__aeabi_f2d>
 80058da:	a325      	add	r3, pc, #148	; (adr r3, 8005970 <MODN+0x500>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f7fa fe86 	bl	80005f0 <__aeabi_dmul>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4690      	mov	r8, r2
 80058ea:	4699      	mov	r9, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fa fe28 	bl	8000548 <__aeabi_f2d>
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	4b1f      	ldr	r3, [pc, #124]	; (800597c <MODN+0x50c>)
 80058fe:	f7fa fe77 	bl	80005f0 <__aeabi_dmul>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4640      	mov	r0, r8
 8005908:	4649      	mov	r1, r9
 800590a:	f7fa fcbf 	bl	800028c <__adddf3>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4690      	mov	r8, r2
 8005914:	4699      	mov	r9, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f7fa fe13 	bl	8000548 <__aeabi_f2d>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4614      	mov	r4, r2
 8005928:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fa fe09 	bl	8000548 <__aeabi_f2d>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4620      	mov	r0, r4
 800593c:	4629      	mov	r1, r5
 800593e:	f7fa fe57 	bl	80005f0 <__aeabi_dmul>
 8005942:	4603      	mov	r3, r0
 8005944:	460c      	mov	r4, r1
 8005946:	461a      	mov	r2, r3
 8005948:	4623      	mov	r3, r4
 800594a:	4640      	mov	r0, r8
 800594c:	4649      	mov	r1, r9
 800594e:	f7fa fc9d 	bl	800028c <__adddf3>
 8005952:	4603      	mov	r3, r0
 8005954:	460c      	mov	r4, r1
 8005956:	4618      	mov	r0, r3
 8005958:	4621      	mov	r1, r4
 800595a:	f7fb f921 	bl	8000ba0 <__aeabi_d2f>
 800595e:	4603      	mov	r3, r0
 8005960:	6033      	str	r3, [r6, #0]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800596c:	f3af 8000 	nop.w
 8005970:	a1cac083 	.word	0xa1cac083
 8005974:	3febb645 	.word	0x3febb645
 8005978:	bfe00000 	.word	0xbfe00000
 800597c:	3fe00000 	.word	0x3fe00000
 8005980:	269595ff 	.word	0x269595ff
 8005984:	3fe6a0a5 	.word	0x3fe6a0a5
 8005988:	269595ff 	.word	0x269595ff
 800598c:	bfe6a0a5 	.word	0xbfe6a0a5

08005990 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
	pid->error = in;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	609a      	str	r2, [r3, #8]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80059be:	edc7 0a08 	vstr	s1, [r7, #32]
 80059c2:	ed87 1a07 	vstr	s2, [r7, #28]
 80059c6:	edc7 1a06 	vstr	s3, [r7, #24]
 80059ca:	ed87 2a05 	vstr	s4, [r7, #20]
 80059ce:	edc7 2a04 	vstr	s5, [r7, #16]
 80059d2:	ed87 3a03 	vstr	s6, [r7, #12]
 80059d6:	edc7 3a02 	vstr	s7, [r7, #8]
 80059da:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f81b 	bl	8005a48 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 8005a12:	bf00      	nop
 8005a14:	3728      	adds	r7, #40	; 0x28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	4603      	mov	r3, r0
 8005a22:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a26:	6079      	str	r1, [r7, #4]
 8005a28:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	3302      	adds	r3, #2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	3304      	adds	r3, #4
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f804 	bl	8005a48 <PIDCoeffCalc>
}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 8005a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	edd3 7a08 	vldr	s15, [r3, #32]
 8005a58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a60:	d013      	beq.n	8005a8a <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	edd3 7a08 	vldr	s15, [r3, #32]
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
 8005a88:	e007      	b.n	8005a9a <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005aa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa8:	d108      	bne.n	8005abc <PIDCoeffCalc+0x74>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005ab0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab8:	f000 80ef 	beq.w	8005c9a <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005acc:	ee17 0a90 	vmov	r0, s15
 8005ad0:	f7fa fd3a 	bl	8000548 <__aeabi_f2d>
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005adc:	f7fa fbd4 	bl	8000288 <__aeabi_dsub>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	4625      	mov	r5, r4
 8005ae6:	461c      	mov	r4, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	ed93 7a03 	vldr	s14, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af8:	ee17 0a90 	vmov	r0, s15
 8005afc:	f7fa fd24 	bl	8000548 <__aeabi_f2d>
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b08:	f7fa fbc0 	bl	800028c <__adddf3>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4620      	mov	r0, r4
 8005b12:	4629      	mov	r1, r5
 8005b14:	f7fa fe96 	bl	8000844 <__aeabi_ddiv>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	4621      	mov	r1, r4
 8005b20:	f7fb f83e 	bl	8000ba0 <__aeabi_d2f>
 8005b24:	4603      	mov	r3, r0
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef1 7a67 	vneg.f32	s15, s15
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fa fd05 	bl	8000548 <__aeabi_f2d>
 8005b3e:	4604      	mov	r4, r0
 8005b40:	460d      	mov	r5, r1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fa fcfe 	bl	8000548 <__aeabi_f2d>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	f7fa fb9c 	bl	800028c <__adddf3>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4690      	mov	r8, r2
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fa fcf1 	bl	8000548 <__aeabi_f2d>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	f7fa fd3f 	bl	80005f0 <__aeabi_dmul>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4690      	mov	r8, r2
 8005b78:	4699      	mov	r9, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8a:	ee17 0a90 	vmov	r0, s15
 8005b8e:	f7fa fcdb 	bl	8000548 <__aeabi_f2d>
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b9a:	f7fa fb77 	bl	800028c <__adddf3>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	f7fa fe4d 	bl	8000844 <__aeabi_ddiv>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4620      	mov	r0, r4
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	f7fa fb6b 	bl	800028c <__adddf3>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	4618      	mov	r0, r3
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	f7fa ffef 	bl	8000ba0 <__aeabi_d2f>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd8:	ee17 0a90 	vmov	r0, s15
 8005bdc:	f7fa fcb4 	bl	8000548 <__aeabi_f2d>
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005be8:	f7fa fb4e 	bl	8000288 <__aeabi_dsub>
 8005bec:	4603      	mov	r3, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	4625      	mov	r5, r4
 8005bf2:	461c      	mov	r4, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fa fca5 	bl	8000548 <__aeabi_f2d>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4620      	mov	r0, r4
 8005c04:	4629      	mov	r1, r5
 8005c06:	f7fa fcf3 	bl	80005f0 <__aeabi_dmul>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	4625      	mov	r5, r4
 8005c10:	461c      	mov	r4, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fc96 	bl	8000548 <__aeabi_f2d>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	f7fa fb34 	bl	800028c <__adddf3>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4690      	mov	r8, r2
 8005c2a:	4699      	mov	r9, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fa fc89 	bl	8000548 <__aeabi_f2d>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa fcd7 	bl	80005f0 <__aeabi_dmul>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4620      	mov	r0, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	f7fa fb1d 	bl	8000288 <__aeabi_dsub>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	4625      	mov	r5, r4
 8005c54:	461c      	mov	r4, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c66:	ee17 0a90 	vmov	r0, s15
 8005c6a:	f7fa fc6d 	bl	8000548 <__aeabi_f2d>
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c76:	f7fa fb09 	bl	800028c <__adddf3>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f7fa fddf 	bl	8000844 <__aeabi_ddiv>
 8005c86:	4603      	mov	r3, r0
 8005c88:	460c      	mov	r4, r1
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	f7fa ff87 	bl	8000ba0 <__aeabi_d2f>
 8005c92:	4602      	mov	r2, r0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c98:	e00b      	b.n	8005cb2 <PIDCoeffCalc+0x26a>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005cbc <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	ed93 7a05 	vldr	s14, [r3, #20]
 8005d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	edd3 7a08 	vldr	s15, [r3, #32]
 8005d28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d30:	d033      	beq.n	8005d9a <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005d54:	e003      	b.n	8005d5e <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d74:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d88:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005da0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da8:	d107      	bne.n	8005dba <PID+0xc2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005db0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db8:	d02c      	beq.n	8005e14 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005dc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dee:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e02:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e18:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005e20:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2c:	d50f      	bpl.n	8005e4e <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	ed93 7a04 	vldr	s14, [r3, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3e:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	7813      	ldrb	r3, [r2, #0]
 8005e46:	f36f 0300 	bfc	r3, #0, #1
 8005e4a:	7013      	strb	r3, [r2, #0]
 8005e4c:	e02b      	b.n	8005ea6 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	edd3 7a04 	vldr	s15, [r3, #16]
 8005e54:	eeb1 7a67 	vneg.f32	s14, s15
 8005e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e64:	dd11      	ble.n	8005e8a <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	ed93 7a04 	vldr	s14, [r3, #16]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	eef1 7a67 	vneg.f32	s15, s15
 8005e7a:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	7813      	ldrb	r3, [r2, #0]
 8005e82:	f36f 0300 	bfc	r3, #0, #1
 8005e86:	7013      	strb	r3, [r2, #0]
 8005e88:	e00d      	b.n	8005ea6 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	ed93 7a06 	vldr	s14, [r3, #24]
 8005e90:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e98:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	7813      	ldrb	r3, [r2, #0]
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	601a      	str	r2, [r3, #0]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <rb_init>:
 *              elements it can store will be size - 1.  Thus, size
 *              must be at least 2.
 *
 *  @param buf  Buffer to store items into
 */
static inline void rb_init(ring_buffer *rb, uint16_t size, uint8_t *buf) {
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	817b      	strh	r3, [r7, #10]
    rb->head = 0;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	809a      	strh	r2, [r3, #4]
    rb->tail = 0;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	80da      	strh	r2, [r3, #6]
    rb->size = size - 1;
 8005ed4:	897b      	ldrh	r3, [r7, #10]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	811a      	strh	r2, [r3, #8]
    rb->buf = buf;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <rb_full_count>:

/**
 * @brief Return the number of elements stored in the ring buffer.
 * @param rb Buffer whose elements to count.
 */
static inline uint16_t rb_full_count(ring_buffer *rb) {
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
    ring_buffer *arb = rb;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60bb      	str	r3, [r7, #8]
    int32_t size = arb->tail - arb->head;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	88db      	ldrh	r3, [r3, #6]
 8005f00:	461a      	mov	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	889b      	ldrh	r3, [r3, #4]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	60fb      	str	r3, [r7, #12]
    if (arb->tail < arb->head) {
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	88db      	ldrh	r3, [r3, #6]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	889b      	ldrh	r3, [r3, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	da05      	bge.n	8005f24 <rb_full_count+0x34>
        size += arb->size + 1;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	891b      	ldrh	r3, [r3, #8]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
    }
    return (uint16_t)size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	b29b      	uxth	r3, r3
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <rb_is_full>:
/**
 * @brief Returns true if and only if the ring buffer is full.
 * @param rb Buffer to test.
 */
static inline int rb_is_full(ring_buffer *rb) {
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
    return (rb->tail + 1 == rb->head) ||
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	88db      	ldrh	r3, [r3, #6]
 8005f40:	3301      	adds	r3, #1
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	8892      	ldrh	r2, [r2, #4]
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <rb_is_full+0x2a>
        (rb->tail == rb->size && rb->head == 0);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	88da      	ldrh	r2, [r3, #6]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	891b      	ldrh	r3, [r3, #8]
    return (rb->tail + 1 == rb->head) ||
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d105      	bne.n	8005f62 <rb_is_full+0x2e>
        (rb->tail == rb->size && rb->head == 0);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	889b      	ldrh	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <rb_is_full+0x2e>
    return (rb->tail + 1 == rb->head) ||
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <rb_is_full+0x30>
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <rb_insert>:
/**
 * Append element onto the end of a ring buffer.
 * @param rb Buffer to append onto.
 * @param element Value to append.
 */
static inline void rb_insert(ring_buffer *rb, uint8_t element) {
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
    rb->buf[rb->tail] = element;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	88d2      	ldrh	r2, [r2, #6]
 8005f84:	4413      	add	r3, r2
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail == rb->size) ? 0 : rb->tail + 1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	88da      	ldrh	r2, [r3, #6]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	891b      	ldrh	r3, [r3, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d004      	beq.n	8005fa0 <rb_insert+0x30>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	88db      	ldrh	r3, [r3, #6]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	e000      	b.n	8005fa2 <rb_insert+0x32>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	80da      	strh	r2, [r3, #6]
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <rb_remove>:

/**
 * @brief Remove and return the first item from a ring buffer.
 * @param rb Buffer to remove from, must contain at least one element.
 */
static inline uint8_t rb_remove(ring_buffer *rb) {
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
    uint8_t ch = rb->buf[rb->head];
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	8892      	ldrh	r2, [r2, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	73fb      	strb	r3, [r7, #15]
    rb->head = (rb->head == rb->size) ? 0 : rb->head + 1;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	889a      	ldrh	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	891b      	ldrh	r3, [r3, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d004      	beq.n	8005fde <rb_remove+0x2c>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	889b      	ldrh	r3, [r3, #4]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	e000      	b.n	8005fe0 <rb_remove+0x2e>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	809a      	strh	r2, [r3, #4]
    return ch;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <rb_push_insert>:
 * @param rb Ring buffer to insert into.
 * @param element Value to insert into ring buffer.
 * @return On success, returns -1.  If an element was popped, returns
 *         the popped value.
 */
static inline int rb_push_insert(ring_buffer *rb, uint8_t element) {
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	70fb      	strb	r3, [r7, #3]
    int ret = -1;
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006002:	60fb      	str	r3, [r7, #12]
    if (rb_is_full(rb)) {
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ff95 	bl	8005f34 <rb_is_full>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	bf14      	ite	ne
 8006010:	2301      	movne	r3, #1
 8006012:	2300      	moveq	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <rb_push_insert+0x32>
        ret = rb_remove(rb);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ffc9 	bl	8005fb2 <rb_remove>
 8006020:	4603      	mov	r3, r0
 8006022:	60fb      	str	r3, [r7, #12]
    }
    rb_insert(rb, element);
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ffa1 	bl	8005f70 <rb_insert>
    return ret;
 800602e:	68fb      	ldr	r3, [r7, #12]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <_ZN14HardwareSerial5beginEm>:
static ring_buffer rb1_recv;
static ring_buffer rb2_recv;
static ring_buffer rb3_recv;

void HardwareSerial::begin(uint32_t baud)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
	/** init ringbuf **/
	if(this->Serial == SERIAL2)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d105      	bne.n	8006056 <_ZN14HardwareSerial5beginEm+0x1e>
		rb_init(&rb1_recv, sizeof(rxbuf), rxbuf);
 800604a:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <_ZN14HardwareSerial5beginEm+0x50>)
 800604c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006050:	480e      	ldr	r0, [pc, #56]	; (800608c <_ZN14HardwareSerial5beginEm+0x54>)
 8006052:	f7ff ff32 	bl	8005eba <rb_init>
	if(this->Serial == SERIAL3)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d105      	bne.n	800606a <_ZN14HardwareSerial5beginEm+0x32>
		rb_init(&rb2_recv, sizeof(rxbuf), rxbuf);
 800605e:	4a0a      	ldr	r2, [pc, #40]	; (8006088 <_ZN14HardwareSerial5beginEm+0x50>)
 8006060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006064:	480a      	ldr	r0, [pc, #40]	; (8006090 <_ZN14HardwareSerial5beginEm+0x58>)
 8006066:	f7ff ff28 	bl	8005eba <rb_init>
	if(this->Serial == SERIAL4)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d105      	bne.n	800607e <_ZN14HardwareSerial5beginEm+0x46>
		rb_init(&rb3_recv, sizeof(rxbuf), rxbuf);
 8006072:	4a05      	ldr	r2, [pc, #20]	; (8006088 <_ZN14HardwareSerial5beginEm+0x50>)
 8006074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006078:	4806      	ldr	r0, [pc, #24]	; (8006094 <_ZN14HardwareSerial5beginEm+0x5c>)
 800607a:	f7ff ff1e 	bl	8005eba <rb_init>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000320 	.word	0x20000320
 800608c:	20000720 	.word	0x20000720
 8006090:	2000072c 	.word	0x2000072c
 8006094:	20000738 	.word	0x20000738

08006098 <_ZN14HardwareSerial9availableEv>:

uint32_t HardwareSerial::available(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	if(this->Serial == SERIAL2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <_ZN14HardwareSerial9availableEv+0x1a>
		return rb_full_count(&rb1_recv);
 80060a8:	480d      	ldr	r0, [pc, #52]	; (80060e0 <_ZN14HardwareSerial9availableEv+0x48>)
 80060aa:	f7ff ff21 	bl	8005ef0 <rb_full_count>
 80060ae:	4603      	mov	r3, r0
 80060b0:	e012      	b.n	80060d8 <_ZN14HardwareSerial9availableEv+0x40>
	if(this->Serial == SERIAL3)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d104      	bne.n	80060c4 <_ZN14HardwareSerial9availableEv+0x2c>
		return rb_full_count(&rb2_recv);
 80060ba:	480a      	ldr	r0, [pc, #40]	; (80060e4 <_ZN14HardwareSerial9availableEv+0x4c>)
 80060bc:	f7ff ff18 	bl	8005ef0 <rb_full_count>
 80060c0:	4603      	mov	r3, r0
 80060c2:	e009      	b.n	80060d8 <_ZN14HardwareSerial9availableEv+0x40>
	if(this->Serial == SERIAL4)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d104      	bne.n	80060d6 <_ZN14HardwareSerial9availableEv+0x3e>
		return rb_full_count(&rb3_recv);
 80060cc:	4806      	ldr	r0, [pc, #24]	; (80060e8 <_ZN14HardwareSerial9availableEv+0x50>)
 80060ce:	f7ff ff0f 	bl	8005ef0 <rb_full_count>
 80060d2:	4603      	mov	r3, r0
 80060d4:	e000      	b.n	80060d8 <_ZN14HardwareSerial9availableEv+0x40>

	return 0;
 80060d6:	2300      	movs	r3, #0

}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000720 	.word	0x20000720
 80060e4:	2000072c 	.word	0x2000072c
 80060e8:	20000738 	.word	0x20000738

080060ec <_ZN14HardwareSerial4readEv>:

uint8_t HardwareSerial::read(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	while(!this->available())
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ffcf 	bl	8006098 <_ZN14HardwareSerial9availableEv>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d000      	beq.n	800610c <_ZN14HardwareSerial4readEv+0x20>
 800610a:	e7f3      	b.n	80060f4 <_ZN14HardwareSerial4readEv+0x8>
		;
	if(this->Serial == SERIAL2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <_ZN14HardwareSerial4readEv+0x32>
		return rb_remove(&rb1_recv);
 8006114:	480d      	ldr	r0, [pc, #52]	; (800614c <_ZN14HardwareSerial4readEv+0x60>)
 8006116:	f7ff ff4c 	bl	8005fb2 <rb_remove>
 800611a:	4603      	mov	r3, r0
 800611c:	e012      	b.n	8006144 <_ZN14HardwareSerial4readEv+0x58>
	if(this->Serial == SERIAL3)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d104      	bne.n	8006130 <_ZN14HardwareSerial4readEv+0x44>
		return rb_remove(&rb2_recv);
 8006126:	480a      	ldr	r0, [pc, #40]	; (8006150 <_ZN14HardwareSerial4readEv+0x64>)
 8006128:	f7ff ff43 	bl	8005fb2 <rb_remove>
 800612c:	4603      	mov	r3, r0
 800612e:	e009      	b.n	8006144 <_ZN14HardwareSerial4readEv+0x58>
	if(this->Serial == SERIAL4)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d104      	bne.n	8006142 <_ZN14HardwareSerial4readEv+0x56>
		return rb_remove(&rb3_recv);
 8006138:	4806      	ldr	r0, [pc, #24]	; (8006154 <_ZN14HardwareSerial4readEv+0x68>)
 800613a:	f7ff ff3a 	bl	8005fb2 <rb_remove>
 800613e:	4603      	mov	r3, r0
 8006140:	e000      	b.n	8006144 <_ZN14HardwareSerial4readEv+0x58>

	return 0;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000720 	.word	0x20000720
 8006150:	2000072c 	.word	0x2000072c
 8006154:	20000738 	.word	0x20000738

08006158 <_ZN14HardwareSerial5writeEh>:

uint32_t HardwareSerial::write(uint8_t ch)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
	USART_SendData(SERIAL_USART[this->Serial], ch);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	4b10      	ldr	r3, [pc, #64]	; (80061ac <_ZN14HardwareSerial5writeEh+0x54>)
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	78fa      	ldrb	r2, [r7, #3]
 8006172:	b292      	uxth	r2, r2
 8006174:	4611      	mov	r1, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f7fb fc8c 	bl	8001a94 <USART_SendData>
	while(USART_GetFlagStatus(SERIAL_USART[this->Serial], USART_FLAG_TXE) == RESET);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <_ZN14HardwareSerial5writeEh+0x54>)
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	2180      	movs	r1, #128	; 0x80
 800618a:	4618      	mov	r0, r3
 800618c:	f7fb fcec 	bl	8001b68 <USART_GetFlagStatus>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	bf0c      	ite	eq
 8006196:	2301      	moveq	r3, #1
 8006198:	2300      	movne	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d000      	beq.n	80061a2 <_ZN14HardwareSerial5writeEh+0x4a>
 80061a0:	e7ec      	b.n	800617c <_ZN14HardwareSerial5writeEh+0x24>

	return 1;
 80061a2:	2301      	movs	r3, #1
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000010 	.word	0x20000010

080061b0 <USART2_IRQHandler>:
#ifdef __cplusplus
extern "C" {
#endif

void USART2_IRQHandler(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
	unsigned char data;
	if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 80061b6:	f240 5125 	movw	r1, #1317	; 0x525
 80061ba:	480f      	ldr	r0, [pc, #60]	; (80061f8 <USART2_IRQHandler+0x48>)
 80061bc:	f7fb fcf0 	bl	8001ba0 <USART_GetITStatus>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bf14      	ite	ne
 80061c6:	2301      	movne	r3, #1
 80061c8:	2300      	moveq	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00e      	beq.n	80061ee <USART2_IRQHandler+0x3e>
		data = USART_ReceiveData(USART2);
 80061d0:	4809      	ldr	r0, [pc, #36]	; (80061f8 <USART2_IRQHandler+0x48>)
 80061d2:	f7fb fc71 	bl	8001ab8 <USART_ReceiveData>
 80061d6:	4603      	mov	r3, r0
 80061d8:	71fb      	strb	r3, [r7, #7]
		rb_push_insert(&rb1_recv, data);
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	4619      	mov	r1, r3
 80061de:	4807      	ldr	r0, [pc, #28]	; (80061fc <USART2_IRQHandler+0x4c>)
 80061e0:	f7ff ff07 	bl	8005ff2 <rb_push_insert>
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80061e4:	f240 5125 	movw	r1, #1317	; 0x525
 80061e8:	4803      	ldr	r0, [pc, #12]	; (80061f8 <USART2_IRQHandler+0x48>)
 80061ea:	f7fb fd34 	bl	8001c56 <USART_ClearITPendingBit>
	}
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40004400 	.word	0x40004400
 80061fc:	20000720 	.word	0x20000720

08006200 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
	unsigned char data;
	if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
 8006206:	f240 5125 	movw	r1, #1317	; 0x525
 800620a:	480f      	ldr	r0, [pc, #60]	; (8006248 <USART3_IRQHandler+0x48>)
 800620c:	f7fb fcc8 	bl	8001ba0 <USART_GetITStatus>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00e      	beq.n	800623e <USART3_IRQHandler+0x3e>
		data = USART_ReceiveData(USART3);
 8006220:	4809      	ldr	r0, [pc, #36]	; (8006248 <USART3_IRQHandler+0x48>)
 8006222:	f7fb fc49 	bl	8001ab8 <USART_ReceiveData>
 8006226:	4603      	mov	r3, r0
 8006228:	71fb      	strb	r3, [r7, #7]
		rb_push_insert(&rb2_recv, data);
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	4619      	mov	r1, r3
 800622e:	4807      	ldr	r0, [pc, #28]	; (800624c <USART3_IRQHandler+0x4c>)
 8006230:	f7ff fedf 	bl	8005ff2 <rb_push_insert>
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 8006234:	f240 5125 	movw	r1, #1317	; 0x525
 8006238:	4803      	ldr	r0, [pc, #12]	; (8006248 <USART3_IRQHandler+0x48>)
 800623a:	f7fb fd0c 	bl	8001c56 <USART_ClearITPendingBit>
	}
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40004800 	.word	0x40004800
 800624c:	2000072c 	.word	0x2000072c

08006250 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
	unsigned char data;
	if (USART_GetITStatus(UART4, USART_IT_RXNE) != RESET) {
 8006256:	f240 5125 	movw	r1, #1317	; 0x525
 800625a:	480f      	ldr	r0, [pc, #60]	; (8006298 <UART4_IRQHandler+0x48>)
 800625c:	f7fb fca0 	bl	8001ba0 <USART_GetITStatus>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00e      	beq.n	800628e <UART4_IRQHandler+0x3e>
		data = USART_ReceiveData(UART4);
 8006270:	4809      	ldr	r0, [pc, #36]	; (8006298 <UART4_IRQHandler+0x48>)
 8006272:	f7fb fc21 	bl	8001ab8 <USART_ReceiveData>
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
		rb_push_insert(&rb3_recv, data);
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	4619      	mov	r1, r3
 800627e:	4807      	ldr	r0, [pc, #28]	; (800629c <UART4_IRQHandler+0x4c>)
 8006280:	f7ff feb7 	bl	8005ff2 <rb_push_insert>
		USART_ClearITPendingBit(UART4, USART_IT_RXNE);
 8006284:	f240 5125 	movw	r1, #1317	; 0x525
 8006288:	4803      	ldr	r0, [pc, #12]	; (8006298 <UART4_IRQHandler+0x48>)
 800628a:	f7fb fce4 	bl	8001c56 <USART_ClearITPendingBit>
	}
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40004c00 	.word	0x40004c00
 800629c:	20000738 	.word	0x20000738

080062a0 <millis>:
		while (_counter < target)
			;
	}

	uint32_t millis()
	{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
		return _counter;
 80062a4:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <millis+0x14>)
 80062a6:	681b      	ldr	r3, [r3, #0]
	}
 80062a8:	4618      	mov	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20001acc 	.word	0x20001acc

080062b8 <APPResetPos>:
/*********************************************/
/*           Subroutine Function             */
/*********************************************/

void APPResetPos(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
	sys.flag = 0;
 80062bc:	4b2f      	ldr	r3, [pc, #188]	; (800637c <APPResetPos+0xc4>)
 80062be:	2200      	movs	r2, #0
 80062c0:	801a      	strh	r2, [r3, #0]

	QEIReset(QEI1);
 80062c2:	2001      	movs	r0, #1
 80062c4:	f7fd f80a 	bl	80032dc <QEIReset>
	QEIReset(QEI2);
 80062c8:	2002      	movs	r0, #2
 80062ca:	f7fd f807 	bl	80032dc <QEIReset>
	QEIReset(QEI3);
 80062ce:	2003      	movs	r0, #3
 80062d0:	f7fd f804 	bl	80032dc <QEIReset>
	QEIReset(QEI4);
 80062d4:	2004      	movs	r0, #4
 80062d6:	f7fd f801 	bl	80032dc <QEIReset>
	QEIReset(QEI5);
 80062da:	2005      	movs	r0, #5
 80062dc:	f7fc fffe 	bl	80032dc <QEIReset>
	QEIReset(QEI6);
 80062e0:	2006      	movs	r0, #6
 80062e2:	f7fc fffb 	bl	80032dc <QEIReset>

	QEIWrite(QEI1, MIN_POSCNT);
 80062e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80062ea:	2001      	movs	r0, #1
 80062ec:	f7fc ff8e 	bl	800320c <QEIWrite>
	QEIWrite(QEI2, MIN_POSCNT);
 80062f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80062f4:	2002      	movs	r0, #2
 80062f6:	f7fc ff89 	bl	800320c <QEIWrite>
	QEIWrite(QEI3, MIN_POSCNT);
 80062fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80062fe:	2003      	movs	r0, #3
 8006300:	f7fc ff84 	bl	800320c <QEIWrite>
	QEIWrite(QEI4, MIN_POSCNT);
 8006304:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006308:	2004      	movs	r0, #4
 800630a:	f7fc ff7f 	bl	800320c <QEIWrite>
	QEIWrite(QEI5, MIN_POSCNT);
 800630e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006312:	2005      	movs	r0, #5
 8006314:	f7fc ff7a 	bl	800320c <QEIWrite>
	QEIWrite(QEI6, MIN_POSCNT);
 8006318:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800631c:	2006      	movs	r0, #6
 800631e:	f7fc ff75 	bl	800320c <QEIWrite>

	fFLeftPosData = 0.0;
 8006322:	4b17      	ldr	r3, [pc, #92]	; (8006380 <APPResetPos+0xc8>)
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
	fFRightPosData = 0.0;
 800632a:	4b16      	ldr	r3, [pc, #88]	; (8006384 <APPResetPos+0xcc>)
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	601a      	str	r2, [r3, #0]

	fBLeftPosData = 0.0;
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <APPResetPos+0xd0>)
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
	fBRightPosData = 0.0;
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <APPResetPos+0xd4>)
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	601a      	str	r2, [r3, #0]

	fXEncData = 0.0;
 8006342:	4b13      	ldr	r3, [pc, #76]	; (8006390 <APPResetPos+0xd8>)
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
	fYEncData = 0.0;
 800634a:	4b12      	ldr	r3, [pc, #72]	; (8006394 <APPResetPos+0xdc>)
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

	ABTEstimateInit(&fleft_pos_data);
 8006352:	4811      	ldr	r0, [pc, #68]	; (8006398 <APPResetPos+0xe0>)
 8006354:	f7fb fcc9 	bl	8001cea <ABTEstimateInit>
	ABTEstimateInit(&fright_pos_data);
 8006358:	4810      	ldr	r0, [pc, #64]	; (800639c <APPResetPos+0xe4>)
 800635a:	f7fb fcc6 	bl	8001cea <ABTEstimateInit>

	ABTEstimateInit(&bleft_pos_data);
 800635e:	4810      	ldr	r0, [pc, #64]	; (80063a0 <APPResetPos+0xe8>)
 8006360:	f7fb fcc3 	bl	8001cea <ABTEstimateInit>
	ABTEstimateInit(&bright_pos_data);
 8006364:	480f      	ldr	r0, [pc, #60]	; (80063a4 <APPResetPos+0xec>)
 8006366:	f7fb fcc0 	bl	8001cea <ABTEstimateInit>

	ABTEstimateInit(&x_data);
 800636a:	480f      	ldr	r0, [pc, #60]	; (80063a8 <APPResetPos+0xf0>)
 800636c:	f7fb fcbd 	bl	8001cea <ABTEstimateInit>
	ABTEstimateInit(&y_data);
 8006370:	480e      	ldr	r0, [pc, #56]	; (80063ac <APPResetPos+0xf4>)
 8006372:	f7fb fcba 	bl	8001cea <ABTEstimateInit>


}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	2000088c 	.word	0x2000088c
 8006380:	20000c1c 	.word	0x20000c1c
 8006384:	20000c20 	.word	0x20000c20
 8006388:	20000c24 	.word	0x20000c24
 800638c:	20000c28 	.word	0x20000c28
 8006390:	20000c64 	.word	0x20000c64
 8006394:	20000c68 	.word	0x20000c68
 8006398:	20000890 	.word	0x20000890
 800639c:	200008b0 	.word	0x200008b0
 80063a0:	200008d0 	.word	0x200008d0
 80063a4:	200008f0 	.word	0x200008f0
 80063a8:	20000910 	.word	0x20000910
 80063ac:	20000930 	.word	0x20000930

080063b0 <APPApply>:
		break;
	}
}

void APPApply(ins_t *pins)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	switch (pins->instruction){
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	3b05      	subs	r3, #5
 80063be:	2b08      	cmp	r3, #8
 80063c0:	f200 8138 	bhi.w	8006634 <APPApply+0x284>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <APPApply+0x1c>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	08006413 	.word	0x08006413
 80063d0:	08006435 	.word	0x08006435
 80063d4:	080063f1 	.word	0x080063f1
 80063d8:	08006635 	.word	0x08006635
 80063dc:	0800647b 	.word	0x0800647b
 80063e0:	08006585 	.word	0x08006585
 80063e4:	08006635 	.word	0x08006635
 80063e8:	08006635 	.word	0x08006635
 80063ec:	08006457 	.word	0x08006457

	case RNS_CONTROLLER:
		joy_x = main_board_1_data_receive.common_buffer[0].byte1;
 80063f0:	4b93      	ldr	r3, [pc, #588]	; (8006640 <APPApply+0x290>)
 80063f2:	791a      	ldrb	r2, [r3, #4]
 80063f4:	4b93      	ldr	r3, [pc, #588]	; (8006644 <APPApply+0x294>)
 80063f6:	701a      	strb	r2, [r3, #0]
		joy_y = main_board_1_data_receive.common_buffer[0].byte2;
 80063f8:	4b91      	ldr	r3, [pc, #580]	; (8006640 <APPApply+0x290>)
 80063fa:	795a      	ldrb	r2, [r3, #5]
 80063fc:	4b92      	ldr	r3, [pc, #584]	; (8006648 <APPApply+0x298>)
 80063fe:	701a      	strb	r2, [r3, #0]
		an_L2 = main_board_1_data_receive.common_buffer[0].byte3;
 8006400:	4b8f      	ldr	r3, [pc, #572]	; (8006640 <APPApply+0x290>)
 8006402:	799a      	ldrb	r2, [r3, #6]
 8006404:	4b91      	ldr	r3, [pc, #580]	; (800664c <APPApply+0x29c>)
 8006406:	701a      	strb	r2, [r3, #0]
		an_R2 = main_board_1_data_receive.common_buffer[0].byte4;
 8006408:	4b8d      	ldr	r3, [pc, #564]	; (8006640 <APPApply+0x290>)
 800640a:	79da      	ldrb	r2, [r3, #7]
 800640c:	4b90      	ldr	r3, [pc, #576]	; (8006650 <APPApply+0x2a0>)
 800640e:	701a      	strb	r2, [r3, #0]
		break;
 8006410:	e111      	b.n	8006636 <APPApply+0x286>


	case RNS_VELOCITY:
		fFLeftVelR 	= pins->ins_buffer[0].data;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	4a8f      	ldr	r2, [pc, #572]	; (8006654 <APPApply+0x2a4>)
 8006418:	6013      	str	r3, [r2, #0]
		fFRightVelR = pins->ins_buffer[1].data;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4a8e      	ldr	r2, [pc, #568]	; (8006658 <APPApply+0x2a8>)
 8006420:	6013      	str	r3, [r2, #0]
		fBLeftVelR 	= pins->ins_buffer[2].data;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	4a8d      	ldr	r2, [pc, #564]	; (800665c <APPApply+0x2ac>)
 8006428:	6013      	str	r3, [r2, #0]
		fBRightVelR = pins->ins_buffer[3].data;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	4a8c      	ldr	r2, [pc, #560]	; (8006660 <APPApply+0x2b0>)
 8006430:	6013      	str	r3, [r2, #0]
		break;
 8006432:	e100      	b.n	8006636 <APPApply+0x286>

	case RNS_PDC:
		fFLeftVelU 	= pins->ins_buffer[0].data;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4a8a      	ldr	r2, [pc, #552]	; (8006664 <APPApply+0x2b4>)
 800643a:	6013      	str	r3, [r2, #0]
		fFRightVelU = pins->ins_buffer[1].data;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4a89      	ldr	r2, [pc, #548]	; (8006668 <APPApply+0x2b8>)
 8006442:	6013      	str	r3, [r2, #0]
		fBLeftVelU 	= pins->ins_buffer[2].data;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	4a88      	ldr	r2, [pc, #544]	; (800666c <APPApply+0x2bc>)
 800644a:	6013      	str	r3, [r2, #0]
		fBRightVelU = pins->ins_buffer[3].data;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	4a87      	ldr	r2, [pc, #540]	; (8006670 <APPApply+0x2c0>)
 8006452:	6013      	str	r3, [r2, #0]
		break;
 8006454:	e0ef      	b.n	8006636 <APPApply+0x286>

	case RNS_ROTATE:
		AngleTargetDeg = (int)fyaw + (int)pins->ins_buffer[0].data; //+ve:clkwise,-ve:anti-clkwise,max:+-180
 8006456:	4b87      	ldr	r3, [pc, #540]	; (8006674 <APPApply+0x2c4>)
 8006458:	edd3 7a00 	vldr	s15, [r3]
 800645c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006460:	ee17 2a90 	vmov	r2, s15
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	edd3 7a01 	vldr	s15, [r3, #4]
 800646a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800646e:	ee17 3a90 	vmov	r3, s15
 8006472:	4413      	add	r3, r2
 8006474:	4a80      	ldr	r2, [pc, #512]	; (8006678 <APPApply+0x2c8>)
 8006476:	6013      	str	r3, [r2, #0]
		break;
 8006478:	e0dd      	b.n	8006636 <APPApply+0x286>

	case RNS_LF_DIST:
		Dir = (int)pins->ins_buffer[0].data;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006484:	ee17 2a90 	vmov	r2, s15
 8006488:	4b7c      	ldr	r3, [pc, #496]	; (800667c <APPApply+0x2cc>)
 800648a:	601a      	str	r2, [r3, #0]
		LF_vel = pins->ins_buffer[1].data;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	4a7b      	ldr	r2, [pc, #492]	; (8006680 <APPApply+0x2d0>)
 8006492:	6013      	str	r3, [r2, #0]
		LF_dist = pins->ins_buffer[2].data;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4a7a      	ldr	r2, [pc, #488]	; (8006684 <APPApply+0x2d4>)
 800649a:	6013      	str	r3, [r2, #0]

		if (Dir == DIR_LEFT )
 800649c:	4b77      	ldr	r3, [pc, #476]	; (800667c <APPApply+0x2cc>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d10b      	bne.n	80064bc <APPApply+0x10c>
			LFtargetDist = fXEncData - LF_dist;
 80064a4:	4b78      	ldr	r3, [pc, #480]	; (8006688 <APPApply+0x2d8>)
 80064a6:	ed93 7a00 	vldr	s14, [r3]
 80064aa:	4b76      	ldr	r3, [pc, #472]	; (8006684 <APPApply+0x2d4>)
 80064ac:	edd3 7a00 	vldr	s15, [r3]
 80064b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b4:	4b75      	ldr	r3, [pc, #468]	; (800668c <APPApply+0x2dc>)
 80064b6:	edc3 7a00 	vstr	s15, [r3]
 80064ba:	e02e      	b.n	800651a <APPApply+0x16a>
		else if ( Dir == DIR_RIGHT)
 80064bc:	4b6f      	ldr	r3, [pc, #444]	; (800667c <APPApply+0x2cc>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b11      	cmp	r3, #17
 80064c2:	d10b      	bne.n	80064dc <APPApply+0x12c>
			LFtargetDist = fXEncData + LF_dist;
 80064c4:	4b70      	ldr	r3, [pc, #448]	; (8006688 <APPApply+0x2d8>)
 80064c6:	ed93 7a00 	vldr	s14, [r3]
 80064ca:	4b6e      	ldr	r3, [pc, #440]	; (8006684 <APPApply+0x2d4>)
 80064cc:	edd3 7a00 	vldr	s15, [r3]
 80064d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064d4:	4b6d      	ldr	r3, [pc, #436]	; (800668c <APPApply+0x2dc>)
 80064d6:	edc3 7a00 	vstr	s15, [r3]
 80064da:	e01e      	b.n	800651a <APPApply+0x16a>
		else if (Dir == DIR_FRONT)
 80064dc:	4b67      	ldr	r3, [pc, #412]	; (800667c <APPApply+0x2cc>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b0e      	cmp	r3, #14
 80064e2:	d10b      	bne.n	80064fc <APPApply+0x14c>
			LFtargetDist = fYEncData + LF_dist;
 80064e4:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <APPApply+0x2e0>)
 80064e6:	ed93 7a00 	vldr	s14, [r3]
 80064ea:	4b66      	ldr	r3, [pc, #408]	; (8006684 <APPApply+0x2d4>)
 80064ec:	edd3 7a00 	vldr	s15, [r3]
 80064f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f4:	4b65      	ldr	r3, [pc, #404]	; (800668c <APPApply+0x2dc>)
 80064f6:	edc3 7a00 	vstr	s15, [r3]
 80064fa:	e00e      	b.n	800651a <APPApply+0x16a>
		else if (Dir == DIR_BACK)
 80064fc:	4b5f      	ldr	r3, [pc, #380]	; (800667c <APPApply+0x2cc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b0f      	cmp	r3, #15
 8006502:	d10a      	bne.n	800651a <APPApply+0x16a>
			LFtargetDist = fYEncData - LF_dist;
 8006504:	4b62      	ldr	r3, [pc, #392]	; (8006690 <APPApply+0x2e0>)
 8006506:	ed93 7a00 	vldr	s14, [r3]
 800650a:	4b5e      	ldr	r3, [pc, #376]	; (8006684 <APPApply+0x2d4>)
 800650c:	edd3 7a00 	vldr	s15, [r3]
 8006510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006514:	4b5d      	ldr	r3, [pc, #372]	; (800668c <APPApply+0x2dc>)
 8006516:	edc3 7a00 	vstr	s15, [r3]

		if (Dir == DIR_LEFT || Dir == DIR_BACK)
 800651a:	4b58      	ldr	r3, [pc, #352]	; (800667c <APPApply+0x2cc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b10      	cmp	r3, #16
 8006520:	d003      	beq.n	800652a <APPApply+0x17a>
 8006522:	4b56      	ldr	r3, [pc, #344]	; (800667c <APPApply+0x2cc>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	d10d      	bne.n	8006546 <APPApply+0x196>
			PIDGainSet(KE,-1/LF_dist,&lf_dist);
 800652a:	4b56      	ldr	r3, [pc, #344]	; (8006684 <APPApply+0x2d4>)
 800652c:	edd3 7a00 	vldr	s15, [r3]
 8006530:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006534:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006538:	4956      	ldr	r1, [pc, #344]	; (8006694 <APPApply+0x2e4>)
 800653a:	eeb0 0a66 	vmov.f32	s0, s13
 800653e:	2002      	movs	r0, #2
 8006540:	f7ff fa6b 	bl	8005a1a <PIDGainSet>
 8006544:	e014      	b.n	8006570 <APPApply+0x1c0>
		else if(Dir == DIR_RIGHT || Dir == DIR_FRONT)
 8006546:	4b4d      	ldr	r3, [pc, #308]	; (800667c <APPApply+0x2cc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b11      	cmp	r3, #17
 800654c:	d003      	beq.n	8006556 <APPApply+0x1a6>
 800654e:	4b4b      	ldr	r3, [pc, #300]	; (800667c <APPApply+0x2cc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b0e      	cmp	r3, #14
 8006554:	d10c      	bne.n	8006570 <APPApply+0x1c0>
			PIDGainSet(KE,1/LF_dist,&lf_dist);
 8006556:	4b4b      	ldr	r3, [pc, #300]	; (8006684 <APPApply+0x2d4>)
 8006558:	edd3 7a00 	vldr	s15, [r3]
 800655c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006560:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006564:	494b      	ldr	r1, [pc, #300]	; (8006694 <APPApply+0x2e4>)
 8006566:	eeb0 0a66 	vmov.f32	s0, s13
 800656a:	2002      	movs	r0, #2
 800656c:	f7ff fa55 	bl	8005a1a <PIDGainSet>
		PIDGainSet(KU,LF_vel,&lf_dist);
 8006570:	4b43      	ldr	r3, [pc, #268]	; (8006680 <APPApply+0x2d0>)
 8006572:	edd3 7a00 	vldr	s15, [r3]
 8006576:	4947      	ldr	r1, [pc, #284]	; (8006694 <APPApply+0x2e4>)
 8006578:	eeb0 0a67 	vmov.f32	s0, s15
 800657c:	2003      	movs	r0, #3
 800657e:	f7ff fa4c 	bl	8005a1a <PIDGainSet>
		break;
 8006582:	e058      	b.n	8006636 <APPApply+0x286>

	case RNS_LF_JUNC:
		Dir = (int)pins->ins_buffer[0].data;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	edd3 7a01 	vldr	s15, [r3, #4]
 800658a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800658e:	ee17 2a90 	vmov	r2, s15
 8006592:	4b3a      	ldr	r3, [pc, #232]	; (800667c <APPApply+0x2cc>)
 8006594:	601a      	str	r2, [r3, #0]
		LF_vel = pins->ins_buffer[1].data;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	4a39      	ldr	r2, [pc, #228]	; (8006680 <APPApply+0x2d0>)
 800659c:	6013      	str	r3, [r2, #0]
		LF_dist = pins->ins_buffer[2].data;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	4a38      	ldr	r2, [pc, #224]	; (8006684 <APPApply+0x2d4>)
 80065a4:	6013      	str	r3, [r2, #0]
		LF_junc = pins->ins_buffer[3].data;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	4a3b      	ldr	r2, [pc, #236]	; (8006698 <APPApply+0x2e8>)
 80065ac:	6013      	str	r3, [r2, #0]
		LFtargetJunc = junction_count + (int)LF_junc;
 80065ae:	4b3a      	ldr	r3, [pc, #232]	; (8006698 <APPApply+0x2e8>)
 80065b0:	edd3 7a00 	vldr	s15, [r3]
 80065b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065b8:	edc7 7a00 	vstr	s15, [r7]
 80065bc:	883a      	ldrh	r2, [r7, #0]
 80065be:	4b37      	ldr	r3, [pc, #220]	; (800669c <APPApply+0x2ec>)
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	4413      	add	r3, r2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	4b36      	ldr	r3, [pc, #216]	; (80066a0 <APPApply+0x2f0>)
 80065c8:	801a      	strh	r2, [r3, #0]

		if (Dir == DIR_LEFT || Dir == DIR_BACK)
 80065ca:	4b2c      	ldr	r3, [pc, #176]	; (800667c <APPApply+0x2cc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d003      	beq.n	80065da <APPApply+0x22a>
 80065d2:	4b2a      	ldr	r3, [pc, #168]	; (800667c <APPApply+0x2cc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d10d      	bne.n	80065f6 <APPApply+0x246>
			PIDGainSet(KE,-1/LF_dist,&lf_dist);
 80065da:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <APPApply+0x2d4>)
 80065dc:	edd3 7a00 	vldr	s15, [r3]
 80065e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80065e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065e8:	492a      	ldr	r1, [pc, #168]	; (8006694 <APPApply+0x2e4>)
 80065ea:	eeb0 0a66 	vmov.f32	s0, s13
 80065ee:	2002      	movs	r0, #2
 80065f0:	f7ff fa13 	bl	8005a1a <PIDGainSet>
 80065f4:	e014      	b.n	8006620 <APPApply+0x270>
		else if(Dir == DIR_RIGHT || Dir == DIR_FRONT)
 80065f6:	4b21      	ldr	r3, [pc, #132]	; (800667c <APPApply+0x2cc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b11      	cmp	r3, #17
 80065fc:	d003      	beq.n	8006606 <APPApply+0x256>
 80065fe:	4b1f      	ldr	r3, [pc, #124]	; (800667c <APPApply+0x2cc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b0e      	cmp	r3, #14
 8006604:	d10c      	bne.n	8006620 <APPApply+0x270>
			PIDGainSet(KE,1/LF_dist,&lf_dist);
 8006606:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <APPApply+0x2d4>)
 8006608:	edd3 7a00 	vldr	s15, [r3]
 800660c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006610:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006614:	491f      	ldr	r1, [pc, #124]	; (8006694 <APPApply+0x2e4>)
 8006616:	eeb0 0a66 	vmov.f32	s0, s13
 800661a:	2002      	movs	r0, #2
 800661c:	f7ff f9fd 	bl	8005a1a <PIDGainSet>
		PIDGainSet(KU,LF_vel,&lf_dist);
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <APPApply+0x2d0>)
 8006622:	edd3 7a00 	vldr	s15, [r3]
 8006626:	491b      	ldr	r1, [pc, #108]	; (8006694 <APPApply+0x2e4>)
 8006628:	eeb0 0a67 	vmov.f32	s0, s15
 800662c:	2003      	movs	r0, #3
 800662e:	f7ff f9f4 	bl	8005a1a <PIDGainSet>
		break;
 8006632:	e000      	b.n	8006636 <APPApply+0x286>
	case RNS_ODNStart:
	//	ODNStart(odn[0], odn[1], odn[2], odn[3], odn[4], odn[5], odn[6], odn[7],(int)odn[8] ,&PathPlan);
		break;

	default:
		break;
 8006634:	bf00      	nop
	}
}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200007f8 	.word	0x200007f8
 8006644:	20000c18 	.word	0x20000c18
 8006648:	20000c19 	.word	0x20000c19
 800664c:	20000c1a 	.word	0x20000c1a
 8006650:	20000c1b 	.word	0x20000c1b
 8006654:	20000c88 	.word	0x20000c88
 8006658:	20000c8c 	.word	0x20000c8c
 800665c:	20000c90 	.word	0x20000c90
 8006660:	20000c94 	.word	0x20000c94
 8006664:	20000c98 	.word	0x20000c98
 8006668:	20000c9c 	.word	0x20000c9c
 800666c:	20000ca0 	.word	0x20000ca0
 8006670:	20000ca4 	.word	0x20000ca4
 8006674:	20000c5c 	.word	0x20000c5c
 8006678:	20000c14 	.word	0x20000c14
 800667c:	20000c0c 	.word	0x20000c0c
 8006680:	20000880 	.word	0x20000880
 8006684:	2000087c 	.word	0x2000087c
 8006688:	20000c64 	.word	0x20000c64
 800668c:	20000c08 	.word	0x20000c08
 8006690:	20000c68 	.word	0x20000c68
 8006694:	20000aa0 	.word	0x20000aa0
 8006698:	20000884 	.word	0x20000884
 800669c:	20000c10 	.word	0x20000c10
 80066a0:	20000c12 	.word	0x20000c12

080066a4 <APPStart>:

void APPStart(ins_t *pins)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]

	switch (pins->instruction){
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	3b05      	subs	r3, #5
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	f200 80bf 	bhi.w	8006836 <APPStart+0x192>
 80066b8:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <APPStart+0x1c>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066fb 	.word	0x080066fb
 80066c4:	08006837 	.word	0x08006837
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	08006837 	.word	0x08006837
 80066d0:	08006707 	.word	0x08006707
 80066d4:	0800677f 	.word	0x0800677f
 80066d8:	08006837 	.word	0x08006837
 80066dc:	08006817 	.word	0x08006817
 80066e0:	080067f7 	.word	0x080067f7

	case RNS_CONTROLLER:
		sys.controller = 1;
 80066e4:	4a57      	ldr	r2, [pc, #348]	; (8006844 <APPStart+0x1a0>)
 80066e6:	7853      	ldrb	r3, [r2, #1]
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 80066ee:	4a55      	ldr	r2, [pc, #340]	; (8006844 <APPStart+0x1a0>)
 80066f0:	7813      	ldrb	r3, [r2, #0]
 80066f2:	f043 0304 	orr.w	r3, r3, #4
 80066f6:	7013      	strb	r3, [r2, #0]
		break;
 80066f8:	e09e      	b.n	8006838 <APPStart+0x194>

	case RNS_VELOCITY:
		sys.vel_flag = 1;
 80066fa:	4a52      	ldr	r2, [pc, #328]	; (8006844 <APPStart+0x1a0>)
 80066fc:	7813      	ldrb	r3, [r2, #0]
 80066fe:	f043 0304 	orr.w	r3, r3, #4
 8006702:	7013      	strb	r3, [r2, #0]
		break;
 8006704:	e098      	b.n	8006838 <APPStart+0x194>
	case RNS_PDC:
		break;

	case RNS_LF_DIST:

		if(Dir == DIR_FRONT){
 8006706:	4b50      	ldr	r3, [pc, #320]	; (8006848 <APPStart+0x1a4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b0e      	cmp	r3, #14
 800670c:	d105      	bne.n	800671a <APPStart+0x76>
			sys.lf_front = 1;
 800670e:	4a4d      	ldr	r2, [pc, #308]	; (8006844 <APPStart+0x1a0>)
 8006710:	7813      	ldrb	r3, [r2, #0]
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	7013      	strb	r3, [r2, #0]
 8006718:	e01c      	b.n	8006754 <APPStart+0xb0>
		}else if(Dir == DIR_BACK){
 800671a:	4b4b      	ldr	r3, [pc, #300]	; (8006848 <APPStart+0x1a4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d105      	bne.n	800672e <APPStart+0x8a>
			sys.lf_back = 1;
 8006722:	4a48      	ldr	r2, [pc, #288]	; (8006844 <APPStart+0x1a0>)
 8006724:	7853      	ldrb	r3, [r2, #1]
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	7053      	strb	r3, [r2, #1]
 800672c:	e012      	b.n	8006754 <APPStart+0xb0>
		}else if(Dir == DIR_LEFT){
 800672e:	4b46      	ldr	r3, [pc, #280]	; (8006848 <APPStart+0x1a4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b10      	cmp	r3, #16
 8006734:	d105      	bne.n	8006742 <APPStart+0x9e>
			sys.lf_left = 1;
 8006736:	4a43      	ldr	r2, [pc, #268]	; (8006844 <APPStart+0x1a0>)
 8006738:	7853      	ldrb	r3, [r2, #1]
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	7053      	strb	r3, [r2, #1]
 8006740:	e008      	b.n	8006754 <APPStart+0xb0>
		}else if(Dir == DIR_RIGHT){
 8006742:	4b41      	ldr	r3, [pc, #260]	; (8006848 <APPStart+0x1a4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b11      	cmp	r3, #17
 8006748:	d104      	bne.n	8006754 <APPStart+0xb0>
			sys.lf_right = 1;
 800674a:	4a3e      	ldr	r2, [pc, #248]	; (8006844 <APPStart+0x1a0>)
 800674c:	7853      	ldrb	r3, [r2, #1]
 800674e:	f043 0304 	orr.w	r3, r3, #4
 8006752:	7053      	strb	r3, [r2, #1]
		}

		sys.lf_flag= 1;
 8006754:	4a3b      	ldr	r2, [pc, #236]	; (8006844 <APPStart+0x1a0>)
 8006756:	7813      	ldrb	r3, [r2, #0]
 8006758:	f043 0308 	orr.w	r3, r3, #8
 800675c:	7013      	strb	r3, [r2, #0]
		sys.dist_flag = 1;
 800675e:	4a39      	ldr	r2, [pc, #228]	; (8006844 <APPStart+0x1a0>)
 8006760:	7813      	ldrb	r3, [r2, #0]
 8006762:	f043 0320 	orr.w	r3, r3, #32
 8006766:	7013      	strb	r3, [r2, #0]
		sys.vel_flag = 1;
 8006768:	4a36      	ldr	r2, [pc, #216]	; (8006844 <APPStart+0x1a0>)
 800676a:	7813      	ldrb	r3, [r2, #0]
 800676c:	f043 0304 	orr.w	r3, r3, #4
 8006770:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 8006772:	4a34      	ldr	r2, [pc, #208]	; (8006844 <APPStart+0x1a0>)
 8006774:	7813      	ldrb	r3, [r2, #0]
 8006776:	f043 0302 	orr.w	r3, r3, #2
 800677a:	7013      	strb	r3, [r2, #0]

		break;
 800677c:	e05c      	b.n	8006838 <APPStart+0x194>

	case RNS_LF_JUNC:

		if(Dir == DIR_FRONT){
 800677e:	4b32      	ldr	r3, [pc, #200]	; (8006848 <APPStart+0x1a4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b0e      	cmp	r3, #14
 8006784:	d105      	bne.n	8006792 <APPStart+0xee>
			sys.lf_front = 1;
 8006786:	4a2f      	ldr	r2, [pc, #188]	; (8006844 <APPStart+0x1a0>)
 8006788:	7813      	ldrb	r3, [r2, #0]
 800678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678e:	7013      	strb	r3, [r2, #0]
 8006790:	e01c      	b.n	80067cc <APPStart+0x128>
		}else if(Dir == DIR_BACK){
 8006792:	4b2d      	ldr	r3, [pc, #180]	; (8006848 <APPStart+0x1a4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d105      	bne.n	80067a6 <APPStart+0x102>
			sys.lf_back = 1;
 800679a:	4a2a      	ldr	r2, [pc, #168]	; (8006844 <APPStart+0x1a0>)
 800679c:	7853      	ldrb	r3, [r2, #1]
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	7053      	strb	r3, [r2, #1]
 80067a4:	e012      	b.n	80067cc <APPStart+0x128>
		}else if(Dir == DIR_LEFT){
 80067a6:	4b28      	ldr	r3, [pc, #160]	; (8006848 <APPStart+0x1a4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d105      	bne.n	80067ba <APPStart+0x116>
			sys.lf_left = 1;
 80067ae:	4a25      	ldr	r2, [pc, #148]	; (8006844 <APPStart+0x1a0>)
 80067b0:	7853      	ldrb	r3, [r2, #1]
 80067b2:	f043 0302 	orr.w	r3, r3, #2
 80067b6:	7053      	strb	r3, [r2, #1]
 80067b8:	e008      	b.n	80067cc <APPStart+0x128>
		}else if(Dir == DIR_RIGHT){
 80067ba:	4b23      	ldr	r3, [pc, #140]	; (8006848 <APPStart+0x1a4>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b11      	cmp	r3, #17
 80067c0:	d104      	bne.n	80067cc <APPStart+0x128>
			sys.lf_right = 1;
 80067c2:	4a20      	ldr	r2, [pc, #128]	; (8006844 <APPStart+0x1a0>)
 80067c4:	7853      	ldrb	r3, [r2, #1]
 80067c6:	f043 0304 	orr.w	r3, r3, #4
 80067ca:	7053      	strb	r3, [r2, #1]
		}
		sys.lf_flag= 1;
 80067cc:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <APPStart+0x1a0>)
 80067ce:	7813      	ldrb	r3, [r2, #0]
 80067d0:	f043 0308 	orr.w	r3, r3, #8
 80067d4:	7013      	strb	r3, [r2, #0]
		sys.lf_junc = 1;
 80067d6:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <APPStart+0x1a0>)
 80067d8:	7813      	ldrb	r3, [r2, #0]
 80067da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067de:	7013      	strb	r3, [r2, #0]
		sys.vel_flag = 1;
 80067e0:	4a18      	ldr	r2, [pc, #96]	; (8006844 <APPStart+0x1a0>)
 80067e2:	7813      	ldrb	r3, [r2, #0]
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 80067ea:	4a16      	ldr	r2, [pc, #88]	; (8006844 <APPStart+0x1a0>)
 80067ec:	7813      	ldrb	r3, [r2, #0]
 80067ee:	f043 0302 	orr.w	r3, r3, #2
 80067f2:	7013      	strb	r3, [r2, #0]
		break;
 80067f4:	e020      	b.n	8006838 <APPStart+0x194>

	case RNS_ROTATE:
		sys.rotate = 1;
 80067f6:	4a13      	ldr	r2, [pc, #76]	; (8006844 <APPStart+0x1a0>)
 80067f8:	7853      	ldrb	r3, [r2, #1]
 80067fa:	f043 0308 	orr.w	r3, r3, #8
 80067fe:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 8006800:	4a10      	ldr	r2, [pc, #64]	; (8006844 <APPStart+0x1a0>)
 8006802:	7813      	ldrb	r3, [r2, #0]
 8006804:	f043 0304 	orr.w	r3, r3, #4
 8006808:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 800680a:	4a0e      	ldr	r2, [pc, #56]	; (8006844 <APPStart+0x1a0>)
 800680c:	7813      	ldrb	r3, [r2, #0]
 800680e:	f043 0302 	orr.w	r3, r3, #2
 8006812:	7013      	strb	r3, [r2, #0]
		break;
 8006814:	e010      	b.n	8006838 <APPStart+0x194>

	case RNS_ODNStart:
		sys.odnstart_flag = 1;
 8006816:	4a0b      	ldr	r2, [pc, #44]	; (8006844 <APPStart+0x1a0>)
 8006818:	7853      	ldrb	r3, [r2, #1]
 800681a:	f043 0310 	orr.w	r3, r3, #16
 800681e:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <APPStart+0x1a0>)
 8006822:	7813      	ldrb	r3, [r2, #0]
 8006824:	f043 0304 	orr.w	r3, r3, #4
 8006828:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 800682a:	4a06      	ldr	r2, [pc, #24]	; (8006844 <APPStart+0x1a0>)
 800682c:	7813      	ldrb	r3, [r2, #0]
 800682e:	f043 0302 	orr.w	r3, r3, #2
 8006832:	7013      	strb	r3, [r2, #0]
		break;
 8006834:	e000      	b.n	8006838 <APPStart+0x194>

	default:
		break;
 8006836:	bf00      	nop
	}
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	2000088c 	.word	0x2000088c
 8006848:	20000c0c 	.word	0x20000c0c

0800684c <APPStop>:

void APPStop(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
	sys.flag = 0;	/* Reset system flag */
 8006850:	4b2e      	ldr	r3, [pc, #184]	; (800690c <APPStop+0xc0>)
 8006852:	2200      	movs	r2, #0
 8006854:	801a      	strh	r2, [r3, #0]

	PIDDelayInit(&fleft_vel);
 8006856:	482e      	ldr	r0, [pc, #184]	; (8006910 <APPStop+0xc4>)
 8006858:	f7ff fa30 	bl	8005cbc <PIDDelayInit>
	PIDDelayInit(&fright_vel);
 800685c:	482d      	ldr	r0, [pc, #180]	; (8006914 <APPStop+0xc8>)
 800685e:	f7ff fa2d 	bl	8005cbc <PIDDelayInit>

	PIDDelayInit(&bleft_vel);
 8006862:	482d      	ldr	r0, [pc, #180]	; (8006918 <APPStop+0xcc>)
 8006864:	f7ff fa2a 	bl	8005cbc <PIDDelayInit>
	PIDDelayInit(&bright_vel);
 8006868:	482c      	ldr	r0, [pc, #176]	; (800691c <APPStop+0xd0>)
 800686a:	f7ff fa27 	bl	8005cbc <PIDDelayInit>

	fFLeftVelR = 0.0;
 800686e:	4b2c      	ldr	r3, [pc, #176]	; (8006920 <APPStop+0xd4>)
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	fFLeftVelU = 0.0;
 8006876:	4b2b      	ldr	r3, [pc, #172]	; (8006924 <APPStop+0xd8>)
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

	fFRightVelR = 0.0;
 800687e:	4b2a      	ldr	r3, [pc, #168]	; (8006928 <APPStop+0xdc>)
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
	fFRightVelU = 0.0;
 8006886:	4b29      	ldr	r3, [pc, #164]	; (800692c <APPStop+0xe0>)
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

	fBLeftVelR = 0.0;
 800688e:	4b28      	ldr	r3, [pc, #160]	; (8006930 <APPStop+0xe4>)
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
	fBLeftVelU = 0.0;
 8006896:	4b27      	ldr	r3, [pc, #156]	; (8006934 <APPStop+0xe8>)
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

	fBRightVelR = 0.0;
 800689e:	4b26      	ldr	r3, [pc, #152]	; (8006938 <APPStop+0xec>)
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
	fBRightVelU = 0.0;
 80068a6:	4b25      	ldr	r3, [pc, #148]	; (800693c <APPStop+0xf0>)
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]

	PIDDelayInit(&lf_dist);
 80068ae:	4824      	ldr	r0, [pc, #144]	; (8006940 <APPStop+0xf4>)
 80068b0:	f7ff fa04 	bl	8005cbc <PIDDelayInit>
	PIDDelayInit(&lf_rotate);
 80068b4:	4823      	ldr	r0, [pc, #140]	; (8006944 <APPStop+0xf8>)
 80068b6:	f7ff fa01 	bl	8005cbc <PIDDelayInit>
	PIDDelayInit(&lf_fwd);
 80068ba:	4823      	ldr	r0, [pc, #140]	; (8006948 <APPStop+0xfc>)
 80068bc:	f7ff f9fe 	bl	8005cbc <PIDDelayInit>
	PIDDelayInit(&imu_rotate);
 80068c0:	4822      	ldr	r0, [pc, #136]	; (800694c <APPStop+0x100>)
 80068c2:	f7ff f9fb 	bl	8005cbc <PIDDelayInit>

	fLFDistErr = 0;
 80068c6:	4b22      	ldr	r3, [pc, #136]	; (8006950 <APPStop+0x104>)
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
	fLFDistU = 0;
 80068ce:	4b21      	ldr	r3, [pc, #132]	; (8006954 <APPStop+0x108>)
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

	fRotateErr = 0;
 80068d6:	4b20      	ldr	r3, [pc, #128]	; (8006958 <APPStop+0x10c>)
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
	fRotateU = 0;
 80068de:	4b1f      	ldr	r3, [pc, #124]	; (800695c <APPStop+0x110>)
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

	fFwdErr = 0;
 80068e6:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <APPStop+0x114>)
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
	fFwdU = 0;
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <APPStop+0x118>)
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

	fAngleErr = 0;
 80068f6:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <APPStop+0x11c>)
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
	fAngleU = 0;
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <APPStop+0x120>)
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	2000088c 	.word	0x2000088c
 8006910:	20000950 	.word	0x20000950
 8006914:	200009a4 	.word	0x200009a4
 8006918:	200009f8 	.word	0x200009f8
 800691c:	20000a4c 	.word	0x20000a4c
 8006920:	20000c88 	.word	0x20000c88
 8006924:	20000c98 	.word	0x20000c98
 8006928:	20000c8c 	.word	0x20000c8c
 800692c:	20000c9c 	.word	0x20000c9c
 8006930:	20000c90 	.word	0x20000c90
 8006934:	20000ca0 	.word	0x20000ca0
 8006938:	20000c94 	.word	0x20000c94
 800693c:	20000ca4 	.word	0x20000ca4
 8006940:	20000aa0 	.word	0x20000aa0
 8006944:	20000af4 	.word	0x20000af4
 8006948:	20000b48 	.word	0x20000b48
 800694c:	20000b9c 	.word	0x20000b9c
 8006950:	20000cb8 	.word	0x20000cb8
 8006954:	20000cc4 	.word	0x20000cc4
 8006958:	20000cbc 	.word	0x20000cbc
 800695c:	20000cc8 	.word	0x20000cc8
 8006960:	20000cc0 	.word	0x20000cc0
 8006964:	20000ccc 	.word	0x20000ccc
 8006968:	20000cd0 	.word	0x20000cd0
 800696c:	20000cd4 	.word	0x20000cd4

08006970 <Initialize>:
/*********************************************/
/*          Functions	            	     */
/*********************************************/

void Initialize(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af04      	add	r7, sp, #16
	BIOSInit();
 8006976:	f7fe f8cf 	bl	8004b18 <BIOSInit>

	GPIOPinsInit(GPIOA, GPIO_Pin_5, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);				 //LED
 800697a:	2301      	movs	r3, #1
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	2302      	movs	r3, #2
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	2201      	movs	r2, #1
 8006986:	2120      	movs	r1, #32
 8006988:	487b      	ldr	r0, [pc, #492]	; (8006b78 <Initialize+0x208>)
 800698a:	f7fb fa9b 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit(GPIOC, GPIO_Pin_5, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);				 //LED
 800698e:	2301      	movs	r3, #1
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	2302      	movs	r3, #2
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	2300      	movs	r3, #0
 8006998:	2201      	movs	r2, #1
 800699a:	2120      	movs	r1, #32
 800699c:	4877      	ldr	r0, [pc, #476]	; (8006b7c <Initialize+0x20c>)
 800699e:	f7fb fa91 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit(GPIOE, GPIO_Pin_7 | GPIO_Pin_14, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP); //LED
 80069a2:	2301      	movs	r3, #1
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	2302      	movs	r3, #2
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	2300      	movs	r3, #0
 80069ac:	2201      	movs	r2, #1
 80069ae:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80069b2:	4873      	ldr	r0, [pc, #460]	; (8006b80 <Initialize+0x210>)
 80069b4:	f7fb fa86 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit(GPIOD, GPIO_Pin_10, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);				 //LED
 80069b8:	2301      	movs	r3, #1
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	2302      	movs	r3, #2
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	2300      	movs	r3, #0
 80069c2:	2201      	movs	r2, #1
 80069c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069c8:	486e      	ldr	r0, [pc, #440]	; (8006b84 <Initialize+0x214>)
 80069ca:	f7fb fa7b 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit(GPIOC, GPIO_Pin_4, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);				 //PB
 80069ce:	2301      	movs	r3, #1
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	2302      	movs	r3, #2
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2300      	movs	r3, #0
 80069d8:	2200      	movs	r2, #0
 80069da:	2110      	movs	r1, #16
 80069dc:	4867      	ldr	r0, [pc, #412]	; (8006b7c <Initialize+0x20c>)
 80069de:	f7fb fa71 	bl	8001ec4 <GPIOPinsInit>
	GPIOPinsInit(GPIOE, GPIO_Pin_10, GPIO_Mode_IN, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);				 //PB
 80069e2:	2301      	movs	r3, #1
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	2302      	movs	r3, #2
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	2300      	movs	r3, #0
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069f2:	4863      	ldr	r0, [pc, #396]	; (8006b80 <Initialize+0x210>)
 80069f4:	f7fb fa66 	bl	8001ec4 <GPIOPinsInit>

	LED1 = 1;
 80069f8:	4a63      	ldr	r2, [pc, #396]	; (8006b88 <Initialize+0x218>)
 80069fa:	7813      	ldrb	r3, [r2, #0]
 80069fc:	f043 0320 	orr.w	r3, r3, #32
 8006a00:	7013      	strb	r3, [r2, #0]
	LED2 = 1;
 8006a02:	4a62      	ldr	r2, [pc, #392]	; (8006b8c <Initialize+0x21c>)
 8006a04:	7813      	ldrb	r3, [r2, #0]
 8006a06:	f043 0320 	orr.w	r3, r3, #32
 8006a0a:	7013      	strb	r3, [r2, #0]
	LED3 = 1;
 8006a0c:	4a60      	ldr	r2, [pc, #384]	; (8006b90 <Initialize+0x220>)
 8006a0e:	7813      	ldrb	r3, [r2, #0]
 8006a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a14:	7013      	strb	r3, [r2, #0]
	LED4 = 1;
 8006a16:	4a5e      	ldr	r2, [pc, #376]	; (8006b90 <Initialize+0x220>)
 8006a18:	7853      	ldrb	r3, [r2, #1]
 8006a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a1e:	7053      	strb	r3, [r2, #1]
	LED5 = 1;
 8006a20:	4a5c      	ldr	r2, [pc, #368]	; (8006b94 <Initialize+0x224>)
 8006a22:	7853      	ldrb	r3, [r2, #1]
 8006a24:	f043 0304 	orr.w	r3, r3, #4
 8006a28:	7053      	strb	r3, [r2, #1]

	SHIFTREGInit(&SR, NO_CASCADE, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 8006a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	4b52      	ldr	r3, [pc, #328]	; (8006b7c <Initialize+0x20c>)
 8006a32:	9302      	str	r3, [sp, #8]
 8006a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	4b4f      	ldr	r3, [pc, #316]	; (8006b78 <Initialize+0x208>)
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a42:	4a4d      	ldr	r2, [pc, #308]	; (8006b78 <Initialize+0x208>)
 8006a44:	2100      	movs	r1, #0
 8006a46:	4854      	ldr	r0, [pc, #336]	; (8006b98 <Initialize+0x228>)
 8006a48:	f7fd ff6c 	bl	8004924 <SHIFTREGInit>

	QEIInit(QEI1, 1, 2, QEI1_PLUSEA_PIN, QEI1_PLUSEB_PIN);
 8006a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a50:	9302      	str	r3, [sp, #8]
 8006a52:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <Initialize+0x210>)
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4b48      	ldr	r3, [pc, #288]	; (8006b80 <Initialize+0x210>)
 8006a5e:	2202      	movs	r2, #2
 8006a60:	2101      	movs	r1, #1
 8006a62:	2001      	movs	r0, #1
 8006a64:	f7fc fb66 	bl	8003134 <QEIInit>
	QEIInit(QEI2, 2, 0, QEI2_PLUSEA_PIN, QEI2_PLUSEB_PIN);
 8006a68:	2308      	movs	r3, #8
 8006a6a:	9302      	str	r3, [sp, #8]
 8006a6c:	4b4b      	ldr	r3, [pc, #300]	; (8006b9c <Initialize+0x22c>)
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	4b40      	ldr	r3, [pc, #256]	; (8006b78 <Initialize+0x208>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2102      	movs	r1, #2
 8006a7c:	2002      	movs	r0, #2
 8006a7e:	f7fc fb59 	bl	8003134 <QEIInit>
	QEIInit(QEI3, 1, 3, QEI3_PLUSEA_PIN, QEI3_PLUSEB_PIN);
 8006a82:	2380      	movs	r3, #128	; 0x80
 8006a84:	9302      	str	r3, [sp, #8]
 8006a86:	4b3c      	ldr	r3, [pc, #240]	; (8006b78 <Initialize+0x208>)
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	2340      	movs	r3, #64	; 0x40
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	4b3a      	ldr	r3, [pc, #232]	; (8006b78 <Initialize+0x208>)
 8006a90:	2203      	movs	r2, #3
 8006a92:	2101      	movs	r1, #1
 8006a94:	2003      	movs	r0, #3
 8006a96:	f7fc fb4d 	bl	8003134 <QEIInit>
	QEIInit(QEI4, 1, 1, QEI4_PLUSEA_PIN, QEI4_PLUSEB_PIN);
 8006a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a9e:	9302      	str	r3, [sp, #8]
 8006aa0:	4b38      	ldr	r3, [pc, #224]	; (8006b84 <Initialize+0x214>)
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4b36      	ldr	r3, [pc, #216]	; (8006b84 <Initialize+0x214>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	2101      	movs	r1, #1
 8006ab0:	2004      	movs	r0, #4
 8006ab2:	f7fc fb3f 	bl	8003134 <QEIInit>
	QEIInit(QEI5, 2, 1, QEI5_PLUSEA_PIN, QEI5_PLUSEB_PIN);
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	4b2f      	ldr	r3, [pc, #188]	; (8006b78 <Initialize+0x208>)
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	4b2d      	ldr	r3, [pc, #180]	; (8006b78 <Initialize+0x208>)
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	2102      	movs	r1, #2
 8006ac8:	2005      	movs	r0, #5
 8006aca:	f7fc fb33 	bl	8003134 <QEIInit>
	QEIInit(QEI6, 1, 0, QEI6_PLUSEA_PIN, QEI6_PLUSEB_PIN);
 8006ace:	2380      	movs	r3, #128	; 0x80
 8006ad0:	9302      	str	r3, [sp, #8]
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <Initialize+0x20c>)
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	2340      	movs	r3, #64	; 0x40
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	4b28      	ldr	r3, [pc, #160]	; (8006b7c <Initialize+0x20c>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	2101      	movs	r1, #1
 8006ae0:	2006      	movs	r0, #6
 8006ae2:	f7fc fb27 	bl	8003134 <QEIInit>

	UART2Init(115200, ENABLE, 0, 0, UART2_Tx_PIN, UART2_Rx_PIN);
 8006ae6:	2340      	movs	r3, #64	; 0x40
 8006ae8:	9303      	str	r3, [sp, #12]
 8006aea:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <Initialize+0x214>)
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	2320      	movs	r3, #32
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	4b24      	ldr	r3, [pc, #144]	; (8006b84 <Initialize+0x214>)
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	2300      	movs	r3, #0
 8006af8:	2200      	movs	r2, #0
 8006afa:	2101      	movs	r1, #1
 8006afc:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8006b00:	f7fe f932 	bl	8004d68 <UART2Init>
	UART5Init(115200, ENABLE, 1, 0, UART5_Tx_PIN, UART5_Rx_PIN);
 8006b04:	2304      	movs	r3, #4
 8006b06:	9303      	str	r3, [sp, #12]
 8006b08:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <Initialize+0x214>)
 8006b0a:	9302      	str	r3, [sp, #8]
 8006b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	4b1a      	ldr	r3, [pc, #104]	; (8006b7c <Initialize+0x20c>)
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	2300      	movs	r3, #0
 8006b18:	2201      	movs	r2, #1
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8006b20:	f7fe fab4 	bl	800508c <UART5Init>

	//	UART5TxDMAInit(DMA_Priority_Medium, DISABLE, 2, 1);

	PWMTimeBaseInit(TIM9, 20000, 4);
 8006b24:	2204      	movs	r2, #4
 8006b26:	f644 6120 	movw	r1, #20000	; 0x4e20
 8006b2a:	481d      	ldr	r0, [pc, #116]	; (8006ba0 <Initialize+0x230>)
 8006b2c:	f7fb fa5a 	bl	8001fe4 <PWMTimeBaseInit>
	PWMTimeBaseInit(TIM12, 20000, 2);
 8006b30:	2202      	movs	r2, #2
 8006b32:	f644 6120 	movw	r1, #20000	; 0x4e20
 8006b36:	481b      	ldr	r0, [pc, #108]	; (8006ba4 <Initialize+0x234>)
 8006b38:	f7fb fa54 	bl	8001fe4 <PWMTimeBaseInit>

	PWMChannelConfig(TIM9, PWM_CHANNEL_1, PWM_TIM9_CH1_PIN);
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	4a0e      	ldr	r2, [pc, #56]	; (8006b78 <Initialize+0x208>)
 8006b40:	2100      	movs	r1, #0
 8006b42:	4817      	ldr	r0, [pc, #92]	; (8006ba0 <Initialize+0x230>)
 8006b44:	f7fb faf8 	bl	8002138 <PWMChannelConfig>
	PWMChannelConfig(TIM9, PWM_CHANNEL_2, PWM_TIM9_CH2_PIN);
 8006b48:	2308      	movs	r3, #8
 8006b4a:	4a0b      	ldr	r2, [pc, #44]	; (8006b78 <Initialize+0x208>)
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4814      	ldr	r0, [pc, #80]	; (8006ba0 <Initialize+0x230>)
 8006b50:	f7fb faf2 	bl	8002138 <PWMChannelConfig>
	PWMChannelConfig(TIM12, PWM_CHANNEL_1, PWM_TIM12_CH1_PIN);
 8006b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b58:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <Initialize+0x22c>)
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4811      	ldr	r0, [pc, #68]	; (8006ba4 <Initialize+0x234>)
 8006b5e:	f7fb faeb 	bl	8002138 <PWMChannelConfig>
	PWMChannelConfig(TIM12, PWM_CHANNEL_2, PWM_TIM12_CH2_PIN);
 8006b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b66:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <Initialize+0x22c>)
 8006b68:	2101      	movs	r1, #1
 8006b6a:	480e      	ldr	r0, [pc, #56]	; (8006ba4 <Initialize+0x234>)
 8006b6c:	f7fb fae4 	bl	8002138 <PWMChannelConfig>
}
 8006b70:	bf00      	nop
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	40020000 	.word	0x40020000
 8006b7c:	40020800 	.word	0x40020800
 8006b80:	40021000 	.word	0x40021000
 8006b84:	40020c00 	.word	0x40020c00
 8006b88:	40020014 	.word	0x40020014
 8006b8c:	40020814 	.word	0x40020814
 8006b90:	40021014 	.word	0x40021014
 8006b94:	40020c14 	.word	0x40020c14
 8006b98:	2000080c 	.word	0x2000080c
 8006b9c:	40020400 	.word	0x40020400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40001800 	.word	0x40001800

08006ba8 <wheel_config>:

void wheel_config()
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0

	PIDGainSet(SAT, 1.0, &fleft_vel);
 8006bac:	4977      	ldr	r1, [pc, #476]	; (8006d8c <wheel_config+0x1e4>)
 8006bae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f7fe ff31 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KE, 1 / 6.8, &fleft_vel);
 8006bb8:	4974      	ldr	r1, [pc, #464]	; (8006d8c <wheel_config+0x1e4>)
 8006bba:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8006d90 <wheel_config+0x1e8>
 8006bbe:	2002      	movs	r0, #2
 8006bc0:	f7fe ff2b 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KU, 19999.0, &fleft_vel);
 8006bc4:	4971      	ldr	r1, [pc, #452]	; (8006d8c <wheel_config+0x1e4>)
 8006bc6:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006d94 <wheel_config+0x1ec>
 8006bca:	2003      	movs	r0, #3
 8006bcc:	f7fe ff25 	bl	8005a1a <PIDGainSet>
	//case RNS_F_LEFT_VEL_PID :
	PIDGainSet(KP, 3.5, &fleft_vel);
 8006bd0:	496e      	ldr	r1, [pc, #440]	; (8006d8c <wheel_config+0x1e4>)
 8006bd2:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8006bd6:	2004      	movs	r0, #4
 8006bd8:	f7fe ff1f 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KI, 10.5, &fleft_vel);
 8006bdc:	496b      	ldr	r1, [pc, #428]	; (8006d8c <wheel_config+0x1e4>)
 8006bde:	eeb2 0a05 	vmov.f32	s0, #37	; 0x41280000  10.5
 8006be2:	2005      	movs	r0, #5
 8006be4:	f7fe ff19 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KD, 0.0, &fleft_vel);
 8006be8:	4968      	ldr	r1, [pc, #416]	; (8006d8c <wheel_config+0x1e4>)
 8006bea:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8006d98 <wheel_config+0x1f0>
 8006bee:	2006      	movs	r0, #6
 8006bf0:	f7fe ff13 	bl	8005a1a <PIDGainSet>
	//case RNS_B_LEFT_VEL_SATEU :
	PIDGainSet(SAT, 1.0, &bleft_vel);
 8006bf4:	4969      	ldr	r1, [pc, #420]	; (8006d9c <wheel_config+0x1f4>)
 8006bf6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	f7fe ff0d 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KE, 1 / 7.00, &bleft_vel);
 8006c00:	4966      	ldr	r1, [pc, #408]	; (8006d9c <wheel_config+0x1f4>)
 8006c02:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8006da0 <wheel_config+0x1f8>
 8006c06:	2002      	movs	r0, #2
 8006c08:	f7fe ff07 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KU, 19999.0, &bleft_vel);
 8006c0c:	4963      	ldr	r1, [pc, #396]	; (8006d9c <wheel_config+0x1f4>)
 8006c0e:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8006d94 <wheel_config+0x1ec>
 8006c12:	2003      	movs	r0, #3
 8006c14:	f7fe ff01 	bl	8005a1a <PIDGainSet>
	//case RNS_B_LEFT_VEL_PID :
	PIDGainSet(KP, 4.30, &bleft_vel);
 8006c18:	4960      	ldr	r1, [pc, #384]	; (8006d9c <wheel_config+0x1f4>)
 8006c1a:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8006da4 <wheel_config+0x1fc>
 8006c1e:	2004      	movs	r0, #4
 8006c20:	f7fe fefb 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KI, 9.80, &bleft_vel);
 8006c24:	495d      	ldr	r1, [pc, #372]	; (8006d9c <wheel_config+0x1f4>)
 8006c26:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8006da8 <wheel_config+0x200>
 8006c2a:	2005      	movs	r0, #5
 8006c2c:	f7fe fef5 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KD, 0.0, &bleft_vel);
 8006c30:	495a      	ldr	r1, [pc, #360]	; (8006d9c <wheel_config+0x1f4>)
 8006c32:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006d98 <wheel_config+0x1f0>
 8006c36:	2006      	movs	r0, #6
 8006c38:	f7fe feef 	bl	8005a1a <PIDGainSet>
	//case RNS_F_RIGHT_VEL_SATEU :
	PIDGainSet(SAT, 1.0, &fright_vel);
 8006c3c:	495b      	ldr	r1, [pc, #364]	; (8006dac <wheel_config+0x204>)
 8006c3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c42:	2001      	movs	r0, #1
 8006c44:	f7fe fee9 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KE, 1 / 6.50, &fright_vel);
 8006c48:	4958      	ldr	r1, [pc, #352]	; (8006dac <wheel_config+0x204>)
 8006c4a:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006db0 <wheel_config+0x208>
 8006c4e:	2002      	movs	r0, #2
 8006c50:	f7fe fee3 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KU, 19999.0, &fright_vel);
 8006c54:	4955      	ldr	r1, [pc, #340]	; (8006dac <wheel_config+0x204>)
 8006c56:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8006d94 <wheel_config+0x1ec>
 8006c5a:	2003      	movs	r0, #3
 8006c5c:	f7fe fedd 	bl	8005a1a <PIDGainSet>
	//case RNS_F_RIGHT_VEL_PID :
	PIDGainSet(KP, 3.80, &fright_vel);
 8006c60:	4952      	ldr	r1, [pc, #328]	; (8006dac <wheel_config+0x204>)
 8006c62:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8006db4 <wheel_config+0x20c>
 8006c66:	2004      	movs	r0, #4
 8006c68:	f7fe fed7 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KI, 9.0, &fright_vel);
 8006c6c:	494f      	ldr	r1, [pc, #316]	; (8006dac <wheel_config+0x204>)
 8006c6e:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8006c72:	2005      	movs	r0, #5
 8006c74:	f7fe fed1 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KD, 0.0, &fright_vel);
 8006c78:	494c      	ldr	r1, [pc, #304]	; (8006dac <wheel_config+0x204>)
 8006c7a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8006d98 <wheel_config+0x1f0>
 8006c7e:	2006      	movs	r0, #6
 8006c80:	f7fe fecb 	bl	8005a1a <PIDGainSet>
	//case RNS_B_RIGHT_VEL_SATEU :

	PIDGainSet(SAT, 1.0, &bright_vel);
 8006c84:	494c      	ldr	r1, [pc, #304]	; (8006db8 <wheel_config+0x210>)
 8006c86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	f7fe fec5 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KE, 1 / 6.65, &bright_vel);
 8006c90:	4949      	ldr	r1, [pc, #292]	; (8006db8 <wheel_config+0x210>)
 8006c92:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8006dbc <wheel_config+0x214>
 8006c96:	2002      	movs	r0, #2
 8006c98:	f7fe febf 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KU, 19999.0, &bright_vel);
 8006c9c:	4946      	ldr	r1, [pc, #280]	; (8006db8 <wheel_config+0x210>)
 8006c9e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8006d94 <wheel_config+0x1ec>
 8006ca2:	2003      	movs	r0, #3
 8006ca4:	f7fe feb9 	bl	8005a1a <PIDGainSet>

	//case RNS_B_RIGHT_VEL_PID :
	PIDGainSet(KP, 3.5, &bright_vel);
 8006ca8:	4943      	ldr	r1, [pc, #268]	; (8006db8 <wheel_config+0x210>)
 8006caa:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 8006cae:	2004      	movs	r0, #4
 8006cb0:	f7fe feb3 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KI, 13.80, &bright_vel);
 8006cb4:	4940      	ldr	r1, [pc, #256]	; (8006db8 <wheel_config+0x210>)
 8006cb6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8006dc0 <wheel_config+0x218>
 8006cba:	2005      	movs	r0, #5
 8006cbc:	f7fe fead 	bl	8005a1a <PIDGainSet>
	PIDGainSet(KD, 0.0, &bright_vel);
 8006cc0:	493d      	ldr	r1, [pc, #244]	; (8006db8 <wheel_config+0x210>)
 8006cc2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8006d98 <wheel_config+0x1f0>
 8006cc6:	2006      	movs	r0, #6
 8006cc8:	f7fe fea7 	bl	8005a1a <PIDGainSet>

	dev_cfg.motor_enc_dir = 0b00000101;
 8006ccc:	4b3d      	ldr	r3, [pc, #244]	; (8006dc4 <wheel_config+0x21c>)
 8006cce:	2205      	movs	r2, #5
 8006cd0:	70da      	strb	r2, [r3, #3]
	if (dev_cfg.motor1_enc == 0)
 8006cd2:	4b3c      	ldr	r3, [pc, #240]	; (8006dc4 <wheel_config+0x21c>)
 8006cd4:	78db      	ldrb	r3, [r3, #3]
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <wheel_config+0x142>
		QEISwap(QEI6, QEI_No_Swap);
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	2006      	movs	r0, #6
 8006ce4:	f7fc fb5a 	bl	800339c <QEISwap>
 8006ce8:	e003      	b.n	8006cf2 <wheel_config+0x14a>
	else
		QEISwap(QEI6, QEI_Swap);
 8006cea:	2101      	movs	r1, #1
 8006cec:	2006      	movs	r0, #6
 8006cee:	f7fc fb55 	bl	800339c <QEISwap>

	if (dev_cfg.motor2_enc == 0)
 8006cf2:	4b34      	ldr	r3, [pc, #208]	; (8006dc4 <wheel_config+0x21c>)
 8006cf4:	78db      	ldrb	r3, [r3, #3]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <wheel_config+0x162>
		QEISwap(QEI4, QEI_No_Swap);
 8006d00:	2100      	movs	r1, #0
 8006d02:	2004      	movs	r0, #4
 8006d04:	f7fc fb4a 	bl	800339c <QEISwap>
 8006d08:	e003      	b.n	8006d12 <wheel_config+0x16a>
	else
		QEISwap(QEI4, QEI_Swap);
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	2004      	movs	r0, #4
 8006d0e:	f7fc fb45 	bl	800339c <QEISwap>

	if (dev_cfg.motor3_enc == 0)
 8006d12:	4b2c      	ldr	r3, [pc, #176]	; (8006dc4 <wheel_config+0x21c>)
 8006d14:	78db      	ldrb	r3, [r3, #3]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <wheel_config+0x182>
		QEISwap(QEI1, QEI_No_Swap);
 8006d20:	2100      	movs	r1, #0
 8006d22:	2001      	movs	r0, #1
 8006d24:	f7fc fb3a 	bl	800339c <QEISwap>
 8006d28:	e003      	b.n	8006d32 <wheel_config+0x18a>
	else
		QEISwap(QEI1, QEI_Swap);
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	2001      	movs	r0, #1
 8006d2e:	f7fc fb35 	bl	800339c <QEISwap>

	if (dev_cfg.motor4_enc == 0)
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <wheel_config+0x21c>)
 8006d34:	78db      	ldrb	r3, [r3, #3]
 8006d36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <wheel_config+0x1a2>
		QEISwap(QEI3, QEI_No_Swap);
 8006d40:	2100      	movs	r1, #0
 8006d42:	2003      	movs	r0, #3
 8006d44:	f7fc fb2a 	bl	800339c <QEISwap>
 8006d48:	e003      	b.n	8006d52 <wheel_config+0x1aa>
	else
		QEISwap(QEI3, QEI_Swap);
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	2003      	movs	r0, #3
 8006d4e:	f7fc fb25 	bl	800339c <QEISwap>

	xPtd = 0.05 / 4000.0 * 3.142;
 8006d52:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <wheel_config+0x220>)
 8006d54:	4a1d      	ldr	r2, [pc, #116]	; (8006dcc <wheel_config+0x224>)
 8006d56:	601a      	str	r2, [r3, #0]
	yPtd = 0.05 / 4000.0 * 3.142;
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <wheel_config+0x228>)
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <wheel_config+0x224>)
 8006d5c:	601a      	str	r2, [r3, #0]

	QEISwap(QEI2, QEI_Swap);
 8006d5e:	2101      	movs	r1, #1
 8006d60:	2002      	movs	r0, #2
 8006d62:	f7fc fb1b 	bl	800339c <QEISwap>
	QEISwap(QEI5, QEI_No_Swap);
 8006d66:	2100      	movs	r1, #0
 8006d68:	2005      	movs	r0, #5
 8006d6a:	f7fc fb17 	bl	800339c <QEISwap>

	fFKcd = 517.5 / 516.5;
 8006d6e:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <wheel_config+0x22c>)
 8006d70:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <wheel_config+0x230>)
 8006d72:	601a      	str	r2, [r3, #0]
	fFPtd = 0.125 * 3.142 / 517.5;
 8006d74:	4b19      	ldr	r3, [pc, #100]	; (8006ddc <wheel_config+0x234>)
 8006d76:	4a1a      	ldr	r2, [pc, #104]	; (8006de0 <wheel_config+0x238>)
 8006d78:	601a      	str	r2, [r3, #0]
	fBKcd = 521.1 / 520.7;
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <wheel_config+0x23c>)
 8006d7c:	4a1a      	ldr	r2, [pc, #104]	; (8006de8 <wheel_config+0x240>)
 8006d7e:	601a      	str	r2, [r3, #0]
	fBPtd = 0.125 * 3.142 / 521.1;
 8006d80:	4b1a      	ldr	r3, [pc, #104]	; (8006dec <wheel_config+0x244>)
 8006d82:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <wheel_config+0x248>)
 8006d84:	601a      	str	r2, [r3, #0]
}
 8006d86:	bf00      	nop
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000950 	.word	0x20000950
 8006d90:	3e169697 	.word	0x3e169697
 8006d94:	469c3e00 	.word	0x469c3e00
 8006d98:	00000000 	.word	0x00000000
 8006d9c:	200009f8 	.word	0x200009f8
 8006da0:	3e124925 	.word	0x3e124925
 8006da4:	4089999a 	.word	0x4089999a
 8006da8:	411ccccd 	.word	0x411ccccd
 8006dac:	200009a4 	.word	0x200009a4
 8006db0:	3e1d89d9 	.word	0x3e1d89d9
 8006db4:	40733333 	.word	0x40733333
 8006db8:	20000a4c 	.word	0x20000a4c
 8006dbc:	3e19fc26 	.word	0x3e19fc26
 8006dc0:	415ccccd 	.word	0x415ccccd
 8006dc4:	200007e0 	.word	0x200007e0
 8006dc8:	20000c00 	.word	0x20000c00
 8006dcc:	3824bb36 	.word	0x3824bb36
 8006dd0:	20000c04 	.word	0x20000c04
 8006dd4:	20000bf4 	.word	0x20000bf4
 8006dd8:	3f803f71 	.word	0x3f803f71
 8006ddc:	20000bf0 	.word	0x20000bf0
 8006de0:	3a46f36a 	.word	0x3a46f36a
 8006de4:	20000bfc 	.word	0x20000bfc
 8006de8:	3f80192c 	.word	0x3f80192c
 8006dec:	20000bf8 	.word	0x20000bf8
 8006df0:	3a45938e 	.word	0x3a45938e

08006df4 <button>:

void button(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0

	if (BUTTON1 == 0)
 8006df8:	4b54      	ldr	r3, [pc, #336]	; (8006f4c <button+0x158>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d11d      	bne.n	8006e42 <button+0x4e>
	{
		LED2 = 0;
 8006e06:	4a52      	ldr	r2, [pc, #328]	; (8006f50 <button+0x15c>)
 8006e08:	7813      	ldrb	r3, [r2, #0]
 8006e0a:	f36f 1345 	bfc	r3, #5, #1
 8006e0e:	7013      	strb	r3, [r2, #0]
		mmode++;
 8006e10:	4b50      	ldr	r3, [pc, #320]	; (8006f54 <button+0x160>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	4b4e      	ldr	r3, [pc, #312]	; (8006f54 <button+0x160>)
 8006e1a:	701a      	strb	r2, [r3, #0]
		while (BUTTON1 == 0)
 8006e1c:	e004      	b.n	8006e28 <button+0x34>
		{
			LED2 = 0;
 8006e1e:	4a4c      	ldr	r2, [pc, #304]	; (8006f50 <button+0x15c>)
 8006e20:	7813      	ldrb	r3, [r2, #0]
 8006e22:	f36f 1345 	bfc	r3, #5, #1
 8006e26:	7013      	strb	r3, [r2, #0]
		while (BUTTON1 == 0)
 8006e28:	4b48      	ldr	r3, [pc, #288]	; (8006f4c <button+0x158>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	f003 0310 	and.w	r3, r3, #16
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0f3      	beq.n	8006e1e <button+0x2a>
		}
		LED2 = 1;
 8006e36:	4a46      	ldr	r2, [pc, #280]	; (8006f50 <button+0x15c>)
 8006e38:	7813      	ldrb	r3, [r2, #0]
 8006e3a:	f043 0320 	orr.w	r3, r3, #32
 8006e3e:	7013      	strb	r3, [r2, #0]
		default:
			mmode = 0;
			break;
		}
	}
}
 8006e40:	e081      	b.n	8006f46 <button+0x152>
	else if (BUTTON2 == 0)
 8006e42:	4b45      	ldr	r3, [pc, #276]	; (8006f58 <button+0x164>)
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d17a      	bne.n	8006f46 <button+0x152>
		while (BUTTON2 == 0)
 8006e50:	e004      	b.n	8006e5c <button+0x68>
			LED2 = 0;
 8006e52:	4a3f      	ldr	r2, [pc, #252]	; (8006f50 <button+0x15c>)
 8006e54:	7813      	ldrb	r3, [r2, #0]
 8006e56:	f36f 1345 	bfc	r3, #5, #1
 8006e5a:	7013      	strb	r3, [r2, #0]
		while (BUTTON2 == 0)
 8006e5c:	4b3e      	ldr	r3, [pc, #248]	; (8006f58 <button+0x164>)
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f3      	beq.n	8006e52 <button+0x5e>
		LED2 = 1;
 8006e6a:	4a39      	ldr	r2, [pc, #228]	; (8006f50 <button+0x15c>)
 8006e6c:	7813      	ldrb	r3, [r2, #0]
 8006e6e:	f043 0320 	orr.w	r3, r3, #32
 8006e72:	7013      	strb	r3, [r2, #0]
		switch (mmode)
 8006e74:	4b37      	ldr	r3, [pc, #220]	; (8006f54 <button+0x160>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d860      	bhi.n	8006f3e <button+0x14a>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <button+0x90>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006e99 	.word	0x08006e99
 8006e88:	08006ea5 	.word	0x08006ea5
 8006e8c:	08006edb 	.word	0x08006edb
 8006e90:	08006f11 	.word	0x08006f11
 8006e94:	08006f17 	.word	0x08006f17
			LED2 = 1;
 8006e98:	4a2d      	ldr	r2, [pc, #180]	; (8006f50 <button+0x15c>)
 8006e9a:	7813      	ldrb	r3, [r2, #0]
 8006e9c:	f043 0320 	orr.w	r3, r3, #32
 8006ea0:	7013      	strb	r3, [r2, #0]
			break;
 8006ea2:	e050      	b.n	8006f46 <button+0x152>
			ins.instruction = RNS_PDC;
 8006ea4:	4b2d      	ldr	r3, [pc, #180]	; (8006f5c <button+0x168>)
 8006ea6:	2206      	movs	r2, #6
 8006ea8:	701a      	strb	r2, [r3, #0]
			ins.ins_buffer[0].data = 4000;
 8006eaa:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <button+0x168>)
 8006eac:	4a2c      	ldr	r2, [pc, #176]	; (8006f60 <button+0x16c>)
 8006eae:	605a      	str	r2, [r3, #4]
			ins.ins_buffer[1].data = 4000;
 8006eb0:	4b2a      	ldr	r3, [pc, #168]	; (8006f5c <button+0x168>)
 8006eb2:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <button+0x16c>)
 8006eb4:	609a      	str	r2, [r3, #8]
			ins.ins_buffer[2].data = 4000;
 8006eb6:	4b29      	ldr	r3, [pc, #164]	; (8006f5c <button+0x168>)
 8006eb8:	4a29      	ldr	r2, [pc, #164]	; (8006f60 <button+0x16c>)
 8006eba:	60da      	str	r2, [r3, #12]
			ins.ins_buffer[3].data = 4000;
 8006ebc:	4b27      	ldr	r3, [pc, #156]	; (8006f5c <button+0x168>)
 8006ebe:	4a28      	ldr	r2, [pc, #160]	; (8006f60 <button+0x16c>)
 8006ec0:	611a      	str	r2, [r3, #16]
			APPApply(&ins);
 8006ec2:	4826      	ldr	r0, [pc, #152]	; (8006f5c <button+0x168>)
 8006ec4:	f7ff fa74 	bl	80063b0 <APPApply>
			APPStart(&ins);
 8006ec8:	4824      	ldr	r0, [pc, #144]	; (8006f5c <button+0x168>)
 8006eca:	f7ff fbeb 	bl	80066a4 <APPStart>
			sys.activate = 1;
 8006ece:	4a25      	ldr	r2, [pc, #148]	; (8006f64 <button+0x170>)
 8006ed0:	7813      	ldrb	r3, [r2, #0]
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	7013      	strb	r3, [r2, #0]
			break;
 8006ed8:	e035      	b.n	8006f46 <button+0x152>
			ins.instruction = RNS_PDC;
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <button+0x168>)
 8006edc:	2206      	movs	r2, #6
 8006ede:	701a      	strb	r2, [r3, #0]
			ins.ins_buffer[0].data = -4000;
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <button+0x168>)
 8006ee2:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <button+0x174>)
 8006ee4:	605a      	str	r2, [r3, #4]
			ins.ins_buffer[1].data = -4000;
 8006ee6:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <button+0x168>)
 8006ee8:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <button+0x174>)
 8006eea:	609a      	str	r2, [r3, #8]
			ins.ins_buffer[2].data = -4000;
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <button+0x168>)
 8006eee:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <button+0x174>)
 8006ef0:	60da      	str	r2, [r3, #12]
			ins.ins_buffer[3].data = -4000;
 8006ef2:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <button+0x168>)
 8006ef4:	4a1c      	ldr	r2, [pc, #112]	; (8006f68 <button+0x174>)
 8006ef6:	611a      	str	r2, [r3, #16]
			APPApply(&ins);
 8006ef8:	4818      	ldr	r0, [pc, #96]	; (8006f5c <button+0x168>)
 8006efa:	f7ff fa59 	bl	80063b0 <APPApply>
			APPStart(&ins);
 8006efe:	4817      	ldr	r0, [pc, #92]	; (8006f5c <button+0x168>)
 8006f00:	f7ff fbd0 	bl	80066a4 <APPStart>
			sys.activate = 1;
 8006f04:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <button+0x170>)
 8006f06:	7813      	ldrb	r3, [r2, #0]
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	7013      	strb	r3, [r2, #0]
			break;
 8006f0e:	e01a      	b.n	8006f46 <button+0x152>
			APPStop();
 8006f10:	f7ff fc9c 	bl	800684c <APPStop>
			break;
 8006f14:	e017      	b.n	8006f46 <button+0x152>
			while (BUTTON2 == 1)
 8006f16:	bf00      	nop
 8006f18:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <button+0x164>)
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f8      	bne.n	8006f18 <button+0x124>
			while (BUTTON2 == 0)
 8006f26:	bf00      	nop
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <button+0x164>)
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f8      	beq.n	8006f28 <button+0x134>
			mmode = 0;
 8006f36:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <button+0x160>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
			break;
 8006f3c:	e003      	b.n	8006f46 <button+0x152>
			mmode = 0;
 8006f3e:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <button+0x160>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
			break;
 8006f44:	bf00      	nop
}
 8006f46:	bf00      	nop
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40020810 	.word	0x40020810
 8006f50:	40020814 	.word	0x40020814
 8006f54:	20000864 	.word	0x20000864
 8006f58:	40021010 	.word	0x40021010
 8006f5c:	20000868 	.word	0x20000868
 8006f60:	457a0000 	.word	0x457a0000
 8006f64:	2000088c 	.word	0x2000088c
 8006f68:	c57a0000 	.word	0xc57a0000

08006f6c <SysTick_Handler>:
/********************************************/
/*					QEIS					*/
/********************************************/

void SysTick_Handler(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
}
 8006f70:	bf00      	nop
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void){
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0

	if (TIM1 -> CR1 == 129)
 8006f80:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <TIM1_UP_TIM10_IRQHandler+0x50>)
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b81      	cmp	r3, #129	; 0x81
 8006f88:	d109      	bne.n	8006f9e <TIM1_UP_TIM10_IRQHandler+0x22>
		BIOS_QEI1.signbit += 1;
 8006f8a:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 8006f8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3301      	adds	r3, #1
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b21a      	sxth	r2, r3
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 8006f9a:	805a      	strh	r2, [r3, #2]
 8006f9c:	e00d      	b.n	8006fba <TIM1_UP_TIM10_IRQHandler+0x3e>
	else if (TIM1 ->CR1 == 145)
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <TIM1_UP_TIM10_IRQHandler+0x50>)
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b91      	cmp	r3, #145	; 0x91
 8006fa6:	d108      	bne.n	8006fba <TIM1_UP_TIM10_IRQHandler+0x3e>
		BIOS_QEI1.signbit -= 1;
 8006fa8:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 8006faa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 8006fb8:	805a      	strh	r2, [r3, #2]

	TIM1 -> SR = 0;
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <TIM1_UP_TIM10_IRQHandler+0x50>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	821a      	strh	r2, [r3, #16]
	QEIDelay(200);
 8006fc0:	20c8      	movs	r0, #200	; 0xc8
 8006fc2:	f7fc fa9d 	bl	8003500 <QEIDelay>


}
 8006fc6:	bf00      	nop
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	20001aa0 	.word	0x20001aa0

08006fd4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0


	if (TIM2 -> CR1 == 129)
 8006fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b81      	cmp	r3, #129	; 0x81
 8006fe2:	d109      	bne.n	8006ff8 <TIM2_IRQHandler+0x24>
		BIOS_QEI2.signbit += 1;
 8006fe4:	4b10      	ldr	r3, [pc, #64]	; (8007028 <TIM2_IRQHandler+0x54>)
 8006fe6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3301      	adds	r3, #1
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	b21a      	sxth	r2, r3
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <TIM2_IRQHandler+0x54>)
 8006ff4:	805a      	strh	r2, [r3, #2]
 8006ff6:	e00e      	b.n	8007016 <TIM2_IRQHandler+0x42>
	else if (TIM2 ->CR1 == 145)
 8006ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b91      	cmp	r3, #145	; 0x91
 8007002:	d108      	bne.n	8007016 <TIM2_IRQHandler+0x42>
		BIOS_QEI2.signbit -= 1;
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <TIM2_IRQHandler+0x54>)
 8007006:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29b      	uxth	r3, r3
 8007010:	b21a      	sxth	r2, r3
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <TIM2_IRQHandler+0x54>)
 8007014:	805a      	strh	r2, [r3, #2]
	TIM2 -> SR = 0;
 8007016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800701a:	2200      	movs	r2, #0
 800701c:	821a      	strh	r2, [r3, #16]
	QEIDelay(100);
 800701e:	2064      	movs	r0, #100	; 0x64
 8007020:	f7fc fa6e 	bl	8003500 <QEIDelay>



}
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20001aa4 	.word	0x20001aa4

0800702c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0


	if (TIM3 -> CR1 == 129)
 8007030:	4b12      	ldr	r3, [pc, #72]	; (800707c <TIM3_IRQHandler+0x50>)
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b81      	cmp	r3, #129	; 0x81
 8007038:	d109      	bne.n	800704e <TIM3_IRQHandler+0x22>
		BIOS_QEI3.signbit += 1;
 800703a:	4b11      	ldr	r3, [pc, #68]	; (8007080 <TIM3_IRQHandler+0x54>)
 800703c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007040:	b29b      	uxth	r3, r3
 8007042:	3301      	adds	r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	b21a      	sxth	r2, r3
 8007048:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <TIM3_IRQHandler+0x54>)
 800704a:	805a      	strh	r2, [r3, #2]
 800704c:	e00d      	b.n	800706a <TIM3_IRQHandler+0x3e>
	else if (TIM3 ->CR1 == 145)
 800704e:	4b0b      	ldr	r3, [pc, #44]	; (800707c <TIM3_IRQHandler+0x50>)
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b91      	cmp	r3, #145	; 0x91
 8007056:	d108      	bne.n	800706a <TIM3_IRQHandler+0x3e>
		BIOS_QEI3.signbit -= 1;
 8007058:	4b09      	ldr	r3, [pc, #36]	; (8007080 <TIM3_IRQHandler+0x54>)
 800705a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	b21a      	sxth	r2, r3
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <TIM3_IRQHandler+0x54>)
 8007068:	805a      	strh	r2, [r3, #2]

	TIM3 -> SR = 0;
 800706a:	4b04      	ldr	r3, [pc, #16]	; (800707c <TIM3_IRQHandler+0x50>)
 800706c:	2200      	movs	r2, #0
 800706e:	821a      	strh	r2, [r3, #16]
	QEIDelay(100);
 8007070:	2064      	movs	r0, #100	; 0x64
 8007072:	f7fc fa45 	bl	8003500 <QEIDelay>


}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40000400 	.word	0x40000400
 8007080:	20001a9c 	.word	0x20001a9c

08007084 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8007084:	b580      	push	{r7, lr}
 8007086:	af00      	add	r7, sp, #0


	if (TIM4 -> CR1 == 129)
 8007088:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <TIM4_IRQHandler+0x50>)
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b81      	cmp	r3, #129	; 0x81
 8007090:	d109      	bne.n	80070a6 <TIM4_IRQHandler+0x22>
		BIOS_QEI4.signbit += 1;
 8007092:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <TIM4_IRQHandler+0x54>)
 8007094:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007098:	b29b      	uxth	r3, r3
 800709a:	3301      	adds	r3, #1
 800709c:	b29b      	uxth	r3, r3
 800709e:	b21a      	sxth	r2, r3
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <TIM4_IRQHandler+0x54>)
 80070a2:	805a      	strh	r2, [r3, #2]
 80070a4:	e00d      	b.n	80070c2 <TIM4_IRQHandler+0x3e>
	else if (TIM4 ->CR1 == 145)
 80070a6:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <TIM4_IRQHandler+0x50>)
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2b91      	cmp	r3, #145	; 0x91
 80070ae:	d108      	bne.n	80070c2 <TIM4_IRQHandler+0x3e>
		BIOS_QEI4.signbit -= 1;
 80070b0:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <TIM4_IRQHandler+0x54>)
 80070b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	b21a      	sxth	r2, r3
 80070be:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <TIM4_IRQHandler+0x54>)
 80070c0:	805a      	strh	r2, [r3, #2]

	TIM4 -> SR = 0;
 80070c2:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <TIM4_IRQHandler+0x50>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	821a      	strh	r2, [r3, #16]
	QEIDelay(100);
 80070c8:	2064      	movs	r0, #100	; 0x64
 80070ca:	f7fc fa19 	bl	8003500 <QEIDelay>


}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	40000800 	.word	0x40000800
 80070d8:	20001ac4 	.word	0x20001ac4

080070dc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0


	if (TIM5 -> CR1 == 129)
 80070e0:	4b12      	ldr	r3, [pc, #72]	; (800712c <TIM5_IRQHandler+0x50>)
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b81      	cmp	r3, #129	; 0x81
 80070e8:	d109      	bne.n	80070fe <TIM5_IRQHandler+0x22>
		BIOS_QEI5.signbit += 1;
 80070ea:	4b11      	ldr	r3, [pc, #68]	; (8007130 <TIM5_IRQHandler+0x54>)
 80070ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	3301      	adds	r3, #1
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	b21a      	sxth	r2, r3
 80070f8:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <TIM5_IRQHandler+0x54>)
 80070fa:	805a      	strh	r2, [r3, #2]
 80070fc:	e00d      	b.n	800711a <TIM5_IRQHandler+0x3e>
	else if (TIM5 ->CR1 == 145)
 80070fe:	4b0b      	ldr	r3, [pc, #44]	; (800712c <TIM5_IRQHandler+0x50>)
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b91      	cmp	r3, #145	; 0x91
 8007106:	d108      	bne.n	800711a <TIM5_IRQHandler+0x3e>
		BIOS_QEI5.signbit -= 1;
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <TIM5_IRQHandler+0x54>)
 800710a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29b      	uxth	r3, r3
 8007114:	b21a      	sxth	r2, r3
 8007116:	4b06      	ldr	r3, [pc, #24]	; (8007130 <TIM5_IRQHandler+0x54>)
 8007118:	805a      	strh	r2, [r3, #2]

	TIM5 -> SR = 0;
 800711a:	4b04      	ldr	r3, [pc, #16]	; (800712c <TIM5_IRQHandler+0x50>)
 800711c:	2200      	movs	r2, #0
 800711e:	821a      	strh	r2, [r3, #16]
	QEIDelay(100);
 8007120:	2064      	movs	r0, #100	; 0x64
 8007122:	f7fc f9ed 	bl	8003500 <QEIDelay>

}
 8007126:	bf00      	nop
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40000c00 	.word	0x40000c00
 8007130:	20001ac0 	.word	0x20001ac0

08007134 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void){
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0


	if (TIM8 -> CR1 == 129)
 8007138:	4b12      	ldr	r3, [pc, #72]	; (8007184 <TIM8_UP_TIM13_IRQHandler+0x50>)
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b81      	cmp	r3, #129	; 0x81
 8007140:	d109      	bne.n	8007156 <TIM8_UP_TIM13_IRQHandler+0x22>
		BIOS_QEI6.signbit += 1;
 8007142:	4b11      	ldr	r3, [pc, #68]	; (8007188 <TIM8_UP_TIM13_IRQHandler+0x54>)
 8007144:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007148:	b29b      	uxth	r3, r3
 800714a:	3301      	adds	r3, #1
 800714c:	b29b      	uxth	r3, r3
 800714e:	b21a      	sxth	r2, r3
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <TIM8_UP_TIM13_IRQHandler+0x54>)
 8007152:	805a      	strh	r2, [r3, #2]
 8007154:	e00d      	b.n	8007172 <TIM8_UP_TIM13_IRQHandler+0x3e>
	else if (TIM8 ->CR1 == 145)
 8007156:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <TIM8_UP_TIM13_IRQHandler+0x50>)
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b91      	cmp	r3, #145	; 0x91
 800715e:	d108      	bne.n	8007172 <TIM8_UP_TIM13_IRQHandler+0x3e>
		BIOS_QEI6.signbit -= 1;
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <TIM8_UP_TIM13_IRQHandler+0x54>)
 8007162:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29b      	uxth	r3, r3
 800716c:	b21a      	sxth	r2, r3
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <TIM8_UP_TIM13_IRQHandler+0x54>)
 8007170:	805a      	strh	r2, [r3, #2]

	TIM8 -> SR = 0;
 8007172:	4b04      	ldr	r3, [pc, #16]	; (8007184 <TIM8_UP_TIM13_IRQHandler+0x50>)
 8007174:	2200      	movs	r2, #0
 8007176:	821a      	strh	r2, [r3, #16]
	QEIDelay(200);
 8007178:	20c8      	movs	r0, #200	; 0xc8
 800717a:	f7fc f9c1 	bl	8003500 <QEIDelay>


}
 800717e:	bf00      	nop
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40010400 	.word	0x40010400
 8007188:	20001ac8 	.word	0x20001ac8

0800718c <TIM7_IRQHandler>:
/********************************************/
/*			TIMERS INTERRUPT				*/
/********************************************/


void TIM7_IRQHandler(void){
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET){
 8007190:	2101      	movs	r1, #1
 8007192:	4808      	ldr	r0, [pc, #32]	; (80071b4 <TIM7_IRQHandler+0x28>)
 8007194:	f7fa fb1c 	bl	80017d0 <TIM_GetITStatus>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <TIM7_IRQHandler+0x22>
		SHIFTREGShift(&SR);
 800719e:	4806      	ldr	r0, [pc, #24]	; (80071b8 <TIM7_IRQHandler+0x2c>)
 80071a0:	f7fd fc07 	bl	80049b2 <SHIFTREGShift>
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80071a4:	2101      	movs	r1, #1
 80071a6:	4803      	ldr	r0, [pc, #12]	; (80071b4 <TIM7_IRQHandler+0x28>)
 80071a8:	f7fa fb3c 	bl	8001824 <TIM_ClearITPendingBit>
	}

	return;
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
}
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	40001400 	.word	0x40001400
 80071b8:	2000080c 	.word	0x2000080c

080071bc <TIM8_TRG_COM_TIM14_IRQHandler>:




void TIM8_TRG_COM_TIM14_IRQHandler(void){
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0


	if (TIM_GetITStatus(TIM14, TIM_IT_Update) != RESET){
 80071c0:	2101      	movs	r1, #1
 80071c2:	4806      	ldr	r0, [pc, #24]	; (80071dc <TIM8_TRG_COM_TIM14_IRQHandler+0x20>)
 80071c4:	f7fa fb04 	bl	80017d0 <TIM_GetITStatus>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c>
	  TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
 80071ce:	2101      	movs	r1, #1
 80071d0:	4802      	ldr	r0, [pc, #8]	; (80071dc <TIM8_TRG_COM_TIM14_IRQHandler+0x20>)
 80071d2:	f7fa fb27 	bl	8001824 <TIM_ClearITPendingBit>

	}

	return;
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
}
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40002000 	.word	0x40002000

080071e0 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af02      	add	r7, sp, #8
	if(USART_GetITStatus(UART5,USART_IT_RXNE)!=RESET){
 80071e6:	f240 5125 	movw	r1, #1317	; 0x525
 80071ea:	4841      	ldr	r0, [pc, #260]	; (80072f0 <UART5_IRQHandler+0x110>)
 80071ec:	f7fa fcd8 	bl	8001ba0 <USART_GetITStatus>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d073      	beq.n	80072de <UART5_IRQHandler+0xfe>
		rcvdata = ReadUART(UART5);
 80071f6:	483e      	ldr	r0, [pc, #248]	; (80072f0 <UART5_IRQHandler+0x110>)
 80071f8:	f7fe f8da 	bl	80053b0 <ReadUART>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
 8007200:	4b3c      	ldr	r3, [pc, #240]	; (80072f4 <UART5_IRQHandler+0x114>)
 8007202:	701a      	strb	r2, [r3, #0]
		if(rcvdata == '\n'){
 8007204:	4b3b      	ldr	r3, [pc, #236]	; (80072f4 <UART5_IRQHandler+0x114>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b0a      	cmp	r3, #10
 800720a:	d151      	bne.n	80072b0 <UART5_IRQHandler+0xd0>
			for(int i = u5rx_count; i < 25; i++)
 800720c:	4b3a      	ldr	r3, [pc, #232]	; (80072f8 <UART5_IRQHandler+0x118>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	e007      	b.n	8007224 <UART5_IRQHandler+0x44>
				c[i] = '\0';
 8007214:	4a39      	ldr	r2, [pc, #228]	; (80072fc <UART5_IRQHandler+0x11c>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4413      	add	r3, r2
 800721a:	2200      	movs	r2, #0
 800721c:	701a      	strb	r2, [r3, #0]
			for(int i = u5rx_count; i < 25; i++)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3301      	adds	r3, #1
 8007222:	607b      	str	r3, [r7, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b18      	cmp	r3, #24
 8007228:	ddf4      	ble.n	8007214 <UART5_IRQHandler+0x34>
			u5rx_count = 0;
 800722a:	4b33      	ldr	r3, [pc, #204]	; (80072f8 <UART5_IRQHandler+0x118>)
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
			sscanf(c, "%u%d%u", &header, &yaw, &lastbyte);
 8007230:	4b33      	ldr	r3, [pc, #204]	; (8007300 <UART5_IRQHandler+0x120>)
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4b33      	ldr	r3, [pc, #204]	; (8007304 <UART5_IRQHandler+0x124>)
 8007236:	4a34      	ldr	r2, [pc, #208]	; (8007308 <UART5_IRQHandler+0x128>)
 8007238:	4934      	ldr	r1, [pc, #208]	; (800730c <UART5_IRQHandler+0x12c>)
 800723a:	4830      	ldr	r0, [pc, #192]	; (80072fc <UART5_IRQHandler+0x11c>)
 800723c:	f007 fc68 	bl	800eb10 <siscanf>
			checksum = header + yaw + lastbyte;
 8007240:	4b31      	ldr	r3, [pc, #196]	; (8007308 <UART5_IRQHandler+0x128>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <UART5_IRQHandler+0x124>)
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	441a      	add	r2, r3
 800724a:	4b2d      	ldr	r3, [pc, #180]	; (8007300 <UART5_IRQHandler+0x120>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4413      	add	r3, r2
 8007250:	4a2f      	ldr	r2, [pc, #188]	; (8007310 <UART5_IRQHandler+0x130>)
 8007252:	6013      	str	r3, [r2, #0]
			if(!(checksum & 0xFF)){
 8007254:	4b2e      	ldr	r3, [pc, #184]	; (8007310 <UART5_IRQHandler+0x130>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d139      	bne.n	80072d2 <UART5_IRQHandler+0xf2>
				fyaw = yaw/100.0+180.0;
 800725e:	4b29      	ldr	r3, [pc, #164]	; (8007304 <UART5_IRQHandler+0x124>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7f9 f95e 	bl	8000524 <__aeabi_i2d>
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	4b29      	ldr	r3, [pc, #164]	; (8007314 <UART5_IRQHandler+0x134>)
 800726e:	f7f9 fae9 	bl	8000844 <__aeabi_ddiv>
 8007272:	4603      	mov	r3, r0
 8007274:	460c      	mov	r4, r1
 8007276:	4618      	mov	r0, r3
 8007278:	4621      	mov	r1, r4
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	4b26      	ldr	r3, [pc, #152]	; (8007318 <UART5_IRQHandler+0x138>)
 8007280:	f7f9 f804 	bl	800028c <__adddf3>
 8007284:	4603      	mov	r3, r0
 8007286:	460c      	mov	r4, r1
 8007288:	4618      	mov	r0, r3
 800728a:	4621      	mov	r1, r4
 800728c:	f7f9 fc88 	bl	8000ba0 <__aeabi_d2f>
 8007290:	4602      	mov	r2, r0
 8007292:	4b22      	ldr	r3, [pc, #136]	; (800731c <UART5_IRQHandler+0x13c>)
 8007294:	601a      	str	r2, [r3, #0]
				LED3=!LED3;
 8007296:	4a22      	ldr	r2, [pc, #136]	; (8007320 <UART5_IRQHandler+0x140>)
 8007298:	4b21      	ldr	r3, [pc, #132]	; (8007320 <UART5_IRQHandler+0x140>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	b25b      	sxtb	r3, r3
 800729e:	43db      	mvns	r3, r3
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	09db      	lsrs	r3, r3, #7
 80072a4:	b2d9      	uxtb	r1, r3
 80072a6:	7813      	ldrb	r3, [r2, #0]
 80072a8:	f361 13c7 	bfi	r3, r1, #7, #1
 80072ac:	7013      	strb	r3, [r2, #0]
 80072ae:	e010      	b.n	80072d2 <UART5_IRQHandler+0xf2>
			}
		}else if(u5rx_count > 25){
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <UART5_IRQHandler+0x118>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b19      	cmp	r3, #25
 80072b6:	d903      	bls.n	80072c0 <UART5_IRQHandler+0xe0>
			u5rx_count = 0;
 80072b8:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <UART5_IRQHandler+0x118>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e008      	b.n	80072d2 <UART5_IRQHandler+0xf2>
		}else{
			c[u5rx_count++] = rcvdata;
 80072c0:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <UART5_IRQHandler+0x118>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	490c      	ldr	r1, [pc, #48]	; (80072f8 <UART5_IRQHandler+0x118>)
 80072c8:	600a      	str	r2, [r1, #0]
 80072ca:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <UART5_IRQHandler+0x114>)
 80072cc:	7811      	ldrb	r1, [r2, #0]
 80072ce:	4a0b      	ldr	r2, [pc, #44]	; (80072fc <UART5_IRQHandler+0x11c>)
 80072d0:	54d1      	strb	r1, [r2, r3]
		}
		USART_ClearITPendingBit(UART5,USART_IT_RXNE);
 80072d2:	f240 5125 	movw	r1, #1317	; 0x525
 80072d6:	4806      	ldr	r0, [pc, #24]	; (80072f0 <UART5_IRQHandler+0x110>)
 80072d8:	f7fa fcbd 	bl	8001c56 <USART_ClearITPendingBit>
	} else {
		USART_ClearITPendingBit(UART5,USART_IT_RXNE);
	}
}
 80072dc:	e004      	b.n	80072e8 <UART5_IRQHandler+0x108>
		USART_ClearITPendingBit(UART5,USART_IT_RXNE);
 80072de:	f240 5125 	movw	r1, #1317	; 0x525
 80072e2:	4803      	ldr	r0, [pc, #12]	; (80072f0 <UART5_IRQHandler+0x110>)
 80072e4:	f7fa fcb7 	bl	8001c56 <USART_ClearITPendingBit>
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd90      	pop	{r4, r7, pc}
 80072f0:	40005000 	.word	0x40005000
 80072f4:	20000cec 	.word	0x20000cec
 80072f8:	20000cd8 	.word	0x20000cd8
 80072fc:	20000cf0 	.word	0x20000cf0
 8007300:	20000ce0 	.word	0x20000ce0
 8007304:	20000ce8 	.word	0x20000ce8
 8007308:	20000cdc 	.word	0x20000cdc
 800730c:	0800f6f0 	.word	0x0800f6f0
 8007310:	20000ce4 	.word	0x20000ce4
 8007314:	40590000 	.word	0x40590000
 8007318:	40668000 	.word	0x40668000
 800731c:	20000c5c 	.word	0x20000c5c
 8007320:	40021014 	.word	0x40021014

08007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8007330:	463b      	mov	r3, r7
 8007332:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	15db      	asrs	r3, r3, #23
 800733a:	b2db      	uxtb	r3, r3
 800733c:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800734a:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	607a      	str	r2, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	0152      	lsls	r2, r2, #5
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	10d2      	asrs	r2, r2, #3
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	12d2      	asrs	r2, r2, #11
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	0112      	lsls	r2, r2, #4
 80073a4:	b251      	sxtb	r1, r2
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	14d2      	asrs	r2, r2, #19
 80073aa:	b252      	sxtb	r2, r2
 80073ac:	f002 020f 	and.w	r2, r2, #15
 80073b0:	b252      	sxtb	r2, r2
 80073b2:	430a      	orrs	r2, r1
 80073b4:	b252      	sxtb	r2, r2
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	1112      	asrs	r2, r2, #4
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 80073ce:	edd7 7a00 	vldr	s15, [r7]
 80073d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	d508      	bpl.n	80073ee <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3b01      	subs	r3, #1
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	3a01      	subs	r2, #1
 80073e4:	7812      	ldrb	r2, [r2, #0]
 80073e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 80073ee:	2308      	movs	r3, #8
  }
 80073f0:	4618      	mov	r0, r3
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3303      	adds	r3, #3
 800740e:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	f003 0207 	and.w	r2, r3, #7
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	431a      	orrs	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	02db      	lsls	r3, r3, #11
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	431a      	orrs	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	04db      	lsls	r3, r3, #19
 8007454:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8007458:	431a      	orrs	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	091b      	lsrs	r3, r3, #4
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	4313      	orrs	r3, r2
 800747c:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800748e:	05db      	lsls	r3, r3, #23
 8007490:	431a      	orrs	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	061b      	lsls	r3, r3, #24
 80074a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	431a      	orrs	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	601a      	str	r2, [r3, #0]

    return 8;
 80074ae:	2308      	movs	r3, #8
  }
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <_ZN3ros3MsgC1Ev>:
class Msg
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <_ZN3ros3MsgC1Ev+0x1c>)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	0800fef4 	.word	0x0800fef4

080074dc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff ffe8 	bl	80074bc <_ZN3ros3MsgC1Ev>
 80074ec:	4a06      	ldr	r2, [pc, #24]	; (8007508 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	711a      	strb	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a04      	ldr	r2, [pc, #16]	; (800750c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80074fc:	609a      	str	r2, [r3, #8]
    {
    }
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	0800fedc 	.word	0x0800fedc
 800750c:	0800f6f8 	.word	0x0800f6f8

08007510 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	4413      	add	r3, r2
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7912      	ldrb	r2, [r2, #4]
 8007528:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3301      	adds	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	4618      	mov	r0, r3
 8007536:	f7f8 fe4b 	bl	80001d0 <strlen>
 800753a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	4413      	add	r3, r2
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	4618      	mov	r0, r3
 8007546:	f003 f815 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3304      	adds	r3, #4
 800754e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	18d0      	adds	r0, r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4619      	mov	r1, r3
 800755e:	f007 fa7f 	bl	800ea60 <memcpy>
      offset += length_msg;
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4413      	add	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
      return offset;
 800756a:	68fb      	ldr	r3, [r7, #12]
    }
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	4413      	add	r3, r2
 8007588:	781a      	ldrb	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	3301      	adds	r3, #1
 8007592:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	441a      	add	r2, r3
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4611      	mov	r1, r2
 80075a0:	4618      	mov	r0, r3
 80075a2:	f003 f805 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3304      	adds	r3, #4
 80075aa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	441a      	add	r2, r3
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d90c      	bls.n	80075d6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	3b01      	subs	r3, #1
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	4413      	add	r3, r2
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	440a      	add	r2, r1
 80075ca:	7812      	ldrb	r2, [r2, #0]
 80075cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	3301      	adds	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	e7ec      	b.n	80075b0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	3b01      	subs	r3, #1
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	4413      	add	r3, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	441a      	add	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
     return offset;
 80075fa:	693b      	ldr	r3, [r7, #16]
    }
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	4b03      	ldr	r3, [pc, #12]	; (800761c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	0800f6fc 	.word	0x0800f6fc

08007620 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	4b03      	ldr	r3, [pc, #12]	; (8007638 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	0800f710 	.word	0x0800f710

0800763c <_ZN14rosserial_msgs19RequestParamRequestC1Ev>:
  {
    public:
      typedef const char* _name_type;
      _name_type name;

    RequestParamRequest():
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
      name("")
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ff38 	bl	80074bc <_ZN3ros3MsgC1Ev>
 800764c:	4a05      	ldr	r2, [pc, #20]	; (8007664 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x28>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a04      	ldr	r2, [pc, #16]	; (8007668 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x2c>)
 8007656:	605a      	str	r2, [r3, #4]
    {
    }
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	0800fec4 	.word	0x0800fec4
 8007668:	0800f6f8 	.word	0x0800f6f8

0800766c <_ZNK14rosserial_msgs19RequestParamRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
      uint32_t length_name = strlen(this->name);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	4618      	mov	r0, r3
 8007680:	f7f8 fda6 	bl	80001d0 <strlen>
 8007684:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_name);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	4413      	add	r3, r2
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	4618      	mov	r0, r3
 8007690:	f002 ff70 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3304      	adds	r3, #4
 8007698:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->name, length_name);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	18d0      	adds	r0, r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	4619      	mov	r1, r3
 80076a8:	f007 f9da 	bl	800ea60 <memcpy>
      offset += length_name;
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4413      	add	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
      return offset;
 80076b4:	68fb      	ldr	r3, [r7, #12]
    }
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80076be:	b580      	push	{r7, lr}
 80076c0:	b086      	sub	sp, #24
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
      uint32_t length_name;
      arrToVar(length_name, (inbuffer + offset));
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	441a      	add	r2, r3
 80076d2:	f107 030c 	add.w	r3, r7, #12
 80076d6:	4611      	mov	r1, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f002 ff69 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	3304      	adds	r3, #4
 80076e2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	441a      	add	r2, r3
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d90c      	bls.n	800770e <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	4413      	add	r3, r2
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	440a      	add	r2, r1
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	3301      	adds	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e7ec      	b.n	80076e8 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_name-1]=0;
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	3b01      	subs	r3, #1
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4413      	add	r3, r2
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
      this->name = (char *)(inbuffer + offset-1);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	3b01      	subs	r3, #1
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	441a      	add	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	605a      	str	r2, [r3, #4]
      offset += length_name;
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
     return offset;
 8007732:	693b      	ldr	r3, [r7, #16]
    }
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	4b03      	ldr	r3, [pc, #12]	; (8007754 <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv+0x18>)
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	0800fcb0 	.word	0x0800fcb0

08007758 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	4b03      	ldr	r3, [pc, #12]	; (8007770 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev+0x18>)
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	0800f734 	.word	0x0800f734

08007774 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fe9c 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8007784:	4a0c      	ldr	r2, [pc, #48]	; (80077b8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	605a      	str	r2, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	60da      	str	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	611a      	str	r2, [r3, #16]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	619a      	str	r2, [r3, #24]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	61da      	str	r2, [r3, #28]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	0800feac 	.word	0x0800feac

080077bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	; 0x28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	4413      	add	r3, r2
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6852      	ldr	r2, [r2, #4]
 80077d4:	b2d2      	uxtb	r2, r2
 80077d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	3301      	adds	r3, #1
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	4413      	add	r3, r2
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6852      	ldr	r2, [r2, #4]
 80077e4:	0a12      	lsrs	r2, r2, #8
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	3302      	adds	r3, #2
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	4413      	add	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6852      	ldr	r2, [r2, #4]
 80077f6:	0c12      	lsrs	r2, r2, #16
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	3303      	adds	r3, #3
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	4413      	add	r3, r2
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6852      	ldr	r2, [r2, #4]
 8007808:	0e12      	lsrs	r2, r2, #24
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	3304      	adds	r3, #4
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8007814:	2300      	movs	r3, #0
 8007816:	623b      	str	r3, [r7, #32]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	429a      	cmp	r2, r3
 8007820:	d92b      	bls.n	800787a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	4413      	add	r3, r2
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	3301      	adds	r3, #1
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	4413      	add	r3, r2
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	0a12      	lsrs	r2, r2, #8
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	3302      	adds	r3, #2
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	4413      	add	r3, r2
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	0c12      	lsrs	r2, r2, #16
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	3303      	adds	r3, #3
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4413      	add	r3, r2
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	0e12      	lsrs	r2, r2, #24
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	3304      	adds	r3, #4
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	3301      	adds	r3, #1
 8007876:	623b      	str	r3, [r7, #32]
 8007878:	e7ce      	b.n	8007818 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	4413      	add	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6912      	ldr	r2, [r2, #16]
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	3301      	adds	r3, #1
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	4413      	add	r3, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6912      	ldr	r2, [r2, #16]
 8007894:	0a12      	lsrs	r2, r2, #8
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	3302      	adds	r3, #2
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4413      	add	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6912      	ldr	r2, [r2, #16]
 80078a6:	0c12      	lsrs	r2, r2, #16
 80078a8:	b2d2      	uxtb	r2, r2
 80078aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	3303      	adds	r3, #3
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	4413      	add	r3, r2
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6912      	ldr	r2, [r2, #16]
 80078b8:	0e12      	lsrs	r2, r2, #24
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	3304      	adds	r3, #4
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80078c4:	2300      	movs	r3, #0
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d92b      	bls.n	800792a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4413      	add	r3, r2
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	4413      	add	r3, r2
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	0a12      	lsrs	r2, r2, #8
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	3302      	adds	r3, #2
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	4413      	add	r3, r2
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	0c12      	lsrs	r2, r2, #16
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	3303      	adds	r3, #3
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	4413      	add	r3, r2
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	0e12      	lsrs	r2, r2, #24
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	3304      	adds	r3, #4
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	3301      	adds	r3, #1
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	e7ce      	b.n	80078c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	4413      	add	r3, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	69d2      	ldr	r2, [r2, #28]
 8007934:	b2d2      	uxtb	r2, r2
 8007936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	3301      	adds	r3, #1
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	4413      	add	r3, r2
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	69d2      	ldr	r2, [r2, #28]
 8007944:	0a12      	lsrs	r2, r2, #8
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	3302      	adds	r3, #2
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4413      	add	r3, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	69d2      	ldr	r2, [r2, #28]
 8007956:	0c12      	lsrs	r2, r2, #16
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	3303      	adds	r3, #3
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	4413      	add	r3, r2
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	69d2      	ldr	r2, [r2, #28]
 8007968:	0e12      	lsrs	r2, r2, #24
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	3304      	adds	r3, #4
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8007974:	2300      	movs	r3, #0
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69da      	ldr	r2, [r3, #28]
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	429a      	cmp	r2, r3
 8007980:	d928      	bls.n	80079d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7f8 fc1e 	bl	80001d0 <strlen>
 8007994:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	4413      	add	r3, r2
 800799c:	6979      	ldr	r1, [r7, #20]
 800799e:	4618      	mov	r0, r3
 80079a0:	f002 fde8 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	3304      	adds	r3, #4
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	18d0      	adds	r0, r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4619      	mov	r1, r3
 80079c0:	f007 f84e 	bl	800ea60 <memcpy>
      offset += length_stringsi;
 80079c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	4413      	add	r3, r2
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	3301      	adds	r3, #1
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	e7d1      	b.n	8007978 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80079d6:	4618      	mov	r0, r3
 80079d8:	3728      	adds	r7, #40	; 0x28
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80079de:	b580      	push	{r7, lr}
 80079e0:	b08e      	sub	sp, #56	; 0x38
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80079ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4413      	add	r3, r2
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	3301      	adds	r3, #1
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	4413      	add	r3, r2
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	6a3a      	ldr	r2, [r7, #32]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0a:	3302      	adds	r3, #2
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	4413      	add	r3, r2
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	041b      	lsls	r3, r3, #16
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1c:	3303      	adds	r3, #3
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	4413      	add	r3, r2
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	061b      	lsls	r3, r3, #24
 8007a26:	6a3a      	ldr	r2, [r7, #32]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	3304      	adds	r3, #4
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d20a      	bcs.n	8007a52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	f007 f816 	bl	800ea78 <realloc>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8007a58:	2300      	movs	r3, #0
 8007a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d936      	bls.n	8007ad4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	440a      	add	r2, r1
 8007a72:	7812      	ldrb	r2, [r2, #0]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	440b      	add	r3, r1
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8e:	3302      	adds	r3, #2
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	440b      	add	r3, r1
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	041b      	lsls	r3, r3, #16
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	3303      	adds	r3, #3
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	440b      	add	r3, r1
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	061b      	lsls	r3, r3, #24
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	3208      	adds	r2, #8
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	3301      	adds	r3, #1
 8007ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ad2:	e7c3      	b.n	8007a5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4413      	add	r3, r2
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	3302      	adds	r3, #2
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	4413      	add	r3, r2
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	3303      	adds	r3, #3
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	4413      	add	r3, r2
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	061b      	lsls	r3, r3, #24
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8007b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b16:	3304      	adds	r3, #4
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d20a      	bcs.n	8007b3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699a      	ldr	r2, [r3, #24]
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f006 ffa2 	bl	800ea78 <realloc>
 8007b34:	4602      	mov	r2, r0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8007b40:	2300      	movs	r3, #0
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d936      	bls.n	8007bbc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	440a      	add	r2, r1
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	3301      	adds	r3, #1
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	440b      	add	r3, r1
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b76:	3302      	adds	r3, #2
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	440b      	add	r3, r1
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	041b      	lsls	r3, r3, #16
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	3303      	adds	r3, #3
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	440b      	add	r3, r1
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	061b      	lsls	r3, r3, #24
 8007b92:	4313      	orrs	r3, r2
 8007b94:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	3214      	adds	r2, #20
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bba:	e7c3      	b.n	8007b44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	3301      	adds	r3, #1
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4413      	add	r3, r2
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	021b      	lsls	r3, r3, #8
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	3302      	adds	r3, #2
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	4413      	add	r3, r2
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	041b      	lsls	r3, r3, #16
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bec:	3303      	adds	r3, #3
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	061b      	lsls	r3, r3, #24
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	3304      	adds	r3, #4
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69da      	ldr	r2, [r3, #28]
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d20a      	bcs.n	8007c22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f006 ff2e 	bl	800ea78 <realloc>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69da      	ldr	r2, [r3, #28]
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d93f      	bls.n	8007cb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8007c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	441a      	add	r2, r3
 8007c3c:	f107 030c 	add.w	r3, r7, #12
 8007c40:	4611      	mov	r1, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f002 fcb4 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
 8007c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	441a      	add	r2, r3
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d90c      	bls.n	8007c78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	3b01      	subs	r3, #1
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4413      	add	r3, r2
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6a:	440a      	add	r2, r1
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	3301      	adds	r3, #1
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
 8007c76:	e7ec      	b.n	8007c52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8007c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	4413      	add	r3, r2
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8007c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	441a      	add	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8007c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	3220      	adds	r2, #32
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cb4:	e7ba      	b.n	8007c2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3738      	adds	r7, #56	; 0x38
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	4b03      	ldr	r3, [pc, #12]	; (8007cd8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	0800fcb0 	.word	0x0800fcb0

08007cdc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	0800f758 	.word	0x0800f758

08007cf8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fbda 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8007d08:	4a0b      	ldr	r2, [pc, #44]	; (8007d38 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	809a      	strh	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8007d18:	609a      	str	r2, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a07      	ldr	r2, [pc, #28]	; (8007d3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8007d1e:	60da      	str	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a06      	ldr	r2, [pc, #24]	; (8007d3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8007d24:	611a      	str	r2, [r3, #16]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	615a      	str	r2, [r3, #20]
    {
    }
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	0800fe94 	.word	0x0800fe94
 8007d3c:	0800f6f8 	.word	0x0800f6f8

08007d40 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	4413      	add	r3, r2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	8892      	ldrh	r2, [r2, #4]
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	4413      	add	r3, r2
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	8892      	ldrh	r2, [r2, #4]
 8007d68:	0a12      	lsrs	r2, r2, #8
 8007d6a:	b292      	uxth	r2, r2
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	3302      	adds	r3, #2
 8007d74:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7f8 fa28 	bl	80001d0 <strlen>
 8007d80:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	4413      	add	r3, r2
 8007d88:	69b9      	ldr	r1, [r7, #24]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f002 fbf2 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	3304      	adds	r3, #4
 8007d94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	18d0      	adds	r0, r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	4619      	mov	r1, r3
 8007da4:	f006 fe5c 	bl	800ea60 <memcpy>
      offset += length_topic_name;
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	4413      	add	r3, r2
 8007dae:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7f8 fa0b 	bl	80001d0 <strlen>
 8007dba:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	6979      	ldr	r1, [r7, #20]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f002 fbd5 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	18d0      	adds	r0, r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	f006 fe3f 	bl	800ea60 <memcpy>
      offset += length_message_type;
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	4413      	add	r3, r2
 8007de8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7f8 f9ee 	bl	80001d0 <strlen>
 8007df4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	6939      	ldr	r1, [r7, #16]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f002 fbb8 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	3304      	adds	r3, #4
 8007e08:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	18d0      	adds	r0, r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4619      	mov	r1, r3
 8007e18:	f006 fe22 	bl	800ea60 <memcpy>
      offset += length_md5sum;
 8007e1c:	69fa      	ldr	r2, [r7, #28]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4413      	add	r3, r2
 8007e22:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	4413      	add	r3, r2
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	0a12      	lsrs	r2, r2, #8
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3302      	adds	r3, #2
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	0c12      	lsrs	r2, r2, #16
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	3303      	adds	r3, #3
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	0e12      	lsrs	r2, r2, #24
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	61fb      	str	r3, [r7, #28]
      return offset;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
    }
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3720      	adds	r7, #32
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b08a      	sub	sp, #40	; 0x28
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	4413      	add	r3, r2
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	889b      	ldrh	r3, [r3, #4]
 8007e96:	b21a      	sxth	r2, r3
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	440b      	add	r3, r1
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	b21b      	sxth	r3, r3
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	b21b      	sxth	r3, r3
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	441a      	add	r2, r3
 8007ebc:	f107 0314 	add.w	r3, r7, #20
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f002 fb74 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	441a      	add	r2, r3
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d90c      	bls.n	8007ef8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eea:	440a      	add	r2, r1
 8007eec:	7812      	ldrb	r2, [r2, #0]
 8007eee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef6:	e7ec      	b.n	8007ed2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	4413      	add	r3, r2
 8007efe:	3b01      	subs	r3, #1
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	4413      	add	r3, r2
 8007f04:	2200      	movs	r2, #0
 8007f06:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	441a      	add	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	4413      	add	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	441a      	add	r2, r3
 8007f22:	f107 0310 	add.w	r3, r7, #16
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f002 fb41 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	3304      	adds	r3, #4
 8007f32:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	623b      	str	r3, [r7, #32]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	441a      	add	r2, r3
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d90c      	bls.n	8007f5e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6a3a      	ldr	r2, [r7, #32]
 8007f50:	440a      	add	r2, r1
 8007f52:	7812      	ldrb	r2, [r2, #0]
 8007f54:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	623b      	str	r3, [r7, #32]
 8007f5c:	e7ec      	b.n	8007f38 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4413      	add	r3, r2
 8007f64:	3b01      	subs	r3, #1
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4413      	add	r3, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	441a      	add	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	4413      	add	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	441a      	add	r2, r3
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f002 fb0e 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	3304      	adds	r3, #4
 8007f98:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	61fb      	str	r3, [r7, #28]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	441a      	add	r2, r3
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d90c      	bls.n	8007fc4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	7812      	ldrb	r2, [r2, #0]
 8007fba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	61fb      	str	r3, [r7, #28]
 8007fc2:	e7ec      	b.n	8007f9e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	4413      	add	r3, r2
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	441a      	add	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	7812      	ldrb	r2, [r2, #0]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	3301      	adds	r3, #1
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	440b      	add	r3, r1
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	4313      	orrs	r3, r2
 800800a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	3302      	adds	r3, #2
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	440b      	add	r3, r1
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	4313      	orrs	r3, r2
 800801c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	3303      	adds	r3, #3
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	440b      	add	r3, r1
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	061b      	lsls	r3, r3, #24
 800802c:	4313      	orrs	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	3304      	adds	r3, #4
 800803a:	61bb      	str	r3, [r7, #24]
     return offset;
 800803c:	69bb      	ldr	r3, [r7, #24]
    }
 800803e:	4618      	mov	r0, r3
 8008040:	3728      	adds	r7, #40	; 0x28
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	4b03      	ldr	r3, [pc, #12]	; (8008060 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	0800f77c 	.word	0x0800f77c

08008064 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	4b03      	ldr	r3, [pc, #12]	; (800807c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	0800f798 	.word	0x0800f798

08008080 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	605a      	str	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4618      	mov	r0, r3
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
	...

080080a4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
      data()
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fa04 	bl	80074bc <_ZN3ros3MsgC1Ev>
 80080b4:	4a06      	ldr	r2, [pc, #24]	; (80080d0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3304      	adds	r3, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff ffde 	bl	8008080 <_ZN3ros4TimeC1Ev>
    {
    }
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	0800fe7c 	.word	0x0800fe7c

080080d4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	4413      	add	r3, r2
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6852      	ldr	r2, [r2, #4]
 80080ec:	b2d2      	uxtb	r2, r2
 80080ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	4413      	add	r3, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6852      	ldr	r2, [r2, #4]
 80080fc:	0a12      	lsrs	r2, r2, #8
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3302      	adds	r3, #2
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	4413      	add	r3, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6852      	ldr	r2, [r2, #4]
 800810e:	0c12      	lsrs	r2, r2, #16
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3303      	adds	r3, #3
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	4413      	add	r3, r2
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6852      	ldr	r2, [r2, #4]
 8008120:	0e12      	lsrs	r2, r2, #24
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3304      	adds	r3, #4
 800812a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	4413      	add	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6892      	ldr	r2, [r2, #8]
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4413      	add	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	6892      	ldr	r2, [r2, #8]
 8008146:	0a12      	lsrs	r2, r2, #8
 8008148:	b2d2      	uxtb	r2, r2
 800814a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3302      	adds	r3, #2
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	4413      	add	r3, r2
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6892      	ldr	r2, [r2, #8]
 8008158:	0c12      	lsrs	r2, r2, #16
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3303      	adds	r3, #3
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	4413      	add	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6892      	ldr	r2, [r2, #8]
 800816a:	0e12      	lsrs	r2, r2, #24
 800816c:	b2d2      	uxtb	r2, r2
 800816e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3304      	adds	r3, #4
 8008174:	60fb      	str	r3, [r7, #12]
      return offset;
 8008176:	68fb      	ldr	r3, [r7, #12]
    }
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	4413      	add	r3, r2
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	440b      	add	r3, r1
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3302      	adds	r3, #2
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	440b      	add	r3, r1
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3303      	adds	r3, #3
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	440b      	add	r3, r1
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	061b      	lsls	r3, r3, #24
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3304      	adds	r3, #4
 80081e6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4413      	add	r3, r2
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	440b      	add	r3, r1
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	431a      	orrs	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3302      	adds	r3, #2
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	440b      	add	r3, r1
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	431a      	orrs	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3303      	adds	r3, #3
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	440b      	add	r3, r1
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	061b      	lsls	r3, r3, #24
 8008232:	431a      	orrs	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3304      	adds	r3, #4
 800823c:	60fb      	str	r3, [r7, #12]
     return offset;
 800823e:	68fb      	ldr	r3, [r7, #12]
    }
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	4b03      	ldr	r3, [pc, #12]	; (8008264 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8008256:	4618      	mov	r0, r3
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	0800f7bc 	.word	0x0800f7bc

08008268 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	4b03      	ldr	r3, [pc, #12]	; (8008280 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	0800f7cc 	.word	0x0800f7cc

08008284 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	611a      	str	r2, [r3, #16]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	68d0      	ldr	r0, [r2, #12]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6891      	ldr	r1, [r2, #8]
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	4798      	blx	r3
 80082d0:	4603      	mov	r3, r0
  };
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
  }
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <_ZN14HardwareSerialC1E14Serial_TypeDef>:
class HardwareSerial {
private:
Serial_TypeDef Serial;

public:
	HardwareSerial(Serial_TypeDef _Serial=SERIAL2){
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
		Serial = _Serial;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	701a      	strb	r2, [r3, #0]
	}
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <_ZN13STM32HardwareC1Ev>:
  public:
  	STM32Hardware(SERIAL_CLASS* io , long baud= 115200){
      iostream = io;
      baud_ = baud;
    }
    STM32Hardware()
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
    {
      iostream = &Serial;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a06      	ldr	r2, [pc, #24]	; (8008338 <_ZN13STM32HardwareC1Ev+0x24>)
 8008320:	601a      	str	r2, [r3, #0]
      baud_ = 115200;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008328:	605a      	str	r2, [r3, #4]
    }
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	20000d0c 	.word	0x20000d0c

0800833c <_ZN13STM32Hardware7setBaudEl>:
    STM32Hardware(STM32Hardware& h){
	  this->iostream = iostream;
      this->baud_ = h.baud_;
    }

    void setBaud(long baud){
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
      this->baud_= baud;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	605a      	str	r2, [r3, #4]
    }
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <_ZN13STM32Hardware4initEv>:

    int getBaud(){return baud_;}

    void init(){
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
      iostream->begin(baud_);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	f7fd fe64 	bl	8006038 <_ZN14HardwareSerial5beginEm>
    }
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <_ZN13STM32Hardware4readEv>:

    int read(){
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
      if(iostream->available()){
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f7fd fe87 	bl	8006098 <_ZN14HardwareSerial9availableEv>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf14      	ite	ne
 8008390:	2301      	movne	r3, #1
 8008392:	2300      	moveq	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d006      	beq.n	80083a8 <_ZN13STM32Hardware4readEv+0x30>
	  	return iostream->read();
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fd fea4 	bl	80060ec <_ZN14HardwareSerial4readEv>
 80083a4:	4603      	mov	r3, r0
 80083a6:	e001      	b.n	80083ac <_ZN13STM32Hardware4readEv+0x34>
      }else{
	    return -1;
 80083a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      }
    };
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
      for(int i=0; i<length; i++){
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	da0c      	bge.n	80083e6 <_ZN13STM32Hardware5writeEPhi+0x32>
		  iostream->write(data[i]);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	4413      	add	r3, r2
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	4619      	mov	r1, r3
 80083da:	f7fd febd 	bl	8006158 <_ZN14HardwareSerial5writeEh>
      for(int i=0; i<length; i++){
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	3301      	adds	r3, #1
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	e7ee      	b.n	80083c4 <_ZN13STM32Hardware5writeEPhi+0x10>
      }
    }
 80083e6:	bf00      	nop
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){return millis();}
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	f7fd ff53 	bl	80062a0 <millis>
 80083fa:	4603      	mov	r3, r0
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
      data("")
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff f854 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8008414:	4a05      	ldr	r2, [pc, #20]	; (800842c <_ZN8std_msgs6StringC1Ev+0x28>)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a04      	ldr	r2, [pc, #16]	; (8008430 <_ZN8std_msgs6StringC1Ev+0x2c>)
 800841e:	605a      	str	r2, [r3, #4]
    {
    }
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	0800fe38 	.word	0x0800fe38
 8008430:	0800f6f8 	.word	0x0800f6f8

08008434 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	4618      	mov	r0, r3
 8008448:	f7f7 fec2 	bl	80001d0 <strlen>
 800844c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	4413      	add	r3, r2
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f002 f88c 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3304      	adds	r3, #4
 8008460:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	18d0      	adds	r0, r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	4619      	mov	r1, r3
 8008470:	f006 faf6 	bl	800ea60 <memcpy>
      offset += length_data;
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	4413      	add	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
      return offset;
 800847c:	68fb      	ldr	r3, [r7, #12]
    }
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	441a      	add	r2, r3
 800849a:	f107 030c 	add.w	r3, r7, #12
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f002 f885 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	3304      	adds	r3, #4
 80084aa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	441a      	add	r2, r3
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d90c      	bls.n	80084d6 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	3b01      	subs	r3, #1
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	4413      	add	r3, r2
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	440a      	add	r2, r1
 80084ca:	7812      	ldrb	r2, [r2, #0]
 80084cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	3301      	adds	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	e7ec      	b.n	80084b0 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	3b01      	subs	r3, #1
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4413      	add	r3, r2
 80084e2:	2200      	movs	r2, #0
 80084e4:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	441a      	add	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
     return offset;
 80084fa:	693b      	ldr	r3, [r7, #16]
    }
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	4b03      	ldr	r3, [pc, #12]	; (800851c <_ZN8std_msgs6String7getTypeEv+0x18>)
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	0800f7f0 	.word	0x0800f7f0

08008520 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	4b03      	ldr	r3, [pc, #12]	; (8008538 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	0800f800 	.word	0x0800f800

0800853c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe ffb8 	bl	80074bc <_ZN3ros3MsgC1Ev>
 800854c:	4a09      	ldr	r2, [pc, #36]	; (8008574 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f04f 0200 	mov.w	r2, #0
 8008558:	605a      	str	r2, [r3, #4]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	609a      	str	r2, [r3, #8]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	60da      	str	r2, [r3, #12]
    {
    }
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	0800fe20 	.word	0x0800fe20

08008578 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	441a      	add	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008592:	eeb0 0a67 	vmov.f32	s0, s15
 8008596:	4610      	mov	r0, r2
 8008598:	f7fe fec4 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800859c:	4602      	mov	r2, r0
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	441a      	add	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80085b0:	eeb0 0a67 	vmov.f32	s0, s15
 80085b4:	4610      	mov	r0, r2
 80085b6:	f7fe feb5 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80085ba:	4602      	mov	r2, r0
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4413      	add	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	441a      	add	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80085ce:	eeb0 0a67 	vmov.f32	s0, s15
 80085d2:	4610      	mov	r0, r2
 80085d4:	f7fe fea6 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80085d8:	4602      	mov	r2, r0
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
      return offset;
 80085e0:	68fb      	ldr	r3, [r7, #12]
    }
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	441a      	add	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3304      	adds	r3, #4
 8008602:	4619      	mov	r1, r3
 8008604:	4610      	mov	r0, r2
 8008606:	f7fe fef9 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800860a:	4602      	mov	r2, r0
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	441a      	add	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3308      	adds	r3, #8
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe feec 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8008624:	4602      	mov	r2, r0
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	441a      	add	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	330c      	adds	r3, #12
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f7fe fedf 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800863e:	4602      	mov	r2, r0
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4413      	add	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]
     return offset;
 8008646:	68fb      	ldr	r3, [r7, #12]
    }
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	4b03      	ldr	r3, [pc, #12]	; (8008668 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	0800f824 	.word	0x0800f824

0800866c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	4b03      	ldr	r3, [pc, #12]	; (8008684 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	0800f83c 	.word	0x0800f83c

08008688 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe ff12 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8008698:	4a08      	ldr	r2, [pc, #32]	; (80086bc <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff ff4a 	bl	800853c <_ZN13geometry_msgs7Vector3C1Ev>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3314      	adds	r3, #20
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff ff45 	bl	800853c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	0800fe08 	.word	0x0800fe08

080086c0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	1d18      	adds	r0, r3, #4
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	4413      	add	r3, r2
 80086d8:	4619      	mov	r1, r3
 80086da:	f7ff ff4d 	bl	8008578 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80086de:	4602      	mov	r2, r0
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4413      	add	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f103 0014 	add.w	r0, r3, #20
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	4413      	add	r3, r2
 80086f2:	4619      	mov	r1, r3
 80086f4:	f7ff ff40 	bl	8008578 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80086f8:	4602      	mov	r2, r0
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	4413      	add	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
      return offset;
 8008700:	68fb      	ldr	r3, [r7, #12]
    }
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	1d18      	adds	r0, r3, #4
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	4413      	add	r3, r2
 8008722:	4619      	mov	r1, r3
 8008724:	f7ff ff61 	bl	80085ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 8008728:	4602      	mov	r2, r0
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f103 0014 	add.w	r0, r3, #20
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	4413      	add	r3, r2
 800873c:	4619      	mov	r1, r3
 800873e:	f7ff ff54 	bl	80085ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 8008742:	4602      	mov	r2, r0
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
     return offset;
 800874a:	68fb      	ldr	r3, [r7, #12]
    }
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	4b03      	ldr	r3, [pc, #12]	; (800876c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	0800f860 	.word	0x0800f860

08008770 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	4b03      	ldr	r3, [pc, #12]	; (8008788 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800877a:	4618      	mov	r0, r3
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	0800f874 	.word	0x0800f874

0800878c <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fe90 	bl	80074bc <_ZN3ros3MsgC1Ev>
 800879c:	4a09      	ldr	r2, [pc, #36]	; (80087c4 <_ZN13geometry_msgs5PointC1Ev+0x38>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	609a      	str	r2, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f04f 0200 	mov.w	r2, #0
 80087b8:	60da      	str	r2, [r3, #12]
    {
    }
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	0800fdf0 	.word	0x0800fdf0

080087c8 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	441a      	add	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	edd3 7a01 	vldr	s15, [r3, #4]
 80087e2:	eeb0 0a67 	vmov.f32	s0, s15
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe fd9c 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80087ec:	4602      	mov	r2, r0
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4413      	add	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	441a      	add	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008800:	eeb0 0a67 	vmov.f32	s0, s15
 8008804:	4610      	mov	r0, r2
 8008806:	f7fe fd8d 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800880a:	4602      	mov	r2, r0
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	441a      	add	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	edd3 7a03 	vldr	s15, [r3, #12]
 800881e:	eeb0 0a67 	vmov.f32	s0, s15
 8008822:	4610      	mov	r0, r2
 8008824:	f7fe fd7e 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8008828:	4602      	mov	r2, r0
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4413      	add	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
      return offset;
 8008830:	68fb      	ldr	r3, [r7, #12]
    }
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	441a      	add	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f7fe fdd1 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800885a:	4602      	mov	r2, r0
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	441a      	add	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3308      	adds	r3, #8
 800886c:	4619      	mov	r1, r3
 800886e:	4610      	mov	r0, r2
 8008870:	f7fe fdc4 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8008874:	4602      	mov	r2, r0
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4413      	add	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	441a      	add	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	330c      	adds	r3, #12
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7fe fdb7 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800888e:	4602      	mov	r2, r0
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]
     return offset;
 8008896:	68fb      	ldr	r3, [r7, #12]
    }
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	4b03      	ldr	r3, [pc, #12]	; (80088b8 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	0800f898 	.word	0x0800f898

080088bc <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	4b03      	ldr	r3, [pc, #12]	; (80088d4 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	0800f83c 	.word	0x0800f83c

080088d8 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fdea 	bl	80074bc <_ZN3ros3MsgC1Ev>
 80088e8:	4a0b      	ldr	r2, [pc, #44]	; (8008918 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f04f 0200 	mov.w	r2, #0
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	609a      	str	r2, [r3, #8]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f04f 0200 	mov.w	r2, #0
 800890c:	611a      	str	r2, [r3, #16]
    {
    }
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	0800fdd8 	.word	0x0800fdd8

0800891c <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	441a      	add	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	edd3 7a01 	vldr	s15, [r3, #4]
 8008936:	eeb0 0a67 	vmov.f32	s0, s15
 800893a:	4610      	mov	r0, r2
 800893c:	f7fe fcf2 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8008940:	4602      	mov	r2, r0
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4413      	add	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	441a      	add	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	edd3 7a02 	vldr	s15, [r3, #8]
 8008954:	eeb0 0a67 	vmov.f32	s0, s15
 8008958:	4610      	mov	r0, r2
 800895a:	f7fe fce3 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800895e:	4602      	mov	r2, r0
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	441a      	add	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008972:	eeb0 0a67 	vmov.f32	s0, s15
 8008976:	4610      	mov	r0, r2
 8008978:	f7fe fcd4 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800897c:	4602      	mov	r2, r0
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	441a      	add	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008990:	eeb0 0a67 	vmov.f32	s0, s15
 8008994:	4610      	mov	r0, r2
 8008996:	f7fe fcc5 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800899a:	4602      	mov	r2, r0
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80089a2:	68fb      	ldr	r3, [r7, #12]
    }
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	441a      	add	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7fe fd18 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80089cc:	4602      	mov	r2, r0
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	441a      	add	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3308      	adds	r3, #8
 80089de:	4619      	mov	r1, r3
 80089e0:	4610      	mov	r0, r2
 80089e2:	f7fe fd0b 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80089e6:	4602      	mov	r2, r0
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	441a      	add	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	330c      	adds	r3, #12
 80089f8:	4619      	mov	r1, r3
 80089fa:	4610      	mov	r0, r2
 80089fc:	f7fe fcfe 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8008a00:	4602      	mov	r2, r0
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4413      	add	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	441a      	add	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3310      	adds	r3, #16
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f7fe fcf1 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]
     return offset;
 8008a22:	68fb      	ldr	r3, [r7, #12]
    }
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	4b03      	ldr	r3, [pc, #12]	; (8008a44 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	0800f8ac 	.word	0x0800f8ac

08008a48 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	4b03      	ldr	r3, [pc, #12]	; (8008a60 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	0800f8c8 	.word	0x0800f8c8

08008a64 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fd24 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8008a74:	4a08      	ldr	r2, [pc, #32]	; (8008a98 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fe84 	bl	800878c <_ZN13geometry_msgs5PointC1Ev>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3314      	adds	r3, #20
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff ff25 	bl	80088d8 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	0800fdc0 	.word	0x0800fdc0

08008a9c <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	1d18      	adds	r0, r3, #4
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	f7ff fe87 	bl	80087c8 <_ZNK13geometry_msgs5Point9serializeEPh>
 8008aba:	4602      	mov	r2, r0
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f103 0014 	add.w	r0, r3, #20
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	4413      	add	r3, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	f7ff ff24 	bl	800891c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]
      return offset;
 8008adc:	68fb      	ldr	r3, [r7, #12]
    }
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	1d18      	adds	r0, r3, #4
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	4413      	add	r3, r2
 8008afe:	4619      	mov	r1, r3
 8008b00:	f7ff fe9b 	bl	800883a <_ZN13geometry_msgs5Point11deserializeEPh>
 8008b04:	4602      	mov	r2, r0
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f103 0014 	add.w	r0, r3, #20
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	4413      	add	r3, r2
 8008b18:	4619      	mov	r1, r3
 8008b1a:	f7ff ff47 	bl	80089ac <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
     return offset;
 8008b26:	68fb      	ldr	r3, [r7, #12]
    }
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	0800f8ec 	.word	0x0800f8ec

08008b4c <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	4b03      	ldr	r3, [pc, #12]	; (8008b64 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	0800f900 	.word	0x0800f900

08008b68 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fca2 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8008b78:	4a0c      	ldr	r2, [pc, #48]	; (8008bac <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff ff6e 	bl	8008a64 <_ZN13geometry_msgs4PoseC1Ev>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008b8e:	2323      	movs	r3, #35	; 0x23
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	db05      	blt.n	8008ba0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 8008b94:	f04f 0100 	mov.w	r1, #0
 8008b98:	6011      	str	r1, [r2, #0]
 8008b9a:	3204      	adds	r2, #4
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	e7f7      	b.n	8008b90 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	0800fda8 	.word	0x0800fda8

08008bb0 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	1d18      	adds	r0, r3, #4
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f7ff ff67 	bl	8008a9c <_ZNK13geometry_msgs4Pose9serializeEPh>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60bb      	str	r3, [r7, #8]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2b23      	cmp	r3, #35	; 0x23
 8008bde:	d817      	bhi.n	8008c10 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x60>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	18d1      	adds	r1, r2, r3
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	330a      	adds	r3, #10
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	edd3 7a00 	vldr	s15, [r3]
 8008bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	f7fe fb92 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8008c00:	4602      	mov	r2, r0
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4413      	add	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60bb      	str	r3, [r7, #8]
 8008c0e:	e7e4      	b.n	8008bda <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8008c10:	68fb      	ldr	r3, [r7, #12]
    }
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	1d18      	adds	r0, r3, #4
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	4413      	add	r3, r2
 8008c32:	4619      	mov	r1, r3
 8008c34:	f7ff ff57 	bl	8008ae6 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8008c40:	2300      	movs	r3, #0
 8008c42:	60bb      	str	r3, [r7, #8]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b23      	cmp	r3, #35	; 0x23
 8008c48:	d813      	bhi.n	8008c72 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x58>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	18d0      	adds	r0, r2, r3
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	330a      	adds	r3, #10
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	4413      	add	r3, r2
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f7fe fbcd 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8008c62:	4602      	mov	r2, r0
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	60bb      	str	r3, [r7, #8]
 8008c70:	e7e8      	b.n	8008c44 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8008c72:	68fb      	ldr	r3, [r7, #12]
    }
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	4b03      	ldr	r3, [pc, #12]	; (8008c94 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8008c86:	4618      	mov	r0, r3
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	0800f924 	.word	0x0800f924

08008c98 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	0800f948 	.word	0x0800f948

08008cb4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe fbfc 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8008cc4:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff fcda 	bl	8008688 <_ZN13geometry_msgs5TwistC1Ev>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008cda:	2323      	movs	r3, #35	; 0x23
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	db05      	blt.n	8008cec <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 8008ce0:	f04f 0100 	mov.w	r1, #0
 8008ce4:	6011      	str	r1, [r2, #0]
 8008ce6:	3204      	adds	r2, #4
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	e7f7      	b.n	8008cdc <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	0800fd90 	.word	0x0800fd90

08008cfc <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	1d18      	adds	r0, r3, #4
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	4413      	add	r3, r2
 8008d14:	4619      	mov	r1, r3
 8008d16:	f7ff fcd3 	bl	80086c0 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8008d22:	2300      	movs	r3, #0
 8008d24:	60bb      	str	r3, [r7, #8]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b23      	cmp	r3, #35	; 0x23
 8008d2a:	d816      	bhi.n	8008d5a <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x5e>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	18d1      	adds	r1, r2, r3
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	330a      	adds	r3, #10
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	edd3 7a00 	vldr	s15, [r3]
 8008d40:	eeb0 0a67 	vmov.f32	s0, s15
 8008d44:	4608      	mov	r0, r1
 8008d46:	f7fe faed 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60bb      	str	r3, [r7, #8]
 8008d58:	e7e5      	b.n	8008d26 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
    }
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	1d18      	adds	r0, r3, #4
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7ff fcc4 	bl	800870a <_ZN13geometry_msgs5Twist11deserializeEPh>
 8008d82:	4602      	mov	r2, r0
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b23      	cmp	r3, #35	; 0x23
 8008d92:	d812      	bhi.n	8008dba <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x56>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	18d0      	adds	r0, r2, r3
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	330a      	adds	r3, #10
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	4413      	add	r3, r2
 8008da4:	4619      	mov	r1, r3
 8008da6:	f7fe fb29 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8008daa:	4602      	mov	r2, r0
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60bb      	str	r3, [r7, #8]
 8008db8:	e7e9      	b.n	8008d8e <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8008dba:	68fb      	ldr	r3, [r7, #12]
    }
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	4b03      	ldr	r3, [pc, #12]	; (8008ddc <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	0800f96c 	.word	0x0800f96c

08008de0 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	0800f990 	.word	0x0800f990

08008dfc <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fb58 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8008e0c:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff f92f 	bl	8008080 <_ZN3ros4TimeC1Ev>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a04      	ldr	r2, [pc, #16]	; (8008e38 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8008e26:	611a      	str	r2, [r3, #16]
    {
    }
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	0800fd78 	.word	0x0800fd78
 8008e38:	0800f6f8 	.word	0x0800f6f8

08008e3c <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	4413      	add	r3, r2
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	6852      	ldr	r2, [r2, #4]
 8008e54:	b2d2      	uxtb	r2, r2
 8008e56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	4413      	add	r3, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6852      	ldr	r2, [r2, #4]
 8008e64:	0a12      	lsrs	r2, r2, #8
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	4413      	add	r3, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6852      	ldr	r2, [r2, #4]
 8008e76:	0c12      	lsrs	r2, r2, #16
 8008e78:	b2d2      	uxtb	r2, r2
 8008e7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3303      	adds	r3, #3
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	4413      	add	r3, r2
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6852      	ldr	r2, [r2, #4]
 8008e88:	0e12      	lsrs	r2, r2, #24
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3304      	adds	r3, #4
 8008e92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	4413      	add	r3, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6892      	ldr	r2, [r2, #8]
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6892      	ldr	r2, [r2, #8]
 8008eae:	0a12      	lsrs	r2, r2, #8
 8008eb0:	b2d2      	uxtb	r2, r2
 8008eb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3302      	adds	r3, #2
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	4413      	add	r3, r2
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6892      	ldr	r2, [r2, #8]
 8008ec0:	0c12      	lsrs	r2, r2, #16
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3303      	adds	r3, #3
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	4413      	add	r3, r2
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6892      	ldr	r2, [r2, #8]
 8008ed2:	0e12      	lsrs	r2, r2, #24
 8008ed4:	b2d2      	uxtb	r2, r2
 8008ed6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3304      	adds	r3, #4
 8008edc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	68d2      	ldr	r2, [r2, #12]
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	68d2      	ldr	r2, [r2, #12]
 8008ef8:	0a12      	lsrs	r2, r2, #8
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3302      	adds	r3, #2
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	4413      	add	r3, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	68d2      	ldr	r2, [r2, #12]
 8008f0a:	0c12      	lsrs	r2, r2, #16
 8008f0c:	b2d2      	uxtb	r2, r2
 8008f0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3303      	adds	r3, #3
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	4413      	add	r3, r2
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	68d2      	ldr	r2, [r2, #12]
 8008f1c:	0e12      	lsrs	r2, r2, #24
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3304      	adds	r3, #4
 8008f26:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7f7 f94f 	bl	80001d0 <strlen>
 8008f32:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	4413      	add	r3, r2
 8008f3a:	68b9      	ldr	r1, [r7, #8]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 fb19 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3304      	adds	r3, #4
 8008f46:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	18d0      	adds	r0, r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	4619      	mov	r1, r3
 8008f56:	f005 fd83 	bl	800ea60 <memcpy>
      offset += length_frame_id;
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	4413      	add	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
      return offset;
 8008f62:	68fb      	ldr	r3, [r7, #12]
    }
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	4413      	add	r3, r2
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	440b      	add	r3, r1
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	3302      	adds	r3, #2
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	440b      	add	r3, r1
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	041b      	lsls	r3, r3, #16
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	3303      	adds	r3, #3
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	440b      	add	r3, r1
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	061b      	lsls	r3, r3, #24
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	440b      	add	r3, r1
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	3302      	adds	r3, #2
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	440b      	add	r3, r1
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	041b      	lsls	r3, r3, #16
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689a      	ldr	r2, [r3, #8]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3303      	adds	r3, #3
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	440b      	add	r3, r1
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	061b      	lsls	r3, r3, #24
 800901a:	431a      	orrs	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	3304      	adds	r3, #4
 8009024:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	4413      	add	r3, r2
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	3301      	adds	r3, #1
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	440b      	add	r3, r1
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	021b      	lsls	r3, r3, #8
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3302      	adds	r3, #2
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	440b      	add	r3, r1
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	041b      	lsls	r3, r3, #16
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	3303      	adds	r3, #3
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	440b      	add	r3, r1
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	061b      	lsls	r3, r3, #24
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	3304      	adds	r3, #4
 800907a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	441a      	add	r2, r3
 8009082:	f107 030c 	add.w	r3, r7, #12
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f001 fa91 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	3304      	adds	r3, #4
 8009092:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	441a      	add	r2, r3
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d90c      	bls.n	80090be <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	4413      	add	r3, r2
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	440a      	add	r2, r1
 80090b2:	7812      	ldrb	r2, [r2, #0]
 80090b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	3301      	adds	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
 80090bc:	e7ec      	b.n	8009098 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	3b01      	subs	r3, #1
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	4413      	add	r3, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	441a      	add	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4413      	add	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]
     return offset;
 80090e2:	693b      	ldr	r3, [r7, #16]
    }
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	4b03      	ldr	r3, [pc, #12]	; (8009104 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	0800f9b4 	.word	0x0800f9b4

08009108 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	4b03      	ldr	r3, [pc, #12]	; (8009120 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8009112:	4618      	mov	r0, r3
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	0800f9c4 	.word	0x0800f9c4

08009124 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe f9c4 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8009134:	4a0c      	ldr	r2, [pc, #48]	; (8009168 <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3304      	adds	r3, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fe5c 	bl	8008dfc <_ZN8std_msgs6HeaderC1Ev>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a09      	ldr	r2, [pc, #36]	; (800916c <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8009148:	619a      	str	r2, [r3, #24]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	331c      	adds	r3, #28
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff fd0a 	bl	8008b68 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	33d8      	adds	r3, #216	; 0xd8
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff fdab 	bl	8008cb4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	0800fd60 	.word	0x0800fd60
 800916c:	0800f6f8 	.word	0x0800f6f8

08009170 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	1d18      	adds	r0, r3, #4
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	4413      	add	r3, r2
 8009188:	4619      	mov	r1, r3
 800918a:	f7ff fe57 	bl	8008e3c <_ZNK8std_msgs6Header9serializeEPh>
 800918e:	4602      	mov	r2, r0
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	4618      	mov	r0, r3
 800919c:	f7f7 f818 	bl	80001d0 <strlen>
 80091a0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	4413      	add	r3, r2
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 f9e2 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3304      	adds	r3, #4
 80091b4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	18d0      	adds	r0, r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	4619      	mov	r1, r3
 80091c4:	f005 fc4c 	bl	800ea60 <memcpy>
      offset += length_child_frame_id;
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	4413      	add	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f103 001c 	add.w	r0, r3, #28
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	4413      	add	r3, r2
 80091dc:	4619      	mov	r1, r3
 80091de:	f7ff fce7 	bl	8008bb0 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 80091e2:	4602      	mov	r2, r0
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	4413      	add	r3, r2
 80091f6:	4619      	mov	r1, r3
 80091f8:	f7ff fd80 	bl	8008cfc <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 80091fc:	4602      	mov	r2, r0
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4413      	add	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
      return offset;
 8009204:	68fb      	ldr	r3, [r7, #12]
    }
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800920e:	b580      	push	{r7, lr}
 8009210:	b086      	sub	sp, #24
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	1d18      	adds	r0, r3, #4
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	4413      	add	r3, r2
 8009226:	4619      	mov	r1, r3
 8009228:	f7ff fea0 	bl	8008f6c <_ZN8std_msgs6Header11deserializeEPh>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	4413      	add	r3, r2
 8009232:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	441a      	add	r2, r3
 800923a:	f107 030c 	add.w	r3, r7, #12
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f001 f9b5 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	3304      	adds	r3, #4
 800924a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	617b      	str	r3, [r7, #20]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	441a      	add	r2, r3
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	429a      	cmp	r2, r3
 800925a:	d90c      	bls.n	8009276 <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	3b01      	subs	r3, #1
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	4413      	add	r3, r2
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	440a      	add	r2, r1
 800926a:	7812      	ldrb	r2, [r2, #0]
 800926c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	3301      	adds	r3, #1
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	e7ec      	b.n	8009250 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	3b01      	subs	r3, #1
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	4413      	add	r3, r2
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3b01      	subs	r3, #1
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	441a      	add	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f103 001c 	add.w	r0, r3, #28
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	4413      	add	r3, r2
 80092a6:	4619      	mov	r1, r3
 80092a8:	f7ff fcb7 	bl	8008c1a <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 80092ac:	4602      	mov	r2, r0
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	4413      	add	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	4413      	add	r3, r2
 80092c0:	4619      	mov	r1, r3
 80092c2:	f7ff fd4f 	bl	8008d64 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 80092c6:	4602      	mov	r2, r0
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	4413      	add	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]
     return offset;
 80092ce:	693b      	ldr	r3, [r7, #16]
    }
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	4b03      	ldr	r3, [pc, #12]	; (80092f0 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 80092e2:	4618      	mov	r0, r3
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	0800f9e8 	.word	0x0800f9e8

080092f4 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	4b03      	ldr	r3, [pc, #12]	; (800930c <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 80092fe:	4618      	mov	r0, r3
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	0800f9fc 	.word	0x0800f9fc

08009310 <_ZN11sensor_msgs3ImuC1Ev>:
      float angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      float linear_acceleration_covariance[9];

    Imu():
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe f8ce 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8009320:	4a1f      	ldr	r2, [pc, #124]	; (80093a0 <_ZN11sensor_msgs3ImuC1Ev+0x90>)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3304      	adds	r3, #4
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fd66 	bl	8008dfc <_ZN8std_msgs6HeaderC1Ev>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3318      	adds	r3, #24
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff facf 	bl	80088d8 <_ZN13geometry_msgs10QuaternionC1Ev>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009340:	2308      	movs	r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	db05      	blt.n	8009352 <_ZN11sensor_msgs3ImuC1Ev+0x42>
 8009346:	f04f 0100 	mov.w	r1, #0
 800934a:	6011      	str	r1, [r2, #0]
 800934c:	3204      	adds	r2, #4
 800934e:	3b01      	subs	r3, #1
 8009350:	e7f7      	b.n	8009342 <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3350      	adds	r3, #80	; 0x50
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff f8f0 	bl	800853c <_ZN13geometry_msgs7Vector3C1Ev>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8009362:	2308      	movs	r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	db05      	blt.n	8009374 <_ZN11sensor_msgs3ImuC1Ev+0x64>
 8009368:	f04f 0100 	mov.w	r1, #0
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	3204      	adds	r2, #4
 8009370:	3b01      	subs	r3, #1
 8009372:	e7f7      	b.n	8009364 <_ZN11sensor_msgs3ImuC1Ev+0x54>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3384      	adds	r3, #132	; 0x84
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff f8df 	bl	800853c <_ZN13geometry_msgs7Vector3C1Ev>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8009384:	2308      	movs	r3, #8
 8009386:	2b00      	cmp	r3, #0
 8009388:	db05      	blt.n	8009396 <_ZN11sensor_msgs3ImuC1Ev+0x86>
 800938a:	f04f 0100 	mov.w	r1, #0
 800938e:	6011      	str	r1, [r2, #0]
 8009390:	3204      	adds	r2, #4
 8009392:	3b01      	subs	r3, #1
 8009394:	e7f7      	b.n	8009386 <_ZN11sensor_msgs3ImuC1Ev+0x76>
    {
    }
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	0800fd48 	.word	0x0800fd48

080093a4 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	617b      	str	r3, [r7, #20]
      offset += this->header.serialize(outbuffer + offset);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	1d18      	adds	r0, r3, #4
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	4413      	add	r3, r2
 80093bc:	4619      	mov	r1, r3
 80093be:	f7ff fd3d 	bl	8008e3c <_ZNK8std_msgs6Header9serializeEPh>
 80093c2:	4602      	mov	r2, r0
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	4413      	add	r3, r2
 80093c8:	617b      	str	r3, [r7, #20]
      offset += this->orientation.serialize(outbuffer + offset);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f103 0018 	add.w	r0, r3, #24
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	4413      	add	r3, r2
 80093d6:	4619      	mov	r1, r3
 80093d8:	f7ff faa0 	bl	800891c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80093dc:	4602      	mov	r2, r0
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	4413      	add	r3, r2
 80093e2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80093e4:	2300      	movs	r3, #0
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b08      	cmp	r3, #8
 80093ec:	d817      	bhi.n	800941e <_ZNK11sensor_msgs3Imu9serializeEPh+0x7a>
      offset += serializeAvrFloat64(outbuffer + offset, this->orientation_covariance[i]);
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	18d1      	adds	r1, r2, r3
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	330a      	adds	r3, #10
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	3304      	adds	r3, #4
 8009400:	edd3 7a00 	vldr	s15, [r3]
 8009404:	eeb0 0a67 	vmov.f32	s0, s15
 8009408:	4608      	mov	r0, r1
 800940a:	f7fd ff8b 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800940e:	4602      	mov	r2, r0
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	4413      	add	r3, r2
 8009414:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	e7e4      	b.n	80093e8 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	4413      	add	r3, r2
 800942a:	4619      	mov	r1, r3
 800942c:	f7ff f8a4 	bl	8008578 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8009430:	4602      	mov	r2, r0
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	4413      	add	r3, r2
 8009436:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8009438:	2300      	movs	r3, #0
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b08      	cmp	r3, #8
 8009440:	d816      	bhi.n	8009470 <_ZNK11sensor_msgs3Imu9serializeEPh+0xcc>
      offset += serializeAvrFloat64(outbuffer + offset, this->angular_velocity_covariance[i]);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	18d1      	adds	r1, r2, r3
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3318      	adds	r3, #24
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	edd3 7a00 	vldr	s15, [r3]
 8009456:	eeb0 0a67 	vmov.f32	s0, s15
 800945a:	4608      	mov	r0, r1
 800945c:	f7fd ff62 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8009460:	4602      	mov	r2, r0
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	4413      	add	r3, r2
 8009466:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]
 800946e:	e7e5      	b.n	800943c <_ZNK11sensor_msgs3Imu9serializeEPh+0x98>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	4413      	add	r3, r2
 800947c:	4619      	mov	r1, r3
 800947e:	f7ff f87b 	bl	8008578 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8009482:	4602      	mov	r2, r0
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	4413      	add	r3, r2
 8009488:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800948a:	2300      	movs	r3, #0
 800948c:	60bb      	str	r3, [r7, #8]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b08      	cmp	r3, #8
 8009492:	d817      	bhi.n	80094c4 <_ZNK11sensor_msgs3Imu9serializeEPh+0x120>
      offset += serializeAvrFloat64(outbuffer + offset, this->linear_acceleration_covariance[i]);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	18d1      	adds	r1, r2, r3
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	3324      	adds	r3, #36	; 0x24
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	3304      	adds	r3, #4
 80094a6:	edd3 7a00 	vldr	s15, [r3]
 80094aa:	eeb0 0a67 	vmov.f32	s0, s15
 80094ae:	4608      	mov	r0, r1
 80094b0:	f7fd ff38 	bl	8007324 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80094b4:	4602      	mov	r2, r0
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	4413      	add	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	3301      	adds	r3, #1
 80094c0:	60bb      	str	r3, [r7, #8]
 80094c2:	e7e4      	b.n	800948e <_ZNK11sensor_msgs3Imu9serializeEPh+0xea>
      }
      return offset;
 80094c4:	697b      	ldr	r3, [r7, #20]
    }
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b086      	sub	sp, #24
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	617b      	str	r3, [r7, #20]
      offset += this->header.deserialize(inbuffer + offset);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	1d18      	adds	r0, r3, #4
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	4413      	add	r3, r2
 80094e6:	4619      	mov	r1, r3
 80094e8:	f7ff fd40 	bl	8008f6c <_ZN8std_msgs6Header11deserializeEPh>
 80094ec:	4602      	mov	r2, r0
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	4413      	add	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]
      offset += this->orientation.deserialize(inbuffer + offset);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f103 0018 	add.w	r0, r3, #24
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	4413      	add	r3, r2
 8009500:	4619      	mov	r1, r3
 8009502:	f7ff fa53 	bl	80089ac <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8009506:	4602      	mov	r2, r0
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4413      	add	r3, r2
 800950c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800950e:	2300      	movs	r3, #0
 8009510:	613b      	str	r3, [r7, #16]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b08      	cmp	r3, #8
 8009516:	d813      	bhi.n	8009540 <_ZN11sensor_msgs3Imu11deserializeEPh+0x72>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->orientation_covariance[i]));
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	18d0      	adds	r0, r2, r3
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	330a      	adds	r3, #10
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	4413      	add	r3, r2
 8009528:	3304      	adds	r3, #4
 800952a:	4619      	mov	r1, r3
 800952c:	f7fd ff66 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8009530:	4602      	mov	r2, r0
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	4413      	add	r3, r2
 8009536:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	3301      	adds	r3, #1
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	e7e8      	b.n	8009512 <_ZN11sensor_msgs3Imu11deserializeEPh+0x44>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	4413      	add	r3, r2
 800954c:	4619      	mov	r1, r3
 800954e:	f7ff f84c 	bl	80085ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 8009552:	4602      	mov	r2, r0
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	4413      	add	r3, r2
 8009558:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b08      	cmp	r3, #8
 8009562:	d812      	bhi.n	800958a <_ZN11sensor_msgs3Imu11deserializeEPh+0xbc>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->angular_velocity_covariance[i]));
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	18d0      	adds	r0, r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3318      	adds	r3, #24
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	4413      	add	r3, r2
 8009574:	4619      	mov	r1, r3
 8009576:	f7fd ff41 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800957a:	4602      	mov	r2, r0
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	4413      	add	r3, r2
 8009580:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	e7e9      	b.n	800955e <_ZN11sensor_msgs3Imu11deserializeEPh+0x90>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	4413      	add	r3, r2
 8009596:	4619      	mov	r1, r3
 8009598:	f7ff f827 	bl	80085ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 800959c:	4602      	mov	r2, r0
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	4413      	add	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80095a4:	2300      	movs	r3, #0
 80095a6:	60bb      	str	r3, [r7, #8]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	d813      	bhi.n	80095d6 <_ZN11sensor_msgs3Imu11deserializeEPh+0x108>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->linear_acceleration_covariance[i]));
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	18d0      	adds	r0, r2, r3
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	3324      	adds	r3, #36	; 0x24
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	3304      	adds	r3, #4
 80095c0:	4619      	mov	r1, r3
 80095c2:	f7fd ff1b 	bl	80073fc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80095c6:	4602      	mov	r2, r0
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	4413      	add	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	3301      	adds	r3, #1
 80095d2:	60bb      	str	r3, [r7, #8]
 80095d4:	e7e8      	b.n	80095a8 <_ZN11sensor_msgs3Imu11deserializeEPh+0xda>
      }
     return offset;
 80095d6:	697b      	ldr	r3, [r7, #20]
    }
 80095d8:	4618      	mov	r0, r3
 80095da:	3718      	adds	r7, #24
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 80095ea:	4618      	mov	r0, r3
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	0800fa20 	.word	0x0800fa20

080095fc <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	4b03      	ldr	r3, [pc, #12]	; (8009614 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	0800fa30 	.word	0x0800fa30

08009618 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4618      	mov	r0, r3
 8009624:	f7fd ff4a 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8009628:	4a08      	ldr	r2, [pc, #32]	; (800964c <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3304      	adds	r3, #4
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe ff82 	bl	800853c <_ZN13geometry_msgs7Vector3C1Ev>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3314      	adds	r3, #20
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff f94b 	bl	80088d8 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	0800fd30 	.word	0x0800fd30

08009650 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	1d18      	adds	r0, r3, #4
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	4413      	add	r3, r2
 8009668:	4619      	mov	r1, r3
 800966a:	f7fe ff85 	bl	8008578 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800966e:	4602      	mov	r2, r0
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f103 0014 	add.w	r0, r3, #20
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	4413      	add	r3, r2
 8009682:	4619      	mov	r1, r3
 8009684:	f7ff f94a 	bl	800891c <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8009688:	4602      	mov	r2, r0
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4413      	add	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
      return offset;
 8009690:	68fb      	ldr	r3, [r7, #12]
    }
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	1d18      	adds	r0, r3, #4
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	4413      	add	r3, r2
 80096b2:	4619      	mov	r1, r3
 80096b4:	f7fe ff99 	bl	80085ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 80096b8:	4602      	mov	r2, r0
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4413      	add	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f103 0014 	add.w	r0, r3, #20
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	4413      	add	r3, r2
 80096cc:	4619      	mov	r1, r3
 80096ce:	f7ff f96d 	bl	80089ac <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80096d2:	4602      	mov	r2, r0
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]
     return offset;
 80096da:	68fb      	ldr	r3, [r7, #12]
    }
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <_ZN13geometry_msgs9Transform7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Transform"; };
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	4b03      	ldr	r3, [pc, #12]	; (80096fc <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	0800fa54 	.word	0x0800fa54

08009700 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	4b03      	ldr	r3, [pc, #12]	; (8009718 <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	0800fa6c 	.word	0x0800fa6c

0800971c <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4618      	mov	r0, r3
 8009728:	f7fd fec8 	bl	80074bc <_ZN3ros3MsgC1Ev>
 800972c:	4a0a      	ldr	r2, [pc, #40]	; (8009758 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3304      	adds	r3, #4
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff fb60 	bl	8008dfc <_ZN8std_msgs6HeaderC1Ev>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a07      	ldr	r2, [pc, #28]	; (800975c <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8009740:	619a      	str	r2, [r3, #24]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	331c      	adds	r3, #28
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff ff66 	bl	8009618 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	0800fd18 	.word	0x0800fd18
 800975c:	0800f6f8 	.word	0x0800f6f8

08009760 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	1d18      	adds	r0, r3, #4
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	4413      	add	r3, r2
 8009778:	4619      	mov	r1, r3
 800977a:	f7ff fb5f 	bl	8008e3c <_ZNK8std_msgs6Header9serializeEPh>
 800977e:	4602      	mov	r2, r0
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	4618      	mov	r0, r3
 800978c:	f7f6 fd20 	bl	80001d0 <strlen>
 8009790:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	4413      	add	r3, r2
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 feea 	bl	800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3304      	adds	r3, #4
 80097a4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	18d0      	adds	r0, r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	4619      	mov	r1, r3
 80097b4:	f005 f954 	bl	800ea60 <memcpy>
      offset += length_child_frame_id;
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4413      	add	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f103 001c 	add.w	r0, r3, #28
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	4413      	add	r3, r2
 80097cc:	4619      	mov	r1, r3
 80097ce:	f7ff ff3f 	bl	8009650 <_ZNK13geometry_msgs9Transform9serializeEPh>
 80097d2:	4602      	mov	r2, r0
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]
      return offset;
 80097da:	68fb      	ldr	r3, [r7, #12]
    }
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	1d18      	adds	r0, r3, #4
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	4413      	add	r3, r2
 80097fc:	4619      	mov	r1, r3
 80097fe:	f7ff fbb5 	bl	8008f6c <_ZN8std_msgs6Header11deserializeEPh>
 8009802:	4602      	mov	r2, r0
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	4413      	add	r3, r2
 8009808:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	441a      	add	r2, r3
 8009810:	f107 030c 	add.w	r3, r7, #12
 8009814:	4611      	mov	r1, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f000 feca 	bl	800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	3304      	adds	r3, #4
 8009820:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	441a      	add	r2, r3
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	429a      	cmp	r2, r3
 8009830:	d90c      	bls.n	800984c <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	3b01      	subs	r3, #1
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4413      	add	r3, r2
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	440a      	add	r2, r1
 8009840:	7812      	ldrb	r2, [r2, #0]
 8009842:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	3301      	adds	r3, #1
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e7ec      	b.n	8009826 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	3b01      	subs	r3, #1
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	4413      	add	r3, r2
 8009858:	2200      	movs	r2, #0
 800985a:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	3b01      	subs	r3, #1
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	441a      	add	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4413      	add	r3, r2
 800986e:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f103 001c 	add.w	r0, r3, #28
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	4413      	add	r3, r2
 800987c:	4619      	mov	r1, r3
 800987e:	f7ff ff0c 	bl	800969a <_ZN13geometry_msgs9Transform11deserializeEPh>
 8009882:	4602      	mov	r2, r0
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	4413      	add	r3, r2
 8009888:	613b      	str	r3, [r7, #16]
     return offset;
 800988a:	693b      	ldr	r3, [r7, #16]
    }
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	4b03      	ldr	r3, [pc, #12]	; (80098ac <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	0800fa90 	.word	0x0800fa90

080098b0 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	4b03      	ldr	r3, [pc, #12]	; (80098c8 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 80098ba:	4618      	mov	r0, r3
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	0800fab0 	.word	0x0800fab0

080098cc <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 80098cc:	b590      	push	{r4, r7, lr}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f7fe fffd 	bl	80088d8 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f04f 0200 	mov.w	r2, #0
 80098e4:	605a      	str	r2, [r3, #4]
  q.y = 0;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f04f 0200 	mov.w	r2, #0
 80098ec:	609a      	str	r2, [r3, #8]
  q.z = sin(yaw * 0.5);
 80098ee:	f04f 0200 	mov.w	r2, #0
 80098f2:	4b1b      	ldr	r3, [pc, #108]	; (8009960 <_ZN2tfL23createQuaternionFromYawEd+0x94>)
 80098f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098f8:	f7f6 fe7a 	bl	80005f0 <__aeabi_dmul>
 80098fc:	4603      	mov	r3, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	ec44 3b17 	vmov	d7, r3, r4
 8009904:	eeb0 0a47 	vmov.f32	s0, s14
 8009908:	eef0 0a67 	vmov.f32	s1, s15
 800990c:	f003 f85c 	bl	800c9c8 <sin>
 8009910:	ec54 3b10 	vmov	r3, r4, d0
 8009914:	4618      	mov	r0, r3
 8009916:	4621      	mov	r1, r4
 8009918:	f7f7 f942 	bl	8000ba0 <__aeabi_d2f>
 800991c:	4602      	mov	r2, r0
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	60da      	str	r2, [r3, #12]
  q.w = cos(yaw * 0.5);
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <_ZN2tfL23createQuaternionFromYawEd+0x94>)
 8009928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800992c:	f7f6 fe60 	bl	80005f0 <__aeabi_dmul>
 8009930:	4603      	mov	r3, r0
 8009932:	460c      	mov	r4, r1
 8009934:	ec44 3b17 	vmov	d7, r3, r4
 8009938:	eeb0 0a47 	vmov.f32	s0, s14
 800993c:	eef0 0a67 	vmov.f32	s1, s15
 8009940:	f002 fffe 	bl	800c940 <cos>
 8009944:	ec54 3b10 	vmov	r3, r4, d0
 8009948:	4618      	mov	r0, r3
 800994a:	4621      	mov	r1, r4
 800994c:	f7f7 f928 	bl	8000ba0 <__aeabi_d2f>
 8009950:	4602      	mov	r2, r0
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	611a      	str	r2, [r3, #16]
  return q;
 8009956:	bf00      	nop
}
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	bd90      	pop	{r4, r7, pc}
 8009960:	3fe00000 	.word	0x3fe00000

08009964 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
      transforms_length(0), transforms(NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4618      	mov	r0, r3
 8009970:	f7fd fda4 	bl	80074bc <_ZN3ros3MsgC1Ev>
 8009974:	4a09      	ldr	r2, [pc, #36]	; (800999c <_ZN2tf9tfMessageC1Ev+0x38>)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	605a      	str	r2, [r3, #4]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3308      	adds	r3, #8
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff fec9 	bl	800971c <_ZN13geometry_msgs16TransformStampedC1Ev>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	64da      	str	r2, [r3, #76]	; 0x4c
    {
    }
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	0800fd00 	.word	0x0800fd00

080099a0 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	4413      	add	r3, r2
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6852      	ldr	r2, [r2, #4]
 80099b8:	b2d2      	uxtb	r2, r2
 80099ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	4413      	add	r3, r2
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6852      	ldr	r2, [r2, #4]
 80099c8:	0a12      	lsrs	r2, r2, #8
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3302      	adds	r3, #2
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	4413      	add	r3, r2
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6852      	ldr	r2, [r2, #4]
 80099da:	0c12      	lsrs	r2, r2, #16
 80099dc:	b2d2      	uxtb	r2, r2
 80099de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3303      	adds	r3, #3
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	4413      	add	r3, r2
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6852      	ldr	r2, [r2, #4]
 80099ec:	0e12      	lsrs	r2, r2, #24
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3304      	adds	r3, #4
 80099f6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80099f8:	2300      	movs	r3, #0
 80099fa:	60bb      	str	r3, [r7, #8]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d923      	bls.n	8009a4e <_ZNK2tf9tfMessage9serializeEPh+0xae>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	4613      	mov	r3, r2
 8009a18:	011b      	lsls	r3, r3, #4
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	440b      	add	r3, r1
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681c      	ldr	r4, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	011b      	lsls	r3, r3, #4
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	18c8      	adds	r0, r1, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	4413      	add	r3, r2
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	47a0      	blx	r4
 8009a3e:	4602      	mov	r2, r0
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	60bb      	str	r3, [r7, #8]
 8009a4c:	e7d6      	b.n	80099fc <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
    }
 8009a50:	4618      	mov	r0, r3
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd90      	pop	{r4, r7, pc}

08009a58 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	3301      	adds	r3, #1
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	4413      	add	r3, r2
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	021b      	lsls	r3, r3, #8
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	3302      	adds	r3, #2
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	4413      	add	r3, r2
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	041b      	lsls	r3, r3, #16
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	3303      	adds	r3, #3
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	061b      	lsls	r3, r3, #24
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d20c      	bcs.n	8009ad0 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4613      	mov	r3, r2
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f004 ffd7 	bl	800ea78 <realloc>
 8009aca:	4602      	mov	r2, r0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	64da      	str	r2, [r3, #76]	; 0x4c
      transforms_length = transforms_lengthT;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	613b      	str	r3, [r7, #16]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d91e      	bls.n	8009b22 <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f103 0008 	add.w	r0, r3, #8
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	4413      	add	r3, r2
 8009af0:	4619      	mov	r1, r3
 8009af2:	f7ff fe77 	bl	80097e4 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8009af6:	4602      	mov	r2, r0
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	4413      	add	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	4613      	mov	r3, r2
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	18c8      	adds	r0, r1, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	3308      	adds	r3, #8
 8009b12:	2244      	movs	r2, #68	; 0x44
 8009b14:	4619      	mov	r1, r3
 8009b16:	f004 ffa3 	bl	800ea60 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	613b      	str	r3, [r7, #16]
 8009b20:	e7db      	b.n	8009ada <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 8009b22:	697b      	ldr	r3, [r7, #20]
    }
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <_ZN2tf9tfMessage7getTypeEv>:

    const char * getType(){ return "tf/tfMessage"; };
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	4b03      	ldr	r3, [pc, #12]	; (8009b44 <_ZN2tf9tfMessage7getTypeEv+0x18>)
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	0800fad4 	.word	0x0800fad4

08009b48 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	0800fae4 	.word	0x0800fae4

08009b64 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff fef8 	bl	8009964 <_ZN2tf9tfMessageC1Ev>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4904      	ldr	r1, [pc, #16]	; (8009b90 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8009b80:	f7fe fb80 	bl	8008284 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	0800fb08 	.word	0x0800fb08

08009b94 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEE>:

  void init(ros::NodeHandle &nh)
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3350      	adds	r3, #80	; 0x50
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6838      	ldr	r0, [r7, #0]
 8009ba6:	f000 fd28 	bl	800a5fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  }
 8009baa:	bf00      	nop
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:

  void sendTransform(geometry_msgs::TransformStamped &transform)
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	64da      	str	r2, [r3, #76]	; 0x4c
    publisher_.publish(&internal_msg);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3350      	adds	r3, #80	; 0x50
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe fb6e 	bl	80082b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <main>:

/*******************************************************************************
 * Main function
 *******************************************************************************/
int main(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af02      	add	r7, sp, #8
	Initialize();
 8009be6:	f7fc fec3 	bl	8006970 <Initialize>
	ROS_Init();
 8009bea:	f000 f8db 	bl	8009da4 <_Z8ROS_Initv>
	BIOSTIMx_Init(TIM7, 1000, 84, 2, 0); //1ms
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	2254      	movs	r2, #84	; 0x54
 8009bf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009bfa:	4836      	ldr	r0, [pc, #216]	; (8009cd4 <main+0xf4>)
 8009bfc:	f7fa ffa8 	bl	8004b50 <BIOSTIMx_Init>
	BIOSTIMx_Init(TIM6, 5000, 84, 2, 0); //10ms
 8009c00:	2300      	movs	r3, #0
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	2302      	movs	r3, #2
 8009c06:	2254      	movs	r2, #84	; 0x54
 8009c08:	f241 3188 	movw	r1, #5000	; 0x1388
 8009c0c:	4832      	ldr	r0, [pc, #200]	; (8009cd8 <main+0xf8>)
 8009c0e:	f7fa ff9f 	bl	8004b50 <BIOSTIMx_Init>
	MODNRobotBaseInit(MODN_FWD_OMNI, 2.0, 0.0, &modn);
 8009c12:	4932      	ldr	r1, [pc, #200]	; (8009cdc <main+0xfc>)
 8009c14:	eddf 0a32 	vldr	s1, [pc, #200]	; 8009ce0 <main+0x100>
 8009c18:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f7fb fbdc 	bl	80053da <MODNRobotBaseInit>
	MODNRobotVelInit(&linear_x, &linear_y, &angular_z, &modn);
 8009c22:	4b2e      	ldr	r3, [pc, #184]	; (8009cdc <main+0xfc>)
 8009c24:	4a2f      	ldr	r2, [pc, #188]	; (8009ce4 <main+0x104>)
 8009c26:	4930      	ldr	r1, [pc, #192]	; (8009ce8 <main+0x108>)
 8009c28:	4830      	ldr	r0, [pc, #192]	; (8009cec <main+0x10c>)
 8009c2a:	f7fb fbf0 	bl	800540e <MODNRobotVelInit>
	MODNWheelVelInit(&vel1, &vel2, &vel3, &vel4, &modn);
 8009c2e:	4b2b      	ldr	r3, [pc, #172]	; (8009cdc <main+0xfc>)
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	4b2f      	ldr	r3, [pc, #188]	; (8009cf0 <main+0x110>)
 8009c34:	4a2f      	ldr	r2, [pc, #188]	; (8009cf4 <main+0x114>)
 8009c36:	4930      	ldr	r1, [pc, #192]	; (8009cf8 <main+0x118>)
 8009c38:	4830      	ldr	r0, [pc, #192]	; (8009cfc <main+0x11c>)
 8009c3a:	f7fb fbfe 	bl	800543a <MODNWheelVelInit>

	main_board_1_data_receive.common_instruction = RNS_PENDING;
 8009c3e:	4b30      	ldr	r3, [pc, #192]	; (8009d00 <main+0x120>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
	main_board_1_data_receive.common_buffer[0].data = 0;
 8009c44:	4b2e      	ldr	r3, [pc, #184]	; (8009d00 <main+0x120>)
 8009c46:	f04f 0200 	mov.w	r2, #0
 8009c4a:	605a      	str	r2, [r3, #4]
	main_board_1_data_receive.common_buffer[1].data = 0;
 8009c4c:	4b2c      	ldr	r3, [pc, #176]	; (8009d00 <main+0x120>)
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	609a      	str	r2, [r3, #8]
	main_board_1_data_receive.common_buffer[2].data = 0;
 8009c54:	4b2a      	ldr	r3, [pc, #168]	; (8009d00 <main+0x120>)
 8009c56:	f04f 0200 	mov.w	r2, #0
 8009c5a:	60da      	str	r2, [r3, #12]
	main_board_1_data_receive.common_buffer[3].data = 0;
 8009c5c:	4b28      	ldr	r3, [pc, #160]	; (8009d00 <main+0x120>)
 8009c5e:	f04f 0200 	mov.w	r2, #0
 8009c62:	611a      	str	r2, [r3, #16]

	SYSSystemInit();
 8009c64:	f001 fd78 	bl	800b758 <SYSSystemInit>
	STTStateInit();
 8009c68:	f001 fc0a 	bl	800b480 <STTStateInit>
	APPStop();
 8009c6c:	f7fc fdee 	bl	800684c <APPStop>
	APPResetPos();
 8009c70:	f7fc fb22 	bl	80062b8 <APPResetPos>
	wheel_config();
 8009c74:	f7fc ff98 	bl	8006ba8 <wheel_config>
	while (1)
	{
		t = millis();
 8009c78:	f7fc fb12 	bl	80062a0 <millis>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	4b21      	ldr	r3, [pc, #132]	; (8009d04 <main+0x124>)
 8009c80:	601a      	str	r2, [r3, #0]
		STTEventChecker();
 8009c82:	f001 fc09 	bl	800b498 <STTEventChecker>
		main_board_1_data_receive.common_instruction = RNS_PENDING;
 8009c86:	4b1e      	ldr	r3, [pc, #120]	; (8009d00 <main+0x120>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	701a      	strb	r2, [r3, #0]
		button();
 8009c8c:	f7fd f8b2 	bl	8006df4 <button>
		if (state != RNS_S_PENDING)
 8009c90:	4b1d      	ldr	r3, [pc, #116]	; (8009d08 <main+0x128>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <main+0xc4>
		{
			LED2 = 0;
 8009c98:	4a1c      	ldr	r2, [pc, #112]	; (8009d0c <main+0x12c>)
 8009c9a:	7813      	ldrb	r3, [r2, #0]
 8009c9c:	f36f 1345 	bfc	r3, #5, #1
 8009ca0:	7013      	strb	r3, [r2, #0]
 8009ca2:	e004      	b.n	8009cae <main+0xce>
		}
		else
		{
			LED2 = 1;
 8009ca4:	4a19      	ldr	r2, [pc, #100]	; (8009d0c <main+0x12c>)
 8009ca6:	7813      	ldrb	r3, [r2, #0]
 8009ca8:	f043 0320 	orr.w	r3, r3, #32
 8009cac:	7013      	strb	r3, [r2, #0]

		}
		if ((t - prev_debug_time) >= 1000 / PUBLISH_FREQUENCY)
 8009cae:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <main+0x124>)
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	4b17      	ldr	r3, [pc, #92]	; (8009d10 <main+0x130>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b31      	cmp	r3, #49	; 0x31
 8009cba:	d901      	bls.n	8009cc0 <main+0xe0>
			ROS_Update();
 8009cbc:	f000 f8ac 	bl	8009e18 <_Z10ROS_Updatev>
		LED3=0;
 8009cc0:	4a14      	ldr	r2, [pc, #80]	; (8009d14 <main+0x134>)
 8009cc2:	7813      	ldrb	r3, [r2, #0]
 8009cc4:	f36f 13c7 	bfc	r3, #7, #1
 8009cc8:	7013      	strb	r3, [r2, #0]
		nh.spinOnce();
 8009cca:	4813      	ldr	r0, [pc, #76]	; (8009d18 <main+0x138>)
 8009ccc:	f000 fd88 	bl	800a7e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
		t = millis();
 8009cd0:	e7d2      	b.n	8009c78 <main+0x98>
 8009cd2:	bf00      	nop
 8009cd4:	40001400 	.word	0x40001400
 8009cd8:	40001000 	.word	0x40001000
 8009cdc:	2000083c 	.word	0x2000083c
 8009ce0:	00000000 	.word	0x00000000
 8009ce4:	20001a84 	.word	0x20001a84
 8009ce8:	20001a80 	.word	0x20001a80
 8009cec:	20001a7c 	.word	0x20001a7c
 8009cf0:	200007f0 	.word	0x200007f0
 8009cf4:	200007ec 	.word	0x200007ec
 8009cf8:	200007e8 	.word	0x200007e8
 8009cfc:	200007e4 	.word	0x200007e4
 8009d00:	200007f8 	.word	0x200007f8
 8009d04:	20000d10 	.word	0x20000d10
 8009d08:	20000889 	.word	0x20000889
 8009d0c:	40020814 	.word	0x40020814
 8009d10:	20000d14 	.word	0x20000d14
 8009d14:	40021014 	.word	0x40021014
 8009d18:	20000d1c 	.word	0x20000d1c

08009d1c <TIM6_DAC_IRQHandler>:
extern "C"
{
#endif

	void TIM6_DAC_IRQHandler(void)
	{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
		if (TIM_GetITStatus(TIM6, TIM_IT_Update) % 200)
 8009d20:	2101      	movs	r1, #1
 8009d22:	481c      	ldr	r0, [pc, #112]	; (8009d94 <TIM6_DAC_IRQHandler+0x78>)
 8009d24:	f7f7 fd54 	bl	80017d0 <TIM_GetITStatus>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	4a1b      	ldr	r2, [pc, #108]	; (8009d98 <TIM6_DAC_IRQHandler+0x7c>)
 8009d2c:	fba2 1203 	umull	r1, r2, r2, r3
 8009d30:	0992      	lsrs	r2, r2, #6
 8009d32:	21c8      	movs	r1, #200	; 0xc8
 8009d34:	fb01 f202 	mul.w	r2, r1, r2
 8009d38:	1a9b      	subs	r3, r3, r2
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bf14      	ite	ne
 8009d40:	2301      	movne	r3, #1
 8009d42:	2300      	moveq	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d022      	beq.n	8009d90 <TIM6_DAC_IRQHandler+0x74>
		{
			if (counter % 4 == 0)
 8009d4a:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <TIM6_DAC_IRQHandler+0x80>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0303 	and.w	r3, r3, #3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10e      	bne.n	8009d74 <TIM6_DAC_IRQHandler+0x58>
				LED1 = !LED1;
 8009d56:	4a12      	ldr	r2, [pc, #72]	; (8009da0 <TIM6_DAC_IRQHandler+0x84>)
 8009d58:	4b11      	ldr	r3, [pc, #68]	; (8009da0 <TIM6_DAC_IRQHandler+0x84>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	bf0c      	ite	eq
 8009d66:	2301      	moveq	r3, #1
 8009d68:	2300      	movne	r3, #0
 8009d6a:	b2d9      	uxtb	r1, r3
 8009d6c:	7813      	ldrb	r3, [r2, #0]
 8009d6e:	f361 1345 	bfi	r3, r1, #5, #1
 8009d72:	7013      	strb	r3, [r2, #0]
			SYSSystem5ms();
 8009d74:	f001 fec8 	bl	800bb08 <SYSSystem5ms>
			SYSSystemAct();
 8009d78:	f002 f806 	bl	800bd88 <SYSSystemAct>
			counter++;
 8009d7c:	4b07      	ldr	r3, [pc, #28]	; (8009d9c <TIM6_DAC_IRQHandler+0x80>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3301      	adds	r3, #1
 8009d82:	4a06      	ldr	r2, [pc, #24]	; (8009d9c <TIM6_DAC_IRQHandler+0x80>)
 8009d84:	6013      	str	r3, [r2, #0]
			TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8009d86:	2101      	movs	r1, #1
 8009d88:	4802      	ldr	r0, [pc, #8]	; (8009d94 <TIM6_DAC_IRQHandler+0x78>)
 8009d8a:	f7f7 fd4b 	bl	8001824 <TIM_ClearITPendingBit>
		}
		return;
 8009d8e:	bf00      	nop
 8009d90:	bf00      	nop
	}
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	40001000 	.word	0x40001000
 8009d98:	51eb851f 	.word	0x51eb851f
 8009d9c:	20000d18 	.word	0x20000d18
 8009da0:	40020014 	.word	0x40020014

08009da4 <_Z8ROS_Initv>:
#ifdef __cplusplus
}
#endif

void ROS_Init()
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
	nh.initNode();
 8009da8:	4814      	ldr	r0, [pc, #80]	; (8009dfc <_Z8ROS_Initv+0x58>)
 8009daa:	f000 feef 	bl	800ab8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
	nh.getHardware()->setBaud(115200);
 8009dae:	4813      	ldr	r0, [pc, #76]	; (8009dfc <_Z8ROS_Initv+0x58>)
 8009db0:	f000 ff09 	bl	800abc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8009db4:	4603      	mov	r3, r0
 8009db6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fabe 	bl	800833c <_ZN13STM32Hardware7setBaudEl>

	nh.subscribe(cmd_vel_sub);
 8009dc0:	490f      	ldr	r1, [pc, #60]	; (8009e00 <_Z8ROS_Initv+0x5c>)
 8009dc2:	480e      	ldr	r0, [pc, #56]	; (8009dfc <_Z8ROS_Initv+0x58>)
 8009dc4:	f000 ff0b 	bl	800abde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>

	nh.advertise(info_pub);
 8009dc8:	490e      	ldr	r1, [pc, #56]	; (8009e04 <_Z8ROS_Initv+0x60>)
 8009dca:	480c      	ldr	r0, [pc, #48]	; (8009dfc <_Z8ROS_Initv+0x58>)
 8009dcc:	f000 fc15 	bl	800a5fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(imu_pub);
 8009dd0:	490d      	ldr	r1, [pc, #52]	; (8009e08 <_Z8ROS_Initv+0x64>)
 8009dd2:	480a      	ldr	r0, [pc, #40]	; (8009dfc <_Z8ROS_Initv+0x58>)
 8009dd4:	f000 fc11 	bl	800a5fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(odom_pub);
 8009dd8:	490c      	ldr	r1, [pc, #48]	; (8009e0c <_Z8ROS_Initv+0x68>)
 8009dda:	4808      	ldr	r0, [pc, #32]	; (8009dfc <_Z8ROS_Initv+0x58>)
 8009ddc:	f000 fc0d 	bl	800a5fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>

	tf_broadcaster.init(nh);
 8009de0:	4906      	ldr	r1, [pc, #24]	; (8009dfc <_Z8ROS_Initv+0x58>)
 8009de2:	480b      	ldr	r0, [pc, #44]	; (8009e10 <_Z8ROS_Initv+0x6c>)
 8009de4:	f7ff fed6 	bl	8009b94 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEE>

	// Setting for SLAM and navigation (odometry, joint states, TF)
	initOdom();
 8009de8:	f000 fb90 	bl	800a50c <_Z8initOdomv>
	// initJointStates();
	prev_update_time = millis();
 8009dec:	f7fc fa58 	bl	80062a0 <millis>
 8009df0:	4602      	mov	r2, r0
 8009df2:	4b08      	ldr	r3, [pc, #32]	; (8009e14 <_Z8ROS_Initv+0x70>)
 8009df4:	601a      	str	r2, [r3, #0]
}
 8009df6:	bf00      	nop
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000d1c 	.word	0x20000d1c
 8009e00:	20001708 	.word	0x20001708
 8009e04:	20001748 	.word	0x20001748
 8009e08:	20001814 	.word	0x20001814
 8009e0c:	200019b8 	.word	0x200019b8
 8009e10:	20001a10 	.word	0x20001a10
 8009e14:	20001a88 	.word	0x20001a88

08009e18 <_Z10ROS_Updatev>:

void ROS_Update()
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
	updateTime();
 8009e1c:	f000 fb48 	bl	800a4b0 <_Z10updateTimev>
	updateTFPrefix();
 8009e20:	f000 f92e 	bl	800a080 <_Z14updateTFPrefixv>
	publishDriveInformation();
 8009e24:	f000 f8f0 	bl	800a008 <_Z23publishDriveInformationv>
	publishImuMsg();
 8009e28:	f000 f8a4 	bl	8009f74 <_Z13publishImuMsgv>

	// sprintf(buffer, "posX:%f, posY:%f, fyaw:%f, fnyaw:%f, velX:%f, velY:%f, velW:%f", fXPos, fYPos, fyaw, fnyaw, fXVel, fYVel, fWVel);
	// info_msg.data = buffer;
	// info_pub.publish(&info_msg);

	prev_debug_time = t;
 8009e2c:	4b02      	ldr	r3, [pc, #8]	; (8009e38 <_Z10ROS_Updatev+0x20>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a02      	ldr	r2, [pc, #8]	; (8009e3c <_Z10ROS_Updatev+0x24>)
 8009e32:	6013      	str	r3, [r2, #0]
}
 8009e34:	bf00      	nop
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20000d10 	.word	0x20000d10
 8009e3c:	20000d14 	.word	0x20000d14

08009e40 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE>:

/*******************************************************************************
* Callback functions
*******************************************************************************/
void cmdVelCallback(const geometry_msgs::Twist &cmd_vel_msg)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
//	 note that the convention for forward directon in ROS is using x-axis
	linear_y = constrain(cmd_vel_msg.linear.x, -2.0, 2.0);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e4e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8009e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5a:	d502      	bpl.n	8009e62 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x22>
 8009e5c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009e60:	e00e      	b.n	8009e80 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x40>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e74:	dd02      	ble.n	8009e7c <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x3c>
 8009e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e7a:	e001      	b.n	8009e80 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x40>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	4a22      	ldr	r2, [pc, #136]	; (8009f0c <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0xcc>)
 8009e82:	6013      	str	r3, [r2, #0]
	linear_x = constrain(cmd_vel_msg.linear.y, -2.0, 2.0);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	edd3 7a03 	vldr	s15, [r3, #12]
 8009e8a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8009e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e96:	d502      	bpl.n	8009e9e <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x5e>
 8009e98:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009e9c:	e00e      	b.n	8009ebc <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x7c>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	edd3 7a03 	vldr	s15, [r3, #12]
 8009ea4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb0:	dd02      	ble.n	8009eb8 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x78>
 8009eb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eb6:	e001      	b.n	8009ebc <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x7c>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	4a14      	ldr	r2, [pc, #80]	; (8009f10 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0xd0>)
 8009ebe:	6013      	str	r3, [r2, #0]
	angular_z = constrain(cmd_vel_msg.angular.z, -2.0, 2.0);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	edd3 7a08 	vldr	s15, [r3, #32]
 8009ec6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8009eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed2:	d502      	bpl.n	8009eda <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0x9a>
 8009ed4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009ed8:	e00e      	b.n	8009ef8 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0xb8>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	edd3 7a08 	vldr	s15, [r3, #32]
 8009ee0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eec:	dd02      	ble.n	8009ef4 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0xb4>
 8009eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ef2:	e001      	b.n	8009ef8 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0xb8>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	4a06      	ldr	r2, [pc, #24]	; (8009f14 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0xd4>)
 8009efa:	6013      	str	r3, [r2, #0]
	MODN(&modn);
 8009efc:	4806      	ldr	r0, [pc, #24]	; (8009f18 <_Z14cmdVelCallbackRKN13geometry_msgs5TwistE+0xd8>)
 8009efe:	f7fb fab7 	bl	8005470 <MODN>
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20001a80 	.word	0x20001a80
 8009f10:	20001a7c 	.word	0x20001a7c
 8009f14:	20001a84 	.word	0x20001a84
 8009f18:	2000083c 	.word	0x2000083c

08009f1c <_ZN3ros3MsgaSERKS0_>:
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <_ZN13geometry_msgs10QuaternionaSERKS0_>:
  class Quaternion : public ros::Msg
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff ffe9 	bl	8009f1c <_ZN3ros3MsgaSERKS0_>
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	605a      	str	r2, [r3, #4]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	689a      	ldr	r2, [r3, #8]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	609a      	str	r2, [r3, #8]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60da      	str	r2, [r3, #12]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	691a      	ldr	r2, [r3, #16]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	611a      	str	r2, [r3, #16]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <_Z13publishImuMsgv>:

/*******************************************************************************
* Publish msgs (IMU data: angular velocity, linear acceleration, orientation)
*******************************************************************************/
void publishImuMsg(void)
{
 8009f74:	b590      	push	{r4, r7, lr}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
	imu_msg.angular_velocity.x = 0;		//imu.gyroData[0];
 8009f7a:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	655a      	str	r2, [r3, #84]	; 0x54
	imu_msg.angular_velocity.y = 0;		//imu.gyroData[1];
 8009f82:	4b19      	ldr	r3, [pc, #100]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	659a      	str	r2, [r3, #88]	; 0x58
	imu_msg.angular_velocity.z = fWVel; //imu.gyroData[2];
 8009f8a:	4b18      	ldr	r3, [pc, #96]	; (8009fec <_Z13publishImuMsgv+0x78>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a16      	ldr	r2, [pc, #88]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009f90:	65d3      	str	r3, [r2, #92]	; 0x5c
	// imu_msg.angular_velocity_covariance[5] = 0;
	// imu_msg.angular_velocity_covariance[6] = 0;
	// imu_msg.angular_velocity_covariance[7] = 0;
	// imu_msg.angular_velocity_covariance[8] = 0.02;

	imu_msg.linear_acceleration.x = fXAcc; //imu.accData[0];
 8009f92:	4b17      	ldr	r3, [pc, #92]	; (8009ff0 <_Z13publishImuMsgv+0x7c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a14      	ldr	r2, [pc, #80]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	imu_msg.linear_acceleration.y = fYAcc; //imu.accData[1];
 8009f9c:	4b15      	ldr	r3, [pc, #84]	; (8009ff4 <_Z13publishImuMsgv+0x80>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a11      	ldr	r2, [pc, #68]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009fa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	imu_msg.linear_acceleration.z = 0;	   //imu.accData[2];
 8009fa6:	4b10      	ldr	r3, [pc, #64]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009fa8:	f04f 0200 	mov.w	r2, #0
 8009fac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	//	imu_msg.orientation.w = imu.quat[0]; ??
	//	imu_msg.orientation.x = imu.quat[1]; ??
	//	imu_msg.orientation.y = imu.quat[2]; ??
	//	imu_msg.orientation.z = imu.quat[3]; ??
	imu_msg.orientation = odom.pose.pose.orientation;
 8009fb0:	4911      	ldr	r1, [pc, #68]	; (8009ff8 <_Z13publishImuMsgv+0x84>)
 8009fb2:	4812      	ldr	r0, [pc, #72]	; (8009ffc <_Z13publishImuMsgv+0x88>)
 8009fb4:	f7ff ffbe 	bl	8009f34 <_ZN13geometry_msgs10QuaternionaSERKS0_>
	// imu_msg.orientation_covariance[5] = 0;
	// imu_msg.orientation_covariance[6] = 0;
	// imu_msg.orientation_covariance[7] = 0;
	// imu_msg.orientation_covariance[8] = 0.0025;

	imu_msg.header.stamp = rosNow();
 8009fb8:	4c0b      	ldr	r4, [pc, #44]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009fba:	463b      	mov	r3, r7
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 fa95 	bl	800a4ec <_Z6rosNowv>
 8009fc2:	f104 030c 	add.w	r3, r4, #12
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fcc:	e883 0003 	stmia.w	r3, {r0, r1}
	imu_msg.header.frame_id = imu_frame_id;
 8009fd0:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009fd2:	4a0b      	ldr	r2, [pc, #44]	; (800a000 <_Z13publishImuMsgv+0x8c>)
 8009fd4:	615a      	str	r2, [r3, #20]

	imu_pub.publish(&imu_msg);
 8009fd6:	4904      	ldr	r1, [pc, #16]	; (8009fe8 <_Z13publishImuMsgv+0x74>)
 8009fd8:	480a      	ldr	r0, [pc, #40]	; (800a004 <_Z13publishImuMsgv+0x90>)
 8009fda:	f7fe f96a 	bl	80082b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8009fde:	bf00      	nop
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd90      	pop	{r4, r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	2000175c 	.word	0x2000175c
 8009fec:	20000c7c 	.word	0x20000c7c
 8009ff0:	20000c80 	.word	0x20000c80
 8009ff4:	20000c84 	.word	0x20000c84
 8009ff8:	2000185c 	.word	0x2000185c
 8009ffc:	20001774 	.word	0x20001774
 800a000:	200016a8 	.word	0x200016a8
 800a004:	20001814 	.word	0x20001814

0800a008 <_Z23publishDriveInformationv>:

/*******************************************************************************
 * Publish msgs (odometry, joint states, tf)
 *******************************************************************************/
void publishDriveInformation(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
	unsigned long time_now = millis();
 800a00e:	f7fc f947 	bl	80062a0 <millis>
 800a012:	60f8      	str	r0, [r7, #12]
	unsigned long step_time = time_now - prev_update_time;
 800a014:	4b15      	ldr	r3, [pc, #84]	; (800a06c <_Z23publishDriveInformationv+0x64>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	60bb      	str	r3, [r7, #8]

	prev_update_time = time_now;
 800a01e:	4a13      	ldr	r2, [pc, #76]	; (800a06c <_Z23publishDriveInformationv+0x64>)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6013      	str	r3, [r2, #0]
	ros::Time stamp_now = rosNow();
 800a024:	463b      	mov	r3, r7
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fa60 	bl	800a4ec <_Z6rosNowv>

	//odometry
	updateOdometry();
 800a02c:	f000 f92c 	bl	800a288 <_Z14updateOdometryv>
	odom.header.stamp = stamp_now;
 800a030:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <_Z23publishDriveInformationv+0x68>)
 800a032:	330c      	adds	r3, #12
 800a034:	463a      	mov	r2, r7
 800a036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a03a:	e883 0003 	stmia.w	r3, {r0, r1}
	odom_pub.publish(&odom);
 800a03e:	490c      	ldr	r1, [pc, #48]	; (800a070 <_Z23publishDriveInformationv+0x68>)
 800a040:	480c      	ldr	r0, [pc, #48]	; (800a074 <_Z23publishDriveInformationv+0x6c>)
 800a042:	f7fe f936 	bl	80082b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	// odometry tf
	updateTF(odom_tf);
 800a046:	480c      	ldr	r0, [pc, #48]	; (800a078 <_Z23publishDriveInformationv+0x70>)
 800a048:	f000 fa08 	bl	800a45c <_Z8updateTFRN13geometry_msgs16TransformStampedE>
	odom_tf.header.stamp = stamp_now;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <_Z23publishDriveInformationv+0x70>)
 800a04e:	330c      	adds	r3, #12
 800a050:	463a      	mov	r2, r7
 800a052:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a056:	e883 0003 	stmia.w	r3, {r0, r1}
	tf_broadcaster.sendTransform(odom_tf);
 800a05a:	4907      	ldr	r1, [pc, #28]	; (800a078 <_Z23publishDriveInformationv+0x70>)
 800a05c:	4807      	ldr	r0, [pc, #28]	; (800a07c <_Z23publishDriveInformationv+0x74>)
 800a05e:	f7ff fda8 	bl	8009bb2 <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>

	// joint states
	// updateJointStates();
	// joint_states.header.stamp = stamp_now;
	// joint_states_pub.publish(&joint_states);
}
 800a062:	bf00      	nop
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20001a88 	.word	0x20001a88
 800a070:	20001828 	.word	0x20001828
 800a074:	200019b8 	.word	0x200019b8
 800a078:	200019cc 	.word	0x200019cc
 800a07c:	20001a10 	.word	0x20001a10

0800a080 <_Z14updateTFPrefixv>:

/*******************************************************************************
* Update TF Prefix
*******************************************************************************/
void updateTFPrefix()
{
 800a080:	b5b0      	push	{r4, r5, r7, lr}
 800a082:	b090      	sub	sp, #64	; 0x40
 800a084:	af02      	add	r7, sp, #8
	static bool isChecked = false;
	char log_msg[50];

	// if (isConnected)
	// {
	if (isChecked == false)
 800a086:	4b68      	ldr	r3, [pc, #416]	; (800a228 <_Z14updateTFPrefixv+0x1a8>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	f083 0301 	eor.w	r3, r3, #1
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 80c5 	beq.w	800a220 <_Z14updateTFPrefixv+0x1a0>
	{
		nh.getParam("~tf_prefix", &get_tf_prefix);
 800a096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	2301      	movs	r3, #1
 800a09e:	4a63      	ldr	r2, [pc, #396]	; (800a22c <_Z14updateTFPrefixv+0x1ac>)
 800a0a0:	4963      	ldr	r1, [pc, #396]	; (800a230 <_Z14updateTFPrefixv+0x1b0>)
 800a0a2:	4864      	ldr	r0, [pc, #400]	; (800a234 <_Z14updateTFPrefixv+0x1b4>)
 800a0a4:	f000 fdc6 	bl	800ac34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8getParamEPKcPPcii>

		if (!strcmp(get_tf_prefix, ""))
 800a0a8:	4b60      	ldr	r3, [pc, #384]	; (800a22c <_Z14updateTFPrefixv+0x1ac>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d11f      	bne.n	800a0f2 <_Z14updateTFPrefixv+0x72>
		{
			sprintf(odom_header_frame_id, "odom");
 800a0b2:	4b61      	ldr	r3, [pc, #388]	; (800a238 <_Z14updateTFPrefixv+0x1b8>)
 800a0b4:	4a61      	ldr	r2, [pc, #388]	; (800a23c <_Z14updateTFPrefixv+0x1bc>)
 800a0b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0ba:	6018      	str	r0, [r3, #0]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	7019      	strb	r1, [r3, #0]
			sprintf(odom_child_frame_id, "base_footprint");
 800a0c0:	4a5f      	ldr	r2, [pc, #380]	; (800a240 <_Z14updateTFPrefixv+0x1c0>)
 800a0c2:	4b60      	ldr	r3, [pc, #384]	; (800a244 <_Z14updateTFPrefixv+0x1c4>)
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a0c8:	c407      	stmia	r4!, {r0, r1, r2}
 800a0ca:	8023      	strh	r3, [r4, #0]
 800a0cc:	3402      	adds	r4, #2
 800a0ce:	0c1b      	lsrs	r3, r3, #16
 800a0d0:	7023      	strb	r3, [r4, #0]

			sprintf(imu_frame_id, "imu_link");
 800a0d2:	4b5d      	ldr	r3, [pc, #372]	; (800a248 <_Z14updateTFPrefixv+0x1c8>)
 800a0d4:	4a5d      	ldr	r2, [pc, #372]	; (800a24c <_Z14updateTFPrefixv+0x1cc>)
 800a0d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0d8:	c303      	stmia	r3!, {r0, r1}
 800a0da:	701a      	strb	r2, [r3, #0]
			sprintf(mag_frame_id, "mag_link");
 800a0dc:	4b5c      	ldr	r3, [pc, #368]	; (800a250 <_Z14updateTFPrefixv+0x1d0>)
 800a0de:	4a5d      	ldr	r2, [pc, #372]	; (800a254 <_Z14updateTFPrefixv+0x1d4>)
 800a0e0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0e2:	c303      	stmia	r3!, {r0, r1}
 800a0e4:	701a      	strb	r2, [r3, #0]
			sprintf(joint_state_header_frame_id, "base_link");
 800a0e6:	4b5c      	ldr	r3, [pc, #368]	; (800a258 <_Z14updateTFPrefixv+0x1d8>)
 800a0e8:	4a5c      	ldr	r2, [pc, #368]	; (800a25c <_Z14updateTFPrefixv+0x1dc>)
 800a0ea:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0ec:	c303      	stmia	r3!, {r0, r1}
 800a0ee:	801a      	strh	r2, [r3, #0]
 800a0f0:	e067      	b.n	800a1c2 <_Z14updateTFPrefixv+0x142>
		}
		else
		{
			strcpy(odom_header_frame_id, get_tf_prefix);
 800a0f2:	4b4e      	ldr	r3, [pc, #312]	; (800a22c <_Z14updateTFPrefixv+0x1ac>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	484f      	ldr	r0, [pc, #316]	; (800a238 <_Z14updateTFPrefixv+0x1b8>)
 800a0fa:	f004 fd35 	bl	800eb68 <strcpy>
			strcpy(odom_child_frame_id, get_tf_prefix);
 800a0fe:	4b4b      	ldr	r3, [pc, #300]	; (800a22c <_Z14updateTFPrefixv+0x1ac>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4619      	mov	r1, r3
 800a104:	484e      	ldr	r0, [pc, #312]	; (800a240 <_Z14updateTFPrefixv+0x1c0>)
 800a106:	f004 fd2f 	bl	800eb68 <strcpy>

			strcpy(imu_frame_id, get_tf_prefix);
 800a10a:	4b48      	ldr	r3, [pc, #288]	; (800a22c <_Z14updateTFPrefixv+0x1ac>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4619      	mov	r1, r3
 800a110:	484d      	ldr	r0, [pc, #308]	; (800a248 <_Z14updateTFPrefixv+0x1c8>)
 800a112:	f004 fd29 	bl	800eb68 <strcpy>
			strcpy(mag_frame_id, get_tf_prefix);
 800a116:	4b45      	ldr	r3, [pc, #276]	; (800a22c <_Z14updateTFPrefixv+0x1ac>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4619      	mov	r1, r3
 800a11c:	484c      	ldr	r0, [pc, #304]	; (800a250 <_Z14updateTFPrefixv+0x1d0>)
 800a11e:	f004 fd23 	bl	800eb68 <strcpy>
			strcpy(joint_state_header_frame_id, get_tf_prefix);
 800a122:	4b42      	ldr	r3, [pc, #264]	; (800a22c <_Z14updateTFPrefixv+0x1ac>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4619      	mov	r1, r3
 800a128:	484b      	ldr	r0, [pc, #300]	; (800a258 <_Z14updateTFPrefixv+0x1d8>)
 800a12a:	f004 fd1d 	bl	800eb68 <strcpy>

			strcat(odom_header_frame_id, "/odom");
 800a12e:	4842      	ldr	r0, [pc, #264]	; (800a238 <_Z14updateTFPrefixv+0x1b8>)
 800a130:	f7f6 f84e 	bl	80001d0 <strlen>
 800a134:	4603      	mov	r3, r0
 800a136:	461a      	mov	r2, r3
 800a138:	4b3f      	ldr	r3, [pc, #252]	; (800a238 <_Z14updateTFPrefixv+0x1b8>)
 800a13a:	4413      	add	r3, r2
 800a13c:	4a48      	ldr	r2, [pc, #288]	; (800a260 <_Z14updateTFPrefixv+0x1e0>)
 800a13e:	6810      	ldr	r0, [r2, #0]
 800a140:	6018      	str	r0, [r3, #0]
 800a142:	8892      	ldrh	r2, [r2, #4]
 800a144:	809a      	strh	r2, [r3, #4]
			strcat(odom_child_frame_id, "/base_footprint");
 800a146:	483e      	ldr	r0, [pc, #248]	; (800a240 <_Z14updateTFPrefixv+0x1c0>)
 800a148:	f7f6 f842 	bl	80001d0 <strlen>
 800a14c:	4603      	mov	r3, r0
 800a14e:	461a      	mov	r2, r3
 800a150:	4b3b      	ldr	r3, [pc, #236]	; (800a240 <_Z14updateTFPrefixv+0x1c0>)
 800a152:	4413      	add	r3, r2
 800a154:	4a43      	ldr	r2, [pc, #268]	; (800a264 <_Z14updateTFPrefixv+0x1e4>)
 800a156:	461c      	mov	r4, r3
 800a158:	4615      	mov	r5, r2
 800a15a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a15c:	6020      	str	r0, [r4, #0]
 800a15e:	6061      	str	r1, [r4, #4]
 800a160:	60a2      	str	r2, [r4, #8]
 800a162:	60e3      	str	r3, [r4, #12]

			strcat(imu_frame_id, "/imu_link");
 800a164:	4838      	ldr	r0, [pc, #224]	; (800a248 <_Z14updateTFPrefixv+0x1c8>)
 800a166:	f7f6 f833 	bl	80001d0 <strlen>
 800a16a:	4603      	mov	r3, r0
 800a16c:	461a      	mov	r2, r3
 800a16e:	4b36      	ldr	r3, [pc, #216]	; (800a248 <_Z14updateTFPrefixv+0x1c8>)
 800a170:	4413      	add	r3, r2
 800a172:	493d      	ldr	r1, [pc, #244]	; (800a268 <_Z14updateTFPrefixv+0x1e8>)
 800a174:	461a      	mov	r2, r3
 800a176:	460b      	mov	r3, r1
 800a178:	cb03      	ldmia	r3!, {r0, r1}
 800a17a:	6010      	str	r0, [r2, #0]
 800a17c:	6051      	str	r1, [r2, #4]
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	8113      	strh	r3, [r2, #8]
			strcat(mag_frame_id, "/mag_link");
 800a182:	4833      	ldr	r0, [pc, #204]	; (800a250 <_Z14updateTFPrefixv+0x1d0>)
 800a184:	f7f6 f824 	bl	80001d0 <strlen>
 800a188:	4603      	mov	r3, r0
 800a18a:	461a      	mov	r2, r3
 800a18c:	4b30      	ldr	r3, [pc, #192]	; (800a250 <_Z14updateTFPrefixv+0x1d0>)
 800a18e:	4413      	add	r3, r2
 800a190:	4936      	ldr	r1, [pc, #216]	; (800a26c <_Z14updateTFPrefixv+0x1ec>)
 800a192:	461a      	mov	r2, r3
 800a194:	460b      	mov	r3, r1
 800a196:	cb03      	ldmia	r3!, {r0, r1}
 800a198:	6010      	str	r0, [r2, #0]
 800a19a:	6051      	str	r1, [r2, #4]
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	8113      	strh	r3, [r2, #8]
			strcat(joint_state_header_frame_id, "/base_link");
 800a1a0:	482d      	ldr	r0, [pc, #180]	; (800a258 <_Z14updateTFPrefixv+0x1d8>)
 800a1a2:	f7f6 f815 	bl	80001d0 <strlen>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4b2b      	ldr	r3, [pc, #172]	; (800a258 <_Z14updateTFPrefixv+0x1d8>)
 800a1ac:	4413      	add	r3, r2
 800a1ae:	4930      	ldr	r1, [pc, #192]	; (800a270 <_Z14updateTFPrefixv+0x1f0>)
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	cb03      	ldmia	r3!, {r0, r1}
 800a1b6:	6010      	str	r0, [r2, #0]
 800a1b8:	6051      	str	r1, [r2, #4]
 800a1ba:	8819      	ldrh	r1, [r3, #0]
 800a1bc:	789b      	ldrb	r3, [r3, #2]
 800a1be:	8111      	strh	r1, [r2, #8]
 800a1c0:	7293      	strb	r3, [r2, #10]
		}

		sprintf(log_msg, "Setup TF on Odometry [%s]", odom_header_frame_id);
 800a1c2:	1d3b      	adds	r3, r7, #4
 800a1c4:	4a1c      	ldr	r2, [pc, #112]	; (800a238 <_Z14updateTFPrefixv+0x1b8>)
 800a1c6:	492b      	ldr	r1, [pc, #172]	; (800a274 <_Z14updateTFPrefixv+0x1f4>)
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f002 fb5f 	bl	800c88c <siprintf>
		nh.loginfo(log_msg);
 800a1ce:	1d3b      	adds	r3, r7, #4
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4818      	ldr	r0, [pc, #96]	; (800a234 <_Z14updateTFPrefixv+0x1b4>)
 800a1d4:	f000 fd6a 	bl	800acac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7loginfoEPKc>

		sprintf(log_msg, "Setup TF on IMU [%s]", imu_frame_id);
 800a1d8:	1d3b      	adds	r3, r7, #4
 800a1da:	4a1b      	ldr	r2, [pc, #108]	; (800a248 <_Z14updateTFPrefixv+0x1c8>)
 800a1dc:	4926      	ldr	r1, [pc, #152]	; (800a278 <_Z14updateTFPrefixv+0x1f8>)
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f002 fb54 	bl	800c88c <siprintf>
		nh.loginfo(log_msg);
 800a1e4:	1d3b      	adds	r3, r7, #4
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4812      	ldr	r0, [pc, #72]	; (800a234 <_Z14updateTFPrefixv+0x1b4>)
 800a1ea:	f000 fd5f 	bl	800acac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7loginfoEPKc>

		sprintf(log_msg, "Setup TF on MagneticField [%s]", mag_frame_id);
 800a1ee:	1d3b      	adds	r3, r7, #4
 800a1f0:	4a17      	ldr	r2, [pc, #92]	; (800a250 <_Z14updateTFPrefixv+0x1d0>)
 800a1f2:	4922      	ldr	r1, [pc, #136]	; (800a27c <_Z14updateTFPrefixv+0x1fc>)
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f002 fb49 	bl	800c88c <siprintf>
		nh.loginfo(log_msg);
 800a1fa:	1d3b      	adds	r3, r7, #4
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	480d      	ldr	r0, [pc, #52]	; (800a234 <_Z14updateTFPrefixv+0x1b4>)
 800a200:	f000 fd54 	bl	800acac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7loginfoEPKc>

		sprintf(log_msg, "Setup TF on JointState [%s]", joint_state_header_frame_id);
 800a204:	1d3b      	adds	r3, r7, #4
 800a206:	4a14      	ldr	r2, [pc, #80]	; (800a258 <_Z14updateTFPrefixv+0x1d8>)
 800a208:	491d      	ldr	r1, [pc, #116]	; (800a280 <_Z14updateTFPrefixv+0x200>)
 800a20a:	4618      	mov	r0, r3
 800a20c:	f002 fb3e 	bl	800c88c <siprintf>
		nh.loginfo(log_msg);
 800a210:	1d3b      	adds	r3, r7, #4
 800a212:	4619      	mov	r1, r3
 800a214:	4807      	ldr	r0, [pc, #28]	; (800a234 <_Z14updateTFPrefixv+0x1b4>)
 800a216:	f000 fd49 	bl	800acac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7loginfoEPKc>

		isChecked = true;
 800a21a:	4b03      	ldr	r3, [pc, #12]	; (800a228 <_Z14updateTFPrefixv+0x1a8>)
 800a21c:	2201      	movs	r2, #1
 800a21e:	701a      	strb	r2, [r3, #0]
	// }
	// else
	// {
	// isChecked = false;
	// }
}
 800a220:	bf00      	nop
 800a222:	3738      	adds	r7, #56	; 0x38
 800a224:	46bd      	mov	sp, r7
 800a226:	bdb0      	pop	{r4, r5, r7, pc}
 800a228:	20001a8c 	.word	0x20001a8c
 800a22c:	200000d4 	.word	0x200000d4
 800a230:	0800fb0c 	.word	0x0800fb0c
 800a234:	20000d1c 	.word	0x20000d1c
 800a238:	20001668 	.word	0x20001668
 800a23c:	0800fb18 	.word	0x0800fb18
 800a240:	20001688 	.word	0x20001688
 800a244:	0800fb20 	.word	0x0800fb20
 800a248:	200016a8 	.word	0x200016a8
 800a24c:	0800fb30 	.word	0x0800fb30
 800a250:	200016c8 	.word	0x200016c8
 800a254:	0800fb3c 	.word	0x0800fb3c
 800a258:	200016e8 	.word	0x200016e8
 800a25c:	0800fb48 	.word	0x0800fb48
 800a260:	0800fb54 	.word	0x0800fb54
 800a264:	0800fb5c 	.word	0x0800fb5c
 800a268:	0800fb6c 	.word	0x0800fb6c
 800a26c:	0800fb78 	.word	0x0800fb78
 800a270:	0800fb84 	.word	0x0800fb84
 800a274:	0800fb90 	.word	0x0800fb90
 800a278:	0800fbac 	.word	0x0800fbac
 800a27c:	0800fbc4 	.word	0x0800fbc4
 800a280:	0800fbe4 	.word	0x0800fbe4
 800a284:	00000000 	.word	0x00000000

0800a288 <_Z14updateOdometryv>:

/*******************************************************************************
 * Update the odometry
 *******************************************************************************/
void updateOdometry(void)
{
 800a288:	b590      	push	{r4, r7, lr}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
// move to system.c SYSSystem5ms() //////////////////////
// original fyaw val +-180

	fdifyaw = fyaw - fprevyaw;
 800a28e:	4b52      	ldr	r3, [pc, #328]	; (800a3d8 <_Z14updateOdometryv+0x150>)
 800a290:	ed93 7a00 	vldr	s14, [r3]
 800a294:	4b51      	ldr	r3, [pc, #324]	; (800a3dc <_Z14updateOdometryv+0x154>)
 800a296:	edd3 7a00 	vldr	s15, [r3]
 800a29a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a29e:	4b50      	ldr	r3, [pc, #320]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2a0:	edc3 7a00 	vstr	s15, [r3]
	if (fdifyaw <= -180.0)
 800a2a4:	4b4e      	ldr	r3, [pc, #312]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2a6:	edd3 7a00 	vldr	s15, [r3]
 800a2aa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800a3e4 <_Z14updateOdometryv+0x15c>
 800a2ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b6:	d80a      	bhi.n	800a2ce <_Z14updateOdometryv+0x46>
		fdifyaw = 360.0 + fdifyaw;
 800a2b8:	4b49      	ldr	r3, [pc, #292]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2ba:	edd3 7a00 	vldr	s15, [r3]
 800a2be:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a3e8 <_Z14updateOdometryv+0x160>
 800a2c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2c6:	4b46      	ldr	r3, [pc, #280]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2c8:	edc3 7a00 	vstr	s15, [r3]
 800a2cc:	e018      	b.n	800a300 <_Z14updateOdometryv+0x78>
	else if (fdifyaw >= 180.0)
 800a2ce:	4b44      	ldr	r3, [pc, #272]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2d0:	edd3 7a00 	vldr	s15, [r3]
 800a2d4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800a3ec <_Z14updateOdometryv+0x164>
 800a2d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e0:	db0a      	blt.n	800a2f8 <_Z14updateOdometryv+0x70>
		fdifyaw = 360.0 - fdifyaw;
 800a2e2:	4b3f      	ldr	r3, [pc, #252]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2e4:	edd3 7a00 	vldr	s15, [r3]
 800a2e8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800a3e8 <_Z14updateOdometryv+0x160>
 800a2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2f0:	4b3b      	ldr	r3, [pc, #236]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2f2:	edc3 7a00 	vstr	s15, [r3]
 800a2f6:	e003      	b.n	800a300 <_Z14updateOdometryv+0x78>
	else
		fdifyaw = fdifyaw;
 800a2f8:	4b39      	ldr	r3, [pc, #228]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a38      	ldr	r2, [pc, #224]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a2fe:	6013      	str	r3, [r2, #0]

	fWVel = DEG2RAD(fdifyaw) / (SAMPLE_TIME * 100);
 800a300:	4b37      	ldr	r3, [pc, #220]	; (800a3e0 <_Z14updateOdometryv+0x158>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4618      	mov	r0, r3
 800a306:	f7f6 f91f 	bl	8000548 <__aeabi_f2d>
 800a30a:	a331      	add	r3, pc, #196	; (adr r3, 800a3d0 <_Z14updateOdometryv+0x148>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f6 f96e 	bl	80005f0 <__aeabi_dmul>
 800a314:	4603      	mov	r3, r0
 800a316:	460c      	mov	r4, r1
 800a318:	4618      	mov	r0, r3
 800a31a:	4621      	mov	r1, r4
 800a31c:	f04f 0200 	mov.w	r2, #0
 800a320:	4b33      	ldr	r3, [pc, #204]	; (800a3f0 <_Z14updateOdometryv+0x168>)
 800a322:	f7f6 fa8f 	bl	8000844 <__aeabi_ddiv>
 800a326:	4603      	mov	r3, r0
 800a328:	460c      	mov	r4, r1
 800a32a:	4618      	mov	r0, r3
 800a32c:	4621      	mov	r1, r4
 800a32e:	f7f6 fc37 	bl	8000ba0 <__aeabi_d2f>
 800a332:	4602      	mov	r2, r0
 800a334:	4b2f      	ldr	r3, [pc, #188]	; (800a3f4 <_Z14updateOdometryv+0x16c>)
 800a336:	601a      	str	r2, [r3, #0]
	fprevyaw = fyaw;
 800a338:	4b27      	ldr	r3, [pc, #156]	; (800a3d8 <_Z14updateOdometryv+0x150>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a27      	ldr	r2, [pc, #156]	; (800a3dc <_Z14updateOdometryv+0x154>)
 800a33e:	6013      	str	r3, [r2, #0]

	fnyaw = fyaw / 360.0;
 800a340:	4b25      	ldr	r3, [pc, #148]	; (800a3d8 <_Z14updateOdometryv+0x150>)
 800a342:	ed93 7a00 	vldr	s14, [r3]
 800a346:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a3e8 <_Z14updateOdometryv+0x160>
 800a34a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a34e:	4b2a      	ldr	r3, [pc, #168]	; (800a3f8 <_Z14updateOdometryv+0x170>)
 800a350:	edc3 7a00 	vstr	s15, [r3]

//////////////////////////////////////////////////////////

	odom.header.frame_id = odom_header_frame_id;
 800a354:	4b29      	ldr	r3, [pc, #164]	; (800a3fc <_Z14updateOdometryv+0x174>)
 800a356:	4a2a      	ldr	r2, [pc, #168]	; (800a400 <_Z14updateOdometryv+0x178>)
 800a358:	615a      	str	r2, [r3, #20]
	odom.child_frame_id = odom_child_frame_id;
 800a35a:	4b28      	ldr	r3, [pc, #160]	; (800a3fc <_Z14updateOdometryv+0x174>)
 800a35c:	4a29      	ldr	r2, [pc, #164]	; (800a404 <_Z14updateOdometryv+0x17c>)
 800a35e:	619a      	str	r2, [r3, #24]

	odom.pose.pose.position.x = fXPos;
 800a360:	4b29      	ldr	r3, [pc, #164]	; (800a408 <_Z14updateOdometryv+0x180>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a25      	ldr	r2, [pc, #148]	; (800a3fc <_Z14updateOdometryv+0x174>)
 800a366:	6293      	str	r3, [r2, #40]	; 0x28
	odom.pose.pose.position.y = fYPos;
 800a368:	4b28      	ldr	r3, [pc, #160]	; (800a40c <_Z14updateOdometryv+0x184>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a23      	ldr	r2, [pc, #140]	; (800a3fc <_Z14updateOdometryv+0x174>)
 800a36e:	62d3      	str	r3, [r2, #44]	; 0x2c
	odom.pose.pose.position.z = 0;
 800a370:	4b22      	ldr	r3, [pc, #136]	; (800a3fc <_Z14updateOdometryv+0x174>)
 800a372:	f04f 0200 	mov.w	r2, #0
 800a376:	631a      	str	r2, [r3, #48]	; 0x30
	odom.pose.pose.orientation = tf::createQuaternionFromYaw(DEG2RAD(fnyaw));
 800a378:	4b1f      	ldr	r3, [pc, #124]	; (800a3f8 <_Z14updateOdometryv+0x170>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7f6 f8e3 	bl	8000548 <__aeabi_f2d>
 800a382:	a313      	add	r3, pc, #76	; (adr r3, 800a3d0 <_Z14updateOdometryv+0x148>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f6 f932 	bl	80005f0 <__aeabi_dmul>
 800a38c:	4603      	mov	r3, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	1d39      	adds	r1, r7, #4
 800a392:	461a      	mov	r2, r3
 800a394:	4623      	mov	r3, r4
 800a396:	4608      	mov	r0, r1
 800a398:	f7ff fa98 	bl	80098cc <_ZN2tfL23createQuaternionFromYawEd>
 800a39c:	1d3b      	adds	r3, r7, #4
 800a39e:	4619      	mov	r1, r3
 800a3a0:	481b      	ldr	r0, [pc, #108]	; (800a410 <_Z14updateOdometryv+0x188>)
 800a3a2:	f7ff fdc7 	bl	8009f34 <_ZN13geometry_msgs10QuaternionaSERKS0_>

	odom.twist.twist.linear.x = fXVel;
 800a3a6:	4b1b      	ldr	r3, [pc, #108]	; (800a414 <_Z14updateOdometryv+0x18c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a14      	ldr	r2, [pc, #80]	; (800a3fc <_Z14updateOdometryv+0x174>)
 800a3ac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	odom.twist.twist.linear.y = fYVel;
 800a3b0:	4b19      	ldr	r3, [pc, #100]	; (800a418 <_Z14updateOdometryv+0x190>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a11      	ldr	r2, [pc, #68]	; (800a3fc <_Z14updateOdometryv+0x174>)
 800a3b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	odom.twist.twist.angular.z = fWVel;
 800a3ba:	4b0e      	ldr	r3, [pc, #56]	; (800a3f4 <_Z14updateOdometryv+0x16c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a0f      	ldr	r2, [pc, #60]	; (800a3fc <_Z14updateOdometryv+0x174>)
 800a3c0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
}
 800a3c4:	bf00      	nop
 800a3c6:	371c      	adds	r7, #28
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd90      	pop	{r4, r7, pc}
 800a3cc:	f3af 8000 	nop.w
 800a3d0:	a252dd11 	.word	0xa252dd11
 800a3d4:	3f91df46 	.word	0x3f91df46
 800a3d8:	20000c5c 	.word	0x20000c5c
 800a3dc:	20001a74 	.word	0x20001a74
 800a3e0:	20001a78 	.word	0x20001a78
 800a3e4:	c3340000 	.word	0xc3340000
 800a3e8:	43b40000 	.word	0x43b40000
 800a3ec:	43340000 	.word	0x43340000
 800a3f0:	3fe00000 	.word	0x3fe00000
 800a3f4:	20000c7c 	.word	0x20000c7c
 800a3f8:	20000c60 	.word	0x20000c60
 800a3fc:	20001828 	.word	0x20001828
 800a400:	20001668 	.word	0x20001668
 800a404:	20001688 	.word	0x20001688
 800a408:	20000c6c 	.word	0x20000c6c
 800a40c:	20000c70 	.word	0x20000c70
 800a410:	2000185c 	.word	0x2000185c
 800a414:	20000c74 	.word	0x20000c74
 800a418:	20000c78 	.word	0x20000c78

0800a41c <_ZN8std_msgs6HeaderaSERKS0_>:
  class Header : public ros::Msg
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fd75 	bl	8009f1c <_ZN3ros3MsgaSERKS0_>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	3208      	adds	r2, #8
 800a442:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a446:	e883 0003 	stmia.w	r3, {r0, r1}
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	691a      	ldr	r2, [r3, #16]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	611a      	str	r2, [r3, #16]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <_Z8updateTFRN13geometry_msgs16TransformStampedE>:

/*******************************************************************************
* CalcUpdateulate the TF
*******************************************************************************/
void updateTF(geometry_msgs::TransformStamped &odom_tf)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
	odom_tf.header = odom.header;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3304      	adds	r3, #4
 800a468:	490e      	ldr	r1, [pc, #56]	; (800a4a4 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x48>)
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff ffd6 	bl	800a41c <_ZN8std_msgs6HeaderaSERKS0_>
	odom_tf.child_frame_id = odom.child_frame_id;
 800a470:	4b0d      	ldr	r3, [pc, #52]	; (800a4a8 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x4c>)
 800a472:	699a      	ldr	r2, [r3, #24]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	619a      	str	r2, [r3, #24]
	odom_tf.transform.translation.x = odom.pose.pose.position.x;
 800a478:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x4c>)
 800a47a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	625a      	str	r2, [r3, #36]	; 0x24
	odom_tf.transform.translation.y = odom.pose.pose.position.y;
 800a480:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x4c>)
 800a482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	629a      	str	r2, [r3, #40]	; 0x28
	odom_tf.transform.translation.z = odom.pose.pose.position.z;
 800a488:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x4c>)
 800a48a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	62da      	str	r2, [r3, #44]	; 0x2c
	odom_tf.transform.rotation = odom.pose.pose.orientation;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3330      	adds	r3, #48	; 0x30
 800a494:	4905      	ldr	r1, [pc, #20]	; (800a4ac <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x50>)
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff fd4c 	bl	8009f34 <_ZN13geometry_msgs10QuaternionaSERKS0_>
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	2000182c 	.word	0x2000182c
 800a4a8:	20001828 	.word	0x20001828
 800a4ac:	2000185c 	.word	0x2000185c

0800a4b0 <_Z10updateTimev>:

/*******************************************************************************
 * Update the base time for interpolation
 *******************************************************************************/
void updateTime()
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
	current_offset = millis();
 800a4b6:	f7fb fef3 	bl	80062a0 <millis>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	4b08      	ldr	r3, [pc, #32]	; (800a4e0 <_Z10updateTimev+0x30>)
 800a4be:	601a      	str	r2, [r3, #0]
	current_time = nh.now();
 800a4c0:	4c08      	ldr	r4, [pc, #32]	; (800a4e4 <_Z10updateTimev+0x34>)
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	4908      	ldr	r1, [pc, #32]	; (800a4e8 <_Z10updateTimev+0x38>)
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fbfe 	bl	800acc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a4d4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd90      	pop	{r4, r7, pc}
 800a4e0:	20001658 	.word	0x20001658
 800a4e4:	20001650 	.word	0x20001650
 800a4e8:	20000d1c 	.word	0x20000d1c

0800a4ec <_Z6rosNowv>:

/*******************************************************************************
 * ros::Time::now() implementation
 *******************************************************************************/
ros::Time rosNow()
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	return nh.now();
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4904      	ldr	r1, [pc, #16]	; (800a508 <_Z6rosNowv+0x1c>)
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 fbe5 	bl	800acc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>
}
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20000d1c 	.word	0x20000d1c

0800a50c <_Z8initOdomv>:

/*******************************************************************************
 * Initialization odometry data
 *******************************************************************************/
void initOdom(void)
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
	odom.pose.pose.position.x = 0.0;
 800a510:	4b17      	ldr	r3, [pc, #92]	; (800a570 <_Z8initOdomv+0x64>)
 800a512:	f04f 0200 	mov.w	r2, #0
 800a516:	629a      	str	r2, [r3, #40]	; 0x28
	odom.pose.pose.position.y = 0.0;
 800a518:	4b15      	ldr	r3, [pc, #84]	; (800a570 <_Z8initOdomv+0x64>)
 800a51a:	f04f 0200 	mov.w	r2, #0
 800a51e:	62da      	str	r2, [r3, #44]	; 0x2c
	odom.pose.pose.position.z = 0.0;
 800a520:	4b13      	ldr	r3, [pc, #76]	; (800a570 <_Z8initOdomv+0x64>)
 800a522:	f04f 0200 	mov.w	r2, #0
 800a526:	631a      	str	r2, [r3, #48]	; 0x30

	odom.pose.pose.orientation.x = 0.0;
 800a528:	4b11      	ldr	r3, [pc, #68]	; (800a570 <_Z8initOdomv+0x64>)
 800a52a:	f04f 0200 	mov.w	r2, #0
 800a52e:	639a      	str	r2, [r3, #56]	; 0x38
	odom.pose.pose.orientation.y = 0.0;
 800a530:	4b0f      	ldr	r3, [pc, #60]	; (800a570 <_Z8initOdomv+0x64>)
 800a532:	f04f 0200 	mov.w	r2, #0
 800a536:	63da      	str	r2, [r3, #60]	; 0x3c
	odom.pose.pose.orientation.z = 0.0;
 800a538:	4b0d      	ldr	r3, [pc, #52]	; (800a570 <_Z8initOdomv+0x64>)
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	641a      	str	r2, [r3, #64]	; 0x40
	odom.pose.pose.orientation.w = 0.0;
 800a540:	4b0b      	ldr	r3, [pc, #44]	; (800a570 <_Z8initOdomv+0x64>)
 800a542:	f04f 0200 	mov.w	r2, #0
 800a546:	645a      	str	r2, [r3, #68]	; 0x44

	odom.twist.twist.linear.x = 0.0;
 800a548:	4b09      	ldr	r3, [pc, #36]	; (800a570 <_Z8initOdomv+0x64>)
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	odom.twist.twist.linear.y = 0.0;
 800a552:	4b07      	ldr	r3, [pc, #28]	; (800a570 <_Z8initOdomv+0x64>)
 800a554:	f04f 0200 	mov.w	r2, #0
 800a558:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	odom.twist.twist.angular.z = 0.0;
 800a55c:	4b04      	ldr	r3, [pc, #16]	; (800a570 <_Z8initOdomv+0x64>)
 800a55e:	f04f 0200 	mov.w	r2, #0
 800a562:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 800a566:	bf00      	nop
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	20001828 	.word	0x20001828

0800a574 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b03      	cmp	r3, #3
 800a586:	d80d      	bhi.n	800a5a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	4413      	add	r3, r2
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	00d2      	lsls	r2, r2, #3
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	fa21 f202 	lsr.w	r2, r1, r2
 800a598:	b2d2      	uxtb	r2, r2
 800a59a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	60fb      	str	r3, [r7, #12]
 800a5a2:	e7ee      	b.n	800a582 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800a5a4:	bf00      	nop
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60fb      	str	r3, [r7, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d811      	bhi.n	800a5ee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	440a      	add	r2, r1
 800a5d4:	7812      	ldrb	r2, [r2, #0]
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	00d2      	lsls	r2, r2, #3
 800a5dc:	fa01 f202 	lsl.w	r2, r1, r2
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	e7ea      	b.n	800a5c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800a5ee:	bf00      	nop
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800a5fa:	b480      	push	{r7}
 800a5fc:	b085      	sub	sp, #20
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b18      	cmp	r3, #24
 800a60c:	dc1e      	bgt.n	800a64c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d111      	bne.n	800a644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	60da      	str	r2, [r3, #12]
        return true;
 800a640:	2301      	movs	r3, #1
 800a642:	e004      	b.n	800a64e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3301      	adds	r3, #1
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	e7dd      	b.n	800a608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800a64c:	2300      	movs	r3, #0
  }
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
	...

0800a65c <_ZN3ros15NodeHandleBase_C1Ev>:
class NodeHandleBase_
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	4a04      	ldr	r2, [pc, #16]	; (800a678 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	0800fe68 	.word	0x0800fe68

0800a67c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:
  NodeHandle_() : configured_(false)
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff ffe8 	bl	800a65c <_ZN3ros15NodeHandleBase_C1Ev>
 800a68c:	4a39      	ldr	r2, [pc, #228]	; (800a774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xf8>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3304      	adds	r3, #4
 800a696:	4618      	mov	r0, r3
 800a698:	f7fd fe3c 	bl	8008314 <_ZN13STM32HardwareC1Ev>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fd f862 	bl	8007774 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2b18      	cmp	r3, #24
 800a6b8:	d80b      	bhi.n	800a6d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f203 2306 	addw	r3, r3, #518	; 0x206
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	e7f0      	b.n	800a6b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x38>
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	613b      	str	r3, [r7, #16]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	2b18      	cmp	r3, #24
 800a6da:	d80a      	bhi.n	800a6f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x76>
      subscribers[i] = 0;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]
 800a6f0:	e7f1      	b.n	800a6d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60fb      	str	r3, [r7, #12]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6fc:	d209      	bcs.n	800a712 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x96>
      message_in[i] = 0;
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	331c      	adds	r3, #28
 800a706:	2200      	movs	r2, #0
 800a708:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3301      	adds	r3, #1
 800a70e:	60fb      	str	r3, [r7, #12]
 800a710:	e7f1      	b.n	800a6f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800a712:	2300      	movs	r3, #0
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a71c:	d20a      	bcs.n	800a734 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xb8>
      message_out[i] = 0;
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4413      	add	r3, r2
 800a724:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800a728:	2200      	movs	r2, #0
 800a72a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	3301      	adds	r3, #1
 800a730:	60bb      	str	r3, [r7, #8]
 800a732:	e7f0      	b.n	800a716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9a>
    req_param_resp.ints_length = 0;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    req_param_resp.ints = NULL;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.floats_length = 0;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
    req_param_resp.floats = NULL;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.ints_length = 0;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    req_param_resp.ints = NULL;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    spin_timeout_ = 0;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	619a      	str	r2, [r3, #24]
  }
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	0800fcec 	.word	0x0800fcec

0800a778 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	4a04      	ldr	r2, [pc, #16]	; (800a794 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4618      	mov	r0, r3
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	0800fe50 	.word	0x0800fe50

0800a798 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7ff ffe5 	bl	800a778 <_ZN3ros11Subscriber_C1Ev>
 800a7ae:	4a0b      	ldr	r2, [pc, #44]	; (800a7dc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	330c      	adds	r3, #12
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fd ff65 	bl	8008688 <_ZN13geometry_msgs5TwistC1Ev>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	631a      	str	r2, [r3, #48]	; 0x30
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	609a      	str	r2, [r3, #8]
  };
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	0800fcd4 	.word	0x0800fcd4

0800a7e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fd fdfe 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800a7f2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800a802:	4293      	cmp	r3, r2
 800a804:	d903      	bls.n	800a80e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
    if (mode_ != MODE_FIRST_FF)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a814:	2b00      	cmp	r3, #0
 800a816:	d009      	beq.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 2904 	ldr.w	r2, [r3, #2308]	; 0x904
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	429a      	cmp	r2, r3
 800a822:	d203      	bcs.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
      if (spin_timeout_ > 0)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d013      	beq.n	800a85c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3304      	adds	r3, #4
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fd fdd8 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800a83e:	4602      	mov	r2, r0
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	1ad2      	subs	r2, r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	429a      	cmp	r2, r3
 800a84a:	bf8c      	ite	hi
 800a84c:	2301      	movhi	r3, #1
 800a84e:	2300      	movls	r3, #0
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800a856:	f06f 0301 	mvn.w	r3, #1
 800a85a:	e193      	b.n	800ab84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3304      	adds	r3, #4
 800a860:	4618      	mov	r0, r3
 800a862:	f7fd fd89 	bl	8008378 <_ZN13STM32Hardware4readEv>
 800a866:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f2c0 8173 	blt.w	800ab56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x376>
      checksum_ += data;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	441a      	add	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a886:	2b07      	cmp	r3, #7
 800a888:	d11d      	bne.n	800a8c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800a890:	1c59      	adds	r1, r3, #1
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	f8c2 18f0 	str.w	r1, [r2, #2288]	; 0x8f0
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	b2d1      	uxtb	r1, r2
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	4413      	add	r3, r2
 800a8a0:	460a      	mov	r2, r1
 800a8a2:	771a      	strb	r2, [r3, #28]
        bytes_--;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 800a8aa:	1e5a      	subs	r2, r3, #1
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1b7      	bne.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2208      	movs	r2, #8
 800a8c0:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 800a8c4:	e7b2      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d128      	bne.n	800a922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x142>
        if (data == 0xff)
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2bff      	cmp	r3, #255	; 0xff
 800a8d4:	d10d      	bne.n	800a8f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x112>
          mode_++;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a8dc:	1c5a      	adds	r2, r3, #1
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f103 0214 	add.w	r2, r3, #20
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 800a8f0:	e79c      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fd fd79 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	f241 3288 	movw	r2, #5000	; 0x1388
 800a906:	4293      	cmp	r3, r2
 800a908:	bf8c      	ite	hi
 800a90a:	2301      	movhi	r3, #1
 800a90c:	2300      	movls	r3, #0
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b00      	cmp	r3, #0
 800a912:	d08b      	beq.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
          return SPIN_TIMEOUT;
 800a91c:	f06f 0301 	mvn.w	r3, #1
 800a920:	e130      	b.n	800ab84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d11b      	bne.n	800a964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2bfe      	cmp	r3, #254	; 0xfe
 800a930:	d107      	bne.n	800a942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 800a940:	e774      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
          if (configured_ == false)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 800a950:	f083 0301 	eor.w	r3, r3, #1
 800a954:	b2db      	uxtb	r3, r3
 800a956:	2b00      	cmp	r3, #0
 800a958:	f43f af68 	beq.w	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f9ed 	bl	800ad3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 800a962:	e763      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d113      	bne.n	800a996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        index_ = 0;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        checksum_ = data;               /* first byte for calculating size checksum */
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 800a994:	e74a      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d110      	bne.n	800a9c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 28e8 	ldr.w	r2, [r3, #2280]	; 0x8e8
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	021b      	lsls	r3, r3, #8
 800a9aa:	441a      	add	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_++;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 800a9c0:	e734      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d116      	bne.n	800a9fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800a9d2:	425a      	negs	r2, r3
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	b2d2      	uxtb	r2, r2
 800a9d8:	bf58      	it	pl
 800a9da:	4253      	negpl	r3, r2
 800a9dc:	2bff      	cmp	r3, #255	; 0xff
 800a9de:	d107      	bne.n	800a9f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x210>
          mode_++;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800a9e6:	1c5a      	adds	r2, r3, #1
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 800a9ee:	e71d      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 800a9f8:	e718      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800aa00:	2b05      	cmp	r3, #5
 800aa02:	d10f      	bne.n	800aa24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x244>
        topic_ = data;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_++;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        checksum_ = data;               /* first byte included in checksum */
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 800aa22:	e703      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800aa2a:	2b06      	cmp	r3, #6
 800aa2c:	d117      	bne.n	800aa5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 28ec 	ldr.w	r2, [r3, #2284]	; 0x8ec
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	021b      	lsls	r3, r3, #8
 800aa38:	441a      	add	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_ = MODE_MESSAGE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2207      	movs	r2, #7
 800aa44:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if (bytes_ == 0)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f47f aeec 	bne.w	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2208      	movs	r2, #8
 800aa58:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 800aa5c:	e6e6      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	f47f aee1 	bne.w	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if ((checksum_ % 256) == 255)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800aa78:	425a      	negs	r2, r3
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	b2d2      	uxtb	r2, r2
 800aa7e:	bf58      	it	pl
 800aa80:	4253      	negpl	r3, r2
 800aa82:	2bff      	cmp	r3, #255	; 0xff
 800aa84:	f47f aed2 	bne.w	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d110      	bne.n	800aab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f952 	bl	800ad3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f96c 	bl	800ad76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
            last_sync_receive_time = c_time;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            return SPIN_ERR;
 800aaae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aab2:	e067      	b.n	800ab84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800aaba:	2b0a      	cmp	r3, #10
 800aabc:	d106      	bne.n	800aacc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	331c      	adds	r3, #28
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fa35 	bl	800af34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 800aaca:	e6af      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800aad2:	2b06      	cmp	r3, #6
 800aad4:	d10d      	bne.n	800aaf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	331c      	adds	r3, #28
 800aae0:	4619      	mov	r1, r3
 800aae2:	4610      	mov	r0, r2
 800aae4:	f7fc ff7b 	bl	80079de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 800aaf0:	e69c      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800aaf8:	2b0b      	cmp	r3, #11
 800aafa:	d104      	bne.n	800ab06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x326>
            configured_ = false;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 800ab04:	e692      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800ab0c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800ab16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f43f ae86 	beq.w	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800ab26:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800ab30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	f8d2 28ec 	ldr.w	r2, [r2, #2284]	; 0x8ec
 800ab3e:	f1a2 0164 	sub.w	r1, r2, #100	; 0x64
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800ab48:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	321c      	adds	r2, #28
 800ab50:	4611      	mov	r1, r2
 800ab52:	4798      	blx	r3
    while (true)
 800ab54:	e66a      	b.n	800a82c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 800ab56:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00f      	beq.n	800ab82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d906      	bls.n	800ab82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a2>
      requestSyncTime();
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f8e1 	bl	800ad3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
    return SPIN_OK;
 800ab82:	2300      	movs	r3, #0
  }
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  void initNode()
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
    hardware_.init();
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3304      	adds	r3, #4
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fd fbdd 	bl	8008358 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
    bytes_ = 0;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
    index_ = 0;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    topic_ = 0;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
  };
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 800abc6:	b480      	push	{r7}
 800abc8:	b083      	sub	sp, #12
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3304      	adds	r3, #4
  }
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800abe8:	2300      	movs	r3, #0
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b18      	cmp	r3, #24
 800abf0:	dc19      	bgt.n	800ac26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800abfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10d      	bne.n	800ac1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800ac0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	605a      	str	r2, [r3, #4]
        return true;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e004      	b.n	800ac28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3301      	adds	r3, #1
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	e7e2      	b.n	800abec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800ac26:	2300      	movs	r3, #0
  }
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8getParamEPKcPPcii>:
        logwarn("Failed to get param: length mismatch");
      }
    }
    return false;
  }
  bool getParam(const char* name, char** param, int length = 1, int timeout = 1000)
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	603b      	str	r3, [r7, #0]
  {
    if (requestParam(name, timeout))
 800ac42:	6a3a      	ldr	r2, [r7, #32]
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 f9be 	bl	800afc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12requestParamEPKci>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d024      	beq.n	800ac9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8getParamEPKcPPcii+0x68>
    {
      if (length == req_param_resp.strings_length)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8d3 2928 	ldr.w	r2, [r3, #2344]	; 0x928
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d11a      	bne.n	800ac94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8getParamEPKcPPcii+0x60>
      {
        //copy it over
        for (int i = 0; i < length; i++)
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	da12      	bge.n	800ac90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8getParamEPKcPPcii+0x5c>
          strcpy(param[i], req_param_resp.strings[i]);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4413      	add	r3, r2
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8d3 2930 	ldr.w	r2, [r3, #2352]	; 0x930
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4619      	mov	r1, r3
 800ac84:	f003 ff70 	bl	800eb68 <strcpy>
        for (int i = 0; i < length; i++)
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	617b      	str	r3, [r7, #20]
 800ac8e:	e7e8      	b.n	800ac62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8getParamEPKcPPcii+0x2e>
        return true;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e004      	b.n	800ac9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8getParamEPKcPPcii+0x6a>
      }
      else
      {
        logwarn("Failed to get param: length mismatch");
 800ac94:	4904      	ldr	r1, [pc, #16]	; (800aca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8getParamEPKcPPcii+0x74>)
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f000 f9de 	bl	800b058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7logwarnEPKc>
      }
    }
    return false;
 800ac9c:	2300      	movs	r3, #0
  }
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	0800fc00 	.word	0x0800fc00

0800acac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7loginfoEPKc>:
  void loginfo(const char * msg)
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::INFO, msg);
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	2101      	movs	r1, #1
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f9da 	bl	800b074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>:
  Time now()
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	3304      	adds	r3, #4
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fd fb89 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800acdc:	60f8      	str	r0, [r7, #12]
    Time current_time;
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7fd f9ce 	bl	8008080 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4a13      	ldr	r2, [pc, #76]	; (800ad34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x6c>)
 800ace8:	fba2 2303 	umull	r2, r3, r2, r3
 800acec:	099a      	lsrs	r2, r3, #6
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	441a      	add	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	4b0e      	ldr	r3, [pc, #56]	; (800ad34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x6c>)
 800acfc:	fba3 1302 	umull	r1, r3, r3, r2
 800ad00:	099b      	lsrs	r3, r3, #6
 800ad02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ad06:	fb01 f303 	mul.w	r3, r1, r3
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	4a0a      	ldr	r2, [pc, #40]	; (800ad38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x70>)
 800ad0e:	fb02 f203 	mul.w	r2, r2, r3
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	441a      	add	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fb56 	bl	800b3d4 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 800ad28:	bf00      	nop
  }
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	10624dd3 	.word	0x10624dd3
 800ad38:	000f4240 	.word	0x000f4240

0800ad3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800ad44:	f107 030c 	add.w	r3, r7, #12
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fd f9ab 	bl	80080a4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f107 020c 	add.w	r2, r7, #12
 800ad58:	210a      	movs	r1, #10
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	4798      	blx	r3
    rt_time = hardware_.time();
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd fb43 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	60da      	str	r2, [r3, #12]
  }
 800ad6e:	bf00      	nop
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
  void negotiateTopics()
 800ad76:	b590      	push	{r4, r7, lr}
 800ad78:	b08b      	sub	sp, #44	; 0x2c
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 800ad7e:	f107 030c 	add.w	r3, r7, #12
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fc ffb8 	bl	8007cf8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800ad88:	2300      	movs	r3, #0
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	2b18      	cmp	r3, #24
 800ad90:	dc63      	bgt.n	800ae5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	f203 2306 	addw	r3, r3, #518	; 0x206
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d056      	beq.n	800ae52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	f203 2306 	addw	r3, r3, #518	; 0x206
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	f203 2306 	addw	r3, r3, #518	; 0x206
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	f203 2306 	addw	r3, r3, #518	; 0x206
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3308      	adds	r3, #8
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	f203 2306 	addw	r3, r3, #518	; 0x206
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	440b      	add	r3, r1
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4618      	mov	r0, r3
 800adf2:	4790      	blx	r2
 800adf4:	4603      	mov	r3, r0
 800adf6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	f203 2306 	addw	r3, r3, #518	; 0x206
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	330c      	adds	r3, #12
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	f203 2306 	addw	r3, r3, #518	; 0x206
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	440b      	add	r3, r1
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	4790      	blx	r2
 800ae22:	4603      	mov	r3, r0
 800ae24:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800ae26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae2a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681c      	ldr	r4, [r3, #0]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	f203 2306 	addw	r3, r3, #518	; 0x206
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	4413      	add	r3, r2
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fd fa4a 	bl	80082da <_ZN3ros9Publisher15getEndpointTypeEv>
 800ae46:	4601      	mov	r1, r0
 800ae48:	f107 030c 	add.w	r3, r7, #12
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	3301      	adds	r3, #1
 800ae56:	627b      	str	r3, [r7, #36]	; 0x24
 800ae58:	e798      	b.n	800ad8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae60:	2b18      	cmp	r3, #24
 800ae62:	dc5f      	bgt.n	800af24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae68:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800ae6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d053      	beq.n	800af1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae78:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800ae7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8a:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800ae8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9a:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800ae9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3308      	adds	r3, #8
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeac:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800aeb0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	4798      	blx	r3
 800aeb8:	4603      	mov	r3, r0
 800aeba:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec0:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800aec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	330c      	adds	r3, #12
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aed2:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800aed6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aeda:	4610      	mov	r0, r2
 800aedc:	4798      	blx	r3
 800aede:	4603      	mov	r3, r0
 800aee0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800aee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681c      	ldr	r4, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef2:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800aef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3304      	adds	r3, #4
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af04:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800af08:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800af0c:	4610      	mov	r0, r2
 800af0e:	4798      	blx	r3
 800af10:	4601      	mov	r1, r0
 800af12:	f107 030c 	add.w	r3, r7, #12
 800af16:	461a      	mov	r2, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	3301      	adds	r3, #1
 800af20:	627b      	str	r3, [r7, #36]	; 0x24
 800af22:	e79c      	b.n	800ae5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
  }
 800af2c:	bf00      	nop
 800af2e:	372c      	adds	r7, #44	; 0x2c
 800af30:	46bd      	mov	sp, r7
 800af32:	bd90      	pop	{r4, r7, pc}

0800af34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800af3e:	f107 0308 	add.w	r3, r7, #8
 800af42:	4618      	mov	r0, r3
 800af44:	f7fd f8ae 	bl	80080a4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3304      	adds	r3, #4
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fd fa4e 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800af52:	4602      	mov	r2, r0
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800af5c:	f107 0308 	add.w	r3, r7, #8
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	4618      	mov	r0, r3
 800af64:	f7fd f90e 	bl	8008184 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	4914      	ldr	r1, [pc, #80]	; (800afc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800af6e:	fba1 1303 	umull	r1, r3, r1, r3
 800af72:	099b      	lsrs	r3, r3, #6
 800af74:	4413      	add	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800af78:	6939      	ldr	r1, [r7, #16]
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	4b10      	ldr	r3, [pc, #64]	; (800afc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800af7e:	fba3 0302 	umull	r0, r3, r3, r2
 800af82:	099b      	lsrs	r3, r3, #6
 800af84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af88:	fb00 f303 	mul.w	r3, r0, r3
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	4a0d      	ldr	r2, [pc, #52]	; (800afc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 800af90:	fb02 f303 	mul.w	r3, r2, r3
 800af94:	440b      	add	r3, r1
 800af96:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800af98:	f107 0308 	add.w	r3, r7, #8
 800af9c:	3304      	adds	r3, #4
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f915 	bl	800b1d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3304      	adds	r3, #4
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fd fa1f 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800afb0:	4602      	mov	r2, r0
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  }
 800afb8:	bf00      	nop
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	10624dd3 	.word	0x10624dd3
 800afc4:	000f4240 	.word	0x000f4240

0800afc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12requestParamEPKci>:
  bool requestParam(const char * name, int time_out =  1000)
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
    param_recieved = false;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
    rosserial_msgs::RequestParamRequest req;
 800afdc:	f107 0314 	add.w	r3, r7, #20
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fc fb2b 	bl	800763c <_ZN14rosserial_msgs19RequestParamRequestC1Ev>
    req.name  = (char*)name;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	61bb      	str	r3, [r7, #24]
    publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f107 0214 	add.w	r2, r7, #20
 800aff4:	2106      	movs	r1, #6
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	4798      	blx	r3
    uint32_t end_time = hardware_.time() + time_out;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	3304      	adds	r3, #4
 800affe:	4618      	mov	r0, r3
 800b000:	f7fd f9f5 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800b004:	4602      	mov	r2, r0
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4413      	add	r3, r2
 800b00a:	61fb      	str	r3, [r7, #28]
    while (!param_recieved)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f893 3908 	ldrb.w	r3, [r3, #2312]	; 0x908
 800b012:	2b00      	cmp	r3, #0
 800b014:	d119      	bne.n	800b04a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12requestParamEPKci+0x82>
      spinOnce();
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3304      	adds	r3, #4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	4798      	blx	r3
      if (hardware_.time() > end_time)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3304      	adds	r3, #4
 800b026:	4618      	mov	r0, r3
 800b028:	f7fd f9e1 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800b02c:	4602      	mov	r2, r0
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	429a      	cmp	r2, r3
 800b032:	bf8c      	ite	hi
 800b034:	2301      	movhi	r3, #1
 800b036:	2300      	movls	r3, #0
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0e6      	beq.n	800b00c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12requestParamEPKci+0x44>
        logwarn("Failed to get param: timeout expired");
 800b03e:	4905      	ldr	r1, [pc, #20]	; (800b054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12requestParamEPKci+0x8c>)
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 f809 	bl	800b058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7logwarnEPKc>
        return false;
 800b046:	2300      	movs	r3, #0
 800b048:	e000      	b.n	800b04c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12requestParamEPKci+0x84>
    return true;
 800b04a:	2301      	movs	r3, #1
  }
 800b04c:	4618      	mov	r0, r3
 800b04e:	3720      	adds	r7, #32
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	0800fc28 	.word	0x0800fc28

0800b058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7logwarnEPKc>:
  void logwarn(const char *msg)
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::WARN, msg);
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	2102      	movs	r1, #2
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f804 	bl	800b074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	460b      	mov	r3, r1
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800b082:	f107 0314 	add.w	r3, r7, #20
 800b086:	4618      	mov	r0, r3
 800b088:	f7fc fa28 	bl	80074dc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800b08c:	7afb      	ldrb	r3, [r7, #11]
 800b08e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f107 0214 	add.w	r2, r7, #20
 800b09e:	2107      	movs	r1, #7
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	4798      	blx	r3
  }
 800b0a4:	bf00      	nop
 800b0a6:	3720      	adds	r7, #32
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2b63      	cmp	r3, #99	; 0x63
 800b0bc:	dd09      	ble.n	800b0d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 800b0c4:	f083 0301 	eor.w	r3, r3, #1
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e077      	b.n	800b1c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x116>
    int l = msg->serialize(message_out + 7);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 800b0de:	3207      	adds	r2, #7
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	4798      	blx	r3
 800b0e6:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	22ff      	movs	r2, #255	; 0xff
 800b0ec:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    message_out[1] = PROTOCOL_VER;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	22fe      	movs	r2, #254	; 0xfe
 800b0f4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	b29b      	uxth	r3, r3
 800b106:	121b      	asrs	r3, r3, #8
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 241e 	ldrb.w	r2, [r3, #1054]	; 0x41e
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800b11c:	4413      	add	r3, r2
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	43db      	mvns	r3, r3
 800b122:	b2da      	uxtb	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	b21b      	sxth	r3, r3
 800b138:	121b      	asrs	r3, r3, #8
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    int chk = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800b146:	2305      	movs	r3, #5
 800b148:	61bb      	str	r3, [r7, #24]
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	1dda      	adds	r2, r3, #7
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	429a      	cmp	r2, r3
 800b152:	dd0d      	ble.n	800b170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	4413      	add	r3, r2
 800b15a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	461a      	mov	r2, r3
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	3301      	adds	r3, #1
 800b16c:	61bb      	str	r3, [r7, #24]
 800b16e:	e7ec      	b.n	800b14a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	3307      	adds	r3, #7
 800b174:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	1c53      	adds	r3, r2, #1
 800b17a:	617b      	str	r3, [r7, #20]
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	4259      	negs	r1, r3
 800b180:	b2db      	uxtb	r3, r3
 800b182:	b2c9      	uxtb	r1, r1
 800b184:	bf58      	it	pl
 800b186:	424b      	negpl	r3, r1
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	43db      	mvns	r3, r3
 800b18c:	b2d9      	uxtb	r1, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	4413      	add	r3, r2
 800b192:	460a      	mov	r2, r1
 800b194:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    if (l <= OUTPUT_SIZE)
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b19e:	dc0a      	bgt.n	800b1b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10a>
      hardware_.write(message_out, l);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	1d18      	adds	r0, r3, #4
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	f7fd f901 	bl	80083b4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	e005      	b.n	800b1c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x116>
      logerror("Message from device dropped: message larger than buffer.");
 800b1b6:	4905      	ldr	r1, [pc, #20]	; (800b1cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x120>)
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 f847 	bl	800b24c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 800b1be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3720      	adds	r7, #32
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	0800fc50 	.word	0x0800fc50

0800b1d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fd f905 	bl	80083ee <_ZN13STM32Hardware4timeEv>
 800b1e4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4914      	ldr	r1, [pc, #80]	; (800b240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 800b1ee:	fba1 1303 	umull	r1, r3, r1, r3
 800b1f2:	099b      	lsrs	r3, r3, #6
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	1e5a      	subs	r2, r3, #1
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	611a      	str	r2, [r3, #16]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	6859      	ldr	r1, [r3, #4]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4b0f      	ldr	r3, [pc, #60]	; (800b240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 800b204:	fba3 0302 	umull	r0, r3, r3, r2
 800b208:	099b      	lsrs	r3, r3, #6
 800b20a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b20e:	fb00 f303 	mul.w	r3, r0, r3
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	4a0b      	ldr	r2, [pc, #44]	; (800b244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800b216:	fb02 f303 	mul.w	r3, r2, r3
 800b21a:	1aca      	subs	r2, r1, r3
 800b21c:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 800b21e:	4413      	add	r3, r2
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6153      	str	r3, [r2, #20]
    normalizeSecNSec(sec_offset, nsec_offset);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f103 0210 	add.w	r2, r3, #16
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3314      	adds	r3, #20
 800b22e:	4619      	mov	r1, r3
 800b230:	4610      	mov	r0, r2
 800b232:	f000 f8cf 	bl	800b3d4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800b236:	bf00      	nop
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	10624dd3 	.word	0x10624dd3
 800b244:	000f4240 	.word	0x000f4240
 800b248:	3b9aca00 	.word	0x3b9aca00

0800b24c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  void logerror(const char*msg)
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::ERROR, msg);
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	2103      	movs	r1, #3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff ff0a 	bl	800b074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <_Z41__static_initialization_and_destruction_0ii>:
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d135      	bne.n	800b2e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b27e:	4293      	cmp	r3, r2
 800b280:	d130      	bne.n	800b2e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>
HardwareSerial Serial(SERIAL2);
 800b282:	2100      	movs	r1, #0
 800b284:	4819      	ldr	r0, [pc, #100]	; (800b2ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800b286:	f7fd f834 	bl	80082f2 <_ZN14HardwareSerialC1E14Serial_TypeDef>
ros::NodeHandle nh;
 800b28a:	4819      	ldr	r0, [pc, #100]	; (800b2f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800b28c:	f7ff f9f6 	bl	800a67c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
ros::Time current_time;
 800b290:	4818      	ldr	r0, [pc, #96]	; (800b2f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800b292:	f7fc fef5 	bl	8008080 <_ZN3ros4TimeC1Ev>
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub("cmd_vel", cmdVelCallback);
 800b296:	2301      	movs	r3, #1
 800b298:	4a17      	ldr	r2, [pc, #92]	; (800b2f8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800b29a:	4918      	ldr	r1, [pc, #96]	; (800b2fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800b29c:	4818      	ldr	r0, [pc, #96]	; (800b300 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800b29e:	f7ff fa7b 	bl	800a798 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
std_msgs::String info_msg;
 800b2a2:	4818      	ldr	r0, [pc, #96]	; (800b304 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800b2a4:	f7fd f8ae 	bl	8008404 <_ZN8std_msgs6StringC1Ev>
ros::Publisher info_pub("rns/info", &info_msg);
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	4a16      	ldr	r2, [pc, #88]	; (800b304 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800b2ac:	4916      	ldr	r1, [pc, #88]	; (800b308 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800b2ae:	4817      	ldr	r0, [pc, #92]	; (800b30c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800b2b0:	f7fc ffe8 	bl	8008284 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::Imu imu_msg;
 800b2b4:	4816      	ldr	r0, [pc, #88]	; (800b310 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800b2b6:	f7fe f82b 	bl	8009310 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher imu_pub("imu", &imu_msg);
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4a14      	ldr	r2, [pc, #80]	; (800b310 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800b2be:	4915      	ldr	r1, [pc, #84]	; (800b314 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b2c0:	4815      	ldr	r0, [pc, #84]	; (800b318 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b2c2:	f7fc ffdf 	bl	8008284 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
nav_msgs::Odometry odom;
 800b2c6:	4815      	ldr	r0, [pc, #84]	; (800b31c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b2c8:	f7fd ff2c 	bl	8009124 <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher odom_pub("odom", &odom);
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4a13      	ldr	r2, [pc, #76]	; (800b31c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b2d0:	4913      	ldr	r1, [pc, #76]	; (800b320 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b2d2:	4814      	ldr	r0, [pc, #80]	; (800b324 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b2d4:	f7fc ffd6 	bl	8008284 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::TransformStamped odom_tf;
 800b2d8:	4813      	ldr	r0, [pc, #76]	; (800b328 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b2da:	f7fe fa1f 	bl	800971c <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 800b2de:	4813      	ldr	r0, [pc, #76]	; (800b32c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b2e0:	f7fe fc40 	bl	8009b64 <_ZN2tf20TransformBroadcasterC1Ev>
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	20000d0c 	.word	0x20000d0c
 800b2f0:	20000d1c 	.word	0x20000d1c
 800b2f4:	20001650 	.word	0x20001650
 800b2f8:	08009e41 	.word	0x08009e41
 800b2fc:	0800fc8c 	.word	0x0800fc8c
 800b300:	20001708 	.word	0x20001708
 800b304:	20001740 	.word	0x20001740
 800b308:	0800fc94 	.word	0x0800fc94
 800b30c:	20001748 	.word	0x20001748
 800b310:	2000175c 	.word	0x2000175c
 800b314:	0800fca0 	.word	0x0800fca0
 800b318:	20001814 	.word	0x20001814
 800b31c:	20001828 	.word	0x20001828
 800b320:	0800fb18 	.word	0x0800fb18
 800b324:	200019b8 	.word	0x200019b8
 800b328:	200019cc 	.word	0x200019cc
 800b32c:	20001a10 	.word	0x20001a10

0800b330 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	330c      	adds	r3, #12
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	4618      	mov	r0, r3
 800b342:	f7fd f9e2 	bl	800870a <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	320c      	adds	r2, #12
 800b34e:	4610      	mov	r0, r2
 800b350:	4798      	blx	r3
  }
 800b352:	bf00      	nop
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 800b366:	4618      	mov	r0, r3
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	330c      	adds	r3, #12
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fd f9e8 	bl	8008754 <_ZN13geometry_msgs5Twist7getTypeEv>
 800b384:	4603      	mov	r3, r0
  }
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800b38e:	b580      	push	{r7, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	330c      	adds	r3, #12
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fd f9e8 	bl	8008770 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800b3a0:	4603      	mov	r3, r0
  }
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
    return configured_;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
  };
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <_GLOBAL__sub_I_BIOSTimingDelay>:
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b3cc:	2001      	movs	r0, #1
 800b3ce:	f7ff ff4b 	bl	800b268 <_Z41__static_initialization_and_destruction_0ii>
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include <ros_lib/ros/time.h>

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	0a5a      	lsrs	r2, r3, #9
 800b3e4:	490f      	ldr	r1, [pc, #60]	; (800b424 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800b3e6:	fba1 1202 	umull	r1, r2, r1, r2
 800b3ea:	09d2      	lsrs	r2, r2, #7
 800b3ec:	490e      	ldr	r1, [pc, #56]	; (800b428 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800b3ee:	fb01 f202 	mul.w	r2, r1, r2
 800b3f2:	1a9b      	subs	r3, r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	0a5b      	lsrs	r3, r3, #9
 800b3fc:	4a09      	ldr	r2, [pc, #36]	; (800b424 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800b3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b402:	09db      	lsrs	r3, r3, #7
 800b404:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	441a      	add	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	601a      	str	r2, [r3, #0]
}
 800b418:	bf00      	nop
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	00044b83 	.word	0x00044b83
 800b428:	3b9aca00 	.word	0x3b9aca00

0800b42c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b42c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b464 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b430:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b432:	e003      	b.n	800b43c <LoopCopyDataInit>

0800b434 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b434:	4b0c      	ldr	r3, [pc, #48]	; (800b468 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b436:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b438:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b43a:	3104      	adds	r1, #4

0800b43c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b43c:	480b      	ldr	r0, [pc, #44]	; (800b46c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b43e:	4b0c      	ldr	r3, [pc, #48]	; (800b470 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b440:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b442:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b444:	d3f6      	bcc.n	800b434 <CopyDataInit>
  ldr  r2, =_sbss
 800b446:	4a0b      	ldr	r2, [pc, #44]	; (800b474 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b448:	e002      	b.n	800b450 <LoopFillZerobss>

0800b44a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b44a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b44c:	f842 3b04 	str.w	r3, [r2], #4

0800b450 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b450:	4b09      	ldr	r3, [pc, #36]	; (800b478 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b452:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b454:	d3f9      	bcc.n	800b44a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b456:	f000 fe63 	bl	800c120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b45a:	f003 fadd 	bl	800ea18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b45e:	f7fe fbbf 	bl	8009be0 <main>
  bx  lr    
 800b462:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b464:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b468:	080102b8 	.word	0x080102b8
  ldr  r0, =_sdata
 800b46c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b470:	20000304 	.word	0x20000304
  ldr  r2, =_sbss
 800b474:	20000304 	.word	0x20000304
  ldr  r3, = _ebss
 800b478:	20001ad4 	.word	0x20001ad4

0800b47c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b47c:	e7fe      	b.n	800b47c <ADC_IRQHandler>
	...

0800b480 <STTStateInit>:


/**************************************************************/

void STTStateInit(void)
{
 800b480:	b480      	push	{r7}
 800b482:	af00      	add	r7, sp, #0
	state = RNS_S_PENDING;
 800b484:	4b03      	ldr	r3, [pc, #12]	; (800b494 <STTStateInit+0x14>)
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]
}
 800b48a:	bf00      	nop
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	20000889 	.word	0x20000889

0800b498 <STTEventChecker>:

void STTEventChecker(void)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	af00      	add	r7, sp, #0

	if(vel1 != 0 || vel2 != 0 || vel3 != 0 || vel4 != 0  ){
 800b49c:	4b3f      	ldr	r3, [pc, #252]	; (800b59c <STTEventChecker+0x104>)
 800b49e:	edd3 7a00 	vldr	s15, [r3]
 800b4a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4aa:	d117      	bne.n	800b4dc <STTEventChecker+0x44>
 800b4ac:	4b3c      	ldr	r3, [pc, #240]	; (800b5a0 <STTEventChecker+0x108>)
 800b4ae:	edd3 7a00 	vldr	s15, [r3]
 800b4b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ba:	d10f      	bne.n	800b4dc <STTEventChecker+0x44>
 800b4bc:	4b39      	ldr	r3, [pc, #228]	; (800b5a4 <STTEventChecker+0x10c>)
 800b4be:	edd3 7a00 	vldr	s15, [r3]
 800b4c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	d107      	bne.n	800b4dc <STTEventChecker+0x44>
 800b4cc:	4b36      	ldr	r3, [pc, #216]	; (800b5a8 <STTEventChecker+0x110>)
 800b4ce:	edd3 7a00 	vldr	s15, [r3]
 800b4d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4da:	d016      	beq.n	800b50a <STTEventChecker+0x72>
		main_board_1_data_receive.common_instruction = RNS_VELOCITY;
 800b4dc:	4b33      	ldr	r3, [pc, #204]	; (800b5ac <STTEventChecker+0x114>)
 800b4de:	2205      	movs	r2, #5
 800b4e0:	701a      	strb	r2, [r3, #0]
		main_board_1_data_receive.common_buffer[0].data=vel1;
 800b4e2:	4b2e      	ldr	r3, [pc, #184]	; (800b59c <STTEventChecker+0x104>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a31      	ldr	r2, [pc, #196]	; (800b5ac <STTEventChecker+0x114>)
 800b4e8:	6053      	str	r3, [r2, #4]
		main_board_1_data_receive.common_buffer[1].data=vel2;
 800b4ea:	4b2d      	ldr	r3, [pc, #180]	; (800b5a0 <STTEventChecker+0x108>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a2f      	ldr	r2, [pc, #188]	; (800b5ac <STTEventChecker+0x114>)
 800b4f0:	6093      	str	r3, [r2, #8]
		main_board_1_data_receive.common_buffer[2].data=vel3;
 800b4f2:	4b2c      	ldr	r3, [pc, #176]	; (800b5a4 <STTEventChecker+0x10c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a2d      	ldr	r2, [pc, #180]	; (800b5ac <STTEventChecker+0x114>)
 800b4f8:	60d3      	str	r3, [r2, #12]
		main_board_1_data_receive.common_buffer[3].data=vel4;
 800b4fa:	4b2b      	ldr	r3, [pc, #172]	; (800b5a8 <STTEventChecker+0x110>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a2b      	ldr	r2, [pc, #172]	; (800b5ac <STTEventChecker+0x114>)
 800b500:	6113      	str	r3, [r2, #16]
		state_flag = 0;
 800b502:	4b2b      	ldr	r3, [pc, #172]	; (800b5b0 <STTEventChecker+0x118>)
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]
 800b508:	e00d      	b.n	800b526 <STTEventChecker+0x8e>
	} else if(state_flag == 0){
 800b50a:	4b29      	ldr	r3, [pc, #164]	; (800b5b0 <STTEventChecker+0x118>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <STTEventChecker+0x88>
		main_board_1_data_receive.common_instruction = RNS_STOP;
 800b512:	4b26      	ldr	r3, [pc, #152]	; (800b5ac <STTEventChecker+0x114>)
 800b514:	2203      	movs	r2, #3
 800b516:	701a      	strb	r2, [r3, #0]
		state_flag = 1;
 800b518:	4b25      	ldr	r3, [pc, #148]	; (800b5b0 <STTEventChecker+0x118>)
 800b51a:	2201      	movs	r2, #1
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	e002      	b.n	800b526 <STTEventChecker+0x8e>
	} else{
		main_board_1_data_receive.common_instruction = RNS_PENDING;
 800b520:	4b22      	ldr	r3, [pc, #136]	; (800b5ac <STTEventChecker+0x114>)
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
	}

	if (main_board_1_data_receive.common_instruction != RNS_PENDING){
 800b526:	4b21      	ldr	r3, [pc, #132]	; (800b5ac <STTEventChecker+0x114>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d034      	beq.n	800b598 <STTEventChecker+0x100>

		sys.activate = 0;
 800b52e:	4a21      	ldr	r2, [pc, #132]	; (800b5b4 <STTEventChecker+0x11c>)
 800b530:	7813      	ldrb	r3, [r2, #0]
 800b532:	f36f 0300 	bfc	r3, #0, #1
 800b536:	7013      	strb	r3, [r2, #0]
		if (main_board_1_data_receive.common_instruction < RNS_INS_RESET)
 800b538:	4b1c      	ldr	r3, [pc, #112]	; (800b5ac <STTEventChecker+0x114>)
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d803      	bhi.n	800b548 <STTEventChecker+0xb0>
			event = RNS_E_STOP;
 800b540:	4b1d      	ldr	r3, [pc, #116]	; (800b5b8 <STTEventChecker+0x120>)
 800b542:	2200      	movs	r2, #0
 800b544:	701a      	strb	r2, [r3, #0]
 800b546:	e006      	b.n	800b556 <STTEventChecker+0xbe>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_VELOCITY)
 800b548:	4b18      	ldr	r3, [pc, #96]	; (800b5ac <STTEventChecker+0x114>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2b07      	cmp	r3, #7
 800b54e:	d802      	bhi.n	800b556 <STTEventChecker+0xbe>
			event = RNS_E_VELOCITY;
 800b550:	4b19      	ldr	r3, [pc, #100]	; (800b5b8 <STTEventChecker+0x120>)
 800b552:	2201      	movs	r2, #1
 800b554:	701a      	strb	r2, [r3, #0]


		if(transition[state][event] != 0)
 800b556:	4b19      	ldr	r3, [pc, #100]	; (800b5bc <STTEventChecker+0x124>)
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	4b16      	ldr	r3, [pc, #88]	; (800b5b8 <STTEventChecker+0x120>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	4619      	mov	r1, r3
 800b562:	4a17      	ldr	r2, [pc, #92]	; (800b5c0 <STTEventChecker+0x128>)
 800b564:	00c3      	lsls	r3, r0, #3
 800b566:	440b      	add	r3, r1
 800b568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00b      	beq.n	800b588 <STTEventChecker+0xf0>
			(transition[state][event])();
 800b570:	4b12      	ldr	r3, [pc, #72]	; (800b5bc <STTEventChecker+0x124>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <STTEventChecker+0x120>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	4619      	mov	r1, r3
 800b57c:	4a10      	ldr	r2, [pc, #64]	; (800b5c0 <STTEventChecker+0x128>)
 800b57e:	00c3      	lsls	r3, r0, #3
 800b580:	440b      	add	r3, r1
 800b582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b586:	4798      	blx	r3

		sys.activate = 1;
 800b588:	4a0a      	ldr	r2, [pc, #40]	; (800b5b4 <STTEventChecker+0x11c>)
 800b58a:	7813      	ldrb	r3, [r2, #0]
 800b58c:	f043 0301 	orr.w	r3, r3, #1
 800b590:	7013      	strb	r3, [r2, #0]
		main_board_1_data_receive.common_instruction = RNS_PENDING;
 800b592:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <STTEventChecker+0x114>)
 800b594:	2200      	movs	r2, #0
 800b596:	701a      	strb	r2, [r3, #0]
//	if(APPPrintstatus()){
//				APPPrinting(&uartbuff);
//				UART5_DMA_Send(uartbuff, strlen(uartbuff));
//
//	}
}
 800b598:	bf00      	nop
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	200007e4 	.word	0x200007e4
 800b5a0:	200007e8 	.word	0x200007e8
 800b5a4:	200007ec 	.word	0x200007ec
 800b5a8:	200007f0 	.word	0x200007f0
 800b5ac:	200007f8 	.word	0x200007f8
 800b5b0:	200007f4 	.word	0x200007f4
 800b5b4:	2000088c 	.word	0x2000088c
 800b5b8:	20000888 	.word	0x20000888
 800b5bc:	20000889 	.word	0x20000889
 800b5c0:	200000d8 	.word	0x200000d8

0800b5c4 <STTStop>:

void STTStop(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
	APPStop();
 800b5c8:	f7fb f940 	bl	800684c <APPStop>
	state = RNS_S_PENDING;
 800b5cc:	4b02      	ldr	r3, [pc, #8]	; (800b5d8 <STTStop+0x14>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
}
 800b5d2:	bf00      	nop
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20000889 	.word	0x20000889

0800b5dc <STTPendingStateVelocity>:

void STTPendingStateVelocity(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b5e0:	4b0f      	ldr	r3, [pc, #60]	; (800b620 <STTPendingStateVelocity+0x44>)
 800b5e2:	781a      	ldrb	r2, [r3, #0]
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <STTPendingStateVelocity+0x48>)
 800b5e6:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <STTPendingStateVelocity+0x44>)
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	4a0d      	ldr	r2, [pc, #52]	; (800b624 <STTPendingStateVelocity+0x48>)
 800b5ee:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b5f0:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <STTPendingStateVelocity+0x44>)
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	4a0b      	ldr	r2, [pc, #44]	; (800b624 <STTPendingStateVelocity+0x48>)
 800b5f6:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b5f8:	4b09      	ldr	r3, [pc, #36]	; (800b620 <STTPendingStateVelocity+0x44>)
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	4a09      	ldr	r2, [pc, #36]	; (800b624 <STTPendingStateVelocity+0x48>)
 800b5fe:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <STTPendingStateVelocity+0x44>)
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	4a07      	ldr	r2, [pc, #28]	; (800b624 <STTPendingStateVelocity+0x48>)
 800b606:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b608:	4806      	ldr	r0, [pc, #24]	; (800b624 <STTPendingStateVelocity+0x48>)
 800b60a:	f7fa fed1 	bl	80063b0 <APPApply>
	APPStart(&ins);
 800b60e:	4805      	ldr	r0, [pc, #20]	; (800b624 <STTPendingStateVelocity+0x48>)
 800b610:	f7fb f848 	bl	80066a4 <APPStart>
	state = RNS_S_VELOCITY;
 800b614:	4b04      	ldr	r3, [pc, #16]	; (800b628 <STTPendingStateVelocity+0x4c>)
 800b616:	2201      	movs	r2, #1
 800b618:	701a      	strb	r2, [r3, #0]
}
 800b61a:	bf00      	nop
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	200007f8 	.word	0x200007f8
 800b624:	20000868 	.word	0x20000868
 800b628:	20000889 	.word	0x20000889

0800b62c <STTVelocityStateVelocity>:

void STTVelocityStateVelocity(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b630:	4b0f      	ldr	r3, [pc, #60]	; (800b670 <STTVelocityStateVelocity+0x44>)
 800b632:	781a      	ldrb	r2, [r3, #0]
 800b634:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <STTVelocityStateVelocity+0x48>)
 800b636:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b638:	4b0d      	ldr	r3, [pc, #52]	; (800b670 <STTVelocityStateVelocity+0x44>)
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	4a0d      	ldr	r2, [pc, #52]	; (800b674 <STTVelocityStateVelocity+0x48>)
 800b63e:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <STTVelocityStateVelocity+0x44>)
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	4a0b      	ldr	r2, [pc, #44]	; (800b674 <STTVelocityStateVelocity+0x48>)
 800b646:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b648:	4b09      	ldr	r3, [pc, #36]	; (800b670 <STTVelocityStateVelocity+0x44>)
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	4a09      	ldr	r2, [pc, #36]	; (800b674 <STTVelocityStateVelocity+0x48>)
 800b64e:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b650:	4b07      	ldr	r3, [pc, #28]	; (800b670 <STTVelocityStateVelocity+0x44>)
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	4a07      	ldr	r2, [pc, #28]	; (800b674 <STTVelocityStateVelocity+0x48>)
 800b656:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b658:	4806      	ldr	r0, [pc, #24]	; (800b674 <STTVelocityStateVelocity+0x48>)
 800b65a:	f7fa fea9 	bl	80063b0 <APPApply>
	APPStart(&ins);
 800b65e:	4805      	ldr	r0, [pc, #20]	; (800b674 <STTVelocityStateVelocity+0x48>)
 800b660:	f7fb f820 	bl	80066a4 <APPStart>
	state = RNS_S_VELOCITY;
 800b664:	4b04      	ldr	r3, [pc, #16]	; (800b678 <STTVelocityStateVelocity+0x4c>)
 800b666:	2201      	movs	r2, #1
 800b668:	701a      	strb	r2, [r3, #0]
}
 800b66a:	bf00      	nop
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	200007f8 	.word	0x200007f8
 800b674:	20000868 	.word	0x20000868
 800b678:	20000889 	.word	0x20000889

0800b67c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800b67c:	b480      	push	{r7}
 800b67e:	af00      	add	r7, sp, #0
}
 800b680:	bf00      	nop
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800b68a:	b480      	push	{r7}
 800b68c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800b68e:	e7fe      	b.n	800b68e <HardFault_Handler+0x4>

0800b690 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800b694:	e7fe      	b.n	800b694 <MemManage_Handler+0x4>

0800b696 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800b696:	b480      	push	{r7}
 800b698:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800b69a:	e7fe      	b.n	800b69a <BusFault_Handler+0x4>

0800b69c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800b69c:	b480      	push	{r7}
 800b69e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800b6a0:	e7fe      	b.n	800b6a0 <UsageFault_Handler+0x4>

0800b6a2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	af00      	add	r7, sp, #0
}
 800b6a6:	bf00      	nop
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	af00      	add	r7, sp, #0
}
 800b6b4:	bf00      	nop
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	af00      	add	r7, sp, #0
}
 800b6c2:	bf00      	nop
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 800b6d0:	4b04      	ldr	r3, [pc, #16]	; (800b6e4 <_getpid+0x18>)
 800b6d2:	2258      	movs	r2, #88	; 0x58
 800b6d4:	601a      	str	r2, [r3, #0]
	return -1;
 800b6d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr
 800b6e4:	20001ad0 	.word	0x20001ad0

0800b6e8 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800b6f2:	4b05      	ldr	r3, [pc, #20]	; (800b708 <_kill+0x20>)
 800b6f4:	2258      	movs	r2, #88	; 0x58
 800b6f6:	601a      	str	r2, [r3, #0]
	return -1;
 800b6f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	20001ad0 	.word	0x20001ad0

0800b70c <_exit>:

void _exit(int32_t status)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 800b714:	e7fe      	b.n	800b714 <_exit+0x8>
	...

0800b718 <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800b720:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <_sbrk+0x38>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <_sbrk+0x16>
		heap_end = & end;
 800b728:	4b09      	ldr	r3, [pc, #36]	; (800b750 <_sbrk+0x38>)
 800b72a:	4a0a      	ldr	r2, [pc, #40]	; (800b754 <_sbrk+0x3c>)
 800b72c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800b72e:	4b08      	ldr	r3, [pc, #32]	; (800b750 <_sbrk+0x38>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800b734:	4b06      	ldr	r3, [pc, #24]	; (800b750 <_sbrk+0x38>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4413      	add	r3, r2
 800b73c:	4a04      	ldr	r2, [pc, #16]	; (800b750 <_sbrk+0x38>)
 800b73e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 800b740:	68fb      	ldr	r3, [r7, #12]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3714      	adds	r7, #20
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	20001a90 	.word	0x20001a90
 800b754:	20001ad4 	.word	0x20001ad4

0800b758 <SYSSystemInit>:
/*********************************************/
/*           Subroutine Function             */
/*********************************************/

void SYSSystemInit(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af02      	add	r7, sp, #8
	/* Left position ABT*/
	ABTInit(SAMPLE_TIME, fFLeftPosGain[0], fFLeftPosGain[1], fFLeftPosGain[2], &fFLeftPosData, &fFLeftPos, &fFLeftVel, &fFLeftAcc, &fleft_pos_data);
 800b75e:	4bb5      	ldr	r3, [pc, #724]	; (800ba34 <SYSSystemInit+0x2dc>)
 800b760:	edd3 7a00 	vldr	s15, [r3]
 800b764:	4bb3      	ldr	r3, [pc, #716]	; (800ba34 <SYSSystemInit+0x2dc>)
 800b766:	ed93 7a01 	vldr	s14, [r3, #4]
 800b76a:	4bb2      	ldr	r3, [pc, #712]	; (800ba34 <SYSSystemInit+0x2dc>)
 800b76c:	edd3 6a02 	vldr	s13, [r3, #8]
 800b770:	4bb1      	ldr	r3, [pc, #708]	; (800ba38 <SYSSystemInit+0x2e0>)
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	4bb1      	ldr	r3, [pc, #708]	; (800ba3c <SYSSystemInit+0x2e4>)
 800b776:	4ab2      	ldr	r2, [pc, #712]	; (800ba40 <SYSSystemInit+0x2e8>)
 800b778:	49b2      	ldr	r1, [pc, #712]	; (800ba44 <SYSSystemInit+0x2ec>)
 800b77a:	48b3      	ldr	r0, [pc, #716]	; (800ba48 <SYSSystemInit+0x2f0>)
 800b77c:	eef0 1a66 	vmov.f32	s3, s13
 800b780:	eeb0 1a47 	vmov.f32	s2, s14
 800b784:	eef0 0a67 	vmov.f32	s1, s15
 800b788:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800ba4c <SYSSystemInit+0x2f4>
 800b78c:	f7f6 fa80 	bl	8001c90 <ABTInit>
	ABTEstimateInit(&fleft_pos_data);
 800b790:	48a9      	ldr	r0, [pc, #676]	; (800ba38 <SYSSystemInit+0x2e0>)
 800b792:	f7f6 faaa 	bl	8001cea <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fBLeftPosGain[0], fBLeftPosGain[1], fBLeftPosGain[2], &fBLeftPosData, &fBLeftPos, &fBLeftVel, &fBLeftAcc, &bleft_pos_data);
 800b796:	4bae      	ldr	r3, [pc, #696]	; (800ba50 <SYSSystemInit+0x2f8>)
 800b798:	edd3 7a00 	vldr	s15, [r3]
 800b79c:	4bac      	ldr	r3, [pc, #688]	; (800ba50 <SYSSystemInit+0x2f8>)
 800b79e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b7a2:	4bab      	ldr	r3, [pc, #684]	; (800ba50 <SYSSystemInit+0x2f8>)
 800b7a4:	edd3 6a02 	vldr	s13, [r3, #8]
 800b7a8:	4baa      	ldr	r3, [pc, #680]	; (800ba54 <SYSSystemInit+0x2fc>)
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	4baa      	ldr	r3, [pc, #680]	; (800ba58 <SYSSystemInit+0x300>)
 800b7ae:	4aab      	ldr	r2, [pc, #684]	; (800ba5c <SYSSystemInit+0x304>)
 800b7b0:	49ab      	ldr	r1, [pc, #684]	; (800ba60 <SYSSystemInit+0x308>)
 800b7b2:	48ac      	ldr	r0, [pc, #688]	; (800ba64 <SYSSystemInit+0x30c>)
 800b7b4:	eef0 1a66 	vmov.f32	s3, s13
 800b7b8:	eeb0 1a47 	vmov.f32	s2, s14
 800b7bc:	eef0 0a67 	vmov.f32	s1, s15
 800b7c0:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 800ba4c <SYSSystemInit+0x2f4>
 800b7c4:	f7f6 fa64 	bl	8001c90 <ABTInit>
	ABTEstimateInit(&bleft_pos_data);
 800b7c8:	48a2      	ldr	r0, [pc, #648]	; (800ba54 <SYSSystemInit+0x2fc>)
 800b7ca:	f7f6 fa8e 	bl	8001cea <ABTEstimateInit>

	/* Right position ABT */
	ABTInit(SAMPLE_TIME, fFRightPosGain[0], fFRightPosGain[1], fFRightPosGain[2], &fFRightPosData, &fFRightPos, &fFRightVel, &fFRightAcc, &fright_pos_data);
 800b7ce:	4ba6      	ldr	r3, [pc, #664]	; (800ba68 <SYSSystemInit+0x310>)
 800b7d0:	edd3 7a00 	vldr	s15, [r3]
 800b7d4:	4ba4      	ldr	r3, [pc, #656]	; (800ba68 <SYSSystemInit+0x310>)
 800b7d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b7da:	4ba3      	ldr	r3, [pc, #652]	; (800ba68 <SYSSystemInit+0x310>)
 800b7dc:	edd3 6a02 	vldr	s13, [r3, #8]
 800b7e0:	4ba2      	ldr	r3, [pc, #648]	; (800ba6c <SYSSystemInit+0x314>)
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	4ba2      	ldr	r3, [pc, #648]	; (800ba70 <SYSSystemInit+0x318>)
 800b7e6:	4aa3      	ldr	r2, [pc, #652]	; (800ba74 <SYSSystemInit+0x31c>)
 800b7e8:	49a3      	ldr	r1, [pc, #652]	; (800ba78 <SYSSystemInit+0x320>)
 800b7ea:	48a4      	ldr	r0, [pc, #656]	; (800ba7c <SYSSystemInit+0x324>)
 800b7ec:	eef0 1a66 	vmov.f32	s3, s13
 800b7f0:	eeb0 1a47 	vmov.f32	s2, s14
 800b7f4:	eef0 0a67 	vmov.f32	s1, s15
 800b7f8:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800ba4c <SYSSystemInit+0x2f4>
 800b7fc:	f7f6 fa48 	bl	8001c90 <ABTInit>
	ABTEstimateInit(&fright_pos_data);
 800b800:	489a      	ldr	r0, [pc, #616]	; (800ba6c <SYSSystemInit+0x314>)
 800b802:	f7f6 fa72 	bl	8001cea <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fBRightPosGain[0], fBRightPosGain[1], fBRightPosGain[2], &fBRightPosData, &fBRightPos, &fBRightVel, &fBRightAcc, &bright_pos_data);
 800b806:	4b9e      	ldr	r3, [pc, #632]	; (800ba80 <SYSSystemInit+0x328>)
 800b808:	edd3 7a00 	vldr	s15, [r3]
 800b80c:	4b9c      	ldr	r3, [pc, #624]	; (800ba80 <SYSSystemInit+0x328>)
 800b80e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b812:	4b9b      	ldr	r3, [pc, #620]	; (800ba80 <SYSSystemInit+0x328>)
 800b814:	edd3 6a02 	vldr	s13, [r3, #8]
 800b818:	4b9a      	ldr	r3, [pc, #616]	; (800ba84 <SYSSystemInit+0x32c>)
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	4b9a      	ldr	r3, [pc, #616]	; (800ba88 <SYSSystemInit+0x330>)
 800b81e:	4a9b      	ldr	r2, [pc, #620]	; (800ba8c <SYSSystemInit+0x334>)
 800b820:	499b      	ldr	r1, [pc, #620]	; (800ba90 <SYSSystemInit+0x338>)
 800b822:	489c      	ldr	r0, [pc, #624]	; (800ba94 <SYSSystemInit+0x33c>)
 800b824:	eef0 1a66 	vmov.f32	s3, s13
 800b828:	eeb0 1a47 	vmov.f32	s2, s14
 800b82c:	eef0 0a67 	vmov.f32	s1, s15
 800b830:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ba4c <SYSSystemInit+0x2f4>
 800b834:	f7f6 fa2c 	bl	8001c90 <ABTInit>
	ABTEstimateInit(&bright_pos_data);
 800b838:	4892      	ldr	r0, [pc, #584]	; (800ba84 <SYSSystemInit+0x32c>)
 800b83a:	f7f6 fa56 	bl	8001cea <ABTEstimateInit>

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData ,&fXPos, &fXVel, &fXAcc, &x_data);
 800b83e:	4b96      	ldr	r3, [pc, #600]	; (800ba98 <SYSSystemInit+0x340>)
 800b840:	edd3 7a00 	vldr	s15, [r3]
 800b844:	4b94      	ldr	r3, [pc, #592]	; (800ba98 <SYSSystemInit+0x340>)
 800b846:	ed93 7a01 	vldr	s14, [r3, #4]
 800b84a:	4b93      	ldr	r3, [pc, #588]	; (800ba98 <SYSSystemInit+0x340>)
 800b84c:	edd3 6a02 	vldr	s13, [r3, #8]
 800b850:	4b92      	ldr	r3, [pc, #584]	; (800ba9c <SYSSystemInit+0x344>)
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	4b92      	ldr	r3, [pc, #584]	; (800baa0 <SYSSystemInit+0x348>)
 800b856:	4a93      	ldr	r2, [pc, #588]	; (800baa4 <SYSSystemInit+0x34c>)
 800b858:	4993      	ldr	r1, [pc, #588]	; (800baa8 <SYSSystemInit+0x350>)
 800b85a:	4894      	ldr	r0, [pc, #592]	; (800baac <SYSSystemInit+0x354>)
 800b85c:	eef0 1a66 	vmov.f32	s3, s13
 800b860:	eeb0 1a47 	vmov.f32	s2, s14
 800b864:	eef0 0a67 	vmov.f32	s1, s15
 800b868:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800ba4c <SYSSystemInit+0x2f4>
 800b86c:	f7f6 fa10 	bl	8001c90 <ABTInit>
	ABTEstimateInit(&x_data);
 800b870:	488a      	ldr	r0, [pc, #552]	; (800ba9c <SYSSystemInit+0x344>)
 800b872:	f7f6 fa3a 	bl	8001cea <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800b876:	4b8e      	ldr	r3, [pc, #568]	; (800bab0 <SYSSystemInit+0x358>)
 800b878:	edd3 7a00 	vldr	s15, [r3]
 800b87c:	4b8c      	ldr	r3, [pc, #560]	; (800bab0 <SYSSystemInit+0x358>)
 800b87e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b882:	4b8b      	ldr	r3, [pc, #556]	; (800bab0 <SYSSystemInit+0x358>)
 800b884:	edd3 6a02 	vldr	s13, [r3, #8]
 800b888:	4b8a      	ldr	r3, [pc, #552]	; (800bab4 <SYSSystemInit+0x35c>)
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	4b8a      	ldr	r3, [pc, #552]	; (800bab8 <SYSSystemInit+0x360>)
 800b88e:	4a8b      	ldr	r2, [pc, #556]	; (800babc <SYSSystemInit+0x364>)
 800b890:	498b      	ldr	r1, [pc, #556]	; (800bac0 <SYSSystemInit+0x368>)
 800b892:	488c      	ldr	r0, [pc, #560]	; (800bac4 <SYSSystemInit+0x36c>)
 800b894:	eef0 1a66 	vmov.f32	s3, s13
 800b898:	eeb0 1a47 	vmov.f32	s2, s14
 800b89c:	eef0 0a67 	vmov.f32	s1, s15
 800b8a0:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800ba4c <SYSSystemInit+0x2f4>
 800b8a4:	f7f6 f9f4 	bl	8001c90 <ABTInit>
	ABTEstimateInit(&y_data);
 800b8a8:	4882      	ldr	r0, [pc, #520]	; (800bab4 <SYSSystemInit+0x35c>)
 800b8aa:	f7f6 fa1e 	bl	8001cea <ABTEstimateInit>

	//ROBOCONPID
	/* Left velocity PID*/
	PIDSourceInit(&fFLeftVelErr, &fFLeftVelU, &fleft_vel);
 800b8ae:	4a86      	ldr	r2, [pc, #536]	; (800bac8 <SYSSystemInit+0x370>)
 800b8b0:	4986      	ldr	r1, [pc, #536]	; (800bacc <SYSSystemInit+0x374>)
 800b8b2:	4887      	ldr	r0, [pc, #540]	; (800bad0 <SYSSystemInit+0x378>)
 800b8b4:	f7fa f86c 	bl	8005990 <PIDSourceInit>
	PIDDelayInit(&fleft_vel);
 800b8b8:	4883      	ldr	r0, [pc, #524]	; (800bac8 <SYSSystemInit+0x370>)
 800b8ba:	f7fa f9ff 	bl	8005cbc <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFLeftVG[0], fFLeftVG[1], fFLeftVG[2], fFLeftVG[3], fFLeftVG[4], fFLeftVG[5], fFLeftVG[6], &fleft_vel);
 800b8be:	4b85      	ldr	r3, [pc, #532]	; (800bad4 <SYSSystemInit+0x37c>)
 800b8c0:	edd3 7a00 	vldr	s15, [r3]
 800b8c4:	4b83      	ldr	r3, [pc, #524]	; (800bad4 <SYSSystemInit+0x37c>)
 800b8c6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b8ca:	4b82      	ldr	r3, [pc, #520]	; (800bad4 <SYSSystemInit+0x37c>)
 800b8cc:	edd3 6a02 	vldr	s13, [r3, #8]
 800b8d0:	4b80      	ldr	r3, [pc, #512]	; (800bad4 <SYSSystemInit+0x37c>)
 800b8d2:	ed93 6a03 	vldr	s12, [r3, #12]
 800b8d6:	4b7f      	ldr	r3, [pc, #508]	; (800bad4 <SYSSystemInit+0x37c>)
 800b8d8:	edd3 5a04 	vldr	s11, [r3, #16]
 800b8dc:	4b7d      	ldr	r3, [pc, #500]	; (800bad4 <SYSSystemInit+0x37c>)
 800b8de:	ed93 5a05 	vldr	s10, [r3, #20]
 800b8e2:	4b7c      	ldr	r3, [pc, #496]	; (800bad4 <SYSSystemInit+0x37c>)
 800b8e4:	edd3 4a06 	vldr	s9, [r3, #24]
 800b8e8:	4877      	ldr	r0, [pc, #476]	; (800bac8 <SYSSystemInit+0x370>)
 800b8ea:	eef0 3a64 	vmov.f32	s7, s9
 800b8ee:	eeb0 3a45 	vmov.f32	s6, s10
 800b8f2:	eef0 2a65 	vmov.f32	s5, s11
 800b8f6:	eeb0 2a46 	vmov.f32	s4, s12
 800b8fa:	eef0 1a66 	vmov.f32	s3, s13
 800b8fe:	eeb0 1a47 	vmov.f32	s2, s14
 800b902:	eef0 0a67 	vmov.f32	s1, s15
 800b906:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800ba4c <SYSSystemInit+0x2f4>
 800b90a:	f7fa f853 	bl	80059b4 <PIDGainInit>

	PIDSourceInit(&fBLeftVelErr, &fBLeftVelU, &bleft_vel);
 800b90e:	4a72      	ldr	r2, [pc, #456]	; (800bad8 <SYSSystemInit+0x380>)
 800b910:	4972      	ldr	r1, [pc, #456]	; (800badc <SYSSystemInit+0x384>)
 800b912:	4873      	ldr	r0, [pc, #460]	; (800bae0 <SYSSystemInit+0x388>)
 800b914:	f7fa f83c 	bl	8005990 <PIDSourceInit>
	PIDDelayInit(&bleft_vel);
 800b918:	486f      	ldr	r0, [pc, #444]	; (800bad8 <SYSSystemInit+0x380>)
 800b91a:	f7fa f9cf 	bl	8005cbc <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBLeftVG[0], fBLeftVG[1], fBLeftVG[2], fBLeftVG[3], fBLeftVG[4], fBLeftVG[5], fBLeftVG[6], &bleft_vel);
 800b91e:	4b71      	ldr	r3, [pc, #452]	; (800bae4 <SYSSystemInit+0x38c>)
 800b920:	edd3 7a00 	vldr	s15, [r3]
 800b924:	4b6f      	ldr	r3, [pc, #444]	; (800bae4 <SYSSystemInit+0x38c>)
 800b926:	ed93 7a01 	vldr	s14, [r3, #4]
 800b92a:	4b6e      	ldr	r3, [pc, #440]	; (800bae4 <SYSSystemInit+0x38c>)
 800b92c:	edd3 6a02 	vldr	s13, [r3, #8]
 800b930:	4b6c      	ldr	r3, [pc, #432]	; (800bae4 <SYSSystemInit+0x38c>)
 800b932:	ed93 6a03 	vldr	s12, [r3, #12]
 800b936:	4b6b      	ldr	r3, [pc, #428]	; (800bae4 <SYSSystemInit+0x38c>)
 800b938:	edd3 5a04 	vldr	s11, [r3, #16]
 800b93c:	4b69      	ldr	r3, [pc, #420]	; (800bae4 <SYSSystemInit+0x38c>)
 800b93e:	ed93 5a05 	vldr	s10, [r3, #20]
 800b942:	4b68      	ldr	r3, [pc, #416]	; (800bae4 <SYSSystemInit+0x38c>)
 800b944:	edd3 4a06 	vldr	s9, [r3, #24]
 800b948:	4863      	ldr	r0, [pc, #396]	; (800bad8 <SYSSystemInit+0x380>)
 800b94a:	eef0 3a64 	vmov.f32	s7, s9
 800b94e:	eeb0 3a45 	vmov.f32	s6, s10
 800b952:	eef0 2a65 	vmov.f32	s5, s11
 800b956:	eeb0 2a46 	vmov.f32	s4, s12
 800b95a:	eef0 1a66 	vmov.f32	s3, s13
 800b95e:	eeb0 1a47 	vmov.f32	s2, s14
 800b962:	eef0 0a67 	vmov.f32	s1, s15
 800b966:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800ba4c <SYSSystemInit+0x2f4>
 800b96a:	f7fa f823 	bl	80059b4 <PIDGainInit>

	/* Right velocity PID*/
	PIDSourceInit(&fFRightVelErr, &fFRightVelU, &fright_vel);
 800b96e:	4a5e      	ldr	r2, [pc, #376]	; (800bae8 <SYSSystemInit+0x390>)
 800b970:	495e      	ldr	r1, [pc, #376]	; (800baec <SYSSystemInit+0x394>)
 800b972:	485f      	ldr	r0, [pc, #380]	; (800baf0 <SYSSystemInit+0x398>)
 800b974:	f7fa f80c 	bl	8005990 <PIDSourceInit>
	PIDDelayInit(&fright_vel);
 800b978:	485b      	ldr	r0, [pc, #364]	; (800bae8 <SYSSystemInit+0x390>)
 800b97a:	f7fa f99f 	bl	8005cbc <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFRightVG[0], fFRightVG[1], fFRightVG[2], fFRightVG[3], fFRightVG[4], fFRightVG[5], fFRightVG[6], &fright_vel);
 800b97e:	4b5d      	ldr	r3, [pc, #372]	; (800baf4 <SYSSystemInit+0x39c>)
 800b980:	edd3 7a00 	vldr	s15, [r3]
 800b984:	4b5b      	ldr	r3, [pc, #364]	; (800baf4 <SYSSystemInit+0x39c>)
 800b986:	ed93 7a01 	vldr	s14, [r3, #4]
 800b98a:	4b5a      	ldr	r3, [pc, #360]	; (800baf4 <SYSSystemInit+0x39c>)
 800b98c:	edd3 6a02 	vldr	s13, [r3, #8]
 800b990:	4b58      	ldr	r3, [pc, #352]	; (800baf4 <SYSSystemInit+0x39c>)
 800b992:	ed93 6a03 	vldr	s12, [r3, #12]
 800b996:	4b57      	ldr	r3, [pc, #348]	; (800baf4 <SYSSystemInit+0x39c>)
 800b998:	edd3 5a04 	vldr	s11, [r3, #16]
 800b99c:	4b55      	ldr	r3, [pc, #340]	; (800baf4 <SYSSystemInit+0x39c>)
 800b99e:	ed93 5a05 	vldr	s10, [r3, #20]
 800b9a2:	4b54      	ldr	r3, [pc, #336]	; (800baf4 <SYSSystemInit+0x39c>)
 800b9a4:	edd3 4a06 	vldr	s9, [r3, #24]
 800b9a8:	484f      	ldr	r0, [pc, #316]	; (800bae8 <SYSSystemInit+0x390>)
 800b9aa:	eef0 3a64 	vmov.f32	s7, s9
 800b9ae:	eeb0 3a45 	vmov.f32	s6, s10
 800b9b2:	eef0 2a65 	vmov.f32	s5, s11
 800b9b6:	eeb0 2a46 	vmov.f32	s4, s12
 800b9ba:	eef0 1a66 	vmov.f32	s3, s13
 800b9be:	eeb0 1a47 	vmov.f32	s2, s14
 800b9c2:	eef0 0a67 	vmov.f32	s1, s15
 800b9c6:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800ba4c <SYSSystemInit+0x2f4>
 800b9ca:	f7f9 fff3 	bl	80059b4 <PIDGainInit>

	PIDSourceInit(&fBRightVelErr, &fBRightVelU, &bright_vel);
 800b9ce:	4a4a      	ldr	r2, [pc, #296]	; (800baf8 <SYSSystemInit+0x3a0>)
 800b9d0:	494a      	ldr	r1, [pc, #296]	; (800bafc <SYSSystemInit+0x3a4>)
 800b9d2:	484b      	ldr	r0, [pc, #300]	; (800bb00 <SYSSystemInit+0x3a8>)
 800b9d4:	f7f9 ffdc 	bl	8005990 <PIDSourceInit>
	PIDDelayInit(&bright_vel);
 800b9d8:	4847      	ldr	r0, [pc, #284]	; (800baf8 <SYSSystemInit+0x3a0>)
 800b9da:	f7fa f96f 	bl	8005cbc <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBRightVG[0], fBRightVG[1], fBRightVG[2], fBRightVG[3], fBRightVG[4], fBRightVG[5], fBRightVG[6], &bright_vel);
 800b9de:	4b49      	ldr	r3, [pc, #292]	; (800bb04 <SYSSystemInit+0x3ac>)
 800b9e0:	edd3 7a00 	vldr	s15, [r3]
 800b9e4:	4b47      	ldr	r3, [pc, #284]	; (800bb04 <SYSSystemInit+0x3ac>)
 800b9e6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b9ea:	4b46      	ldr	r3, [pc, #280]	; (800bb04 <SYSSystemInit+0x3ac>)
 800b9ec:	edd3 6a02 	vldr	s13, [r3, #8]
 800b9f0:	4b44      	ldr	r3, [pc, #272]	; (800bb04 <SYSSystemInit+0x3ac>)
 800b9f2:	ed93 6a03 	vldr	s12, [r3, #12]
 800b9f6:	4b43      	ldr	r3, [pc, #268]	; (800bb04 <SYSSystemInit+0x3ac>)
 800b9f8:	edd3 5a04 	vldr	s11, [r3, #16]
 800b9fc:	4b41      	ldr	r3, [pc, #260]	; (800bb04 <SYSSystemInit+0x3ac>)
 800b9fe:	ed93 5a05 	vldr	s10, [r3, #20]
 800ba02:	4b40      	ldr	r3, [pc, #256]	; (800bb04 <SYSSystemInit+0x3ac>)
 800ba04:	edd3 4a06 	vldr	s9, [r3, #24]
 800ba08:	483b      	ldr	r0, [pc, #236]	; (800baf8 <SYSSystemInit+0x3a0>)
 800ba0a:	eef0 3a64 	vmov.f32	s7, s9
 800ba0e:	eeb0 3a45 	vmov.f32	s6, s10
 800ba12:	eef0 2a65 	vmov.f32	s5, s11
 800ba16:	eeb0 2a46 	vmov.f32	s4, s12
 800ba1a:	eef0 1a66 	vmov.f32	s3, s13
 800ba1e:	eeb0 1a47 	vmov.f32	s2, s14
 800ba22:	eef0 0a67 	vmov.f32	s1, s15
 800ba26:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800ba4c <SYSSystemInit+0x2f4>
 800ba2a:	f7f9 ffc3 	bl	80059b4 <PIDGainInit>
}
 800ba2e:	bf00      	nop
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	2000001c 	.word	0x2000001c
 800ba38:	20000890 	.word	0x20000890
 800ba3c:	20000c4c 	.word	0x20000c4c
 800ba40:	20000c3c 	.word	0x20000c3c
 800ba44:	20000c2c 	.word	0x20000c2c
 800ba48:	20000c1c 	.word	0x20000c1c
 800ba4c:	3ba3d70a 	.word	0x3ba3d70a
 800ba50:	20000034 	.word	0x20000034
 800ba54:	200008d0 	.word	0x200008d0
 800ba58:	20000c54 	.word	0x20000c54
 800ba5c:	20000c44 	.word	0x20000c44
 800ba60:	20000c34 	.word	0x20000c34
 800ba64:	20000c24 	.word	0x20000c24
 800ba68:	20000028 	.word	0x20000028
 800ba6c:	200008b0 	.word	0x200008b0
 800ba70:	20000c50 	.word	0x20000c50
 800ba74:	20000c40 	.word	0x20000c40
 800ba78:	20000c30 	.word	0x20000c30
 800ba7c:	20000c20 	.word	0x20000c20
 800ba80:	20000040 	.word	0x20000040
 800ba84:	200008f0 	.word	0x200008f0
 800ba88:	20000c58 	.word	0x20000c58
 800ba8c:	20000c48 	.word	0x20000c48
 800ba90:	20000c38 	.word	0x20000c38
 800ba94:	20000c28 	.word	0x20000c28
 800ba98:	2000004c 	.word	0x2000004c
 800ba9c:	20000910 	.word	0x20000910
 800baa0:	20000c80 	.word	0x20000c80
 800baa4:	20000c74 	.word	0x20000c74
 800baa8:	20000c6c 	.word	0x20000c6c
 800baac:	20000c64 	.word	0x20000c64
 800bab0:	20000058 	.word	0x20000058
 800bab4:	20000930 	.word	0x20000930
 800bab8:	20000c84 	.word	0x20000c84
 800babc:	20000c78 	.word	0x20000c78
 800bac0:	20000c70 	.word	0x20000c70
 800bac4:	20000c68 	.word	0x20000c68
 800bac8:	20000950 	.word	0x20000950
 800bacc:	20000c98 	.word	0x20000c98
 800bad0:	20000ca8 	.word	0x20000ca8
 800bad4:	20000064 	.word	0x20000064
 800bad8:	200009f8 	.word	0x200009f8
 800badc:	20000ca0 	.word	0x20000ca0
 800bae0:	20000cb0 	.word	0x20000cb0
 800bae4:	2000009c 	.word	0x2000009c
 800bae8:	200009a4 	.word	0x200009a4
 800baec:	20000c9c 	.word	0x20000c9c
 800baf0:	20000cac 	.word	0x20000cac
 800baf4:	20000080 	.word	0x20000080
 800baf8:	20000a4c 	.word	0x20000a4c
 800bafc:	20000ca4 	.word	0x20000ca4
 800bb00:	20000cb4 	.word	0x20000cb4
 800bb04:	200000b8 	.word	0x200000b8

0800bb08 <SYSSystem5ms>:

void SYSSystem5ms(void)
{
 800bb08:	b598      	push	{r3, r4, r7, lr}
 800bb0a:	ed2d 8b02 	vpush	{d8}
 800bb0e:	af00      	add	r7, sp, #0
	/* Obtain position for left and right */
	fFLeftPosData = fFPtd * (QEIRead(QEI6) - MIN_POSCNT);
 800bb10:	2006      	movs	r0, #6
 800bb12:	f7f7 fd11 	bl	8003538 <QEIRead>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800bb1c:	ee07 3a90 	vmov	s15, r3
 800bb20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb24:	4b73      	ldr	r3, [pc, #460]	; (800bcf4 <SYSSystem5ms+0x1ec>)
 800bb26:	edd3 7a00 	vldr	s15, [r3]
 800bb2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb2e:	4b72      	ldr	r3, [pc, #456]	; (800bcf8 <SYSSystem5ms+0x1f0>)
 800bb30:	edc3 7a00 	vstr	s15, [r3]
	fFRightPosData = fFKcd * fFPtd * (QEIRead(QEI4) - MIN_POSCNT);
 800bb34:	4b71      	ldr	r3, [pc, #452]	; (800bcfc <SYSSystem5ms+0x1f4>)
 800bb36:	ed93 7a00 	vldr	s14, [r3]
 800bb3a:	4b6e      	ldr	r3, [pc, #440]	; (800bcf4 <SYSSystem5ms+0x1ec>)
 800bb3c:	edd3 7a00 	vldr	s15, [r3]
 800bb40:	ee27 8a27 	vmul.f32	s16, s14, s15
 800bb44:	2004      	movs	r0, #4
 800bb46:	f7f7 fcf7 	bl	8003538 <QEIRead>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800bb50:	ee07 3a90 	vmov	s15, r3
 800bb54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb58:	ee68 7a27 	vmul.f32	s15, s16, s15
 800bb5c:	4b68      	ldr	r3, [pc, #416]	; (800bd00 <SYSSystem5ms+0x1f8>)
 800bb5e:	edc3 7a00 	vstr	s15, [r3]

	fBLeftPosData = fBPtd * (QEIRead(QEI1) -MIN_POSCNT);
 800bb62:	2001      	movs	r0, #1
 800bb64:	f7f7 fce8 	bl	8003538 <QEIRead>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800bb6e:	ee07 3a90 	vmov	s15, r3
 800bb72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb76:	4b63      	ldr	r3, [pc, #396]	; (800bd04 <SYSSystem5ms+0x1fc>)
 800bb78:	edd3 7a00 	vldr	s15, [r3]
 800bb7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb80:	4b61      	ldr	r3, [pc, #388]	; (800bd08 <SYSSystem5ms+0x200>)
 800bb82:	edc3 7a00 	vstr	s15, [r3]
	fBRightPosData = fBKcd * fBPtd * (QEIRead(QEI3) - MIN_POSCNT);
 800bb86:	4b61      	ldr	r3, [pc, #388]	; (800bd0c <SYSSystem5ms+0x204>)
 800bb88:	ed93 7a00 	vldr	s14, [r3]
 800bb8c:	4b5d      	ldr	r3, [pc, #372]	; (800bd04 <SYSSystem5ms+0x1fc>)
 800bb8e:	edd3 7a00 	vldr	s15, [r3]
 800bb92:	ee27 8a27 	vmul.f32	s16, s14, s15
 800bb96:	2003      	movs	r0, #3
 800bb98:	f7f7 fcce 	bl	8003538 <QEIRead>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800bba2:	ee07 3a90 	vmov	s15, r3
 800bba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbaa:	ee68 7a27 	vmul.f32	s15, s16, s15
 800bbae:	4b58      	ldr	r3, [pc, #352]	; (800bd10 <SYSSystem5ms+0x208>)
 800bbb0:	edc3 7a00 	vstr	s15, [r3]

	fXEncData = xPtd * (QEIRead(QEI2) - MIN_POSCNT);
 800bbb4:	2002      	movs	r0, #2
 800bbb6:	f7f7 fcbf 	bl	8003538 <QEIRead>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800bbc0:	ee07 3a90 	vmov	s15, r3
 800bbc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbc8:	4b52      	ldr	r3, [pc, #328]	; (800bd14 <SYSSystem5ms+0x20c>)
 800bbca:	edd3 7a00 	vldr	s15, [r3]
 800bbce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbd2:	4b51      	ldr	r3, [pc, #324]	; (800bd18 <SYSSystem5ms+0x210>)
 800bbd4:	edc3 7a00 	vstr	s15, [r3]
	fYEncData = yPtd * (QEIRead(QEI5) - MIN_POSCNT);
 800bbd8:	2005      	movs	r0, #5
 800bbda:	f7f7 fcad 	bl	8003538 <QEIRead>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800bbe4:	ee07 3a90 	vmov	s15, r3
 800bbe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbec:	4b4b      	ldr	r3, [pc, #300]	; (800bd1c <SYSSystem5ms+0x214>)
 800bbee:	edd3 7a00 	vldr	s15, [r3]
 800bbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf6:	4b4a      	ldr	r3, [pc, #296]	; (800bd20 <SYSSystem5ms+0x218>)
 800bbf8:	edc3 7a00 	vstr	s15, [r3]

	/* ABT filter */
	ABT(&fleft_pos_data);
 800bbfc:	4849      	ldr	r0, [pc, #292]	; (800bd24 <SYSSystem5ms+0x21c>)
 800bbfe:	f7f6 f88d 	bl	8001d1c <ABT>
	ABT(&fright_pos_data);
 800bc02:	4849      	ldr	r0, [pc, #292]	; (800bd28 <SYSSystem5ms+0x220>)
 800bc04:	f7f6 f88a 	bl	8001d1c <ABT>

	ABT(&bleft_pos_data);
 800bc08:	4848      	ldr	r0, [pc, #288]	; (800bd2c <SYSSystem5ms+0x224>)
 800bc0a:	f7f6 f887 	bl	8001d1c <ABT>
	ABT(&bright_pos_data);
 800bc0e:	4848      	ldr	r0, [pc, #288]	; (800bd30 <SYSSystem5ms+0x228>)
 800bc10:	f7f6 f884 	bl	8001d1c <ABT>

	ABT(&x_data);
 800bc14:	4847      	ldr	r0, [pc, #284]	; (800bd34 <SYSSystem5ms+0x22c>)
 800bc16:	f7f6 f881 	bl	8001d1c <ABT>
	ABT(&y_data);
 800bc1a:	4847      	ldr	r0, [pc, #284]	; (800bd38 <SYSSystem5ms+0x230>)
 800bc1c:	f7f6 f87e 	bl	8001d1c <ABT>

	//	fyaw = Read_IMU();
//	fyaw = (fyaw <= 180.0) ? fyaw : fyaw - 360;
	fyaw = (fyaw >= 0.0) ? fyaw : 360.0 + fyaw;
 800bc20:	4b46      	ldr	r3, [pc, #280]	; (800bd3c <SYSSystem5ms+0x234>)
 800bc22:	edd3 7a00 	vldr	s15, [r3]
 800bc26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2e:	db02      	blt.n	800bc36 <SYSSystem5ms+0x12e>
 800bc30:	4b42      	ldr	r3, [pc, #264]	; (800bd3c <SYSSystem5ms+0x234>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	e010      	b.n	800bc58 <SYSSystem5ms+0x150>
 800bc36:	4b41      	ldr	r3, [pc, #260]	; (800bd3c <SYSSystem5ms+0x234>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7f4 fc84 	bl	8000548 <__aeabi_f2d>
 800bc40:	f04f 0200 	mov.w	r2, #0
 800bc44:	4b3e      	ldr	r3, [pc, #248]	; (800bd40 <SYSSystem5ms+0x238>)
 800bc46:	f7f4 fb21 	bl	800028c <__adddf3>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	4618      	mov	r0, r3
 800bc50:	4621      	mov	r1, r4
 800bc52:	f7f4 ffa5 	bl	8000ba0 <__aeabi_d2f>
 800bc56:	4603      	mov	r3, r0
 800bc58:	4a38      	ldr	r2, [pc, #224]	; (800bd3c <SYSSystem5ms+0x234>)
 800bc5a:	6013      	str	r3, [r2, #0]

	if (sys.activate){
 800bc5c:	4b39      	ldr	r3, [pc, #228]	; (800bd44 <SYSSystem5ms+0x23c>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d03e      	beq.n	800bce8 <SYSSystem5ms+0x1e0>
		//After finish running your task, reset UF.user flag to
		//enable it to go to UserFinish state

		//UserEnd
		if (sys.vel_flag){
 800bc6a:	4b36      	ldr	r3, [pc, #216]	; (800bd44 <SYSSystem5ms+0x23c>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d037      	beq.n	800bce8 <SYSSystem5ms+0x1e0>
			fFLeftVelErr = fFLeftVelR - fFLeftVel;
 800bc78:	4b33      	ldr	r3, [pc, #204]	; (800bd48 <SYSSystem5ms+0x240>)
 800bc7a:	ed93 7a00 	vldr	s14, [r3]
 800bc7e:	4b33      	ldr	r3, [pc, #204]	; (800bd4c <SYSSystem5ms+0x244>)
 800bc80:	edd3 7a00 	vldr	s15, [r3]
 800bc84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc88:	4b31      	ldr	r3, [pc, #196]	; (800bd50 <SYSSystem5ms+0x248>)
 800bc8a:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelErr = fBLeftVelR - fBLeftVel;
 800bc8e:	4b31      	ldr	r3, [pc, #196]	; (800bd54 <SYSSystem5ms+0x24c>)
 800bc90:	ed93 7a00 	vldr	s14, [r3]
 800bc94:	4b30      	ldr	r3, [pc, #192]	; (800bd58 <SYSSystem5ms+0x250>)
 800bc96:	edd3 7a00 	vldr	s15, [r3]
 800bc9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc9e:	4b2f      	ldr	r3, [pc, #188]	; (800bd5c <SYSSystem5ms+0x254>)
 800bca0:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelErr = fFRightVelR - fFRightVel;
 800bca4:	4b2e      	ldr	r3, [pc, #184]	; (800bd60 <SYSSystem5ms+0x258>)
 800bca6:	ed93 7a00 	vldr	s14, [r3]
 800bcaa:	4b2e      	ldr	r3, [pc, #184]	; (800bd64 <SYSSystem5ms+0x25c>)
 800bcac:	edd3 7a00 	vldr	s15, [r3]
 800bcb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcb4:	4b2c      	ldr	r3, [pc, #176]	; (800bd68 <SYSSystem5ms+0x260>)
 800bcb6:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelErr = fBRightVelR - fBRightVel;
 800bcba:	4b2c      	ldr	r3, [pc, #176]	; (800bd6c <SYSSystem5ms+0x264>)
 800bcbc:	ed93 7a00 	vldr	s14, [r3]
 800bcc0:	4b2b      	ldr	r3, [pc, #172]	; (800bd70 <SYSSystem5ms+0x268>)
 800bcc2:	edd3 7a00 	vldr	s15, [r3]
 800bcc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcca:	4b2a      	ldr	r3, [pc, #168]	; (800bd74 <SYSSystem5ms+0x26c>)
 800bccc:	edc3 7a00 	vstr	s15, [r3]

			PID(&fleft_vel);
 800bcd0:	4829      	ldr	r0, [pc, #164]	; (800bd78 <SYSSystem5ms+0x270>)
 800bcd2:	f7fa f811 	bl	8005cf8 <PID>
			PID(&bleft_vel);
 800bcd6:	4829      	ldr	r0, [pc, #164]	; (800bd7c <SYSSystem5ms+0x274>)
 800bcd8:	f7fa f80e 	bl	8005cf8 <PID>
			PID(&fright_vel);
 800bcdc:	4828      	ldr	r0, [pc, #160]	; (800bd80 <SYSSystem5ms+0x278>)
 800bcde:	f7fa f80b 	bl	8005cf8 <PID>
			PID(&bright_vel);
 800bce2:	4828      	ldr	r0, [pc, #160]	; (800bd84 <SYSSystem5ms+0x27c>)
 800bce4:	f7fa f808 	bl	8005cf8 <PID>
		}
	}
}
 800bce8:	bf00      	nop
 800bcea:	46bd      	mov	sp, r7
 800bcec:	ecbd 8b02 	vpop	{d8}
 800bcf0:	bd98      	pop	{r3, r4, r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000bf0 	.word	0x20000bf0
 800bcf8:	20000c1c 	.word	0x20000c1c
 800bcfc:	20000bf4 	.word	0x20000bf4
 800bd00:	20000c20 	.word	0x20000c20
 800bd04:	20000bf8 	.word	0x20000bf8
 800bd08:	20000c24 	.word	0x20000c24
 800bd0c:	20000bfc 	.word	0x20000bfc
 800bd10:	20000c28 	.word	0x20000c28
 800bd14:	20000c00 	.word	0x20000c00
 800bd18:	20000c64 	.word	0x20000c64
 800bd1c:	20000c04 	.word	0x20000c04
 800bd20:	20000c68 	.word	0x20000c68
 800bd24:	20000890 	.word	0x20000890
 800bd28:	200008b0 	.word	0x200008b0
 800bd2c:	200008d0 	.word	0x200008d0
 800bd30:	200008f0 	.word	0x200008f0
 800bd34:	20000910 	.word	0x20000910
 800bd38:	20000930 	.word	0x20000930
 800bd3c:	20000c5c 	.word	0x20000c5c
 800bd40:	40768000 	.word	0x40768000
 800bd44:	2000088c 	.word	0x2000088c
 800bd48:	20000c88 	.word	0x20000c88
 800bd4c:	20000c3c 	.word	0x20000c3c
 800bd50:	20000ca8 	.word	0x20000ca8
 800bd54:	20000c90 	.word	0x20000c90
 800bd58:	20000c44 	.word	0x20000c44
 800bd5c:	20000cb0 	.word	0x20000cb0
 800bd60:	20000c8c 	.word	0x20000c8c
 800bd64:	20000c40 	.word	0x20000c40
 800bd68:	20000cac 	.word	0x20000cac
 800bd6c:	20000c94 	.word	0x20000c94
 800bd70:	20000c48 	.word	0x20000c48
 800bd74:	20000cb4 	.word	0x20000cb4
 800bd78:	20000950 	.word	0x20000950
 800bd7c:	200009f8 	.word	0x200009f8
 800bd80:	200009a4 	.word	0x200009a4
 800bd84:	20000a4c 	.word	0x20000a4c

0800bd88 <SYSSystemAct>:
{

}

void SYSSystemAct(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
	//front left motor
	if (fFLeftVelU > 0){
 800bd8c:	4bb7      	ldr	r3, [pc, #732]	; (800c06c <SYSSystemAct+0x2e4>)
 800bd8e:	edd3 7a00 	vldr	s15, [r3]
 800bd92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd9a:	dd25      	ble.n	800bde8 <SYSSystemAct+0x60>
		if(dev_cfg.motor1_dir == 0){
 800bd9c:	4bb4      	ldr	r3, [pc, #720]	; (800c070 <SYSSystemAct+0x2e8>)
 800bd9e:	78db      	ldrb	r3, [r3, #3]
 800bda0:	f003 0301 	and.w	r3, r3, #1
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10a      	bne.n	800bdc0 <SYSSystemAct+0x38>
			SR.cast[0].bit0 = 0;
 800bdaa:	4ab2      	ldr	r2, [pc, #712]	; (800c074 <SYSSystemAct+0x2ec>)
 800bdac:	7e13      	ldrb	r3, [r2, #24]
 800bdae:	f36f 0300 	bfc	r3, #0, #1
 800bdb2:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit5 = 1;
 800bdb4:	4aaf      	ldr	r2, [pc, #700]	; (800c074 <SYSSystemAct+0x2ec>)
 800bdb6:	7e13      	ldrb	r3, [r2, #24]
 800bdb8:	f043 0320 	orr.w	r3, r3, #32
 800bdbc:	7613      	strb	r3, [r2, #24]
 800bdbe:	e009      	b.n	800bdd4 <SYSSystemAct+0x4c>
		} else {
			SR.cast[0].bit0 = 1;
 800bdc0:	4aac      	ldr	r2, [pc, #688]	; (800c074 <SYSSystemAct+0x2ec>)
 800bdc2:	7e13      	ldrb	r3, [r2, #24]
 800bdc4:	f043 0301 	orr.w	r3, r3, #1
 800bdc8:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit5 = 0;
 800bdca:	4aaa      	ldr	r2, [pc, #680]	; (800c074 <SYSSystemAct+0x2ec>)
 800bdcc:	7e13      	ldrb	r3, [r2, #24]
 800bdce:	f36f 1345 	bfc	r3, #5, #1
 800bdd2:	7613      	strb	r3, [r2, #24]
		}
		P1DC1 = (unsigned int) fFLeftVelU;
 800bdd4:	4ba8      	ldr	r3, [pc, #672]	; (800c078 <SYSSystemAct+0x2f0>)
 800bdd6:	4aa5      	ldr	r2, [pc, #660]	; (800c06c <SYSSystemAct+0x2e4>)
 800bdd8:	edd2 7a00 	vldr	s15, [r2]
 800bddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bde0:	ee17 2a90 	vmov	r2, s15
 800bde4:	635a      	str	r2, [r3, #52]	; 0x34
 800bde6:	e03c      	b.n	800be62 <SYSSystemAct+0xda>
	} else if (fFLeftVelU < 0){	/* backward */
 800bde8:	4ba0      	ldr	r3, [pc, #640]	; (800c06c <SYSSystemAct+0x2e4>)
 800bdea:	edd3 7a00 	vldr	s15, [r3]
 800bdee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf6:	d527      	bpl.n	800be48 <SYSSystemAct+0xc0>
		if(dev_cfg.motor1_dir == 0){
 800bdf8:	4b9d      	ldr	r3, [pc, #628]	; (800c070 <SYSSystemAct+0x2e8>)
 800bdfa:	78db      	ldrb	r3, [r3, #3]
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10a      	bne.n	800be1c <SYSSystemAct+0x94>
			SR.cast[0].bit0 = 1;
 800be06:	4a9b      	ldr	r2, [pc, #620]	; (800c074 <SYSSystemAct+0x2ec>)
 800be08:	7e13      	ldrb	r3, [r2, #24]
 800be0a:	f043 0301 	orr.w	r3, r3, #1
 800be0e:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit5 = 0;
 800be10:	4a98      	ldr	r2, [pc, #608]	; (800c074 <SYSSystemAct+0x2ec>)
 800be12:	7e13      	ldrb	r3, [r2, #24]
 800be14:	f36f 1345 	bfc	r3, #5, #1
 800be18:	7613      	strb	r3, [r2, #24]
 800be1a:	e009      	b.n	800be30 <SYSSystemAct+0xa8>
		} else {
			SR.cast[0].bit0 = 0;
 800be1c:	4a95      	ldr	r2, [pc, #596]	; (800c074 <SYSSystemAct+0x2ec>)
 800be1e:	7e13      	ldrb	r3, [r2, #24]
 800be20:	f36f 0300 	bfc	r3, #0, #1
 800be24:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit5 = 1;
 800be26:	4a93      	ldr	r2, [pc, #588]	; (800c074 <SYSSystemAct+0x2ec>)
 800be28:	7e13      	ldrb	r3, [r2, #24]
 800be2a:	f043 0320 	orr.w	r3, r3, #32
 800be2e:	7613      	strb	r3, [r2, #24]
		}
		P1DC1 = (unsigned int) -fFLeftVelU;
 800be30:	4b91      	ldr	r3, [pc, #580]	; (800c078 <SYSSystemAct+0x2f0>)
 800be32:	4a8e      	ldr	r2, [pc, #568]	; (800c06c <SYSSystemAct+0x2e4>)
 800be34:	edd2 7a00 	vldr	s15, [r2]
 800be38:	eef1 7a67 	vneg.f32	s15, s15
 800be3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be40:	ee17 2a90 	vmov	r2, s15
 800be44:	635a      	str	r2, [r3, #52]	; 0x34
 800be46:	e00c      	b.n	800be62 <SYSSystemAct+0xda>
	} else {
		SR.cast[0].bit0 = 1;
 800be48:	4a8a      	ldr	r2, [pc, #552]	; (800c074 <SYSSystemAct+0x2ec>)
 800be4a:	7e13      	ldrb	r3, [r2, #24]
 800be4c:	f043 0301 	orr.w	r3, r3, #1
 800be50:	7613      	strb	r3, [r2, #24]
		SR.cast[0].bit5 = 1;
 800be52:	4a88      	ldr	r2, [pc, #544]	; (800c074 <SYSSystemAct+0x2ec>)
 800be54:	7e13      	ldrb	r3, [r2, #24]
 800be56:	f043 0320 	orr.w	r3, r3, #32
 800be5a:	7613      	strb	r3, [r2, #24]
		P1DC1 = 0;
 800be5c:	4b86      	ldr	r3, [pc, #536]	; (800c078 <SYSSystemAct+0x2f0>)
 800be5e:	2200      	movs	r2, #0
 800be60:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//front right motor
	if (fFRightVelU > 0) {
 800be62:	4b86      	ldr	r3, [pc, #536]	; (800c07c <SYSSystemAct+0x2f4>)
 800be64:	edd3 7a00 	vldr	s15, [r3]
 800be68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be70:	dd25      	ble.n	800bebe <SYSSystemAct+0x136>
		if (dev_cfg.motor2_dir == 0) {
 800be72:	4b7f      	ldr	r3, [pc, #508]	; (800c070 <SYSSystemAct+0x2e8>)
 800be74:	78db      	ldrb	r3, [r3, #3]
 800be76:	f003 0302 	and.w	r3, r3, #2
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10a      	bne.n	800be96 <SYSSystemAct+0x10e>
			SR.cast[0].bit6 = 0;
 800be80:	4a7c      	ldr	r2, [pc, #496]	; (800c074 <SYSSystemAct+0x2ec>)
 800be82:	7e13      	ldrb	r3, [r2, #24]
 800be84:	f36f 1386 	bfc	r3, #6, #1
 800be88:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit7 = 1;
 800be8a:	4a7a      	ldr	r2, [pc, #488]	; (800c074 <SYSSystemAct+0x2ec>)
 800be8c:	7e13      	ldrb	r3, [r2, #24]
 800be8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be92:	7613      	strb	r3, [r2, #24]
 800be94:	e009      	b.n	800beaa <SYSSystemAct+0x122>
		} else {
			SR.cast[0].bit6 = 1;
 800be96:	4a77      	ldr	r2, [pc, #476]	; (800c074 <SYSSystemAct+0x2ec>)
 800be98:	7e13      	ldrb	r3, [r2, #24]
 800be9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be9e:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit7 = 0;
 800bea0:	4a74      	ldr	r2, [pc, #464]	; (800c074 <SYSSystemAct+0x2ec>)
 800bea2:	7e13      	ldrb	r3, [r2, #24]
 800bea4:	f36f 13c7 	bfc	r3, #7, #1
 800bea8:	7613      	strb	r3, [r2, #24]
		}
		P1DC2 = (unsigned int) fFRightVelU;
 800beaa:	4b73      	ldr	r3, [pc, #460]	; (800c078 <SYSSystemAct+0x2f0>)
 800beac:	4a73      	ldr	r2, [pc, #460]	; (800c07c <SYSSystemAct+0x2f4>)
 800beae:	edd2 7a00 	vldr	s15, [r2]
 800beb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb6:	ee17 2a90 	vmov	r2, s15
 800beba:	639a      	str	r2, [r3, #56]	; 0x38
 800bebc:	e03c      	b.n	800bf38 <SYSSystemAct+0x1b0>
	} else if (fFRightVelU < 0) {
 800bebe:	4b6f      	ldr	r3, [pc, #444]	; (800c07c <SYSSystemAct+0x2f4>)
 800bec0:	edd3 7a00 	vldr	s15, [r3]
 800bec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800becc:	d527      	bpl.n	800bf1e <SYSSystemAct+0x196>
		if (dev_cfg.motor2_dir == 0) {
 800bece:	4b68      	ldr	r3, [pc, #416]	; (800c070 <SYSSystemAct+0x2e8>)
 800bed0:	78db      	ldrb	r3, [r3, #3]
 800bed2:	f003 0302 	and.w	r3, r3, #2
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <SYSSystemAct+0x16a>
			SR.cast[0].bit6 = 1;
 800bedc:	4a65      	ldr	r2, [pc, #404]	; (800c074 <SYSSystemAct+0x2ec>)
 800bede:	7e13      	ldrb	r3, [r2, #24]
 800bee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bee4:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit7 = 0;
 800bee6:	4a63      	ldr	r2, [pc, #396]	; (800c074 <SYSSystemAct+0x2ec>)
 800bee8:	7e13      	ldrb	r3, [r2, #24]
 800beea:	f36f 13c7 	bfc	r3, #7, #1
 800beee:	7613      	strb	r3, [r2, #24]
 800bef0:	e009      	b.n	800bf06 <SYSSystemAct+0x17e>
		} else {
			SR.cast[0].bit6 = 0;
 800bef2:	4a60      	ldr	r2, [pc, #384]	; (800c074 <SYSSystemAct+0x2ec>)
 800bef4:	7e13      	ldrb	r3, [r2, #24]
 800bef6:	f36f 1386 	bfc	r3, #6, #1
 800befa:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit7 = 1;
 800befc:	4a5d      	ldr	r2, [pc, #372]	; (800c074 <SYSSystemAct+0x2ec>)
 800befe:	7e13      	ldrb	r3, [r2, #24]
 800bf00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf04:	7613      	strb	r3, [r2, #24]
		}
		P1DC2 = (unsigned int) -fFRightVelU;
 800bf06:	4b5c      	ldr	r3, [pc, #368]	; (800c078 <SYSSystemAct+0x2f0>)
 800bf08:	4a5c      	ldr	r2, [pc, #368]	; (800c07c <SYSSystemAct+0x2f4>)
 800bf0a:	edd2 7a00 	vldr	s15, [r2]
 800bf0e:	eef1 7a67 	vneg.f32	s15, s15
 800bf12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf16:	ee17 2a90 	vmov	r2, s15
 800bf1a:	639a      	str	r2, [r3, #56]	; 0x38
 800bf1c:	e00c      	b.n	800bf38 <SYSSystemAct+0x1b0>
	} else {	/* stop */
		SR.cast[0].bit6 = 1;
 800bf1e:	4a55      	ldr	r2, [pc, #340]	; (800c074 <SYSSystemAct+0x2ec>)
 800bf20:	7e13      	ldrb	r3, [r2, #24]
 800bf22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf26:	7613      	strb	r3, [r2, #24]
		SR.cast[0].bit7 = 1;
 800bf28:	4a52      	ldr	r2, [pc, #328]	; (800c074 <SYSSystemAct+0x2ec>)
 800bf2a:	7e13      	ldrb	r3, [r2, #24]
 800bf2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf30:	7613      	strb	r3, [r2, #24]
		P1DC2 = 0;
 800bf32:	4b51      	ldr	r3, [pc, #324]	; (800c078 <SYSSystemAct+0x2f0>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	639a      	str	r2, [r3, #56]	; 0x38
	}

	//back left motor
	if (fBLeftVelU > 0){
 800bf38:	4b51      	ldr	r3, [pc, #324]	; (800c080 <SYSSystemAct+0x2f8>)
 800bf3a:	edd3 7a00 	vldr	s15, [r3]
 800bf3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf46:	dd25      	ble.n	800bf94 <SYSSystemAct+0x20c>
		if (dev_cfg.motor3_dir == 0) {
 800bf48:	4b49      	ldr	r3, [pc, #292]	; (800c070 <SYSSystemAct+0x2e8>)
 800bf4a:	78db      	ldrb	r3, [r3, #3]
 800bf4c:	f003 0304 	and.w	r3, r3, #4
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10a      	bne.n	800bf6c <SYSSystemAct+0x1e4>
			SR.cast[0].bit4 = 0;
 800bf56:	4a47      	ldr	r2, [pc, #284]	; (800c074 <SYSSystemAct+0x2ec>)
 800bf58:	7e13      	ldrb	r3, [r2, #24]
 800bf5a:	f36f 1304 	bfc	r3, #4, #1
 800bf5e:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit3 = 1;
 800bf60:	4a44      	ldr	r2, [pc, #272]	; (800c074 <SYSSystemAct+0x2ec>)
 800bf62:	7e13      	ldrb	r3, [r2, #24]
 800bf64:	f043 0308 	orr.w	r3, r3, #8
 800bf68:	7613      	strb	r3, [r2, #24]
 800bf6a:	e009      	b.n	800bf80 <SYSSystemAct+0x1f8>
		} else {
			SR.cast[0].bit4 = 1;
 800bf6c:	4a41      	ldr	r2, [pc, #260]	; (800c074 <SYSSystemAct+0x2ec>)
 800bf6e:	7e13      	ldrb	r3, [r2, #24]
 800bf70:	f043 0310 	orr.w	r3, r3, #16
 800bf74:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit3 = 0;
 800bf76:	4a3f      	ldr	r2, [pc, #252]	; (800c074 <SYSSystemAct+0x2ec>)
 800bf78:	7e13      	ldrb	r3, [r2, #24]
 800bf7a:	f36f 03c3 	bfc	r3, #3, #1
 800bf7e:	7613      	strb	r3, [r2, #24]
		}
		P1DC3 = (unsigned int) fBLeftVelU;
 800bf80:	4b40      	ldr	r3, [pc, #256]	; (800c084 <SYSSystemAct+0x2fc>)
 800bf82:	4a3f      	ldr	r2, [pc, #252]	; (800c080 <SYSSystemAct+0x2f8>)
 800bf84:	edd2 7a00 	vldr	s15, [r2]
 800bf88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf8c:	ee17 2a90 	vmov	r2, s15
 800bf90:	635a      	str	r2, [r3, #52]	; 0x34
 800bf92:	e03c      	b.n	800c00e <SYSSystemAct+0x286>
	} else if (fBLeftVelU < 0){
 800bf94:	4b3a      	ldr	r3, [pc, #232]	; (800c080 <SYSSystemAct+0x2f8>)
 800bf96:	edd3 7a00 	vldr	s15, [r3]
 800bf9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa2:	d527      	bpl.n	800bff4 <SYSSystemAct+0x26c>
		if (dev_cfg.motor3_dir == 0) {
 800bfa4:	4b32      	ldr	r3, [pc, #200]	; (800c070 <SYSSystemAct+0x2e8>)
 800bfa6:	78db      	ldrb	r3, [r3, #3]
 800bfa8:	f003 0304 	and.w	r3, r3, #4
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10a      	bne.n	800bfc8 <SYSSystemAct+0x240>
			SR.cast[0].bit4 = 1;
 800bfb2:	4a30      	ldr	r2, [pc, #192]	; (800c074 <SYSSystemAct+0x2ec>)
 800bfb4:	7e13      	ldrb	r3, [r2, #24]
 800bfb6:	f043 0310 	orr.w	r3, r3, #16
 800bfba:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit3 = 0;
 800bfbc:	4a2d      	ldr	r2, [pc, #180]	; (800c074 <SYSSystemAct+0x2ec>)
 800bfbe:	7e13      	ldrb	r3, [r2, #24]
 800bfc0:	f36f 03c3 	bfc	r3, #3, #1
 800bfc4:	7613      	strb	r3, [r2, #24]
 800bfc6:	e009      	b.n	800bfdc <SYSSystemAct+0x254>
		} else {
			SR.cast[0].bit4 = 0;
 800bfc8:	4a2a      	ldr	r2, [pc, #168]	; (800c074 <SYSSystemAct+0x2ec>)
 800bfca:	7e13      	ldrb	r3, [r2, #24]
 800bfcc:	f36f 1304 	bfc	r3, #4, #1
 800bfd0:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit3 = 1;
 800bfd2:	4a28      	ldr	r2, [pc, #160]	; (800c074 <SYSSystemAct+0x2ec>)
 800bfd4:	7e13      	ldrb	r3, [r2, #24]
 800bfd6:	f043 0308 	orr.w	r3, r3, #8
 800bfda:	7613      	strb	r3, [r2, #24]
		}
		P1DC3 = (unsigned int) -fBLeftVelU;
 800bfdc:	4b29      	ldr	r3, [pc, #164]	; (800c084 <SYSSystemAct+0x2fc>)
 800bfde:	4a28      	ldr	r2, [pc, #160]	; (800c080 <SYSSystemAct+0x2f8>)
 800bfe0:	edd2 7a00 	vldr	s15, [r2]
 800bfe4:	eef1 7a67 	vneg.f32	s15, s15
 800bfe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfec:	ee17 2a90 	vmov	r2, s15
 800bff0:	635a      	str	r2, [r3, #52]	; 0x34
 800bff2:	e00c      	b.n	800c00e <SYSSystemAct+0x286>
	} else {	/* stop */
		SR.cast[0].bit4 = 1;
 800bff4:	4a1f      	ldr	r2, [pc, #124]	; (800c074 <SYSSystemAct+0x2ec>)
 800bff6:	7e13      	ldrb	r3, [r2, #24]
 800bff8:	f043 0310 	orr.w	r3, r3, #16
 800bffc:	7613      	strb	r3, [r2, #24]
		SR.cast[0].bit3 = 1;
 800bffe:	4a1d      	ldr	r2, [pc, #116]	; (800c074 <SYSSystemAct+0x2ec>)
 800c000:	7e13      	ldrb	r3, [r2, #24]
 800c002:	f043 0308 	orr.w	r3, r3, #8
 800c006:	7613      	strb	r3, [r2, #24]
		P1DC3 = 0;
 800c008:	4b1e      	ldr	r3, [pc, #120]	; (800c084 <SYSSystemAct+0x2fc>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//back right motor
	if (fBRightVelU > 0){	/* forward */
 800c00e:	4b1e      	ldr	r3, [pc, #120]	; (800c088 <SYSSystemAct+0x300>)
 800c010:	edd3 7a00 	vldr	s15, [r3]
 800c014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c01c:	dd36      	ble.n	800c08c <SYSSystemAct+0x304>
		if (dev_cfg.motor4_dir == 0){
 800c01e:	4b14      	ldr	r3, [pc, #80]	; (800c070 <SYSSystemAct+0x2e8>)
 800c020:	78db      	ldrb	r3, [r3, #3]
 800c022:	f003 0308 	and.w	r3, r3, #8
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10a      	bne.n	800c042 <SYSSystemAct+0x2ba>
			SR.cast[0].bit1 = 0;
 800c02c:	4a11      	ldr	r2, [pc, #68]	; (800c074 <SYSSystemAct+0x2ec>)
 800c02e:	7e13      	ldrb	r3, [r2, #24]
 800c030:	f36f 0341 	bfc	r3, #1, #1
 800c034:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit2 = 1;
 800c036:	4a0f      	ldr	r2, [pc, #60]	; (800c074 <SYSSystemAct+0x2ec>)
 800c038:	7e13      	ldrb	r3, [r2, #24]
 800c03a:	f043 0304 	orr.w	r3, r3, #4
 800c03e:	7613      	strb	r3, [r2, #24]
 800c040:	e009      	b.n	800c056 <SYSSystemAct+0x2ce>
		} else {
			SR.cast[0].bit1 = 1;
 800c042:	4a0c      	ldr	r2, [pc, #48]	; (800c074 <SYSSystemAct+0x2ec>)
 800c044:	7e13      	ldrb	r3, [r2, #24]
 800c046:	f043 0302 	orr.w	r3, r3, #2
 800c04a:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit2 = 0;
 800c04c:	4a09      	ldr	r2, [pc, #36]	; (800c074 <SYSSystemAct+0x2ec>)
 800c04e:	7e13      	ldrb	r3, [r2, #24]
 800c050:	f36f 0382 	bfc	r3, #2, #1
 800c054:	7613      	strb	r3, [r2, #24]
		}
		P1DC4 = (unsigned int) fBRightVelU;
 800c056:	4b0b      	ldr	r3, [pc, #44]	; (800c084 <SYSSystemAct+0x2fc>)
 800c058:	4a0b      	ldr	r2, [pc, #44]	; (800c088 <SYSSystemAct+0x300>)
 800c05a:	edd2 7a00 	vldr	s15, [r2]
 800c05e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c062:	ee17 2a90 	vmov	r2, s15
 800c066:	639a      	str	r2, [r3, #56]	; 0x38
		SR.cast[0].bit1 = 1;
		SR.cast[0].bit2 = 1;
		P1DC4 = 0;
	}

}
 800c068:	e04d      	b.n	800c106 <SYSSystemAct+0x37e>
 800c06a:	bf00      	nop
 800c06c:	20000c98 	.word	0x20000c98
 800c070:	200007e0 	.word	0x200007e0
 800c074:	2000080c 	.word	0x2000080c
 800c078:	40014000 	.word	0x40014000
 800c07c:	20000c9c 	.word	0x20000c9c
 800c080:	20000ca0 	.word	0x20000ca0
 800c084:	40001800 	.word	0x40001800
 800c088:	20000ca4 	.word	0x20000ca4
	} else if (fBRightVelU < 0){	/* backward */
 800c08c:	4b20      	ldr	r3, [pc, #128]	; (800c110 <SYSSystemAct+0x388>)
 800c08e:	edd3 7a00 	vldr	s15, [r3]
 800c092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09a:	d527      	bpl.n	800c0ec <SYSSystemAct+0x364>
		if (dev_cfg.motor4_dir == 0){
 800c09c:	4b1d      	ldr	r3, [pc, #116]	; (800c114 <SYSSystemAct+0x38c>)
 800c09e:	78db      	ldrb	r3, [r3, #3]
 800c0a0:	f003 0308 	and.w	r3, r3, #8
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <SYSSystemAct+0x338>
			SR.cast[0].bit1 = 1;
 800c0aa:	4a1b      	ldr	r2, [pc, #108]	; (800c118 <SYSSystemAct+0x390>)
 800c0ac:	7e13      	ldrb	r3, [r2, #24]
 800c0ae:	f043 0302 	orr.w	r3, r3, #2
 800c0b2:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit2 = 0;
 800c0b4:	4a18      	ldr	r2, [pc, #96]	; (800c118 <SYSSystemAct+0x390>)
 800c0b6:	7e13      	ldrb	r3, [r2, #24]
 800c0b8:	f36f 0382 	bfc	r3, #2, #1
 800c0bc:	7613      	strb	r3, [r2, #24]
 800c0be:	e009      	b.n	800c0d4 <SYSSystemAct+0x34c>
			SR.cast[0].bit1 = 0;
 800c0c0:	4a15      	ldr	r2, [pc, #84]	; (800c118 <SYSSystemAct+0x390>)
 800c0c2:	7e13      	ldrb	r3, [r2, #24]
 800c0c4:	f36f 0341 	bfc	r3, #1, #1
 800c0c8:	7613      	strb	r3, [r2, #24]
			SR.cast[0].bit2 = 1;
 800c0ca:	4a13      	ldr	r2, [pc, #76]	; (800c118 <SYSSystemAct+0x390>)
 800c0cc:	7e13      	ldrb	r3, [r2, #24]
 800c0ce:	f043 0304 	orr.w	r3, r3, #4
 800c0d2:	7613      	strb	r3, [r2, #24]
		P1DC4 = (unsigned int) -fBRightVelU;
 800c0d4:	4b11      	ldr	r3, [pc, #68]	; (800c11c <SYSSystemAct+0x394>)
 800c0d6:	4a0e      	ldr	r2, [pc, #56]	; (800c110 <SYSSystemAct+0x388>)
 800c0d8:	edd2 7a00 	vldr	s15, [r2]
 800c0dc:	eef1 7a67 	vneg.f32	s15, s15
 800c0e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0e4:	ee17 2a90 	vmov	r2, s15
 800c0e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c0ea:	e00c      	b.n	800c106 <SYSSystemAct+0x37e>
		SR.cast[0].bit1 = 1;
 800c0ec:	4a0a      	ldr	r2, [pc, #40]	; (800c118 <SYSSystemAct+0x390>)
 800c0ee:	7e13      	ldrb	r3, [r2, #24]
 800c0f0:	f043 0302 	orr.w	r3, r3, #2
 800c0f4:	7613      	strb	r3, [r2, #24]
		SR.cast[0].bit2 = 1;
 800c0f6:	4a08      	ldr	r2, [pc, #32]	; (800c118 <SYSSystemAct+0x390>)
 800c0f8:	7e13      	ldrb	r3, [r2, #24]
 800c0fa:	f043 0304 	orr.w	r3, r3, #4
 800c0fe:	7613      	strb	r3, [r2, #24]
		P1DC4 = 0;
 800c100:	4b06      	ldr	r3, [pc, #24]	; (800c11c <SYSSystemAct+0x394>)
 800c102:	2200      	movs	r2, #0
 800c104:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c106:	bf00      	nop
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	20000ca4 	.word	0x20000ca4
 800c114:	200007e0 	.word	0x200007e0
 800c118:	2000080c 	.word	0x2000080c
 800c11c:	40001800 	.word	0x40001800

0800c120 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c124:	4a16      	ldr	r2, [pc, #88]	; (800c180 <SystemInit+0x60>)
 800c126:	4b16      	ldr	r3, [pc, #88]	; (800c180 <SystemInit+0x60>)
 800c128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c12c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c134:	4a13      	ldr	r2, [pc, #76]	; (800c184 <SystemInit+0x64>)
 800c136:	4b13      	ldr	r3, [pc, #76]	; (800c184 <SystemInit+0x64>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f043 0301 	orr.w	r3, r3, #1
 800c13e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c140:	4b10      	ldr	r3, [pc, #64]	; (800c184 <SystemInit+0x64>)
 800c142:	2200      	movs	r2, #0
 800c144:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c146:	4a0f      	ldr	r2, [pc, #60]	; (800c184 <SystemInit+0x64>)
 800c148:	4b0e      	ldr	r3, [pc, #56]	; (800c184 <SystemInit+0x64>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c154:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c156:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <SystemInit+0x64>)
 800c158:	4a0b      	ldr	r2, [pc, #44]	; (800c188 <SystemInit+0x68>)
 800c15a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c15c:	4a09      	ldr	r2, [pc, #36]	; (800c184 <SystemInit+0x64>)
 800c15e:	4b09      	ldr	r3, [pc, #36]	; (800c184 <SystemInit+0x64>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c166:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c168:	4b06      	ldr	r3, [pc, #24]	; (800c184 <SystemInit+0x64>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800c16e:	f000 f889 	bl	800c284 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c172:	4b03      	ldr	r3, [pc, #12]	; (800c180 <SystemInit+0x60>)
 800c174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c178:	609a      	str	r2, [r3, #8]
#endif
}
 800c17a:	bf00      	nop
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	e000ed00 	.word	0xe000ed00
 800c184:	40023800 	.word	0x40023800
 800c188:	24003010 	.word	0x24003010

0800c18c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800c192:	2300      	movs	r3, #0
 800c194:	613b      	str	r3, [r7, #16]
 800c196:	2300      	movs	r3, #0
 800c198:	617b      	str	r3, [r7, #20]
 800c19a:	2302      	movs	r3, #2
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60bb      	str	r3, [r7, #8]
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800c1a6:	4b32      	ldr	r3, [pc, #200]	; (800c270 <SystemCoreClockUpdate+0xe4>)
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f003 030c 	and.w	r3, r3, #12
 800c1ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2b04      	cmp	r3, #4
 800c1b4:	d007      	beq.n	800c1c6 <SystemCoreClockUpdate+0x3a>
 800c1b6:	2b08      	cmp	r3, #8
 800c1b8:	d009      	beq.n	800c1ce <SystemCoreClockUpdate+0x42>
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d13d      	bne.n	800c23a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800c1be:	4b2d      	ldr	r3, [pc, #180]	; (800c274 <SystemCoreClockUpdate+0xe8>)
 800c1c0:	4a2d      	ldr	r2, [pc, #180]	; (800c278 <SystemCoreClockUpdate+0xec>)
 800c1c2:	601a      	str	r2, [r3, #0]
      break;
 800c1c4:	e03d      	b.n	800c242 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800c1c6:	4b2b      	ldr	r3, [pc, #172]	; (800c274 <SystemCoreClockUpdate+0xe8>)
 800c1c8:	4a2c      	ldr	r2, [pc, #176]	; (800c27c <SystemCoreClockUpdate+0xf0>)
 800c1ca:	601a      	str	r2, [r3, #0]
      break;
 800c1cc:	e039      	b.n	800c242 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800c1ce:	4b28      	ldr	r3, [pc, #160]	; (800c270 <SystemCoreClockUpdate+0xe4>)
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	0d9b      	lsrs	r3, r3, #22
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c1da:	4b25      	ldr	r3, [pc, #148]	; (800c270 <SystemCoreClockUpdate+0xe4>)
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1e2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00c      	beq.n	800c204 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800c1ea:	4a24      	ldr	r2, [pc, #144]	; (800c27c <SystemCoreClockUpdate+0xf0>)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f2:	4a1f      	ldr	r2, [pc, #124]	; (800c270 <SystemCoreClockUpdate+0xe4>)
 800c1f4:	6852      	ldr	r2, [r2, #4]
 800c1f6:	0992      	lsrs	r2, r2, #6
 800c1f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1fc:	fb02 f303 	mul.w	r3, r2, r3
 800c200:	617b      	str	r3, [r7, #20]
 800c202:	e00b      	b.n	800c21c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800c204:	4a1c      	ldr	r2, [pc, #112]	; (800c278 <SystemCoreClockUpdate+0xec>)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	fbb2 f3f3 	udiv	r3, r2, r3
 800c20c:	4a18      	ldr	r2, [pc, #96]	; (800c270 <SystemCoreClockUpdate+0xe4>)
 800c20e:	6852      	ldr	r2, [r2, #4]
 800c210:	0992      	lsrs	r2, r2, #6
 800c212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c216:	fb02 f303 	mul.w	r3, r2, r3
 800c21a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800c21c:	4b14      	ldr	r3, [pc, #80]	; (800c270 <SystemCoreClockUpdate+0xe4>)
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	0c1b      	lsrs	r3, r3, #16
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	3301      	adds	r3, #1
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	fbb2 f3f3 	udiv	r3, r2, r3
 800c234:	4a0f      	ldr	r2, [pc, #60]	; (800c274 <SystemCoreClockUpdate+0xe8>)
 800c236:	6013      	str	r3, [r2, #0]
      break;
 800c238:	e003      	b.n	800c242 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800c23a:	4b0e      	ldr	r3, [pc, #56]	; (800c274 <SystemCoreClockUpdate+0xe8>)
 800c23c:	4a0e      	ldr	r2, [pc, #56]	; (800c278 <SystemCoreClockUpdate+0xec>)
 800c23e:	601a      	str	r2, [r3, #0]
      break;
 800c240:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800c242:	4b0b      	ldr	r3, [pc, #44]	; (800c270 <SystemCoreClockUpdate+0xe4>)
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	091b      	lsrs	r3, r3, #4
 800c248:	f003 030f 	and.w	r3, r3, #15
 800c24c:	4a0c      	ldr	r2, [pc, #48]	; (800c280 <SystemCoreClockUpdate+0xf4>)
 800c24e:	5cd3      	ldrb	r3, [r2, r3]
 800c250:	b2db      	uxtb	r3, r3
 800c252:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800c254:	4b07      	ldr	r3, [pc, #28]	; (800c274 <SystemCoreClockUpdate+0xe8>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	fa22 f303 	lsr.w	r3, r2, r3
 800c25e:	4a05      	ldr	r2, [pc, #20]	; (800c274 <SystemCoreClockUpdate+0xe8>)
 800c260:	6013      	str	r3, [r2, #0]
}
 800c262:	bf00      	nop
 800c264:	371c      	adds	r7, #28
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	40023800 	.word	0x40023800
 800c274:	20000118 	.word	0x20000118
 800c278:	00f42400 	.word	0x00f42400
 800c27c:	007a1200 	.word	0x007a1200
 800c280:	2000011c 	.word	0x2000011c

0800c284 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	607b      	str	r3, [r7, #4]
 800c28e:	2300      	movs	r3, #0
 800c290:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800c292:	4a36      	ldr	r2, [pc, #216]	; (800c36c <SetSysClock+0xe8>)
 800c294:	4b35      	ldr	r3, [pc, #212]	; (800c36c <SetSysClock+0xe8>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c29c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800c29e:	4b33      	ldr	r3, [pc, #204]	; (800c36c <SetSysClock+0xe8>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2a6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d103      	bne.n	800c2bc <SetSysClock+0x38>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c2ba:	d1f0      	bne.n	800c29e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800c2bc:	4b2b      	ldr	r3, [pc, #172]	; (800c36c <SetSysClock+0xe8>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	603b      	str	r3, [r7, #0]
 800c2cc:	e001      	b.n	800c2d2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d142      	bne.n	800c35e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800c2d8:	4a24      	ldr	r2, [pc, #144]	; (800c36c <SetSysClock+0xe8>)
 800c2da:	4b24      	ldr	r3, [pc, #144]	; (800c36c <SetSysClock+0xe8>)
 800c2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2e2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800c2e4:	4a22      	ldr	r2, [pc, #136]	; (800c370 <SetSysClock+0xec>)
 800c2e6:	4b22      	ldr	r3, [pc, #136]	; (800c370 <SetSysClock+0xec>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c2ee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800c2f0:	4a1e      	ldr	r2, [pc, #120]	; (800c36c <SetSysClock+0xe8>)
 800c2f2:	4b1e      	ldr	r3, [pc, #120]	; (800c36c <SetSysClock+0xe8>)
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800c2f8:	4a1c      	ldr	r2, [pc, #112]	; (800c36c <SetSysClock+0xe8>)
 800c2fa:	4b1c      	ldr	r3, [pc, #112]	; (800c36c <SetSysClock+0xe8>)
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c302:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800c304:	4a19      	ldr	r2, [pc, #100]	; (800c36c <SetSysClock+0xe8>)
 800c306:	4b19      	ldr	r3, [pc, #100]	; (800c36c <SetSysClock+0xe8>)
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800c30e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800c310:	4b16      	ldr	r3, [pc, #88]	; (800c36c <SetSysClock+0xe8>)
 800c312:	4a18      	ldr	r2, [pc, #96]	; (800c374 <SetSysClock+0xf0>)
 800c314:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800c316:	4a15      	ldr	r2, [pc, #84]	; (800c36c <SetSysClock+0xe8>)
 800c318:	4b14      	ldr	r3, [pc, #80]	; (800c36c <SetSysClock+0xe8>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c320:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800c322:	bf00      	nop
 800c324:	4b11      	ldr	r3, [pc, #68]	; (800c36c <SetSysClock+0xe8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d0f9      	beq.n	800c324 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800c330:	4b11      	ldr	r3, [pc, #68]	; (800c378 <SetSysClock+0xf4>)
 800c332:	f240 7205 	movw	r2, #1797	; 0x705
 800c336:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800c338:	4a0c      	ldr	r2, [pc, #48]	; (800c36c <SetSysClock+0xe8>)
 800c33a:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <SetSysClock+0xe8>)
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	f023 0303 	bic.w	r3, r3, #3
 800c342:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800c344:	4a09      	ldr	r2, [pc, #36]	; (800c36c <SetSysClock+0xe8>)
 800c346:	4b09      	ldr	r3, [pc, #36]	; (800c36c <SetSysClock+0xe8>)
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f043 0302 	orr.w	r3, r3, #2
 800c34e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800c350:	bf00      	nop
 800c352:	4b06      	ldr	r3, [pc, #24]	; (800c36c <SetSysClock+0xe8>)
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f003 030c 	and.w	r3, r3, #12
 800c35a:	2b08      	cmp	r3, #8
 800c35c:	d1f9      	bne.n	800c352 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800c35e:	bf00      	nop
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	40023800 	.word	0x40023800
 800c370:	40007000 	.word	0x40007000
 800c374:	07405408 	.word	0x07405408
 800c378:	40023c00 	.word	0x40023c00

0800c37c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, int d, int base)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b087      	sub	sp, #28
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
	int div = 1;
 800c388:	2301      	movs	r3, #1
 800c38a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800c38c:	e004      	b.n	800c398 <ts_itoa+0x1c>
		div *= base;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	fb02 f303 	mul.w	r3, r2, r3
 800c396:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	fb92 f2f3 	sdiv	r2, r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	daf3      	bge.n	800c38e <ts_itoa+0x12>

	while (div != 0)
 800c3a6:	e02a      	b.n	800c3fe <ts_itoa+0x82>
	{
		int num = d/div;
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	fb92 f3f3 	sdiv	r3, r2, r3
 800c3b0:	613b      	str	r3, [r7, #16]
		d = d%div;
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	fb93 f2f2 	sdiv	r2, r3, r2
 800c3ba:	6979      	ldr	r1, [r7, #20]
 800c3bc:	fb01 f202 	mul.w	r2, r1, r2
 800c3c0:	1a9b      	subs	r3, r3, r2
 800c3c2:	60bb      	str	r3, [r7, #8]
		div /= base;
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	fb92 f3f3 	sdiv	r3, r2, r3
 800c3cc:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2b09      	cmp	r3, #9
 800c3d2:	dd0a      	ble.n	800c3ea <ts_itoa+0x6e>
			*((*buf)++) = (num-10) + 'A';
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	1c59      	adds	r1, r3, #1
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	6011      	str	r1, [r2, #0]
 800c3de:	693a      	ldr	r2, [r7, #16]
 800c3e0:	b2d2      	uxtb	r2, r2
 800c3e2:	3237      	adds	r2, #55	; 0x37
 800c3e4:	b2d2      	uxtb	r2, r2
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	e009      	b.n	800c3fe <ts_itoa+0x82>
		else
			*((*buf)++) = num + '0';
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	1c59      	adds	r1, r3, #1
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	6011      	str	r1, [r2, #0]
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	b2d2      	uxtb	r2, r2
 800c3f8:	3230      	adds	r2, #48	; 0x30
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1d1      	bne.n	800c3a8 <ts_itoa+0x2c>
	}
}
 800c404:	bf00      	nop
 800c406:	371c      	adds	r7, #28
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800c410:	b5b0      	push	{r4, r5, r7, lr}
 800c412:	b090      	sub	sp, #64	; 0x40
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	61bb      	str	r3, [r7, #24]
	int precision = 6; /* default precision for float printing is 6 */
 800c420:	2306      	movs	r3, #6
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(*fmt)
 800c424:	e21c      	b.n	800c860 <ts_formatstring+0x450>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b25      	cmp	r3, #37	; 0x25
 800c42c:	f040 8210 	bne.w	800c850 <ts_formatstring+0x440>
		{
			switch (*(++fmt))
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	3301      	adds	r3, #1
 800c434:	60bb      	str	r3, [r7, #8]
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	3b25      	subs	r3, #37	; 0x25
 800c43c:	2b53      	cmp	r3, #83	; 0x53
 800c43e:	f200 8203 	bhi.w	800c848 <ts_formatstring+0x438>
 800c442:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <ts_formatstring+0x38>)
 800c444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c448:	0800c83d 	.word	0x0800c83d
 800c44c:	0800c849 	.word	0x0800c849
 800c450:	0800c849 	.word	0x0800c849
 800c454:	0800c849 	.word	0x0800c849
 800c458:	0800c849 	.word	0x0800c849
 800c45c:	0800c849 	.word	0x0800c849
 800c460:	0800c849 	.word	0x0800c849
 800c464:	0800c849 	.word	0x0800c849
 800c468:	0800c849 	.word	0x0800c849
 800c46c:	0800c667 	.word	0x0800c667
 800c470:	0800c849 	.word	0x0800c849
 800c474:	0800c849 	.word	0x0800c849
 800c478:	0800c849 	.word	0x0800c849
 800c47c:	0800c849 	.word	0x0800c849
 800c480:	0800c849 	.word	0x0800c849
 800c484:	0800c849 	.word	0x0800c849
 800c488:	0800c849 	.word	0x0800c849
 800c48c:	0800c849 	.word	0x0800c849
 800c490:	0800c849 	.word	0x0800c849
 800c494:	0800c849 	.word	0x0800c849
 800c498:	0800c849 	.word	0x0800c849
 800c49c:	0800c849 	.word	0x0800c849
 800c4a0:	0800c849 	.word	0x0800c849
 800c4a4:	0800c849 	.word	0x0800c849
 800c4a8:	0800c849 	.word	0x0800c849
 800c4ac:	0800c849 	.word	0x0800c849
 800c4b0:	0800c849 	.word	0x0800c849
 800c4b4:	0800c849 	.word	0x0800c849
 800c4b8:	0800c849 	.word	0x0800c849
 800c4bc:	0800c849 	.word	0x0800c849
 800c4c0:	0800c849 	.word	0x0800c849
 800c4c4:	0800c849 	.word	0x0800c849
 800c4c8:	0800c849 	.word	0x0800c849
 800c4cc:	0800c849 	.word	0x0800c849
 800c4d0:	0800c849 	.word	0x0800c849
 800c4d4:	0800c849 	.word	0x0800c849
 800c4d8:	0800c849 	.word	0x0800c849
 800c4dc:	0800c849 	.word	0x0800c849
 800c4e0:	0800c849 	.word	0x0800c849
 800c4e4:	0800c849 	.word	0x0800c849
 800c4e8:	0800c849 	.word	0x0800c849
 800c4ec:	0800c849 	.word	0x0800c849
 800c4f0:	0800c849 	.word	0x0800c849
 800c4f4:	0800c849 	.word	0x0800c849
 800c4f8:	0800c849 	.word	0x0800c849
 800c4fc:	0800c849 	.word	0x0800c849
 800c500:	0800c849 	.word	0x0800c849
 800c504:	0800c849 	.word	0x0800c849
 800c508:	0800c849 	.word	0x0800c849
 800c50c:	0800c849 	.word	0x0800c849
 800c510:	0800c849 	.word	0x0800c849
 800c514:	0800c651 	.word	0x0800c651
 800c518:	0800c849 	.word	0x0800c849
 800c51c:	0800c849 	.word	0x0800c849
 800c520:	0800c849 	.word	0x0800c849
 800c524:	0800c849 	.word	0x0800c849
 800c528:	0800c849 	.word	0x0800c849
 800c52c:	0800c849 	.word	0x0800c849
 800c530:	0800c849 	.word	0x0800c849
 800c534:	0800c849 	.word	0x0800c849
 800c538:	0800c849 	.word	0x0800c849
 800c53c:	0800c849 	.word	0x0800c849
 800c540:	0800c599 	.word	0x0800c599
 800c544:	0800c5ad 	.word	0x0800c5ad
 800c548:	0800c849 	.word	0x0800c849
 800c54c:	0800c68b 	.word	0x0800c68b
 800c550:	0800c849 	.word	0x0800c849
 800c554:	0800c849 	.word	0x0800c849
 800c558:	0800c5ad 	.word	0x0800c5ad
 800c55c:	0800c849 	.word	0x0800c849
 800c560:	0800c849 	.word	0x0800c849
 800c564:	0800c61b 	.word	0x0800c61b
 800c568:	0800c849 	.word	0x0800c849
 800c56c:	0800c849 	.word	0x0800c849
 800c570:	0800c849 	.word	0x0800c849
 800c574:	0800c849 	.word	0x0800c849
 800c578:	0800c849 	.word	0x0800c849
 800c57c:	0800c849 	.word	0x0800c849
 800c580:	0800c5dd 	.word	0x0800c5dd
 800c584:	0800c849 	.word	0x0800c849
 800c588:	0800c603 	.word	0x0800c603
 800c58c:	0800c849 	.word	0x0800c849
 800c590:	0800c849 	.word	0x0800c849
 800c594:	0800c651 	.word	0x0800c651
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	60fa      	str	r2, [r7, #12]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	1d11      	adds	r1, r2, #4
 800c5a2:	6079      	str	r1, [r7, #4]
 800c5a4:	6812      	ldr	r2, [r2, #0]
 800c5a6:	b2d2      	uxtb	r2, r2
 800c5a8:	701a      	strb	r2, [r3, #0]
				break;
 800c5aa:	e14d      	b.n	800c848 <ts_formatstring+0x438>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	1d1a      	adds	r2, r3, #4
 800c5b0:	607a      	str	r2, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	63bb      	str	r3, [r7, #56]	; 0x38
					if (val < 0)
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	da07      	bge.n	800c5cc <ts_formatstring+0x1bc>
					{
						val *= -1;
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	425b      	negs	r3, r3
 800c5c0:	63bb      	str	r3, [r7, #56]	; 0x38
						*buf++ = '-';
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	60fa      	str	r2, [r7, #12]
 800c5c8:	222d      	movs	r2, #45	; 0x2d
 800c5ca:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800c5cc:	f107 030c 	add.w	r3, r7, #12
 800c5d0:	220a      	movs	r2, #10
 800c5d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff fed1 	bl	800c37c <ts_itoa>
				}
				break;
 800c5da:	e135      	b.n	800c848 <ts_formatstring+0x438>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	1d1a      	adds	r2, r3, #4
 800c5e0:	607a      	str	r2, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	637b      	str	r3, [r7, #52]	; 0x34
					while (*arg)
 800c5e6:	e007      	b.n	800c5f8 <ts_formatstring+0x1e8>
					{
						*buf++ = *arg++;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	1c5a      	adds	r2, r3, #1
 800c5ec:	60fa      	str	r2, [r7, #12]
 800c5ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5f0:	1c51      	adds	r1, r2, #1
 800c5f2:	6379      	str	r1, [r7, #52]	; 0x34
 800c5f4:	7812      	ldrb	r2, [r2, #0]
 800c5f6:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800c5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1f3      	bne.n	800c5e8 <ts_formatstring+0x1d8>
					}
				}
				break;
 800c600:	e122      	b.n	800c848 <ts_formatstring+0x438>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	1d1a      	adds	r2, r3, #4
 800c606:	607a      	str	r2, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4619      	mov	r1, r3
 800c60c:	f107 030c 	add.w	r3, r7, #12
 800c610:	220a      	movs	r2, #10
 800c612:	4618      	mov	r0, r3
 800c614:	f7ff feb2 	bl	800c37c <ts_itoa>
				break;
 800c618:	e116      	b.n	800c848 <ts_formatstring+0x438>
			  case 'l':
				    ++fmt;  /* to cancel 'd' printing */
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	3301      	adds	r3, #1
 800c61e:	60bb      	str	r3, [r7, #8]
					long val = va_arg(va, long);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	1d1a      	adds	r2, r3, #4
 800c624:	607a      	str	r2, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	633b      	str	r3, [r7, #48]	; 0x30
					if (val < 0)
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	da07      	bge.n	800c640 <ts_formatstring+0x230>
					{
						val *= -1;
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	425b      	negs	r3, r3
 800c634:	633b      	str	r3, [r7, #48]	; 0x30
						*buf++ = '-';
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	1c5a      	adds	r2, r3, #1
 800c63a:	60fa      	str	r2, [r7, #12]
 800c63c:	222d      	movs	r2, #45	; 0x2d
 800c63e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800c640:	f107 030c 	add.w	r3, r7, #12
 800c644:	220a      	movs	r2, #10
 800c646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff fe97 	bl	800c37c <ts_itoa>
				break;
 800c64e:	e0fb      	b.n	800c848 <ts_formatstring+0x438>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	1d1a      	adds	r2, r3, #4
 800c654:	607a      	str	r2, [r7, #4]
 800c656:	6819      	ldr	r1, [r3, #0]
 800c658:	f107 030c 	add.w	r3, r7, #12
 800c65c:	2210      	movs	r2, #16
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff fe8c 	bl	800c37c <ts_itoa>
				break;
 800c664:	e0f0      	b.n	800c848 <ts_formatstring+0x438>
			  case '.':
				  precision = *(++fmt) - '0';
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	3301      	adds	r3, #1
 800c66a:	60bb      	str	r3, [r7, #8]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	3b30      	subs	r3, #48	; 0x30
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
				  if(!(precision >= 0 && precision <= 6))
 800c674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c676:	2b00      	cmp	r3, #0
 800c678:	db02      	blt.n	800c680 <ts_formatstring+0x270>
 800c67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67c:	2b06      	cmp	r3, #6
 800c67e:	dd01      	ble.n	800c684 <ts_formatstring+0x274>
					  precision = 6;
 800c680:	2306      	movs	r3, #6
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
				  ++fmt;
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	3301      	adds	r3, #1
 800c688:	60bb      	str	r3, [r7, #8]
			  case 'f':
				{

		/**********edited by Kai Sheng and Qiu Hui on 27/7/2017**************/
					float fval;
					fval = va_arg(va, double);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3307      	adds	r3, #7
 800c68e:	f023 0307 	bic.w	r3, r3, #7
 800c692:	f103 0208 	add.w	r2, r3, #8
 800c696:	607a      	str	r2, [r7, #4]
 800c698:	cb18      	ldmia	r3, {r3, r4}
 800c69a:	4618      	mov	r0, r3
 800c69c:	4621      	mov	r1, r4
 800c69e:	f7f4 fa7f 	bl	8000ba0 <__aeabi_d2f>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(fval < 0.0) {
 800c6a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c6aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b2:	d514      	bpl.n	800c6de <ts_formatstring+0x2ce>
						fval *= -1.0;
 800c6b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6b6:	f7f3 ff47 	bl	8000548 <__aeabi_f2d>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	460c      	mov	r4, r1
 800c6be:	4618      	mov	r0, r3
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	f7f4 fa6d 	bl	8000ba0 <__aeabi_d2f>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	ee07 3a90 	vmov	s15, r3
 800c6cc:	eef1 7a67 	vneg.f32	s15, s15
 800c6d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
						*buf++ = '-';
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	1c5a      	adds	r2, r3, #1
 800c6d8:	60fa      	str	r2, [r7, #12]
 800c6da:	222d      	movs	r2, #45	; 0x2d
 800c6dc:	701a      	strb	r2, [r3, #0]
					}
					long heiltal = (long)fval;
 800c6de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c6e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6e6:	ee17 3a90 	vmov	r3, s15
 800c6ea:	62bb      	str	r3, [r7, #40]	; 0x28

					int i = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	627b      	str	r3, [r7, #36]	; 0x24

					if(heiltal == 0){
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d126      	bne.n	800c744 <ts_formatstring+0x334>
						*buf++ = '0';
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	60fa      	str	r2, [r7, #12]
 800c6fc:	2230      	movs	r2, #48	; 0x30
 800c6fe:	701a      	strb	r2, [r3, #0]
						i++;
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	3301      	adds	r3, #1
 800c704:	627b      	str	r3, [r7, #36]	; 0x24
					}
					while (heiltal)
 800c706:	e01d      	b.n	800c744 <ts_formatstring+0x334>
					{
						*buf++ = (heiltal%10) + '0';
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	1c43      	adds	r3, r0, #1
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c710:	4b5d      	ldr	r3, [pc, #372]	; (800c888 <ts_formatstring+0x478>)
 800c712:	fb83 1302 	smull	r1, r3, r3, r2
 800c716:	1099      	asrs	r1, r3, #2
 800c718:	17d3      	asrs	r3, r2, #31
 800c71a:	1ac9      	subs	r1, r1, r3
 800c71c:	460b      	mov	r3, r1
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	440b      	add	r3, r1
 800c722:	005b      	lsls	r3, r3, #1
 800c724:	1ad1      	subs	r1, r2, r3
 800c726:	b2cb      	uxtb	r3, r1
 800c728:	3330      	adds	r3, #48	; 0x30
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	7003      	strb	r3, [r0, #0]
						heiltal = heiltal/10;
 800c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c730:	4a55      	ldr	r2, [pc, #340]	; (800c888 <ts_formatstring+0x478>)
 800c732:	fb82 1203 	smull	r1, r2, r2, r3
 800c736:	1092      	asrs	r2, r2, #2
 800c738:	17db      	asrs	r3, r3, #31
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	62bb      	str	r3, [r7, #40]	; 0x28
						i++;
 800c73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c740:	3301      	adds	r3, #1
 800c742:	627b      	str	r3, [r7, #36]	; 0x24
					while (heiltal)
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1de      	bne.n	800c708 <ts_formatstring+0x2f8>
					}

					reverse(buf - i, i);
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74e:	425b      	negs	r3, r3
 800c750:	4413      	add	r3, r2
 800c752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c754:	4618      	mov	r0, r3
 800c756:	f000 f8af 	bl	800c8b8 <reverse>

					heiltal = (long)fval;
 800c75a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c75e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c762:	ee17 3a90 	vmov	r3, s15
 800c766:	62bb      	str	r3, [r7, #40]	; 0x28
					*buf++ = '.';
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	60fa      	str	r2, [r7, #12]
 800c76e:	222e      	movs	r2, #46	; 0x2e
 800c770:	701a      	strb	r2, [r3, #0]

					float frac = fval - (float)heiltal;
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	ee07 3a90 	vmov	s15, r3
 800c778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c77c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c780:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c784:	edc7 7a05 	vstr	s15, [r7, #20]
					long decimal = (long)(frac * pow(10,precision));
 800c788:	6978      	ldr	r0, [r7, #20]
 800c78a:	f7f3 fedd 	bl	8000548 <__aeabi_f2d>
 800c78e:	4604      	mov	r4, r0
 800c790:	460d      	mov	r5, r1
 800c792:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c794:	f7f3 fec6 	bl	8000524 <__aeabi_i2d>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	ec43 2b11 	vmov	d1, r2, r3
 800c7a0:	ed9f 0b37 	vldr	d0, [pc, #220]	; 800c880 <ts_formatstring+0x470>
 800c7a4:	f000 f958 	bl	800ca58 <pow>
 800c7a8:	ec53 2b10 	vmov	r2, r3, d0
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	f7f3 ff1e 	bl	80005f0 <__aeabi_dmul>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	f7f4 f9c8 	bl	8000b50 <__aeabi_d2iz>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	623b      	str	r3, [r7, #32]

					int j = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61fb      	str	r3, [r7, #28]

					while (decimal)
 800c7c8:	e01d      	b.n	800c806 <ts_formatstring+0x3f6>
					{
						*buf++ = (decimal % 10) + '0';
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	6a3a      	ldr	r2, [r7, #32]
 800c7d2:	4b2d      	ldr	r3, [pc, #180]	; (800c888 <ts_formatstring+0x478>)
 800c7d4:	fb83 1302 	smull	r1, r3, r3, r2
 800c7d8:	1099      	asrs	r1, r3, #2
 800c7da:	17d3      	asrs	r3, r2, #31
 800c7dc:	1ac9      	subs	r1, r1, r3
 800c7de:	460b      	mov	r3, r1
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	440b      	add	r3, r1
 800c7e4:	005b      	lsls	r3, r3, #1
 800c7e6:	1ad1      	subs	r1, r2, r3
 800c7e8:	b2cb      	uxtb	r3, r1
 800c7ea:	3330      	adds	r3, #48	; 0x30
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	7003      	strb	r3, [r0, #0]
						decimal = decimal / 10;
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	4a25      	ldr	r2, [pc, #148]	; (800c888 <ts_formatstring+0x478>)
 800c7f4:	fb82 1203 	smull	r1, r2, r2, r3
 800c7f8:	1092      	asrs	r2, r2, #2
 800c7fa:	17db      	asrs	r3, r3, #31
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	623b      	str	r3, [r7, #32]
						j++;
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	3301      	adds	r3, #1
 800c804:	61fb      	str	r3, [r7, #28]
					while (decimal)
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1de      	bne.n	800c7ca <ts_formatstring+0x3ba>
					}

					 while (j < precision){
 800c80c:	e007      	b.n	800c81e <ts_formatstring+0x40e>
						 *buf++ = '0';
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	60fa      	str	r2, [r7, #12]
 800c814:	2230      	movs	r2, #48	; 0x30
 800c816:	701a      	strb	r2, [r3, #0]
						 j++;
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	3301      	adds	r3, #1
 800c81c:	61fb      	str	r3, [r7, #28]
					 while (j < precision){
 800c81e:	69fa      	ldr	r2, [r7, #28]
 800c820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c822:	429a      	cmp	r2, r3
 800c824:	dbf3      	blt.n	800c80e <ts_formatstring+0x3fe>
					 }

					reverse(buf - j, j);
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	425b      	negs	r3, r3
 800c82c:	4413      	add	r3, r2
 800c82e:	69f9      	ldr	r1, [r7, #28]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 f841 	bl	800c8b8 <reverse>
					precision = 6;
 800c836:	2306      	movs	r3, #6
 800c838:	63fb      	str	r3, [r7, #60]	; 0x3c
				 }
		/*************************************************************************/
				 break;
 800c83a:	e005      	b.n	800c848 <ts_formatstring+0x438>
			  case '%':
				  *buf++ = '%';
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	60fa      	str	r2, [r7, #12]
 800c842:	2225      	movs	r2, #37	; 0x25
 800c844:	701a      	strb	r2, [r3, #0]
				  break;
 800c846:	bf00      	nop
			}
			fmt++;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	3301      	adds	r3, #1
 800c84c:	60bb      	str	r3, [r7, #8]
 800c84e:	e007      	b.n	800c860 <ts_formatstring+0x450>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	60fa      	str	r2, [r7, #12]
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	1c51      	adds	r1, r2, #1
 800c85a:	60b9      	str	r1, [r7, #8]
 800c85c:	7812      	ldrb	r2, [r2, #0]
 800c85e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	f47f adde 	bne.w	800c426 <ts_formatstring+0x16>
		}
	}
	*buf = 0;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	461a      	mov	r2, r3
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	1ad3      	subs	r3, r2, r3
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3740      	adds	r7, #64	; 0x40
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bdb0      	pop	{r4, r5, r7, pc}
 800c880:	00000000 	.word	0x00000000
 800c884:	40240000 	.word	0x40240000
 800c888:	66666667 	.word	0x66666667

0800c88c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800c88c:	b40e      	push	{r1, r2, r3}
 800c88e:	b580      	push	{r7, lr}
 800c890:	b085      	sub	sp, #20
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800c896:	f107 0320 	add.w	r3, r7, #32
 800c89a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	69f9      	ldr	r1, [r7, #28]
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7ff fdb5 	bl	800c410 <ts_formatstring>
 800c8a6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8b4:	b003      	add	sp, #12
 800c8b6:	4770      	bx	lr

0800c8b8 <reverse>:
	return (_write((fp->_file), (char*)buf, size * count) / size);
}

/**********edited by Kai Sheng and Qiu Hui on 27/7/2017**************/
void reverse(char *str, int len)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	617b      	str	r3, [r7, #20]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	613b      	str	r3, [r7, #16]
    while (i<j)
 800c8cc:	e018      	b.n	800c900 <reverse+0x48>
    {
        temp = str[i];
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	4413      	add	r3, r2
 800c8de:	693a      	ldr	r2, [r7, #16]
 800c8e0:	6879      	ldr	r1, [r7, #4]
 800c8e2:	440a      	add	r2, r1
 800c8e4:	7812      	ldrb	r2, [r2, #0]
 800c8e6:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	701a      	strb	r2, [r3, #0]
        i++; j--;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	617b      	str	r3, [r7, #20]
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	613b      	str	r3, [r7, #16]
    while (i<j)
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	429a      	cmp	r2, r3
 800c906:	dbe2      	blt.n	800c8ce <reverse+0x16>
    }
}
 800c908:	bf00      	nop
 800c90a:	371c      	adds	r7, #28
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <__cxa_pure_virtual>:
 800c914:	b508      	push	{r3, lr}
 800c916:	f000 f80d 	bl	800c934 <_ZSt9terminatev>

0800c91a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c91a:	b508      	push	{r3, lr}
 800c91c:	4780      	blx	r0
 800c91e:	f002 f86e 	bl	800e9fe <abort>
	...

0800c924 <_ZSt13get_terminatev>:
 800c924:	4b02      	ldr	r3, [pc, #8]	; (800c930 <_ZSt13get_terminatev+0xc>)
 800c926:	6818      	ldr	r0, [r3, #0]
 800c928:	f3bf 8f5b 	dmb	ish
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	2000012c 	.word	0x2000012c

0800c934 <_ZSt9terminatev>:
 800c934:	b508      	push	{r3, lr}
 800c936:	f7ff fff5 	bl	800c924 <_ZSt13get_terminatev>
 800c93a:	f7ff ffee 	bl	800c91a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800c940 <cos>:
 800c940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c942:	ec51 0b10 	vmov	r0, r1, d0
 800c946:	4a1e      	ldr	r2, [pc, #120]	; (800c9c0 <cos+0x80>)
 800c948:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c94c:	4293      	cmp	r3, r2
 800c94e:	dc06      	bgt.n	800c95e <cos+0x1e>
 800c950:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800c9b8 <cos+0x78>
 800c954:	f001 f9b0 	bl	800dcb8 <__kernel_cos>
 800c958:	ec51 0b10 	vmov	r0, r1, d0
 800c95c:	e007      	b.n	800c96e <cos+0x2e>
 800c95e:	4a19      	ldr	r2, [pc, #100]	; (800c9c4 <cos+0x84>)
 800c960:	4293      	cmp	r3, r2
 800c962:	dd09      	ble.n	800c978 <cos+0x38>
 800c964:	ee10 2a10 	vmov	r2, s0
 800c968:	460b      	mov	r3, r1
 800c96a:	f7f3 fc8d 	bl	8000288 <__aeabi_dsub>
 800c96e:	ec41 0b10 	vmov	d0, r0, r1
 800c972:	b005      	add	sp, #20
 800c974:	f85d fb04 	ldr.w	pc, [sp], #4
 800c978:	4668      	mov	r0, sp
 800c97a:	f000 fef9 	bl	800d770 <__ieee754_rem_pio2>
 800c97e:	f000 0003 	and.w	r0, r0, #3
 800c982:	2801      	cmp	r0, #1
 800c984:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c988:	ed9d 0b00 	vldr	d0, [sp]
 800c98c:	d007      	beq.n	800c99e <cos+0x5e>
 800c98e:	2802      	cmp	r0, #2
 800c990:	d00e      	beq.n	800c9b0 <cos+0x70>
 800c992:	2800      	cmp	r0, #0
 800c994:	d0de      	beq.n	800c954 <cos+0x14>
 800c996:	2001      	movs	r0, #1
 800c998:	f001 fdc6 	bl	800e528 <__kernel_sin>
 800c99c:	e7dc      	b.n	800c958 <cos+0x18>
 800c99e:	f001 fdc3 	bl	800e528 <__kernel_sin>
 800c9a2:	ec53 2b10 	vmov	r2, r3, d0
 800c9a6:	ee10 0a10 	vmov	r0, s0
 800c9aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c9ae:	e7de      	b.n	800c96e <cos+0x2e>
 800c9b0:	f001 f982 	bl	800dcb8 <__kernel_cos>
 800c9b4:	e7f5      	b.n	800c9a2 <cos+0x62>
 800c9b6:	bf00      	nop
	...
 800c9c0:	3fe921fb 	.word	0x3fe921fb
 800c9c4:	7fefffff 	.word	0x7fefffff

0800c9c8 <sin>:
 800c9c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9ca:	ec51 0b10 	vmov	r0, r1, d0
 800c9ce:	4a20      	ldr	r2, [pc, #128]	; (800ca50 <sin+0x88>)
 800c9d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	dc07      	bgt.n	800c9e8 <sin+0x20>
 800c9d8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ca48 <sin+0x80>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f001 fda3 	bl	800e528 <__kernel_sin>
 800c9e2:	ec51 0b10 	vmov	r0, r1, d0
 800c9e6:	e007      	b.n	800c9f8 <sin+0x30>
 800c9e8:	4a1a      	ldr	r2, [pc, #104]	; (800ca54 <sin+0x8c>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	dd09      	ble.n	800ca02 <sin+0x3a>
 800c9ee:	ee10 2a10 	vmov	r2, s0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	f7f3 fc48 	bl	8000288 <__aeabi_dsub>
 800c9f8:	ec41 0b10 	vmov	d0, r0, r1
 800c9fc:	b005      	add	sp, #20
 800c9fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca02:	4668      	mov	r0, sp
 800ca04:	f000 feb4 	bl	800d770 <__ieee754_rem_pio2>
 800ca08:	f000 0003 	and.w	r0, r0, #3
 800ca0c:	2801      	cmp	r0, #1
 800ca0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca12:	ed9d 0b00 	vldr	d0, [sp]
 800ca16:	d004      	beq.n	800ca22 <sin+0x5a>
 800ca18:	2802      	cmp	r0, #2
 800ca1a:	d005      	beq.n	800ca28 <sin+0x60>
 800ca1c:	b970      	cbnz	r0, 800ca3c <sin+0x74>
 800ca1e:	2001      	movs	r0, #1
 800ca20:	e7dd      	b.n	800c9de <sin+0x16>
 800ca22:	f001 f949 	bl	800dcb8 <__kernel_cos>
 800ca26:	e7dc      	b.n	800c9e2 <sin+0x1a>
 800ca28:	2001      	movs	r0, #1
 800ca2a:	f001 fd7d 	bl	800e528 <__kernel_sin>
 800ca2e:	ec53 2b10 	vmov	r2, r3, d0
 800ca32:	ee10 0a10 	vmov	r0, s0
 800ca36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ca3a:	e7dd      	b.n	800c9f8 <sin+0x30>
 800ca3c:	f001 f93c 	bl	800dcb8 <__kernel_cos>
 800ca40:	e7f5      	b.n	800ca2e <sin+0x66>
 800ca42:	bf00      	nop
 800ca44:	f3af 8000 	nop.w
	...
 800ca50:	3fe921fb 	.word	0x3fe921fb
 800ca54:	7fefffff 	.word	0x7fefffff

0800ca58 <pow>:
 800ca58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5c:	ed2d 8b04 	vpush	{d8-d9}
 800ca60:	b08d      	sub	sp, #52	; 0x34
 800ca62:	ec57 6b10 	vmov	r6, r7, d0
 800ca66:	ec55 4b11 	vmov	r4, r5, d1
 800ca6a:	f000 f96d 	bl	800cd48 <__ieee754_pow>
 800ca6e:	4bae      	ldr	r3, [pc, #696]	; (800cd28 <pow+0x2d0>)
 800ca70:	eeb0 8a40 	vmov.f32	s16, s0
 800ca74:	eef0 8a60 	vmov.f32	s17, s1
 800ca78:	f993 9000 	ldrsb.w	r9, [r3]
 800ca7c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800ca80:	4698      	mov	r8, r3
 800ca82:	d05f      	beq.n	800cb44 <pow+0xec>
 800ca84:	4622      	mov	r2, r4
 800ca86:	462b      	mov	r3, r5
 800ca88:	4620      	mov	r0, r4
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	f7f4 f84a 	bl	8000b24 <__aeabi_dcmpun>
 800ca90:	4683      	mov	fp, r0
 800ca92:	2800      	cmp	r0, #0
 800ca94:	d156      	bne.n	800cb44 <pow+0xec>
 800ca96:	4632      	mov	r2, r6
 800ca98:	463b      	mov	r3, r7
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	4639      	mov	r1, r7
 800ca9e:	f7f4 f841 	bl	8000b24 <__aeabi_dcmpun>
 800caa2:	9001      	str	r0, [sp, #4]
 800caa4:	b1e8      	cbz	r0, 800cae2 <pow+0x8a>
 800caa6:	2200      	movs	r2, #0
 800caa8:	2300      	movs	r3, #0
 800caaa:	4620      	mov	r0, r4
 800caac:	4629      	mov	r1, r5
 800caae:	f7f4 f807 	bl	8000ac0 <__aeabi_dcmpeq>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d046      	beq.n	800cb44 <pow+0xec>
 800cab6:	2301      	movs	r3, #1
 800cab8:	9302      	str	r3, [sp, #8]
 800caba:	4b9c      	ldr	r3, [pc, #624]	; (800cd2c <pow+0x2d4>)
 800cabc:	9303      	str	r3, [sp, #12]
 800cabe:	4b9c      	ldr	r3, [pc, #624]	; (800cd30 <pow+0x2d8>)
 800cac0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800cac4:	2200      	movs	r2, #0
 800cac6:	f1b9 0f02 	cmp.w	r9, #2
 800caca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cace:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cad2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cad6:	d033      	beq.n	800cb40 <pow+0xe8>
 800cad8:	a802      	add	r0, sp, #8
 800cada:	f001 fe75 	bl	800e7c8 <matherr>
 800cade:	bb48      	cbnz	r0, 800cb34 <pow+0xdc>
 800cae0:	e05e      	b.n	800cba0 <pow+0x148>
 800cae2:	f04f 0a00 	mov.w	sl, #0
 800cae6:	f04f 0b00 	mov.w	fp, #0
 800caea:	4652      	mov	r2, sl
 800caec:	465b      	mov	r3, fp
 800caee:	4630      	mov	r0, r6
 800caf0:	4639      	mov	r1, r7
 800caf2:	f7f3 ffe5 	bl	8000ac0 <__aeabi_dcmpeq>
 800caf6:	ec4b ab19 	vmov	d9, sl, fp
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d055      	beq.n	800cbaa <pow+0x152>
 800cafe:	4652      	mov	r2, sl
 800cb00:	465b      	mov	r3, fp
 800cb02:	4620      	mov	r0, r4
 800cb04:	4629      	mov	r1, r5
 800cb06:	f7f3 ffdb 	bl	8000ac0 <__aeabi_dcmpeq>
 800cb0a:	4680      	mov	r8, r0
 800cb0c:	b318      	cbz	r0, 800cb56 <pow+0xfe>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	9302      	str	r3, [sp, #8]
 800cb12:	4b86      	ldr	r3, [pc, #536]	; (800cd2c <pow+0x2d4>)
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	930a      	str	r3, [sp, #40]	; 0x28
 800cb1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cb1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cb22:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800cb26:	f1b9 0f00 	cmp.w	r9, #0
 800cb2a:	d0d5      	beq.n	800cad8 <pow+0x80>
 800cb2c:	4b80      	ldr	r3, [pc, #512]	; (800cd30 <pow+0x2d8>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cb34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb36:	b11b      	cbz	r3, 800cb40 <pow+0xe8>
 800cb38:	f001 ff68 	bl	800ea0c <__errno>
 800cb3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb3e:	6003      	str	r3, [r0, #0]
 800cb40:	ed9d 8b08 	vldr	d8, [sp, #32]
 800cb44:	eeb0 0a48 	vmov.f32	s0, s16
 800cb48:	eef0 0a68 	vmov.f32	s1, s17
 800cb4c:	b00d      	add	sp, #52	; 0x34
 800cb4e:	ecbd 8b04 	vpop	{d8-d9}
 800cb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb56:	ec45 4b10 	vmov	d0, r4, r5
 800cb5a:	f001 fda6 	bl	800e6aa <finite>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d0f0      	beq.n	800cb44 <pow+0xec>
 800cb62:	4652      	mov	r2, sl
 800cb64:	465b      	mov	r3, fp
 800cb66:	4620      	mov	r0, r4
 800cb68:	4629      	mov	r1, r5
 800cb6a:	f7f3 ffb3 	bl	8000ad4 <__aeabi_dcmplt>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d0e8      	beq.n	800cb44 <pow+0xec>
 800cb72:	2301      	movs	r3, #1
 800cb74:	9302      	str	r3, [sp, #8]
 800cb76:	4b6d      	ldr	r3, [pc, #436]	; (800cd2c <pow+0x2d4>)
 800cb78:	9303      	str	r3, [sp, #12]
 800cb7a:	4b6b      	ldr	r3, [pc, #428]	; (800cd28 <pow+0x2d0>)
 800cb7c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800cb80:	f993 3000 	ldrsb.w	r3, [r3]
 800cb84:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cb88:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cb8c:	b913      	cbnz	r3, 800cb94 <pow+0x13c>
 800cb8e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800cb92:	e7a1      	b.n	800cad8 <pow+0x80>
 800cb94:	4967      	ldr	r1, [pc, #412]	; (800cd34 <pow+0x2dc>)
 800cb96:	2000      	movs	r0, #0
 800cb98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d19b      	bne.n	800cad8 <pow+0x80>
 800cba0:	f001 ff34 	bl	800ea0c <__errno>
 800cba4:	2321      	movs	r3, #33	; 0x21
 800cba6:	6003      	str	r3, [r0, #0]
 800cba8:	e7c4      	b.n	800cb34 <pow+0xdc>
 800cbaa:	eeb0 0a48 	vmov.f32	s0, s16
 800cbae:	eef0 0a68 	vmov.f32	s1, s17
 800cbb2:	f001 fd7a 	bl	800e6aa <finite>
 800cbb6:	9001      	str	r0, [sp, #4]
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	f040 808a 	bne.w	800ccd2 <pow+0x27a>
 800cbbe:	ec47 6b10 	vmov	d0, r6, r7
 800cbc2:	f001 fd72 	bl	800e6aa <finite>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	f000 8083 	beq.w	800ccd2 <pow+0x27a>
 800cbcc:	ec45 4b10 	vmov	d0, r4, r5
 800cbd0:	f001 fd6b 	bl	800e6aa <finite>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d07c      	beq.n	800ccd2 <pow+0x27a>
 800cbd8:	ec53 2b18 	vmov	r2, r3, d8
 800cbdc:	ee18 0a10 	vmov	r0, s16
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	f7f3 ff9f 	bl	8000b24 <__aeabi_dcmpun>
 800cbe6:	f998 9000 	ldrsb.w	r9, [r8]
 800cbea:	4b50      	ldr	r3, [pc, #320]	; (800cd2c <pow+0x2d4>)
 800cbec:	b1b0      	cbz	r0, 800cc1c <pow+0x1c4>
 800cbee:	2201      	movs	r2, #1
 800cbf0:	9303      	str	r3, [sp, #12]
 800cbf2:	9b01      	ldr	r3, [sp, #4]
 800cbf4:	9202      	str	r2, [sp, #8]
 800cbf6:	930a      	str	r3, [sp, #40]	; 0x28
 800cbf8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cbfc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cc00:	f1b9 0f00 	cmp.w	r9, #0
 800cc04:	d0c3      	beq.n	800cb8e <pow+0x136>
 800cc06:	4652      	mov	r2, sl
 800cc08:	465b      	mov	r3, fp
 800cc0a:	4650      	mov	r0, sl
 800cc0c:	4659      	mov	r1, fp
 800cc0e:	f7f3 fe19 	bl	8000844 <__aeabi_ddiv>
 800cc12:	f1b9 0f02 	cmp.w	r9, #2
 800cc16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cc1a:	e7c0      	b.n	800cb9e <pow+0x146>
 800cc1c:	2203      	movs	r2, #3
 800cc1e:	9202      	str	r2, [sp, #8]
 800cc20:	9303      	str	r3, [sp, #12]
 800cc22:	900a      	str	r0, [sp, #40]	; 0x28
 800cc24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cc28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cc2c:	f1b9 0f00 	cmp.w	r9, #0
 800cc30:	d12c      	bne.n	800cc8c <pow+0x234>
 800cc32:	4b41      	ldr	r3, [pc, #260]	; (800cd38 <pow+0x2e0>)
 800cc34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cc38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	4652      	mov	r2, sl
 800cc40:	465b      	mov	r3, fp
 800cc42:	4639      	mov	r1, r7
 800cc44:	f7f3 ff46 	bl	8000ad4 <__aeabi_dcmplt>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d066      	beq.n	800cd1a <pow+0x2c2>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	4b3b      	ldr	r3, [pc, #236]	; (800cd3c <pow+0x2e4>)
 800cc50:	4620      	mov	r0, r4
 800cc52:	4629      	mov	r1, r5
 800cc54:	f7f3 fccc 	bl	80005f0 <__aeabi_dmul>
 800cc58:	4604      	mov	r4, r0
 800cc5a:	460d      	mov	r5, r1
 800cc5c:	ec45 4b10 	vmov	d0, r4, r5
 800cc60:	f001 fdbe 	bl	800e7e0 <rint>
 800cc64:	4620      	mov	r0, r4
 800cc66:	ec53 2b10 	vmov	r2, r3, d0
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	f7f3 ff28 	bl	8000ac0 <__aeabi_dcmpeq>
 800cc70:	b920      	cbnz	r0, 800cc7c <pow+0x224>
 800cc72:	4b33      	ldr	r3, [pc, #204]	; (800cd40 <pow+0x2e8>)
 800cc74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cc78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc7c:	f998 3000 	ldrsb.w	r3, [r8]
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d14a      	bne.n	800cd1a <pow+0x2c2>
 800cc84:	f001 fec2 	bl	800ea0c <__errno>
 800cc88:	2322      	movs	r3, #34	; 0x22
 800cc8a:	e78c      	b.n	800cba6 <pow+0x14e>
 800cc8c:	4b2d      	ldr	r3, [pc, #180]	; (800cd44 <pow+0x2ec>)
 800cc8e:	2200      	movs	r2, #0
 800cc90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc94:	4630      	mov	r0, r6
 800cc96:	4652      	mov	r2, sl
 800cc98:	465b      	mov	r3, fp
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	f7f3 ff1a 	bl	8000ad4 <__aeabi_dcmplt>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d0eb      	beq.n	800cc7c <pow+0x224>
 800cca4:	2200      	movs	r2, #0
 800cca6:	4b25      	ldr	r3, [pc, #148]	; (800cd3c <pow+0x2e4>)
 800cca8:	4620      	mov	r0, r4
 800ccaa:	4629      	mov	r1, r5
 800ccac:	f7f3 fca0 	bl	80005f0 <__aeabi_dmul>
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	460d      	mov	r5, r1
 800ccb4:	ec45 4b10 	vmov	d0, r4, r5
 800ccb8:	f001 fd92 	bl	800e7e0 <rint>
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	ec53 2b10 	vmov	r2, r3, d0
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	f7f3 fefc 	bl	8000ac0 <__aeabi_dcmpeq>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d1d7      	bne.n	800cc7c <pow+0x224>
 800cccc:	2200      	movs	r2, #0
 800ccce:	4b19      	ldr	r3, [pc, #100]	; (800cd34 <pow+0x2dc>)
 800ccd0:	e7d2      	b.n	800cc78 <pow+0x220>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	ec51 0b18 	vmov	r0, r1, d8
 800ccda:	f7f3 fef1 	bl	8000ac0 <__aeabi_dcmpeq>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f43f af30 	beq.w	800cb44 <pow+0xec>
 800cce4:	ec47 6b10 	vmov	d0, r6, r7
 800cce8:	f001 fcdf 	bl	800e6aa <finite>
 800ccec:	2800      	cmp	r0, #0
 800ccee:	f43f af29 	beq.w	800cb44 <pow+0xec>
 800ccf2:	ec45 4b10 	vmov	d0, r4, r5
 800ccf6:	f001 fcd8 	bl	800e6aa <finite>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	f43f af22 	beq.w	800cb44 <pow+0xec>
 800cd00:	2304      	movs	r3, #4
 800cd02:	9302      	str	r3, [sp, #8]
 800cd04:	4b09      	ldr	r3, [pc, #36]	; (800cd2c <pow+0x2d4>)
 800cd06:	9303      	str	r3, [sp, #12]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	930a      	str	r3, [sp, #40]	; 0x28
 800cd0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cd10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cd14:	ed8d 9b08 	vstr	d9, [sp, #32]
 800cd18:	e7b0      	b.n	800cc7c <pow+0x224>
 800cd1a:	a802      	add	r0, sp, #8
 800cd1c:	f001 fd54 	bl	800e7c8 <matherr>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	f47f af07 	bne.w	800cb34 <pow+0xdc>
 800cd26:	e7ad      	b.n	800cc84 <pow+0x22c>
 800cd28:	20000130 	.word	0x20000130
 800cd2c:	0800ff04 	.word	0x0800ff04
 800cd30:	3ff00000 	.word	0x3ff00000
 800cd34:	fff00000 	.word	0xfff00000
 800cd38:	47efffff 	.word	0x47efffff
 800cd3c:	3fe00000 	.word	0x3fe00000
 800cd40:	c7efffff 	.word	0xc7efffff
 800cd44:	7ff00000 	.word	0x7ff00000

0800cd48 <__ieee754_pow>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	b091      	sub	sp, #68	; 0x44
 800cd4e:	ed8d 1b00 	vstr	d1, [sp]
 800cd52:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800cd56:	ec57 6b10 	vmov	r6, r7, d0
 800cd5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cd5e:	ea58 0302 	orrs.w	r3, r8, r2
 800cd62:	ee10 aa10 	vmov	sl, s0
 800cd66:	463d      	mov	r5, r7
 800cd68:	f000 84bd 	beq.w	800d6e6 <__ieee754_pow+0x99e>
 800cd6c:	4b78      	ldr	r3, [pc, #480]	; (800cf50 <__ieee754_pow+0x208>)
 800cd6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cd72:	429c      	cmp	r4, r3
 800cd74:	dc09      	bgt.n	800cd8a <__ieee754_pow+0x42>
 800cd76:	d103      	bne.n	800cd80 <__ieee754_pow+0x38>
 800cd78:	b93e      	cbnz	r6, 800cd8a <__ieee754_pow+0x42>
 800cd7a:	45a0      	cmp	r8, r4
 800cd7c:	dc0d      	bgt.n	800cd9a <__ieee754_pow+0x52>
 800cd7e:	e001      	b.n	800cd84 <__ieee754_pow+0x3c>
 800cd80:	4598      	cmp	r8, r3
 800cd82:	dc02      	bgt.n	800cd8a <__ieee754_pow+0x42>
 800cd84:	4598      	cmp	r8, r3
 800cd86:	d10e      	bne.n	800cda6 <__ieee754_pow+0x5e>
 800cd88:	b16a      	cbz	r2, 800cda6 <__ieee754_pow+0x5e>
 800cd8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cd8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd92:	ea54 030a 	orrs.w	r3, r4, sl
 800cd96:	f000 84a6 	beq.w	800d6e6 <__ieee754_pow+0x99e>
 800cd9a:	486e      	ldr	r0, [pc, #440]	; (800cf54 <__ieee754_pow+0x20c>)
 800cd9c:	b011      	add	sp, #68	; 0x44
 800cd9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda2:	f001 bd15 	b.w	800e7d0 <nan>
 800cda6:	2d00      	cmp	r5, #0
 800cda8:	da53      	bge.n	800ce52 <__ieee754_pow+0x10a>
 800cdaa:	4b6b      	ldr	r3, [pc, #428]	; (800cf58 <__ieee754_pow+0x210>)
 800cdac:	4598      	cmp	r8, r3
 800cdae:	dc4d      	bgt.n	800ce4c <__ieee754_pow+0x104>
 800cdb0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cdb4:	4598      	cmp	r8, r3
 800cdb6:	dd4c      	ble.n	800ce52 <__ieee754_pow+0x10a>
 800cdb8:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cdbc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cdc0:	2b14      	cmp	r3, #20
 800cdc2:	dd26      	ble.n	800ce12 <__ieee754_pow+0xca>
 800cdc4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cdc8:	fa22 f103 	lsr.w	r1, r2, r3
 800cdcc:	fa01 f303 	lsl.w	r3, r1, r3
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d13e      	bne.n	800ce52 <__ieee754_pow+0x10a>
 800cdd4:	f001 0101 	and.w	r1, r1, #1
 800cdd8:	f1c1 0b02 	rsb	fp, r1, #2
 800cddc:	2a00      	cmp	r2, #0
 800cdde:	d15b      	bne.n	800ce98 <__ieee754_pow+0x150>
 800cde0:	4b5b      	ldr	r3, [pc, #364]	; (800cf50 <__ieee754_pow+0x208>)
 800cde2:	4598      	cmp	r8, r3
 800cde4:	d124      	bne.n	800ce30 <__ieee754_pow+0xe8>
 800cde6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cdea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cdee:	ea53 030a 	orrs.w	r3, r3, sl
 800cdf2:	f000 8478 	beq.w	800d6e6 <__ieee754_pow+0x99e>
 800cdf6:	4b59      	ldr	r3, [pc, #356]	; (800cf5c <__ieee754_pow+0x214>)
 800cdf8:	429c      	cmp	r4, r3
 800cdfa:	dd2d      	ble.n	800ce58 <__ieee754_pow+0x110>
 800cdfc:	f1b9 0f00 	cmp.w	r9, #0
 800ce00:	f280 8475 	bge.w	800d6ee <__ieee754_pow+0x9a6>
 800ce04:	2000      	movs	r0, #0
 800ce06:	2100      	movs	r1, #0
 800ce08:	ec41 0b10 	vmov	d0, r0, r1
 800ce0c:	b011      	add	sp, #68	; 0x44
 800ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce12:	2a00      	cmp	r2, #0
 800ce14:	d13e      	bne.n	800ce94 <__ieee754_pow+0x14c>
 800ce16:	f1c3 0314 	rsb	r3, r3, #20
 800ce1a:	fa48 f103 	asr.w	r1, r8, r3
 800ce1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce22:	4598      	cmp	r8, r3
 800ce24:	f040 846b 	bne.w	800d6fe <__ieee754_pow+0x9b6>
 800ce28:	f001 0101 	and.w	r1, r1, #1
 800ce2c:	f1c1 0b02 	rsb	fp, r1, #2
 800ce30:	4b4b      	ldr	r3, [pc, #300]	; (800cf60 <__ieee754_pow+0x218>)
 800ce32:	4598      	cmp	r8, r3
 800ce34:	d118      	bne.n	800ce68 <__ieee754_pow+0x120>
 800ce36:	f1b9 0f00 	cmp.w	r9, #0
 800ce3a:	f280 845c 	bge.w	800d6f6 <__ieee754_pow+0x9ae>
 800ce3e:	4948      	ldr	r1, [pc, #288]	; (800cf60 <__ieee754_pow+0x218>)
 800ce40:	4632      	mov	r2, r6
 800ce42:	463b      	mov	r3, r7
 800ce44:	2000      	movs	r0, #0
 800ce46:	f7f3 fcfd 	bl	8000844 <__aeabi_ddiv>
 800ce4a:	e7dd      	b.n	800ce08 <__ieee754_pow+0xc0>
 800ce4c:	f04f 0b02 	mov.w	fp, #2
 800ce50:	e7c4      	b.n	800cddc <__ieee754_pow+0x94>
 800ce52:	f04f 0b00 	mov.w	fp, #0
 800ce56:	e7c1      	b.n	800cddc <__ieee754_pow+0x94>
 800ce58:	f1b9 0f00 	cmp.w	r9, #0
 800ce5c:	dad2      	bge.n	800ce04 <__ieee754_pow+0xbc>
 800ce5e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800ce62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce66:	e7cf      	b.n	800ce08 <__ieee754_pow+0xc0>
 800ce68:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ce6c:	d106      	bne.n	800ce7c <__ieee754_pow+0x134>
 800ce6e:	4632      	mov	r2, r6
 800ce70:	463b      	mov	r3, r7
 800ce72:	4610      	mov	r0, r2
 800ce74:	4619      	mov	r1, r3
 800ce76:	f7f3 fbbb 	bl	80005f0 <__aeabi_dmul>
 800ce7a:	e7c5      	b.n	800ce08 <__ieee754_pow+0xc0>
 800ce7c:	4b39      	ldr	r3, [pc, #228]	; (800cf64 <__ieee754_pow+0x21c>)
 800ce7e:	4599      	cmp	r9, r3
 800ce80:	d10a      	bne.n	800ce98 <__ieee754_pow+0x150>
 800ce82:	2d00      	cmp	r5, #0
 800ce84:	db08      	blt.n	800ce98 <__ieee754_pow+0x150>
 800ce86:	ec47 6b10 	vmov	d0, r6, r7
 800ce8a:	b011      	add	sp, #68	; 0x44
 800ce8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce90:	f000 be60 	b.w	800db54 <__ieee754_sqrt>
 800ce94:	f04f 0b00 	mov.w	fp, #0
 800ce98:	ec47 6b10 	vmov	d0, r6, r7
 800ce9c:	f001 fbfe 	bl	800e69c <fabs>
 800cea0:	ec51 0b10 	vmov	r0, r1, d0
 800cea4:	f1ba 0f00 	cmp.w	sl, #0
 800cea8:	d127      	bne.n	800cefa <__ieee754_pow+0x1b2>
 800ceaa:	b124      	cbz	r4, 800ceb6 <__ieee754_pow+0x16e>
 800ceac:	4b2c      	ldr	r3, [pc, #176]	; (800cf60 <__ieee754_pow+0x218>)
 800ceae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d121      	bne.n	800cefa <__ieee754_pow+0x1b2>
 800ceb6:	f1b9 0f00 	cmp.w	r9, #0
 800ceba:	da05      	bge.n	800cec8 <__ieee754_pow+0x180>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	2000      	movs	r0, #0
 800cec2:	4927      	ldr	r1, [pc, #156]	; (800cf60 <__ieee754_pow+0x218>)
 800cec4:	f7f3 fcbe 	bl	8000844 <__aeabi_ddiv>
 800cec8:	2d00      	cmp	r5, #0
 800ceca:	da9d      	bge.n	800ce08 <__ieee754_pow+0xc0>
 800cecc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ced0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ced4:	ea54 030b 	orrs.w	r3, r4, fp
 800ced8:	d108      	bne.n	800ceec <__ieee754_pow+0x1a4>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	4610      	mov	r0, r2
 800cee0:	4619      	mov	r1, r3
 800cee2:	f7f3 f9d1 	bl	8000288 <__aeabi_dsub>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	e7ac      	b.n	800ce46 <__ieee754_pow+0xfe>
 800ceec:	f1bb 0f01 	cmp.w	fp, #1
 800cef0:	d18a      	bne.n	800ce08 <__ieee754_pow+0xc0>
 800cef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cef6:	4619      	mov	r1, r3
 800cef8:	e786      	b.n	800ce08 <__ieee754_pow+0xc0>
 800cefa:	0fed      	lsrs	r5, r5, #31
 800cefc:	1e6b      	subs	r3, r5, #1
 800cefe:	930d      	str	r3, [sp, #52]	; 0x34
 800cf00:	ea5b 0303 	orrs.w	r3, fp, r3
 800cf04:	d102      	bne.n	800cf0c <__ieee754_pow+0x1c4>
 800cf06:	4632      	mov	r2, r6
 800cf08:	463b      	mov	r3, r7
 800cf0a:	e7e8      	b.n	800cede <__ieee754_pow+0x196>
 800cf0c:	4b16      	ldr	r3, [pc, #88]	; (800cf68 <__ieee754_pow+0x220>)
 800cf0e:	4598      	cmp	r8, r3
 800cf10:	f340 80fe 	ble.w	800d110 <__ieee754_pow+0x3c8>
 800cf14:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cf18:	4598      	cmp	r8, r3
 800cf1a:	dd0a      	ble.n	800cf32 <__ieee754_pow+0x1ea>
 800cf1c:	4b0f      	ldr	r3, [pc, #60]	; (800cf5c <__ieee754_pow+0x214>)
 800cf1e:	429c      	cmp	r4, r3
 800cf20:	dc0d      	bgt.n	800cf3e <__ieee754_pow+0x1f6>
 800cf22:	f1b9 0f00 	cmp.w	r9, #0
 800cf26:	f6bf af6d 	bge.w	800ce04 <__ieee754_pow+0xbc>
 800cf2a:	a307      	add	r3, pc, #28	; (adr r3, 800cf48 <__ieee754_pow+0x200>)
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	e79f      	b.n	800ce72 <__ieee754_pow+0x12a>
 800cf32:	4b0e      	ldr	r3, [pc, #56]	; (800cf6c <__ieee754_pow+0x224>)
 800cf34:	429c      	cmp	r4, r3
 800cf36:	ddf4      	ble.n	800cf22 <__ieee754_pow+0x1da>
 800cf38:	4b09      	ldr	r3, [pc, #36]	; (800cf60 <__ieee754_pow+0x218>)
 800cf3a:	429c      	cmp	r4, r3
 800cf3c:	dd18      	ble.n	800cf70 <__ieee754_pow+0x228>
 800cf3e:	f1b9 0f00 	cmp.w	r9, #0
 800cf42:	dcf2      	bgt.n	800cf2a <__ieee754_pow+0x1e2>
 800cf44:	e75e      	b.n	800ce04 <__ieee754_pow+0xbc>
 800cf46:	bf00      	nop
 800cf48:	8800759c 	.word	0x8800759c
 800cf4c:	7e37e43c 	.word	0x7e37e43c
 800cf50:	7ff00000 	.word	0x7ff00000
 800cf54:	08010138 	.word	0x08010138
 800cf58:	433fffff 	.word	0x433fffff
 800cf5c:	3fefffff 	.word	0x3fefffff
 800cf60:	3ff00000 	.word	0x3ff00000
 800cf64:	3fe00000 	.word	0x3fe00000
 800cf68:	41e00000 	.word	0x41e00000
 800cf6c:	3feffffe 	.word	0x3feffffe
 800cf70:	2200      	movs	r2, #0
 800cf72:	4b63      	ldr	r3, [pc, #396]	; (800d100 <__ieee754_pow+0x3b8>)
 800cf74:	f7f3 f988 	bl	8000288 <__aeabi_dsub>
 800cf78:	a355      	add	r3, pc, #340	; (adr r3, 800d0d0 <__ieee754_pow+0x388>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	4604      	mov	r4, r0
 800cf80:	460d      	mov	r5, r1
 800cf82:	f7f3 fb35 	bl	80005f0 <__aeabi_dmul>
 800cf86:	a354      	add	r3, pc, #336	; (adr r3, 800d0d8 <__ieee754_pow+0x390>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	460f      	mov	r7, r1
 800cf90:	4620      	mov	r0, r4
 800cf92:	4629      	mov	r1, r5
 800cf94:	f7f3 fb2c 	bl	80005f0 <__aeabi_dmul>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf9e:	4b59      	ldr	r3, [pc, #356]	; (800d104 <__ieee754_pow+0x3bc>)
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	f7f3 fb24 	bl	80005f0 <__aeabi_dmul>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	a14c      	add	r1, pc, #304	; (adr r1, 800d0e0 <__ieee754_pow+0x398>)
 800cfae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfb2:	f7f3 f969 	bl	8000288 <__aeabi_dsub>
 800cfb6:	4622      	mov	r2, r4
 800cfb8:	462b      	mov	r3, r5
 800cfba:	f7f3 fb19 	bl	80005f0 <__aeabi_dmul>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	4950      	ldr	r1, [pc, #320]	; (800d108 <__ieee754_pow+0x3c0>)
 800cfc6:	f7f3 f95f 	bl	8000288 <__aeabi_dsub>
 800cfca:	4622      	mov	r2, r4
 800cfcc:	462b      	mov	r3, r5
 800cfce:	4680      	mov	r8, r0
 800cfd0:	4689      	mov	r9, r1
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	f7f3 fb0b 	bl	80005f0 <__aeabi_dmul>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	460b      	mov	r3, r1
 800cfde:	4640      	mov	r0, r8
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	f7f3 fb05 	bl	80005f0 <__aeabi_dmul>
 800cfe6:	a340      	add	r3, pc, #256	; (adr r3, 800d0e8 <__ieee754_pow+0x3a0>)
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	f7f3 fb00 	bl	80005f0 <__aeabi_dmul>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cff8:	f7f3 f946 	bl	8000288 <__aeabi_dsub>
 800cffc:	4602      	mov	r2, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	4604      	mov	r4, r0
 800d002:	460d      	mov	r5, r1
 800d004:	4630      	mov	r0, r6
 800d006:	4639      	mov	r1, r7
 800d008:	f7f3 f940 	bl	800028c <__adddf3>
 800d00c:	2000      	movs	r0, #0
 800d00e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d012:	4632      	mov	r2, r6
 800d014:	463b      	mov	r3, r7
 800d016:	f7f3 f937 	bl	8000288 <__aeabi_dsub>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	4620      	mov	r0, r4
 800d020:	4629      	mov	r1, r5
 800d022:	f7f3 f931 	bl	8000288 <__aeabi_dsub>
 800d026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d028:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800d02c:	4313      	orrs	r3, r2
 800d02e:	4606      	mov	r6, r0
 800d030:	460f      	mov	r7, r1
 800d032:	f040 81eb 	bne.w	800d40c <__ieee754_pow+0x6c4>
 800d036:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d0f0 <__ieee754_pow+0x3a8>
 800d03a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d03e:	2400      	movs	r4, #0
 800d040:	4622      	mov	r2, r4
 800d042:	462b      	mov	r3, r5
 800d044:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d048:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d04c:	f7f3 f91c 	bl	8000288 <__aeabi_dsub>
 800d050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d054:	f7f3 facc 	bl	80005f0 <__aeabi_dmul>
 800d058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d05c:	4680      	mov	r8, r0
 800d05e:	4689      	mov	r9, r1
 800d060:	4630      	mov	r0, r6
 800d062:	4639      	mov	r1, r7
 800d064:	f7f3 fac4 	bl	80005f0 <__aeabi_dmul>
 800d068:	4602      	mov	r2, r0
 800d06a:	460b      	mov	r3, r1
 800d06c:	4640      	mov	r0, r8
 800d06e:	4649      	mov	r1, r9
 800d070:	f7f3 f90c 	bl	800028c <__adddf3>
 800d074:	4622      	mov	r2, r4
 800d076:	462b      	mov	r3, r5
 800d078:	4680      	mov	r8, r0
 800d07a:	4689      	mov	r9, r1
 800d07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d080:	f7f3 fab6 	bl	80005f0 <__aeabi_dmul>
 800d084:	460b      	mov	r3, r1
 800d086:	4604      	mov	r4, r0
 800d088:	460d      	mov	r5, r1
 800d08a:	4602      	mov	r2, r0
 800d08c:	4649      	mov	r1, r9
 800d08e:	4640      	mov	r0, r8
 800d090:	e9cd 4500 	strd	r4, r5, [sp]
 800d094:	f7f3 f8fa 	bl	800028c <__adddf3>
 800d098:	4b1c      	ldr	r3, [pc, #112]	; (800d10c <__ieee754_pow+0x3c4>)
 800d09a:	4299      	cmp	r1, r3
 800d09c:	4606      	mov	r6, r0
 800d09e:	460f      	mov	r7, r1
 800d0a0:	468b      	mov	fp, r1
 800d0a2:	f340 82f7 	ble.w	800d694 <__ieee754_pow+0x94c>
 800d0a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d0aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d0ae:	4303      	orrs	r3, r0
 800d0b0:	f000 81ea 	beq.w	800d488 <__ieee754_pow+0x740>
 800d0b4:	a310      	add	r3, pc, #64	; (adr r3, 800d0f8 <__ieee754_pow+0x3b0>)
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0be:	f7f3 fa97 	bl	80005f0 <__aeabi_dmul>
 800d0c2:	a30d      	add	r3, pc, #52	; (adr r3, 800d0f8 <__ieee754_pow+0x3b0>)
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	e6d5      	b.n	800ce76 <__ieee754_pow+0x12e>
 800d0ca:	bf00      	nop
 800d0cc:	f3af 8000 	nop.w
 800d0d0:	60000000 	.word	0x60000000
 800d0d4:	3ff71547 	.word	0x3ff71547
 800d0d8:	f85ddf44 	.word	0xf85ddf44
 800d0dc:	3e54ae0b 	.word	0x3e54ae0b
 800d0e0:	55555555 	.word	0x55555555
 800d0e4:	3fd55555 	.word	0x3fd55555
 800d0e8:	652b82fe 	.word	0x652b82fe
 800d0ec:	3ff71547 	.word	0x3ff71547
 800d0f0:	00000000 	.word	0x00000000
 800d0f4:	bff00000 	.word	0xbff00000
 800d0f8:	8800759c 	.word	0x8800759c
 800d0fc:	7e37e43c 	.word	0x7e37e43c
 800d100:	3ff00000 	.word	0x3ff00000
 800d104:	3fd00000 	.word	0x3fd00000
 800d108:	3fe00000 	.word	0x3fe00000
 800d10c:	408fffff 	.word	0x408fffff
 800d110:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d114:	f04f 0200 	mov.w	r2, #0
 800d118:	da05      	bge.n	800d126 <__ieee754_pow+0x3de>
 800d11a:	4bd3      	ldr	r3, [pc, #844]	; (800d468 <__ieee754_pow+0x720>)
 800d11c:	f7f3 fa68 	bl	80005f0 <__aeabi_dmul>
 800d120:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d124:	460c      	mov	r4, r1
 800d126:	1523      	asrs	r3, r4, #20
 800d128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d12c:	4413      	add	r3, r2
 800d12e:	9307      	str	r3, [sp, #28]
 800d130:	4bce      	ldr	r3, [pc, #824]	; (800d46c <__ieee754_pow+0x724>)
 800d132:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d136:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d13a:	429c      	cmp	r4, r3
 800d13c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d140:	dd08      	ble.n	800d154 <__ieee754_pow+0x40c>
 800d142:	4bcb      	ldr	r3, [pc, #812]	; (800d470 <__ieee754_pow+0x728>)
 800d144:	429c      	cmp	r4, r3
 800d146:	f340 815e 	ble.w	800d406 <__ieee754_pow+0x6be>
 800d14a:	9b07      	ldr	r3, [sp, #28]
 800d14c:	3301      	adds	r3, #1
 800d14e:	9307      	str	r3, [sp, #28]
 800d150:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d154:	f04f 0a00 	mov.w	sl, #0
 800d158:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d15c:	930c      	str	r3, [sp, #48]	; 0x30
 800d15e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d160:	4bc4      	ldr	r3, [pc, #784]	; (800d474 <__ieee754_pow+0x72c>)
 800d162:	4413      	add	r3, r2
 800d164:	ed93 7b00 	vldr	d7, [r3]
 800d168:	4629      	mov	r1, r5
 800d16a:	ec53 2b17 	vmov	r2, r3, d7
 800d16e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d172:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d176:	f7f3 f887 	bl	8000288 <__aeabi_dsub>
 800d17a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d17e:	4606      	mov	r6, r0
 800d180:	460f      	mov	r7, r1
 800d182:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d186:	f7f3 f881 	bl	800028c <__adddf3>
 800d18a:	4602      	mov	r2, r0
 800d18c:	460b      	mov	r3, r1
 800d18e:	2000      	movs	r0, #0
 800d190:	49b9      	ldr	r1, [pc, #740]	; (800d478 <__ieee754_pow+0x730>)
 800d192:	f7f3 fb57 	bl	8000844 <__aeabi_ddiv>
 800d196:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	4630      	mov	r0, r6
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	f7f3 fa25 	bl	80005f0 <__aeabi_dmul>
 800d1a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d1ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	9302      	str	r3, [sp, #8]
 800d1b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d1ba:	106d      	asrs	r5, r5, #1
 800d1bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d1c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	4614      	mov	r4, r2
 800d1d0:	461d      	mov	r5, r3
 800d1d2:	f7f3 fa0d 	bl	80005f0 <__aeabi_dmul>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4630      	mov	r0, r6
 800d1dc:	4639      	mov	r1, r7
 800d1de:	f7f3 f853 	bl	8000288 <__aeabi_dsub>
 800d1e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	460f      	mov	r7, r1
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	f7f3 f84b 	bl	8000288 <__aeabi_dsub>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1fa:	f7f3 f845 	bl	8000288 <__aeabi_dsub>
 800d1fe:	4642      	mov	r2, r8
 800d200:	464b      	mov	r3, r9
 800d202:	f7f3 f9f5 	bl	80005f0 <__aeabi_dmul>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 f83b 	bl	8000288 <__aeabi_dsub>
 800d212:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d216:	f7f3 f9eb 	bl	80005f0 <__aeabi_dmul>
 800d21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d21e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d222:	4610      	mov	r0, r2
 800d224:	4619      	mov	r1, r3
 800d226:	f7f3 f9e3 	bl	80005f0 <__aeabi_dmul>
 800d22a:	a37b      	add	r3, pc, #492	; (adr r3, 800d418 <__ieee754_pow+0x6d0>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	4604      	mov	r4, r0
 800d232:	460d      	mov	r5, r1
 800d234:	f7f3 f9dc 	bl	80005f0 <__aeabi_dmul>
 800d238:	a379      	add	r3, pc, #484	; (adr r3, 800d420 <__ieee754_pow+0x6d8>)
 800d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23e:	f7f3 f825 	bl	800028c <__adddf3>
 800d242:	4622      	mov	r2, r4
 800d244:	462b      	mov	r3, r5
 800d246:	f7f3 f9d3 	bl	80005f0 <__aeabi_dmul>
 800d24a:	a377      	add	r3, pc, #476	; (adr r3, 800d428 <__ieee754_pow+0x6e0>)
 800d24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d250:	f7f3 f81c 	bl	800028c <__adddf3>
 800d254:	4622      	mov	r2, r4
 800d256:	462b      	mov	r3, r5
 800d258:	f7f3 f9ca 	bl	80005f0 <__aeabi_dmul>
 800d25c:	a374      	add	r3, pc, #464	; (adr r3, 800d430 <__ieee754_pow+0x6e8>)
 800d25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d262:	f7f3 f813 	bl	800028c <__adddf3>
 800d266:	4622      	mov	r2, r4
 800d268:	462b      	mov	r3, r5
 800d26a:	f7f3 f9c1 	bl	80005f0 <__aeabi_dmul>
 800d26e:	a372      	add	r3, pc, #456	; (adr r3, 800d438 <__ieee754_pow+0x6f0>)
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	f7f3 f80a 	bl	800028c <__adddf3>
 800d278:	4622      	mov	r2, r4
 800d27a:	462b      	mov	r3, r5
 800d27c:	f7f3 f9b8 	bl	80005f0 <__aeabi_dmul>
 800d280:	a36f      	add	r3, pc, #444	; (adr r3, 800d440 <__ieee754_pow+0x6f8>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	f7f3 f801 	bl	800028c <__adddf3>
 800d28a:	4622      	mov	r2, r4
 800d28c:	4606      	mov	r6, r0
 800d28e:	460f      	mov	r7, r1
 800d290:	462b      	mov	r3, r5
 800d292:	4620      	mov	r0, r4
 800d294:	4629      	mov	r1, r5
 800d296:	f7f3 f9ab 	bl	80005f0 <__aeabi_dmul>
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	4630      	mov	r0, r6
 800d2a0:	4639      	mov	r1, r7
 800d2a2:	f7f3 f9a5 	bl	80005f0 <__aeabi_dmul>
 800d2a6:	4642      	mov	r2, r8
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	460d      	mov	r5, r1
 800d2ac:	464b      	mov	r3, r9
 800d2ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2b2:	f7f2 ffeb 	bl	800028c <__adddf3>
 800d2b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d2ba:	f7f3 f999 	bl	80005f0 <__aeabi_dmul>
 800d2be:	4622      	mov	r2, r4
 800d2c0:	462b      	mov	r3, r5
 800d2c2:	f7f2 ffe3 	bl	800028c <__adddf3>
 800d2c6:	4642      	mov	r2, r8
 800d2c8:	4606      	mov	r6, r0
 800d2ca:	460f      	mov	r7, r1
 800d2cc:	464b      	mov	r3, r9
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	4649      	mov	r1, r9
 800d2d2:	f7f3 f98d 	bl	80005f0 <__aeabi_dmul>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4b68      	ldr	r3, [pc, #416]	; (800d47c <__ieee754_pow+0x734>)
 800d2da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d2de:	f7f2 ffd5 	bl	800028c <__adddf3>
 800d2e2:	4632      	mov	r2, r6
 800d2e4:	463b      	mov	r3, r7
 800d2e6:	f7f2 ffd1 	bl	800028c <__adddf3>
 800d2ea:	9802      	ldr	r0, [sp, #8]
 800d2ec:	460d      	mov	r5, r1
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4640      	mov	r0, r8
 800d2f6:	4649      	mov	r1, r9
 800d2f8:	f7f3 f97a 	bl	80005f0 <__aeabi_dmul>
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4680      	mov	r8, r0
 800d300:	4689      	mov	r9, r1
 800d302:	4b5e      	ldr	r3, [pc, #376]	; (800d47c <__ieee754_pow+0x734>)
 800d304:	4620      	mov	r0, r4
 800d306:	4629      	mov	r1, r5
 800d308:	f7f2 ffbe 	bl	8000288 <__aeabi_dsub>
 800d30c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d310:	f7f2 ffba 	bl	8000288 <__aeabi_dsub>
 800d314:	4602      	mov	r2, r0
 800d316:	460b      	mov	r3, r1
 800d318:	4630      	mov	r0, r6
 800d31a:	4639      	mov	r1, r7
 800d31c:	f7f2 ffb4 	bl	8000288 <__aeabi_dsub>
 800d320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d324:	f7f3 f964 	bl	80005f0 <__aeabi_dmul>
 800d328:	4622      	mov	r2, r4
 800d32a:	4606      	mov	r6, r0
 800d32c:	460f      	mov	r7, r1
 800d32e:	462b      	mov	r3, r5
 800d330:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d334:	f7f3 f95c 	bl	80005f0 <__aeabi_dmul>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4630      	mov	r0, r6
 800d33e:	4639      	mov	r1, r7
 800d340:	f7f2 ffa4 	bl	800028c <__adddf3>
 800d344:	4606      	mov	r6, r0
 800d346:	460f      	mov	r7, r1
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4640      	mov	r0, r8
 800d34e:	4649      	mov	r1, r9
 800d350:	f7f2 ff9c 	bl	800028c <__adddf3>
 800d354:	9802      	ldr	r0, [sp, #8]
 800d356:	a33c      	add	r3, pc, #240	; (adr r3, 800d448 <__ieee754_pow+0x700>)
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	4604      	mov	r4, r0
 800d35e:	460d      	mov	r5, r1
 800d360:	f7f3 f946 	bl	80005f0 <__aeabi_dmul>
 800d364:	4642      	mov	r2, r8
 800d366:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d36a:	464b      	mov	r3, r9
 800d36c:	4620      	mov	r0, r4
 800d36e:	4629      	mov	r1, r5
 800d370:	f7f2 ff8a 	bl	8000288 <__aeabi_dsub>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4630      	mov	r0, r6
 800d37a:	4639      	mov	r1, r7
 800d37c:	f7f2 ff84 	bl	8000288 <__aeabi_dsub>
 800d380:	a333      	add	r3, pc, #204	; (adr r3, 800d450 <__ieee754_pow+0x708>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f3 f933 	bl	80005f0 <__aeabi_dmul>
 800d38a:	a333      	add	r3, pc, #204	; (adr r3, 800d458 <__ieee754_pow+0x710>)
 800d38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d390:	4606      	mov	r6, r0
 800d392:	460f      	mov	r7, r1
 800d394:	4620      	mov	r0, r4
 800d396:	4629      	mov	r1, r5
 800d398:	f7f3 f92a 	bl	80005f0 <__aeabi_dmul>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	f7f2 ff72 	bl	800028c <__adddf3>
 800d3a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3aa:	4b35      	ldr	r3, [pc, #212]	; (800d480 <__ieee754_pow+0x738>)
 800d3ac:	4413      	add	r3, r2
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	f7f2 ff6b 	bl	800028c <__adddf3>
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	9807      	ldr	r0, [sp, #28]
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	f7f3 f8b2 	bl	8000524 <__aeabi_i2d>
 800d3c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3c2:	4b30      	ldr	r3, [pc, #192]	; (800d484 <__ieee754_pow+0x73c>)
 800d3c4:	4413      	add	r3, r2
 800d3c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	460f      	mov	r7, r1
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	462b      	mov	r3, r5
 800d3d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d3d6:	f7f2 ff59 	bl	800028c <__adddf3>
 800d3da:	4642      	mov	r2, r8
 800d3dc:	464b      	mov	r3, r9
 800d3de:	f7f2 ff55 	bl	800028c <__adddf3>
 800d3e2:	4632      	mov	r2, r6
 800d3e4:	463b      	mov	r3, r7
 800d3e6:	f7f2 ff51 	bl	800028c <__adddf3>
 800d3ea:	9802      	ldr	r0, [sp, #8]
 800d3ec:	4632      	mov	r2, r6
 800d3ee:	463b      	mov	r3, r7
 800d3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3f4:	f7f2 ff48 	bl	8000288 <__aeabi_dsub>
 800d3f8:	4642      	mov	r2, r8
 800d3fa:	464b      	mov	r3, r9
 800d3fc:	f7f2 ff44 	bl	8000288 <__aeabi_dsub>
 800d400:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d404:	e607      	b.n	800d016 <__ieee754_pow+0x2ce>
 800d406:	f04f 0a01 	mov.w	sl, #1
 800d40a:	e6a5      	b.n	800d158 <__ieee754_pow+0x410>
 800d40c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d460 <__ieee754_pow+0x718>
 800d410:	e613      	b.n	800d03a <__ieee754_pow+0x2f2>
 800d412:	bf00      	nop
 800d414:	f3af 8000 	nop.w
 800d418:	4a454eef 	.word	0x4a454eef
 800d41c:	3fca7e28 	.word	0x3fca7e28
 800d420:	93c9db65 	.word	0x93c9db65
 800d424:	3fcd864a 	.word	0x3fcd864a
 800d428:	a91d4101 	.word	0xa91d4101
 800d42c:	3fd17460 	.word	0x3fd17460
 800d430:	518f264d 	.word	0x518f264d
 800d434:	3fd55555 	.word	0x3fd55555
 800d438:	db6fabff 	.word	0xdb6fabff
 800d43c:	3fdb6db6 	.word	0x3fdb6db6
 800d440:	33333303 	.word	0x33333303
 800d444:	3fe33333 	.word	0x3fe33333
 800d448:	e0000000 	.word	0xe0000000
 800d44c:	3feec709 	.word	0x3feec709
 800d450:	dc3a03fd 	.word	0xdc3a03fd
 800d454:	3feec709 	.word	0x3feec709
 800d458:	145b01f5 	.word	0x145b01f5
 800d45c:	be3e2fe0 	.word	0xbe3e2fe0
 800d460:	00000000 	.word	0x00000000
 800d464:	3ff00000 	.word	0x3ff00000
 800d468:	43400000 	.word	0x43400000
 800d46c:	0003988e 	.word	0x0003988e
 800d470:	000bb679 	.word	0x000bb679
 800d474:	0800ff08 	.word	0x0800ff08
 800d478:	3ff00000 	.word	0x3ff00000
 800d47c:	40080000 	.word	0x40080000
 800d480:	0800ff28 	.word	0x0800ff28
 800d484:	0800ff18 	.word	0x0800ff18
 800d488:	a3b6      	add	r3, pc, #728	; (adr r3, 800d764 <__ieee754_pow+0xa1c>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	4640      	mov	r0, r8
 800d490:	4649      	mov	r1, r9
 800d492:	f7f2 fefb 	bl	800028c <__adddf3>
 800d496:	4622      	mov	r2, r4
 800d498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d49c:	462b      	mov	r3, r5
 800d49e:	4630      	mov	r0, r6
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	f7f2 fef1 	bl	8000288 <__aeabi_dsub>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4ae:	f7f3 fb2f 	bl	8000b10 <__aeabi_dcmpgt>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	f47f adfe 	bne.w	800d0b4 <__ieee754_pow+0x36c>
 800d4b8:	4aa5      	ldr	r2, [pc, #660]	; (800d750 <__ieee754_pow+0xa08>)
 800d4ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	f340 810c 	ble.w	800d6dc <__ieee754_pow+0x994>
 800d4c4:	151b      	asrs	r3, r3, #20
 800d4c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d4ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d4ce:	fa4a f303 	asr.w	r3, sl, r3
 800d4d2:	445b      	add	r3, fp
 800d4d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d4d8:	4e9e      	ldr	r6, [pc, #632]	; (800d754 <__ieee754_pow+0xa0c>)
 800d4da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d4de:	4116      	asrs	r6, r2
 800d4e0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	ea23 0106 	bic.w	r1, r3, r6
 800d4ea:	f1c2 0214 	rsb	r2, r2, #20
 800d4ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d4f2:	fa4a fa02 	asr.w	sl, sl, r2
 800d4f6:	f1bb 0f00 	cmp.w	fp, #0
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4620      	mov	r0, r4
 800d500:	4629      	mov	r1, r5
 800d502:	bfb8      	it	lt
 800d504:	f1ca 0a00 	rsblt	sl, sl, #0
 800d508:	f7f2 febe 	bl	8000288 <__aeabi_dsub>
 800d50c:	e9cd 0100 	strd	r0, r1, [sp]
 800d510:	4642      	mov	r2, r8
 800d512:	464b      	mov	r3, r9
 800d514:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d518:	f7f2 feb8 	bl	800028c <__adddf3>
 800d51c:	2000      	movs	r0, #0
 800d51e:	a37a      	add	r3, pc, #488	; (adr r3, 800d708 <__ieee754_pow+0x9c0>)
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	4604      	mov	r4, r0
 800d526:	460d      	mov	r5, r1
 800d528:	f7f3 f862 	bl	80005f0 <__aeabi_dmul>
 800d52c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d530:	4606      	mov	r6, r0
 800d532:	460f      	mov	r7, r1
 800d534:	4620      	mov	r0, r4
 800d536:	4629      	mov	r1, r5
 800d538:	f7f2 fea6 	bl	8000288 <__aeabi_dsub>
 800d53c:	4602      	mov	r2, r0
 800d53e:	460b      	mov	r3, r1
 800d540:	4640      	mov	r0, r8
 800d542:	4649      	mov	r1, r9
 800d544:	f7f2 fea0 	bl	8000288 <__aeabi_dsub>
 800d548:	a371      	add	r3, pc, #452	; (adr r3, 800d710 <__ieee754_pow+0x9c8>)
 800d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54e:	f7f3 f84f 	bl	80005f0 <__aeabi_dmul>
 800d552:	a371      	add	r3, pc, #452	; (adr r3, 800d718 <__ieee754_pow+0x9d0>)
 800d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d558:	4680      	mov	r8, r0
 800d55a:	4689      	mov	r9, r1
 800d55c:	4620      	mov	r0, r4
 800d55e:	4629      	mov	r1, r5
 800d560:	f7f3 f846 	bl	80005f0 <__aeabi_dmul>
 800d564:	4602      	mov	r2, r0
 800d566:	460b      	mov	r3, r1
 800d568:	4640      	mov	r0, r8
 800d56a:	4649      	mov	r1, r9
 800d56c:	f7f2 fe8e 	bl	800028c <__adddf3>
 800d570:	4604      	mov	r4, r0
 800d572:	460d      	mov	r5, r1
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4630      	mov	r0, r6
 800d57a:	4639      	mov	r1, r7
 800d57c:	f7f2 fe86 	bl	800028c <__adddf3>
 800d580:	4632      	mov	r2, r6
 800d582:	463b      	mov	r3, r7
 800d584:	4680      	mov	r8, r0
 800d586:	4689      	mov	r9, r1
 800d588:	f7f2 fe7e 	bl	8000288 <__aeabi_dsub>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	4620      	mov	r0, r4
 800d592:	4629      	mov	r1, r5
 800d594:	f7f2 fe78 	bl	8000288 <__aeabi_dsub>
 800d598:	4642      	mov	r2, r8
 800d59a:	4606      	mov	r6, r0
 800d59c:	460f      	mov	r7, r1
 800d59e:	464b      	mov	r3, r9
 800d5a0:	4640      	mov	r0, r8
 800d5a2:	4649      	mov	r1, r9
 800d5a4:	f7f3 f824 	bl	80005f0 <__aeabi_dmul>
 800d5a8:	a35d      	add	r3, pc, #372	; (adr r3, 800d720 <__ieee754_pow+0x9d8>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	460d      	mov	r5, r1
 800d5b2:	f7f3 f81d 	bl	80005f0 <__aeabi_dmul>
 800d5b6:	a35c      	add	r3, pc, #368	; (adr r3, 800d728 <__ieee754_pow+0x9e0>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	f7f2 fe64 	bl	8000288 <__aeabi_dsub>
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	f7f3 f814 	bl	80005f0 <__aeabi_dmul>
 800d5c8:	a359      	add	r3, pc, #356	; (adr r3, 800d730 <__ieee754_pow+0x9e8>)
 800d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ce:	f7f2 fe5d 	bl	800028c <__adddf3>
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	f7f3 f80b 	bl	80005f0 <__aeabi_dmul>
 800d5da:	a357      	add	r3, pc, #348	; (adr r3, 800d738 <__ieee754_pow+0x9f0>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f7f2 fe52 	bl	8000288 <__aeabi_dsub>
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	462b      	mov	r3, r5
 800d5e8:	f7f3 f802 	bl	80005f0 <__aeabi_dmul>
 800d5ec:	a354      	add	r3, pc, #336	; (adr r3, 800d740 <__ieee754_pow+0x9f8>)
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	f7f2 fe4b 	bl	800028c <__adddf3>
 800d5f6:	4622      	mov	r2, r4
 800d5f8:	462b      	mov	r3, r5
 800d5fa:	f7f2 fff9 	bl	80005f0 <__aeabi_dmul>
 800d5fe:	4602      	mov	r2, r0
 800d600:	460b      	mov	r3, r1
 800d602:	4640      	mov	r0, r8
 800d604:	4649      	mov	r1, r9
 800d606:	f7f2 fe3f 	bl	8000288 <__aeabi_dsub>
 800d60a:	4604      	mov	r4, r0
 800d60c:	460d      	mov	r5, r1
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	4640      	mov	r0, r8
 800d614:	4649      	mov	r1, r9
 800d616:	f7f2 ffeb 	bl	80005f0 <__aeabi_dmul>
 800d61a:	2200      	movs	r2, #0
 800d61c:	e9cd 0100 	strd	r0, r1, [sp]
 800d620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d624:	4620      	mov	r0, r4
 800d626:	4629      	mov	r1, r5
 800d628:	f7f2 fe2e 	bl	8000288 <__aeabi_dsub>
 800d62c:	4602      	mov	r2, r0
 800d62e:	460b      	mov	r3, r1
 800d630:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d634:	f7f3 f906 	bl	8000844 <__aeabi_ddiv>
 800d638:	4632      	mov	r2, r6
 800d63a:	4604      	mov	r4, r0
 800d63c:	460d      	mov	r5, r1
 800d63e:	463b      	mov	r3, r7
 800d640:	4640      	mov	r0, r8
 800d642:	4649      	mov	r1, r9
 800d644:	f7f2 ffd4 	bl	80005f0 <__aeabi_dmul>
 800d648:	4632      	mov	r2, r6
 800d64a:	463b      	mov	r3, r7
 800d64c:	f7f2 fe1e 	bl	800028c <__adddf3>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4620      	mov	r0, r4
 800d656:	4629      	mov	r1, r5
 800d658:	f7f2 fe16 	bl	8000288 <__aeabi_dsub>
 800d65c:	4642      	mov	r2, r8
 800d65e:	464b      	mov	r3, r9
 800d660:	f7f2 fe12 	bl	8000288 <__aeabi_dsub>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	2000      	movs	r0, #0
 800d66a:	493b      	ldr	r1, [pc, #236]	; (800d758 <__ieee754_pow+0xa10>)
 800d66c:	f7f2 fe0c 	bl	8000288 <__aeabi_dsub>
 800d670:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d674:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d678:	4602      	mov	r2, r0
 800d67a:	460b      	mov	r3, r1
 800d67c:	da31      	bge.n	800d6e2 <__ieee754_pow+0x99a>
 800d67e:	4650      	mov	r0, sl
 800d680:	ec43 2b10 	vmov	d0, r2, r3
 800d684:	f001 f934 	bl	800e8f0 <scalbn>
 800d688:	ec51 0b10 	vmov	r0, r1, d0
 800d68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d690:	f7ff bbf1 	b.w	800ce76 <__ieee754_pow+0x12e>
 800d694:	4b31      	ldr	r3, [pc, #196]	; (800d75c <__ieee754_pow+0xa14>)
 800d696:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d69a:	429e      	cmp	r6, r3
 800d69c:	f77f af0c 	ble.w	800d4b8 <__ieee754_pow+0x770>
 800d6a0:	4b2f      	ldr	r3, [pc, #188]	; (800d760 <__ieee754_pow+0xa18>)
 800d6a2:	440b      	add	r3, r1
 800d6a4:	4303      	orrs	r3, r0
 800d6a6:	d00b      	beq.n	800d6c0 <__ieee754_pow+0x978>
 800d6a8:	a327      	add	r3, pc, #156	; (adr r3, 800d748 <__ieee754_pow+0xa00>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6b2:	f7f2 ff9d 	bl	80005f0 <__aeabi_dmul>
 800d6b6:	a324      	add	r3, pc, #144	; (adr r3, 800d748 <__ieee754_pow+0xa00>)
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	f7ff bbdb 	b.w	800ce76 <__ieee754_pow+0x12e>
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	462b      	mov	r3, r5
 800d6c4:	f7f2 fde0 	bl	8000288 <__aeabi_dsub>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	4649      	mov	r1, r9
 800d6d0:	f7f3 fa0a 	bl	8000ae8 <__aeabi_dcmple>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	f43f aeef 	beq.w	800d4b8 <__ieee754_pow+0x770>
 800d6da:	e7e5      	b.n	800d6a8 <__ieee754_pow+0x960>
 800d6dc:	f04f 0a00 	mov.w	sl, #0
 800d6e0:	e716      	b.n	800d510 <__ieee754_pow+0x7c8>
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	e7d2      	b.n	800d68c <__ieee754_pow+0x944>
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	491b      	ldr	r1, [pc, #108]	; (800d758 <__ieee754_pow+0xa10>)
 800d6ea:	f7ff bb8d 	b.w	800ce08 <__ieee754_pow+0xc0>
 800d6ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6f2:	f7ff bb89 	b.w	800ce08 <__ieee754_pow+0xc0>
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	4639      	mov	r1, r7
 800d6fa:	f7ff bb85 	b.w	800ce08 <__ieee754_pow+0xc0>
 800d6fe:	4693      	mov	fp, r2
 800d700:	f7ff bb96 	b.w	800ce30 <__ieee754_pow+0xe8>
 800d704:	f3af 8000 	nop.w
 800d708:	00000000 	.word	0x00000000
 800d70c:	3fe62e43 	.word	0x3fe62e43
 800d710:	fefa39ef 	.word	0xfefa39ef
 800d714:	3fe62e42 	.word	0x3fe62e42
 800d718:	0ca86c39 	.word	0x0ca86c39
 800d71c:	be205c61 	.word	0xbe205c61
 800d720:	72bea4d0 	.word	0x72bea4d0
 800d724:	3e663769 	.word	0x3e663769
 800d728:	c5d26bf1 	.word	0xc5d26bf1
 800d72c:	3ebbbd41 	.word	0x3ebbbd41
 800d730:	af25de2c 	.word	0xaf25de2c
 800d734:	3f11566a 	.word	0x3f11566a
 800d738:	16bebd93 	.word	0x16bebd93
 800d73c:	3f66c16c 	.word	0x3f66c16c
 800d740:	5555553e 	.word	0x5555553e
 800d744:	3fc55555 	.word	0x3fc55555
 800d748:	c2f8f359 	.word	0xc2f8f359
 800d74c:	01a56e1f 	.word	0x01a56e1f
 800d750:	3fe00000 	.word	0x3fe00000
 800d754:	000fffff 	.word	0x000fffff
 800d758:	3ff00000 	.word	0x3ff00000
 800d75c:	4090cbff 	.word	0x4090cbff
 800d760:	3f6f3400 	.word	0x3f6f3400
 800d764:	652b82fe 	.word	0x652b82fe
 800d768:	3c971547 	.word	0x3c971547
 800d76c:	00000000 	.word	0x00000000

0800d770 <__ieee754_rem_pio2>:
 800d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d774:	ec57 6b10 	vmov	r6, r7, d0
 800d778:	4bc3      	ldr	r3, [pc, #780]	; (800da88 <__ieee754_rem_pio2+0x318>)
 800d77a:	b08d      	sub	sp, #52	; 0x34
 800d77c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d780:	4598      	cmp	r8, r3
 800d782:	4604      	mov	r4, r0
 800d784:	9704      	str	r7, [sp, #16]
 800d786:	dc07      	bgt.n	800d798 <__ieee754_rem_pio2+0x28>
 800d788:	2200      	movs	r2, #0
 800d78a:	2300      	movs	r3, #0
 800d78c:	ed84 0b00 	vstr	d0, [r4]
 800d790:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d794:	2500      	movs	r5, #0
 800d796:	e027      	b.n	800d7e8 <__ieee754_rem_pio2+0x78>
 800d798:	4bbc      	ldr	r3, [pc, #752]	; (800da8c <__ieee754_rem_pio2+0x31c>)
 800d79a:	4598      	cmp	r8, r3
 800d79c:	dc75      	bgt.n	800d88a <__ieee754_rem_pio2+0x11a>
 800d79e:	9b04      	ldr	r3, [sp, #16]
 800d7a0:	4dbb      	ldr	r5, [pc, #748]	; (800da90 <__ieee754_rem_pio2+0x320>)
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	ee10 0a10 	vmov	r0, s0
 800d7a8:	a3a9      	add	r3, pc, #676	; (adr r3, 800da50 <__ieee754_rem_pio2+0x2e0>)
 800d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ae:	4639      	mov	r1, r7
 800d7b0:	dd36      	ble.n	800d820 <__ieee754_rem_pio2+0xb0>
 800d7b2:	f7f2 fd69 	bl	8000288 <__aeabi_dsub>
 800d7b6:	45a8      	cmp	r8, r5
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	460f      	mov	r7, r1
 800d7bc:	d018      	beq.n	800d7f0 <__ieee754_rem_pio2+0x80>
 800d7be:	a3a6      	add	r3, pc, #664	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2e8>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	f7f2 fd60 	bl	8000288 <__aeabi_dsub>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	e9c4 2300 	strd	r2, r3, [r4]
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	f7f2 fd58 	bl	8000288 <__aeabi_dsub>
 800d7d8:	a39f      	add	r3, pc, #636	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2e8>)
 800d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7de:	f7f2 fd53 	bl	8000288 <__aeabi_dsub>
 800d7e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d7e6:	2501      	movs	r5, #1
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	b00d      	add	sp, #52	; 0x34
 800d7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f0:	a39b      	add	r3, pc, #620	; (adr r3, 800da60 <__ieee754_rem_pio2+0x2f0>)
 800d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f6:	f7f2 fd47 	bl	8000288 <__aeabi_dsub>
 800d7fa:	a39b      	add	r3, pc, #620	; (adr r3, 800da68 <__ieee754_rem_pio2+0x2f8>)
 800d7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d800:	4606      	mov	r6, r0
 800d802:	460f      	mov	r7, r1
 800d804:	f7f2 fd40 	bl	8000288 <__aeabi_dsub>
 800d808:	4602      	mov	r2, r0
 800d80a:	460b      	mov	r3, r1
 800d80c:	e9c4 2300 	strd	r2, r3, [r4]
 800d810:	4630      	mov	r0, r6
 800d812:	4639      	mov	r1, r7
 800d814:	f7f2 fd38 	bl	8000288 <__aeabi_dsub>
 800d818:	a393      	add	r3, pc, #588	; (adr r3, 800da68 <__ieee754_rem_pio2+0x2f8>)
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	e7de      	b.n	800d7de <__ieee754_rem_pio2+0x6e>
 800d820:	f7f2 fd34 	bl	800028c <__adddf3>
 800d824:	45a8      	cmp	r8, r5
 800d826:	4606      	mov	r6, r0
 800d828:	460f      	mov	r7, r1
 800d82a:	d016      	beq.n	800d85a <__ieee754_rem_pio2+0xea>
 800d82c:	a38a      	add	r3, pc, #552	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2e8>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	f7f2 fd2b 	bl	800028c <__adddf3>
 800d836:	4602      	mov	r2, r0
 800d838:	460b      	mov	r3, r1
 800d83a:	e9c4 2300 	strd	r2, r3, [r4]
 800d83e:	4630      	mov	r0, r6
 800d840:	4639      	mov	r1, r7
 800d842:	f7f2 fd21 	bl	8000288 <__aeabi_dsub>
 800d846:	a384      	add	r3, pc, #528	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2e8>)
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f7f2 fd1e 	bl	800028c <__adddf3>
 800d850:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d854:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d858:	e7c6      	b.n	800d7e8 <__ieee754_rem_pio2+0x78>
 800d85a:	a381      	add	r3, pc, #516	; (adr r3, 800da60 <__ieee754_rem_pio2+0x2f0>)
 800d85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d860:	f7f2 fd14 	bl	800028c <__adddf3>
 800d864:	a380      	add	r3, pc, #512	; (adr r3, 800da68 <__ieee754_rem_pio2+0x2f8>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	4606      	mov	r6, r0
 800d86c:	460f      	mov	r7, r1
 800d86e:	f7f2 fd0d 	bl	800028c <__adddf3>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	e9c4 2300 	strd	r2, r3, [r4]
 800d87a:	4630      	mov	r0, r6
 800d87c:	4639      	mov	r1, r7
 800d87e:	f7f2 fd03 	bl	8000288 <__aeabi_dsub>
 800d882:	a379      	add	r3, pc, #484	; (adr r3, 800da68 <__ieee754_rem_pio2+0x2f8>)
 800d884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d888:	e7e0      	b.n	800d84c <__ieee754_rem_pio2+0xdc>
 800d88a:	4b82      	ldr	r3, [pc, #520]	; (800da94 <__ieee754_rem_pio2+0x324>)
 800d88c:	4598      	cmp	r8, r3
 800d88e:	f300 80d0 	bgt.w	800da32 <__ieee754_rem_pio2+0x2c2>
 800d892:	f000 ff03 	bl	800e69c <fabs>
 800d896:	ec57 6b10 	vmov	r6, r7, d0
 800d89a:	ee10 0a10 	vmov	r0, s0
 800d89e:	a374      	add	r3, pc, #464	; (adr r3, 800da70 <__ieee754_rem_pio2+0x300>)
 800d8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	f7f2 fea3 	bl	80005f0 <__aeabi_dmul>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	4b7a      	ldr	r3, [pc, #488]	; (800da98 <__ieee754_rem_pio2+0x328>)
 800d8ae:	f7f2 fced 	bl	800028c <__adddf3>
 800d8b2:	f7f3 f94d 	bl	8000b50 <__aeabi_d2iz>
 800d8b6:	4605      	mov	r5, r0
 800d8b8:	f7f2 fe34 	bl	8000524 <__aeabi_i2d>
 800d8bc:	a364      	add	r3, pc, #400	; (adr r3, 800da50 <__ieee754_rem_pio2+0x2e0>)
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8c6:	f7f2 fe93 	bl	80005f0 <__aeabi_dmul>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	f7f2 fcd9 	bl	8000288 <__aeabi_dsub>
 800d8d6:	a360      	add	r3, pc, #384	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2e8>)
 800d8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8dc:	4682      	mov	sl, r0
 800d8de:	468b      	mov	fp, r1
 800d8e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8e4:	f7f2 fe84 	bl	80005f0 <__aeabi_dmul>
 800d8e8:	2d1f      	cmp	r5, #31
 800d8ea:	4606      	mov	r6, r0
 800d8ec:	460f      	mov	r7, r1
 800d8ee:	dc2a      	bgt.n	800d946 <__ieee754_rem_pio2+0x1d6>
 800d8f0:	1e6a      	subs	r2, r5, #1
 800d8f2:	4b6a      	ldr	r3, [pc, #424]	; (800da9c <__ieee754_rem_pio2+0x32c>)
 800d8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f8:	4598      	cmp	r8, r3
 800d8fa:	d024      	beq.n	800d946 <__ieee754_rem_pio2+0x1d6>
 800d8fc:	4632      	mov	r2, r6
 800d8fe:	463b      	mov	r3, r7
 800d900:	4650      	mov	r0, sl
 800d902:	4659      	mov	r1, fp
 800d904:	f7f2 fcc0 	bl	8000288 <__aeabi_dsub>
 800d908:	e9c4 0100 	strd	r0, r1, [r4]
 800d90c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d910:	4650      	mov	r0, sl
 800d912:	4642      	mov	r2, r8
 800d914:	464b      	mov	r3, r9
 800d916:	4659      	mov	r1, fp
 800d918:	f7f2 fcb6 	bl	8000288 <__aeabi_dsub>
 800d91c:	463b      	mov	r3, r7
 800d91e:	4632      	mov	r2, r6
 800d920:	f7f2 fcb2 	bl	8000288 <__aeabi_dsub>
 800d924:	9b04      	ldr	r3, [sp, #16]
 800d926:	2b00      	cmp	r3, #0
 800d928:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d92c:	f6bf af5c 	bge.w	800d7e8 <__ieee754_rem_pio2+0x78>
 800d930:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d934:	6063      	str	r3, [r4, #4]
 800d936:	f8c4 8000 	str.w	r8, [r4]
 800d93a:	60a0      	str	r0, [r4, #8]
 800d93c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d940:	60e3      	str	r3, [r4, #12]
 800d942:	426d      	negs	r5, r5
 800d944:	e750      	b.n	800d7e8 <__ieee754_rem_pio2+0x78>
 800d946:	4632      	mov	r2, r6
 800d948:	463b      	mov	r3, r7
 800d94a:	4650      	mov	r0, sl
 800d94c:	4659      	mov	r1, fp
 800d94e:	f7f2 fc9b 	bl	8000288 <__aeabi_dsub>
 800d952:	ea4f 5228 	mov.w	r2, r8, asr #20
 800d956:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	2b10      	cmp	r3, #16
 800d95e:	e9c4 0100 	strd	r0, r1, [r4]
 800d962:	9205      	str	r2, [sp, #20]
 800d964:	ddd2      	ble.n	800d90c <__ieee754_rem_pio2+0x19c>
 800d966:	a33e      	add	r3, pc, #248	; (adr r3, 800da60 <__ieee754_rem_pio2+0x2f0>)
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d970:	f7f2 fe3e 	bl	80005f0 <__aeabi_dmul>
 800d974:	4606      	mov	r6, r0
 800d976:	460f      	mov	r7, r1
 800d978:	4602      	mov	r2, r0
 800d97a:	460b      	mov	r3, r1
 800d97c:	4650      	mov	r0, sl
 800d97e:	4659      	mov	r1, fp
 800d980:	f7f2 fc82 	bl	8000288 <__aeabi_dsub>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	4680      	mov	r8, r0
 800d98a:	4689      	mov	r9, r1
 800d98c:	4650      	mov	r0, sl
 800d98e:	4659      	mov	r1, fp
 800d990:	f7f2 fc7a 	bl	8000288 <__aeabi_dsub>
 800d994:	4632      	mov	r2, r6
 800d996:	463b      	mov	r3, r7
 800d998:	f7f2 fc76 	bl	8000288 <__aeabi_dsub>
 800d99c:	a332      	add	r3, pc, #200	; (adr r3, 800da68 <__ieee754_rem_pio2+0x2f8>)
 800d99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a2:	4606      	mov	r6, r0
 800d9a4:	460f      	mov	r7, r1
 800d9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9aa:	f7f2 fe21 	bl	80005f0 <__aeabi_dmul>
 800d9ae:	4632      	mov	r2, r6
 800d9b0:	463b      	mov	r3, r7
 800d9b2:	f7f2 fc69 	bl	8000288 <__aeabi_dsub>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	460f      	mov	r7, r1
 800d9be:	4640      	mov	r0, r8
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	f7f2 fc61 	bl	8000288 <__aeabi_dsub>
 800d9c6:	9a05      	ldr	r2, [sp, #20]
 800d9c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	2b31      	cmp	r3, #49	; 0x31
 800d9d0:	e9c4 0100 	strd	r0, r1, [r4]
 800d9d4:	dd2a      	ble.n	800da2c <__ieee754_rem_pio2+0x2bc>
 800d9d6:	a328      	add	r3, pc, #160	; (adr r3, 800da78 <__ieee754_rem_pio2+0x308>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e0:	f7f2 fe06 	bl	80005f0 <__aeabi_dmul>
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	460f      	mov	r7, r1
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	f7f2 fc4a 	bl	8000288 <__aeabi_dsub>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4682      	mov	sl, r0
 800d9fa:	468b      	mov	fp, r1
 800d9fc:	4640      	mov	r0, r8
 800d9fe:	4649      	mov	r1, r9
 800da00:	f7f2 fc42 	bl	8000288 <__aeabi_dsub>
 800da04:	4632      	mov	r2, r6
 800da06:	463b      	mov	r3, r7
 800da08:	f7f2 fc3e 	bl	8000288 <__aeabi_dsub>
 800da0c:	a31c      	add	r3, pc, #112	; (adr r3, 800da80 <__ieee754_rem_pio2+0x310>)
 800da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da12:	4606      	mov	r6, r0
 800da14:	460f      	mov	r7, r1
 800da16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da1a:	f7f2 fde9 	bl	80005f0 <__aeabi_dmul>
 800da1e:	4632      	mov	r2, r6
 800da20:	463b      	mov	r3, r7
 800da22:	f7f2 fc31 	bl	8000288 <__aeabi_dsub>
 800da26:	4606      	mov	r6, r0
 800da28:	460f      	mov	r7, r1
 800da2a:	e767      	b.n	800d8fc <__ieee754_rem_pio2+0x18c>
 800da2c:	46c2      	mov	sl, r8
 800da2e:	46cb      	mov	fp, r9
 800da30:	e76c      	b.n	800d90c <__ieee754_rem_pio2+0x19c>
 800da32:	4b1b      	ldr	r3, [pc, #108]	; (800daa0 <__ieee754_rem_pio2+0x330>)
 800da34:	4598      	cmp	r8, r3
 800da36:	dd35      	ble.n	800daa4 <__ieee754_rem_pio2+0x334>
 800da38:	ee10 2a10 	vmov	r2, s0
 800da3c:	463b      	mov	r3, r7
 800da3e:	4630      	mov	r0, r6
 800da40:	4639      	mov	r1, r7
 800da42:	f7f2 fc21 	bl	8000288 <__aeabi_dsub>
 800da46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da4a:	e9c4 0100 	strd	r0, r1, [r4]
 800da4e:	e6a1      	b.n	800d794 <__ieee754_rem_pio2+0x24>
 800da50:	54400000 	.word	0x54400000
 800da54:	3ff921fb 	.word	0x3ff921fb
 800da58:	1a626331 	.word	0x1a626331
 800da5c:	3dd0b461 	.word	0x3dd0b461
 800da60:	1a600000 	.word	0x1a600000
 800da64:	3dd0b461 	.word	0x3dd0b461
 800da68:	2e037073 	.word	0x2e037073
 800da6c:	3ba3198a 	.word	0x3ba3198a
 800da70:	6dc9c883 	.word	0x6dc9c883
 800da74:	3fe45f30 	.word	0x3fe45f30
 800da78:	2e000000 	.word	0x2e000000
 800da7c:	3ba3198a 	.word	0x3ba3198a
 800da80:	252049c1 	.word	0x252049c1
 800da84:	397b839a 	.word	0x397b839a
 800da88:	3fe921fb 	.word	0x3fe921fb
 800da8c:	4002d97b 	.word	0x4002d97b
 800da90:	3ff921fb 	.word	0x3ff921fb
 800da94:	413921fb 	.word	0x413921fb
 800da98:	3fe00000 	.word	0x3fe00000
 800da9c:	0800ff38 	.word	0x0800ff38
 800daa0:	7fefffff 	.word	0x7fefffff
 800daa4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800daa8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800daac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800dab0:	4630      	mov	r0, r6
 800dab2:	460f      	mov	r7, r1
 800dab4:	f7f3 f84c 	bl	8000b50 <__aeabi_d2iz>
 800dab8:	f7f2 fd34 	bl	8000524 <__aeabi_i2d>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4630      	mov	r0, r6
 800dac2:	4639      	mov	r1, r7
 800dac4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dac8:	f7f2 fbde 	bl	8000288 <__aeabi_dsub>
 800dacc:	2200      	movs	r2, #0
 800dace:	4b1f      	ldr	r3, [pc, #124]	; (800db4c <__ieee754_rem_pio2+0x3dc>)
 800dad0:	f7f2 fd8e 	bl	80005f0 <__aeabi_dmul>
 800dad4:	460f      	mov	r7, r1
 800dad6:	4606      	mov	r6, r0
 800dad8:	f7f3 f83a 	bl	8000b50 <__aeabi_d2iz>
 800dadc:	f7f2 fd22 	bl	8000524 <__aeabi_i2d>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	4630      	mov	r0, r6
 800dae6:	4639      	mov	r1, r7
 800dae8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800daec:	f7f2 fbcc 	bl	8000288 <__aeabi_dsub>
 800daf0:	2200      	movs	r2, #0
 800daf2:	4b16      	ldr	r3, [pc, #88]	; (800db4c <__ieee754_rem_pio2+0x3dc>)
 800daf4:	f7f2 fd7c 	bl	80005f0 <__aeabi_dmul>
 800daf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dafc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800db00:	f04f 0803 	mov.w	r8, #3
 800db04:	2600      	movs	r6, #0
 800db06:	2700      	movs	r7, #0
 800db08:	4632      	mov	r2, r6
 800db0a:	463b      	mov	r3, r7
 800db0c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800db10:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800db14:	f7f2 ffd4 	bl	8000ac0 <__aeabi_dcmpeq>
 800db18:	b9b0      	cbnz	r0, 800db48 <__ieee754_rem_pio2+0x3d8>
 800db1a:	4b0d      	ldr	r3, [pc, #52]	; (800db50 <__ieee754_rem_pio2+0x3e0>)
 800db1c:	9301      	str	r3, [sp, #4]
 800db1e:	2302      	movs	r3, #2
 800db20:	9300      	str	r3, [sp, #0]
 800db22:	462a      	mov	r2, r5
 800db24:	4643      	mov	r3, r8
 800db26:	4621      	mov	r1, r4
 800db28:	a806      	add	r0, sp, #24
 800db2a:	f000 f9ad 	bl	800de88 <__kernel_rem_pio2>
 800db2e:	9b04      	ldr	r3, [sp, #16]
 800db30:	2b00      	cmp	r3, #0
 800db32:	4605      	mov	r5, r0
 800db34:	f6bf ae58 	bge.w	800d7e8 <__ieee754_rem_pio2+0x78>
 800db38:	6863      	ldr	r3, [r4, #4]
 800db3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db3e:	6063      	str	r3, [r4, #4]
 800db40:	68e3      	ldr	r3, [r4, #12]
 800db42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db46:	e6fb      	b.n	800d940 <__ieee754_rem_pio2+0x1d0>
 800db48:	46d0      	mov	r8, sl
 800db4a:	e7dd      	b.n	800db08 <__ieee754_rem_pio2+0x398>
 800db4c:	41700000 	.word	0x41700000
 800db50:	0800ffb8 	.word	0x0800ffb8

0800db54 <__ieee754_sqrt>:
 800db54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db58:	ec55 4b10 	vmov	r4, r5, d0
 800db5c:	4e54      	ldr	r6, [pc, #336]	; (800dcb0 <__ieee754_sqrt+0x15c>)
 800db5e:	43ae      	bics	r6, r5
 800db60:	ee10 0a10 	vmov	r0, s0
 800db64:	462b      	mov	r3, r5
 800db66:	462a      	mov	r2, r5
 800db68:	4621      	mov	r1, r4
 800db6a:	d113      	bne.n	800db94 <__ieee754_sqrt+0x40>
 800db6c:	ee10 2a10 	vmov	r2, s0
 800db70:	462b      	mov	r3, r5
 800db72:	ee10 0a10 	vmov	r0, s0
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 fd3a 	bl	80005f0 <__aeabi_dmul>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4620      	mov	r0, r4
 800db82:	4629      	mov	r1, r5
 800db84:	f7f2 fb82 	bl	800028c <__adddf3>
 800db88:	4604      	mov	r4, r0
 800db8a:	460d      	mov	r5, r1
 800db8c:	ec45 4b10 	vmov	d0, r4, r5
 800db90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db94:	2d00      	cmp	r5, #0
 800db96:	dc10      	bgt.n	800dbba <__ieee754_sqrt+0x66>
 800db98:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db9c:	4330      	orrs	r0, r6
 800db9e:	d0f5      	beq.n	800db8c <__ieee754_sqrt+0x38>
 800dba0:	b15d      	cbz	r5, 800dbba <__ieee754_sqrt+0x66>
 800dba2:	ee10 2a10 	vmov	r2, s0
 800dba6:	462b      	mov	r3, r5
 800dba8:	4620      	mov	r0, r4
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f7f2 fb6c 	bl	8000288 <__aeabi_dsub>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	f7f2 fe46 	bl	8000844 <__aeabi_ddiv>
 800dbb8:	e7e6      	b.n	800db88 <__ieee754_sqrt+0x34>
 800dbba:	151b      	asrs	r3, r3, #20
 800dbbc:	d10c      	bne.n	800dbd8 <__ieee754_sqrt+0x84>
 800dbbe:	2a00      	cmp	r2, #0
 800dbc0:	d06d      	beq.n	800dc9e <__ieee754_sqrt+0x14a>
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	02d6      	lsls	r6, r2, #11
 800dbc6:	d56e      	bpl.n	800dca6 <__ieee754_sqrt+0x152>
 800dbc8:	1e44      	subs	r4, r0, #1
 800dbca:	1b1b      	subs	r3, r3, r4
 800dbcc:	f1c0 0420 	rsb	r4, r0, #32
 800dbd0:	fa21 f404 	lsr.w	r4, r1, r4
 800dbd4:	4322      	orrs	r2, r4
 800dbd6:	4081      	lsls	r1, r0
 800dbd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dbdc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dbe0:	07dd      	lsls	r5, r3, #31
 800dbe2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dbe6:	bf42      	ittt	mi
 800dbe8:	0052      	lslmi	r2, r2, #1
 800dbea:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800dbee:	0049      	lslmi	r1, r1, #1
 800dbf0:	1058      	asrs	r0, r3, #1
 800dbf2:	2500      	movs	r5, #0
 800dbf4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800dbf8:	441a      	add	r2, r3
 800dbfa:	0049      	lsls	r1, r1, #1
 800dbfc:	2316      	movs	r3, #22
 800dbfe:	462c      	mov	r4, r5
 800dc00:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800dc04:	19a7      	adds	r7, r4, r6
 800dc06:	4297      	cmp	r7, r2
 800dc08:	bfde      	ittt	le
 800dc0a:	1bd2      	suble	r2, r2, r7
 800dc0c:	19bc      	addle	r4, r7, r6
 800dc0e:	19ad      	addle	r5, r5, r6
 800dc10:	0052      	lsls	r2, r2, #1
 800dc12:	3b01      	subs	r3, #1
 800dc14:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800dc18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dc1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc20:	d1f0      	bne.n	800dc04 <__ieee754_sqrt+0xb0>
 800dc22:	f04f 0e20 	mov.w	lr, #32
 800dc26:	469c      	mov	ip, r3
 800dc28:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dc2c:	42a2      	cmp	r2, r4
 800dc2e:	eb06 070c 	add.w	r7, r6, ip
 800dc32:	dc02      	bgt.n	800dc3a <__ieee754_sqrt+0xe6>
 800dc34:	d112      	bne.n	800dc5c <__ieee754_sqrt+0x108>
 800dc36:	428f      	cmp	r7, r1
 800dc38:	d810      	bhi.n	800dc5c <__ieee754_sqrt+0x108>
 800dc3a:	2f00      	cmp	r7, #0
 800dc3c:	eb07 0c06 	add.w	ip, r7, r6
 800dc40:	da34      	bge.n	800dcac <__ieee754_sqrt+0x158>
 800dc42:	f1bc 0f00 	cmp.w	ip, #0
 800dc46:	db31      	blt.n	800dcac <__ieee754_sqrt+0x158>
 800dc48:	f104 0801 	add.w	r8, r4, #1
 800dc4c:	1b12      	subs	r2, r2, r4
 800dc4e:	428f      	cmp	r7, r1
 800dc50:	bf88      	it	hi
 800dc52:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800dc56:	1bc9      	subs	r1, r1, r7
 800dc58:	4433      	add	r3, r6
 800dc5a:	4644      	mov	r4, r8
 800dc5c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800dc60:	f1be 0e01 	subs.w	lr, lr, #1
 800dc64:	443a      	add	r2, r7
 800dc66:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc6a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dc6e:	d1dd      	bne.n	800dc2c <__ieee754_sqrt+0xd8>
 800dc70:	430a      	orrs	r2, r1
 800dc72:	d006      	beq.n	800dc82 <__ieee754_sqrt+0x12e>
 800dc74:	1c5c      	adds	r4, r3, #1
 800dc76:	bf13      	iteet	ne
 800dc78:	3301      	addne	r3, #1
 800dc7a:	3501      	addeq	r5, #1
 800dc7c:	4673      	moveq	r3, lr
 800dc7e:	f023 0301 	bicne.w	r3, r3, #1
 800dc82:	106a      	asrs	r2, r5, #1
 800dc84:	085b      	lsrs	r3, r3, #1
 800dc86:	07e9      	lsls	r1, r5, #31
 800dc88:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dc8c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dc90:	bf48      	it	mi
 800dc92:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dc96:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800dc9a:	461c      	mov	r4, r3
 800dc9c:	e776      	b.n	800db8c <__ieee754_sqrt+0x38>
 800dc9e:	0aca      	lsrs	r2, r1, #11
 800dca0:	3b15      	subs	r3, #21
 800dca2:	0549      	lsls	r1, r1, #21
 800dca4:	e78b      	b.n	800dbbe <__ieee754_sqrt+0x6a>
 800dca6:	0052      	lsls	r2, r2, #1
 800dca8:	3001      	adds	r0, #1
 800dcaa:	e78b      	b.n	800dbc4 <__ieee754_sqrt+0x70>
 800dcac:	46a0      	mov	r8, r4
 800dcae:	e7cd      	b.n	800dc4c <__ieee754_sqrt+0xf8>
 800dcb0:	7ff00000 	.word	0x7ff00000
 800dcb4:	00000000 	.word	0x00000000

0800dcb8 <__kernel_cos>:
 800dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	ec59 8b10 	vmov	r8, r9, d0
 800dcc0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800dcc4:	b085      	sub	sp, #20
 800dcc6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800dcca:	ed8d 1b00 	vstr	d1, [sp]
 800dcce:	da07      	bge.n	800dce0 <__kernel_cos+0x28>
 800dcd0:	ee10 0a10 	vmov	r0, s0
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	f7f2 ff3b 	bl	8000b50 <__aeabi_d2iz>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	f000 80aa 	beq.w	800de34 <__kernel_cos+0x17c>
 800dce0:	4642      	mov	r2, r8
 800dce2:	464b      	mov	r3, r9
 800dce4:	4640      	mov	r0, r8
 800dce6:	4649      	mov	r1, r9
 800dce8:	f7f2 fc82 	bl	80005f0 <__aeabi_dmul>
 800dcec:	a359      	add	r3, pc, #356	; (adr r3, 800de54 <__kernel_cos+0x19c>)
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	460d      	mov	r5, r1
 800dcf6:	f7f2 fc7b 	bl	80005f0 <__aeabi_dmul>
 800dcfa:	a358      	add	r3, pc, #352	; (adr r3, 800de5c <__kernel_cos+0x1a4>)
 800dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd00:	f7f2 fac4 	bl	800028c <__adddf3>
 800dd04:	4622      	mov	r2, r4
 800dd06:	462b      	mov	r3, r5
 800dd08:	f7f2 fc72 	bl	80005f0 <__aeabi_dmul>
 800dd0c:	a355      	add	r3, pc, #340	; (adr r3, 800de64 <__kernel_cos+0x1ac>)
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	f7f2 fab9 	bl	8000288 <__aeabi_dsub>
 800dd16:	4622      	mov	r2, r4
 800dd18:	462b      	mov	r3, r5
 800dd1a:	f7f2 fc69 	bl	80005f0 <__aeabi_dmul>
 800dd1e:	a353      	add	r3, pc, #332	; (adr r3, 800de6c <__kernel_cos+0x1b4>)
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	f7f2 fab2 	bl	800028c <__adddf3>
 800dd28:	4622      	mov	r2, r4
 800dd2a:	462b      	mov	r3, r5
 800dd2c:	f7f2 fc60 	bl	80005f0 <__aeabi_dmul>
 800dd30:	a350      	add	r3, pc, #320	; (adr r3, 800de74 <__kernel_cos+0x1bc>)
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	f7f2 faa7 	bl	8000288 <__aeabi_dsub>
 800dd3a:	4622      	mov	r2, r4
 800dd3c:	462b      	mov	r3, r5
 800dd3e:	f7f2 fc57 	bl	80005f0 <__aeabi_dmul>
 800dd42:	a34e      	add	r3, pc, #312	; (adr r3, 800de7c <__kernel_cos+0x1c4>)
 800dd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd48:	f7f2 faa0 	bl	800028c <__adddf3>
 800dd4c:	462b      	mov	r3, r5
 800dd4e:	4622      	mov	r2, r4
 800dd50:	f7f2 fc4e 	bl	80005f0 <__aeabi_dmul>
 800dd54:	4b3a      	ldr	r3, [pc, #232]	; (800de40 <__kernel_cos+0x188>)
 800dd56:	429f      	cmp	r7, r3
 800dd58:	4682      	mov	sl, r0
 800dd5a:	468b      	mov	fp, r1
 800dd5c:	dc2c      	bgt.n	800ddb8 <__kernel_cos+0x100>
 800dd5e:	2200      	movs	r2, #0
 800dd60:	4b38      	ldr	r3, [pc, #224]	; (800de44 <__kernel_cos+0x18c>)
 800dd62:	4620      	mov	r0, r4
 800dd64:	4629      	mov	r1, r5
 800dd66:	f7f2 fc43 	bl	80005f0 <__aeabi_dmul>
 800dd6a:	4652      	mov	r2, sl
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	460f      	mov	r7, r1
 800dd70:	465b      	mov	r3, fp
 800dd72:	4620      	mov	r0, r4
 800dd74:	4629      	mov	r1, r5
 800dd76:	f7f2 fc3b 	bl	80005f0 <__aeabi_dmul>
 800dd7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd7e:	4604      	mov	r4, r0
 800dd80:	460d      	mov	r5, r1
 800dd82:	4640      	mov	r0, r8
 800dd84:	4649      	mov	r1, r9
 800dd86:	f7f2 fc33 	bl	80005f0 <__aeabi_dmul>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	f7f2 fa79 	bl	8000288 <__aeabi_dsub>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	4639      	mov	r1, r7
 800dd9e:	f7f2 fa73 	bl	8000288 <__aeabi_dsub>
 800dda2:	460b      	mov	r3, r1
 800dda4:	4928      	ldr	r1, [pc, #160]	; (800de48 <__kernel_cos+0x190>)
 800dda6:	4602      	mov	r2, r0
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f7f2 fa6d 	bl	8000288 <__aeabi_dsub>
 800ddae:	ec41 0b10 	vmov	d0, r0, r1
 800ddb2:	b005      	add	sp, #20
 800ddb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb8:	4b24      	ldr	r3, [pc, #144]	; (800de4c <__kernel_cos+0x194>)
 800ddba:	4923      	ldr	r1, [pc, #140]	; (800de48 <__kernel_cos+0x190>)
 800ddbc:	429f      	cmp	r7, r3
 800ddbe:	bfd7      	itett	le
 800ddc0:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800ddc4:	4f22      	ldrgt	r7, [pc, #136]	; (800de50 <__kernel_cos+0x198>)
 800ddc6:	2200      	movle	r2, #0
 800ddc8:	4616      	movle	r6, r2
 800ddca:	bfd4      	ite	le
 800ddcc:	461f      	movle	r7, r3
 800ddce:	2600      	movgt	r6, #0
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	463b      	mov	r3, r7
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	f7f2 fa57 	bl	8000288 <__aeabi_dsub>
 800ddda:	2200      	movs	r2, #0
 800dddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dde0:	4b18      	ldr	r3, [pc, #96]	; (800de44 <__kernel_cos+0x18c>)
 800dde2:	4620      	mov	r0, r4
 800dde4:	4629      	mov	r1, r5
 800dde6:	f7f2 fc03 	bl	80005f0 <__aeabi_dmul>
 800ddea:	4632      	mov	r2, r6
 800ddec:	463b      	mov	r3, r7
 800ddee:	f7f2 fa4b 	bl	8000288 <__aeabi_dsub>
 800ddf2:	4652      	mov	r2, sl
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	460f      	mov	r7, r1
 800ddf8:	465b      	mov	r3, fp
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	f7f2 fbf7 	bl	80005f0 <__aeabi_dmul>
 800de02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de06:	4604      	mov	r4, r0
 800de08:	460d      	mov	r5, r1
 800de0a:	4640      	mov	r0, r8
 800de0c:	4649      	mov	r1, r9
 800de0e:	f7f2 fbef 	bl	80005f0 <__aeabi_dmul>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	4620      	mov	r0, r4
 800de18:	4629      	mov	r1, r5
 800de1a:	f7f2 fa35 	bl	8000288 <__aeabi_dsub>
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	4630      	mov	r0, r6
 800de24:	4639      	mov	r1, r7
 800de26:	f7f2 fa2f 	bl	8000288 <__aeabi_dsub>
 800de2a:	4602      	mov	r2, r0
 800de2c:	460b      	mov	r3, r1
 800de2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de32:	e7ba      	b.n	800ddaa <__kernel_cos+0xf2>
 800de34:	2000      	movs	r0, #0
 800de36:	4904      	ldr	r1, [pc, #16]	; (800de48 <__kernel_cos+0x190>)
 800de38:	e7b9      	b.n	800ddae <__kernel_cos+0xf6>
 800de3a:	bf00      	nop
 800de3c:	f3af 8000 	nop.w
 800de40:	3fd33332 	.word	0x3fd33332
 800de44:	3fe00000 	.word	0x3fe00000
 800de48:	3ff00000 	.word	0x3ff00000
 800de4c:	3fe90000 	.word	0x3fe90000
 800de50:	3fd20000 	.word	0x3fd20000
 800de54:	be8838d4 	.word	0xbe8838d4
 800de58:	bda8fae9 	.word	0xbda8fae9
 800de5c:	bdb4b1c4 	.word	0xbdb4b1c4
 800de60:	3e21ee9e 	.word	0x3e21ee9e
 800de64:	809c52ad 	.word	0x809c52ad
 800de68:	3e927e4f 	.word	0x3e927e4f
 800de6c:	19cb1590 	.word	0x19cb1590
 800de70:	3efa01a0 	.word	0x3efa01a0
 800de74:	16c15177 	.word	0x16c15177
 800de78:	3f56c16c 	.word	0x3f56c16c
 800de7c:	5555554c 	.word	0x5555554c
 800de80:	3fa55555 	.word	0x3fa55555
 800de84:	00000000 	.word	0x00000000

0800de88 <__kernel_rem_pio2>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	ed2d 8b02 	vpush	{d8}
 800de90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800de94:	1ed4      	subs	r4, r2, #3
 800de96:	9306      	str	r3, [sp, #24]
 800de98:	9102      	str	r1, [sp, #8]
 800de9a:	4bc3      	ldr	r3, [pc, #780]	; (800e1a8 <__kernel_rem_pio2+0x320>)
 800de9c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800de9e:	9009      	str	r0, [sp, #36]	; 0x24
 800dea0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	9b06      	ldr	r3, [sp, #24]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	9304      	str	r3, [sp, #16]
 800deac:	2318      	movs	r3, #24
 800deae:	fb94 f4f3 	sdiv	r4, r4, r3
 800deb2:	f06f 0317 	mvn.w	r3, #23
 800deb6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800deba:	fb04 3303 	mla	r3, r4, r3, r3
 800debe:	eb03 0a02 	add.w	sl, r3, r2
 800dec2:	9b00      	ldr	r3, [sp, #0]
 800dec4:	9a04      	ldr	r2, [sp, #16]
 800dec6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e198 <__kernel_rem_pio2+0x310>
 800deca:	eb03 0802 	add.w	r8, r3, r2
 800dece:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ded0:	1aa7      	subs	r7, r4, r2
 800ded2:	ae20      	add	r6, sp, #128	; 0x80
 800ded4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ded8:	2500      	movs	r5, #0
 800deda:	4545      	cmp	r5, r8
 800dedc:	dd13      	ble.n	800df06 <__kernel_rem_pio2+0x7e>
 800dede:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800e198 <__kernel_rem_pio2+0x310>
 800dee2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800dee6:	2600      	movs	r6, #0
 800dee8:	9b00      	ldr	r3, [sp, #0]
 800deea:	429e      	cmp	r6, r3
 800deec:	dc32      	bgt.n	800df54 <__kernel_rem_pio2+0xcc>
 800deee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def0:	9303      	str	r3, [sp, #12]
 800def2:	9b06      	ldr	r3, [sp, #24]
 800def4:	199d      	adds	r5, r3, r6
 800def6:	ab20      	add	r3, sp, #128	; 0x80
 800def8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800defc:	9308      	str	r3, [sp, #32]
 800defe:	ec59 8b18 	vmov	r8, r9, d8
 800df02:	2700      	movs	r7, #0
 800df04:	e01f      	b.n	800df46 <__kernel_rem_pio2+0xbe>
 800df06:	42ef      	cmn	r7, r5
 800df08:	d407      	bmi.n	800df1a <__kernel_rem_pio2+0x92>
 800df0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800df0e:	f7f2 fb09 	bl	8000524 <__aeabi_i2d>
 800df12:	e8e6 0102 	strd	r0, r1, [r6], #8
 800df16:	3501      	adds	r5, #1
 800df18:	e7df      	b.n	800deda <__kernel_rem_pio2+0x52>
 800df1a:	ec51 0b18 	vmov	r0, r1, d8
 800df1e:	e7f8      	b.n	800df12 <__kernel_rem_pio2+0x8a>
 800df20:	9908      	ldr	r1, [sp, #32]
 800df22:	9d03      	ldr	r5, [sp, #12]
 800df24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800df28:	9108      	str	r1, [sp, #32]
 800df2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800df2e:	9503      	str	r5, [sp, #12]
 800df30:	f7f2 fb5e 	bl	80005f0 <__aeabi_dmul>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4640      	mov	r0, r8
 800df3a:	4649      	mov	r1, r9
 800df3c:	f7f2 f9a6 	bl	800028c <__adddf3>
 800df40:	3701      	adds	r7, #1
 800df42:	4680      	mov	r8, r0
 800df44:	4689      	mov	r9, r1
 800df46:	9b04      	ldr	r3, [sp, #16]
 800df48:	429f      	cmp	r7, r3
 800df4a:	dde9      	ble.n	800df20 <__kernel_rem_pio2+0x98>
 800df4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800df50:	3601      	adds	r6, #1
 800df52:	e7c9      	b.n	800dee8 <__kernel_rem_pio2+0x60>
 800df54:	9b00      	ldr	r3, [sp, #0]
 800df56:	9f00      	ldr	r7, [sp, #0]
 800df58:	aa0c      	add	r2, sp, #48	; 0x30
 800df5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800df60:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800df62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800df66:	930a      	str	r3, [sp, #40]	; 0x28
 800df68:	ab98      	add	r3, sp, #608	; 0x260
 800df6a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800df6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800df72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800df76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800df7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800df7e:	9308      	str	r3, [sp, #32]
 800df80:	9a08      	ldr	r2, [sp, #32]
 800df82:	ab98      	add	r3, sp, #608	; 0x260
 800df84:	4413      	add	r3, r2
 800df86:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800df8a:	2600      	movs	r6, #0
 800df8c:	1bbb      	subs	r3, r7, r6
 800df8e:	2b00      	cmp	r3, #0
 800df90:	dc77      	bgt.n	800e082 <__kernel_rem_pio2+0x1fa>
 800df92:	ec49 8b10 	vmov	d0, r8, r9
 800df96:	4650      	mov	r0, sl
 800df98:	f000 fcaa 	bl	800e8f0 <scalbn>
 800df9c:	ec55 4b10 	vmov	r4, r5, d0
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dfa6:	ee10 0a10 	vmov	r0, s0
 800dfaa:	4629      	mov	r1, r5
 800dfac:	f7f2 fb20 	bl	80005f0 <__aeabi_dmul>
 800dfb0:	ec41 0b10 	vmov	d0, r0, r1
 800dfb4:	f000 fb84 	bl	800e6c0 <floor>
 800dfb8:	2200      	movs	r2, #0
 800dfba:	ec51 0b10 	vmov	r0, r1, d0
 800dfbe:	4b7b      	ldr	r3, [pc, #492]	; (800e1ac <__kernel_rem_pio2+0x324>)
 800dfc0:	f7f2 fb16 	bl	80005f0 <__aeabi_dmul>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4620      	mov	r0, r4
 800dfca:	4629      	mov	r1, r5
 800dfcc:	f7f2 f95c 	bl	8000288 <__aeabi_dsub>
 800dfd0:	460d      	mov	r5, r1
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	f7f2 fdbc 	bl	8000b50 <__aeabi_d2iz>
 800dfd8:	9003      	str	r0, [sp, #12]
 800dfda:	f7f2 faa3 	bl	8000524 <__aeabi_i2d>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	4629      	mov	r1, r5
 800dfe6:	f7f2 f94f 	bl	8000288 <__aeabi_dsub>
 800dfea:	f1ba 0f00 	cmp.w	sl, #0
 800dfee:	4680      	mov	r8, r0
 800dff0:	4689      	mov	r9, r1
 800dff2:	dd6b      	ble.n	800e0cc <__kernel_rem_pio2+0x244>
 800dff4:	1e7a      	subs	r2, r7, #1
 800dff6:	ab0c      	add	r3, sp, #48	; 0x30
 800dff8:	f1ca 0118 	rsb	r1, sl, #24
 800dffc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e000:	9c03      	ldr	r4, [sp, #12]
 800e002:	fa40 f301 	asr.w	r3, r0, r1
 800e006:	441c      	add	r4, r3
 800e008:	408b      	lsls	r3, r1
 800e00a:	1ac0      	subs	r0, r0, r3
 800e00c:	ab0c      	add	r3, sp, #48	; 0x30
 800e00e:	9403      	str	r4, [sp, #12]
 800e010:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e014:	f1ca 0317 	rsb	r3, sl, #23
 800e018:	fa40 fb03 	asr.w	fp, r0, r3
 800e01c:	f1bb 0f00 	cmp.w	fp, #0
 800e020:	dd62      	ble.n	800e0e8 <__kernel_rem_pio2+0x260>
 800e022:	9b03      	ldr	r3, [sp, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	3301      	adds	r3, #1
 800e028:	9303      	str	r3, [sp, #12]
 800e02a:	4614      	mov	r4, r2
 800e02c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e030:	4297      	cmp	r7, r2
 800e032:	f300 8089 	bgt.w	800e148 <__kernel_rem_pio2+0x2c0>
 800e036:	f1ba 0f00 	cmp.w	sl, #0
 800e03a:	dd07      	ble.n	800e04c <__kernel_rem_pio2+0x1c4>
 800e03c:	f1ba 0f01 	cmp.w	sl, #1
 800e040:	f000 8096 	beq.w	800e170 <__kernel_rem_pio2+0x2e8>
 800e044:	f1ba 0f02 	cmp.w	sl, #2
 800e048:	f000 809c 	beq.w	800e184 <__kernel_rem_pio2+0x2fc>
 800e04c:	f1bb 0f02 	cmp.w	fp, #2
 800e050:	d14a      	bne.n	800e0e8 <__kernel_rem_pio2+0x260>
 800e052:	4642      	mov	r2, r8
 800e054:	464b      	mov	r3, r9
 800e056:	2000      	movs	r0, #0
 800e058:	4955      	ldr	r1, [pc, #340]	; (800e1b0 <__kernel_rem_pio2+0x328>)
 800e05a:	f7f2 f915 	bl	8000288 <__aeabi_dsub>
 800e05e:	4680      	mov	r8, r0
 800e060:	4689      	mov	r9, r1
 800e062:	2c00      	cmp	r4, #0
 800e064:	d040      	beq.n	800e0e8 <__kernel_rem_pio2+0x260>
 800e066:	4650      	mov	r0, sl
 800e068:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e1a0 <__kernel_rem_pio2+0x318>
 800e06c:	f000 fc40 	bl	800e8f0 <scalbn>
 800e070:	4640      	mov	r0, r8
 800e072:	4649      	mov	r1, r9
 800e074:	ec53 2b10 	vmov	r2, r3, d0
 800e078:	f7f2 f906 	bl	8000288 <__aeabi_dsub>
 800e07c:	4680      	mov	r8, r0
 800e07e:	4689      	mov	r9, r1
 800e080:	e032      	b.n	800e0e8 <__kernel_rem_pio2+0x260>
 800e082:	2200      	movs	r2, #0
 800e084:	4b4b      	ldr	r3, [pc, #300]	; (800e1b4 <__kernel_rem_pio2+0x32c>)
 800e086:	4640      	mov	r0, r8
 800e088:	4649      	mov	r1, r9
 800e08a:	f7f2 fab1 	bl	80005f0 <__aeabi_dmul>
 800e08e:	f7f2 fd5f 	bl	8000b50 <__aeabi_d2iz>
 800e092:	f7f2 fa47 	bl	8000524 <__aeabi_i2d>
 800e096:	2200      	movs	r2, #0
 800e098:	4b47      	ldr	r3, [pc, #284]	; (800e1b8 <__kernel_rem_pio2+0x330>)
 800e09a:	4604      	mov	r4, r0
 800e09c:	460d      	mov	r5, r1
 800e09e:	f7f2 faa7 	bl	80005f0 <__aeabi_dmul>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4640      	mov	r0, r8
 800e0a8:	4649      	mov	r1, r9
 800e0aa:	f7f2 f8ed 	bl	8000288 <__aeabi_dsub>
 800e0ae:	f7f2 fd4f 	bl	8000b50 <__aeabi_d2iz>
 800e0b2:	ab0c      	add	r3, sp, #48	; 0x30
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800e0ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f7f2 f8e4 	bl	800028c <__adddf3>
 800e0c4:	3601      	adds	r6, #1
 800e0c6:	4680      	mov	r8, r0
 800e0c8:	4689      	mov	r9, r1
 800e0ca:	e75f      	b.n	800df8c <__kernel_rem_pio2+0x104>
 800e0cc:	d106      	bne.n	800e0dc <__kernel_rem_pio2+0x254>
 800e0ce:	1e7b      	subs	r3, r7, #1
 800e0d0:	aa0c      	add	r2, sp, #48	; 0x30
 800e0d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e0d6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e0da:	e79f      	b.n	800e01c <__kernel_rem_pio2+0x194>
 800e0dc:	2200      	movs	r2, #0
 800e0de:	4b37      	ldr	r3, [pc, #220]	; (800e1bc <__kernel_rem_pio2+0x334>)
 800e0e0:	f7f2 fd0c 	bl	8000afc <__aeabi_dcmpge>
 800e0e4:	bb68      	cbnz	r0, 800e142 <__kernel_rem_pio2+0x2ba>
 800e0e6:	4683      	mov	fp, r0
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	4640      	mov	r0, r8
 800e0ee:	4649      	mov	r1, r9
 800e0f0:	f7f2 fce6 	bl	8000ac0 <__aeabi_dcmpeq>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	f000 80c1 	beq.w	800e27c <__kernel_rem_pio2+0x3f4>
 800e0fa:	1e7c      	subs	r4, r7, #1
 800e0fc:	4623      	mov	r3, r4
 800e0fe:	2200      	movs	r2, #0
 800e100:	9900      	ldr	r1, [sp, #0]
 800e102:	428b      	cmp	r3, r1
 800e104:	da5c      	bge.n	800e1c0 <__kernel_rem_pio2+0x338>
 800e106:	2a00      	cmp	r2, #0
 800e108:	f040 808b 	bne.w	800e222 <__kernel_rem_pio2+0x39a>
 800e10c:	2401      	movs	r4, #1
 800e10e:	f06f 0203 	mvn.w	r2, #3
 800e112:	fb02 f304 	mul.w	r3, r2, r4
 800e116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e118:	58cb      	ldr	r3, [r1, r3]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d056      	beq.n	800e1cc <__kernel_rem_pio2+0x344>
 800e11e:	9b08      	ldr	r3, [sp, #32]
 800e120:	aa98      	add	r2, sp, #608	; 0x260
 800e122:	4413      	add	r3, r2
 800e124:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 800e128:	9b06      	ldr	r3, [sp, #24]
 800e12a:	19dd      	adds	r5, r3, r7
 800e12c:	ab20      	add	r3, sp, #128	; 0x80
 800e12e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e132:	19e3      	adds	r3, r4, r7
 800e134:	1c7e      	adds	r6, r7, #1
 800e136:	9303      	str	r3, [sp, #12]
 800e138:	9b03      	ldr	r3, [sp, #12]
 800e13a:	429e      	cmp	r6, r3
 800e13c:	dd48      	ble.n	800e1d0 <__kernel_rem_pio2+0x348>
 800e13e:	461f      	mov	r7, r3
 800e140:	e712      	b.n	800df68 <__kernel_rem_pio2+0xe0>
 800e142:	f04f 0b02 	mov.w	fp, #2
 800e146:	e76c      	b.n	800e022 <__kernel_rem_pio2+0x19a>
 800e148:	ab0c      	add	r3, sp, #48	; 0x30
 800e14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e14e:	b94c      	cbnz	r4, 800e164 <__kernel_rem_pio2+0x2dc>
 800e150:	b12b      	cbz	r3, 800e15e <__kernel_rem_pio2+0x2d6>
 800e152:	a80c      	add	r0, sp, #48	; 0x30
 800e154:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e158:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e15c:	2301      	movs	r3, #1
 800e15e:	3201      	adds	r2, #1
 800e160:	461c      	mov	r4, r3
 800e162:	e765      	b.n	800e030 <__kernel_rem_pio2+0x1a8>
 800e164:	a80c      	add	r0, sp, #48	; 0x30
 800e166:	1acb      	subs	r3, r1, r3
 800e168:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e16c:	4623      	mov	r3, r4
 800e16e:	e7f6      	b.n	800e15e <__kernel_rem_pio2+0x2d6>
 800e170:	1e7a      	subs	r2, r7, #1
 800e172:	ab0c      	add	r3, sp, #48	; 0x30
 800e174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e178:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e17c:	a90c      	add	r1, sp, #48	; 0x30
 800e17e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e182:	e763      	b.n	800e04c <__kernel_rem_pio2+0x1c4>
 800e184:	1e7a      	subs	r2, r7, #1
 800e186:	ab0c      	add	r3, sp, #48	; 0x30
 800e188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e190:	e7f4      	b.n	800e17c <__kernel_rem_pio2+0x2f4>
 800e192:	bf00      	nop
 800e194:	f3af 8000 	nop.w
	...
 800e1a4:	3ff00000 	.word	0x3ff00000
 800e1a8:	08010100 	.word	0x08010100
 800e1ac:	40200000 	.word	0x40200000
 800e1b0:	3ff00000 	.word	0x3ff00000
 800e1b4:	3e700000 	.word	0x3e700000
 800e1b8:	41700000 	.word	0x41700000
 800e1bc:	3fe00000 	.word	0x3fe00000
 800e1c0:	a90c      	add	r1, sp, #48	; 0x30
 800e1c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	430a      	orrs	r2, r1
 800e1ca:	e799      	b.n	800e100 <__kernel_rem_pio2+0x278>
 800e1cc:	3401      	adds	r4, #1
 800e1ce:	e7a0      	b.n	800e112 <__kernel_rem_pio2+0x28a>
 800e1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e1d6:	f7f2 f9a5 	bl	8000524 <__aeabi_i2d>
 800e1da:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e0:	9508      	str	r5, [sp, #32]
 800e1e2:	461c      	mov	r4, r3
 800e1e4:	2700      	movs	r7, #0
 800e1e6:	f04f 0800 	mov.w	r8, #0
 800e1ea:	f04f 0900 	mov.w	r9, #0
 800e1ee:	9b04      	ldr	r3, [sp, #16]
 800e1f0:	429f      	cmp	r7, r3
 800e1f2:	dd03      	ble.n	800e1fc <__kernel_rem_pio2+0x374>
 800e1f4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800e1f8:	3601      	adds	r6, #1
 800e1fa:	e79d      	b.n	800e138 <__kernel_rem_pio2+0x2b0>
 800e1fc:	9908      	ldr	r1, [sp, #32]
 800e1fe:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e202:	9108      	str	r1, [sp, #32]
 800e204:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e208:	f7f2 f9f2 	bl	80005f0 <__aeabi_dmul>
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	4640      	mov	r0, r8
 800e212:	4649      	mov	r1, r9
 800e214:	f7f2 f83a 	bl	800028c <__adddf3>
 800e218:	3701      	adds	r7, #1
 800e21a:	4680      	mov	r8, r0
 800e21c:	4689      	mov	r9, r1
 800e21e:	e7e6      	b.n	800e1ee <__kernel_rem_pio2+0x366>
 800e220:	3c01      	subs	r4, #1
 800e222:	ab0c      	add	r3, sp, #48	; 0x30
 800e224:	f1aa 0a18 	sub.w	sl, sl, #24
 800e228:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d0f7      	beq.n	800e220 <__kernel_rem_pio2+0x398>
 800e230:	4650      	mov	r0, sl
 800e232:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 800e508 <__kernel_rem_pio2+0x680>
 800e236:	f000 fb5b 	bl	800e8f0 <scalbn>
 800e23a:	00e5      	lsls	r5, r4, #3
 800e23c:	ab98      	add	r3, sp, #608	; 0x260
 800e23e:	eb03 0905 	add.w	r9, r3, r5
 800e242:	ec57 6b10 	vmov	r6, r7, d0
 800e246:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800e24a:	46a0      	mov	r8, r4
 800e24c:	f1b8 0f00 	cmp.w	r8, #0
 800e250:	da4d      	bge.n	800e2ee <__kernel_rem_pio2+0x466>
 800e252:	ed9f 8baf 	vldr	d8, [pc, #700]	; 800e510 <__kernel_rem_pio2+0x688>
 800e256:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800e25a:	2300      	movs	r3, #0
 800e25c:	9304      	str	r3, [sp, #16]
 800e25e:	4657      	mov	r7, sl
 800e260:	9b04      	ldr	r3, [sp, #16]
 800e262:	ebb4 0903 	subs.w	r9, r4, r3
 800e266:	d476      	bmi.n	800e356 <__kernel_rem_pio2+0x4ce>
 800e268:	4bab      	ldr	r3, [pc, #684]	; (800e518 <__kernel_rem_pio2+0x690>)
 800e26a:	461e      	mov	r6, r3
 800e26c:	ab70      	add	r3, sp, #448	; 0x1c0
 800e26e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e272:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e276:	f04f 0800 	mov.w	r8, #0
 800e27a:	e05e      	b.n	800e33a <__kernel_rem_pio2+0x4b2>
 800e27c:	f1ca 0000 	rsb	r0, sl, #0
 800e280:	ec49 8b10 	vmov	d0, r8, r9
 800e284:	f000 fb34 	bl	800e8f0 <scalbn>
 800e288:	ec55 4b10 	vmov	r4, r5, d0
 800e28c:	2200      	movs	r2, #0
 800e28e:	4ba3      	ldr	r3, [pc, #652]	; (800e51c <__kernel_rem_pio2+0x694>)
 800e290:	ee10 0a10 	vmov	r0, s0
 800e294:	4629      	mov	r1, r5
 800e296:	f7f2 fc31 	bl	8000afc <__aeabi_dcmpge>
 800e29a:	b1f8      	cbz	r0, 800e2dc <__kernel_rem_pio2+0x454>
 800e29c:	2200      	movs	r2, #0
 800e29e:	4ba0      	ldr	r3, [pc, #640]	; (800e520 <__kernel_rem_pio2+0x698>)
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	f7f2 f9a4 	bl	80005f0 <__aeabi_dmul>
 800e2a8:	f7f2 fc52 	bl	8000b50 <__aeabi_d2iz>
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	f7f2 f939 	bl	8000524 <__aeabi_i2d>
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	4b99      	ldr	r3, [pc, #612]	; (800e51c <__kernel_rem_pio2+0x694>)
 800e2b6:	f7f2 f99b 	bl	80005f0 <__aeabi_dmul>
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4602      	mov	r2, r0
 800e2be:	4629      	mov	r1, r5
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f7f1 ffe1 	bl	8000288 <__aeabi_dsub>
 800e2c6:	f7f2 fc43 	bl	8000b50 <__aeabi_d2iz>
 800e2ca:	1c7c      	adds	r4, r7, #1
 800e2cc:	ab0c      	add	r3, sp, #48	; 0x30
 800e2ce:	f10a 0a18 	add.w	sl, sl, #24
 800e2d2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e2d6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800e2da:	e7a9      	b.n	800e230 <__kernel_rem_pio2+0x3a8>
 800e2dc:	4620      	mov	r0, r4
 800e2de:	4629      	mov	r1, r5
 800e2e0:	f7f2 fc36 	bl	8000b50 <__aeabi_d2iz>
 800e2e4:	ab0c      	add	r3, sp, #48	; 0x30
 800e2e6:	463c      	mov	r4, r7
 800e2e8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e2ec:	e7a0      	b.n	800e230 <__kernel_rem_pio2+0x3a8>
 800e2ee:	ab0c      	add	r3, sp, #48	; 0x30
 800e2f0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e2f4:	f7f2 f916 	bl	8000524 <__aeabi_i2d>
 800e2f8:	4632      	mov	r2, r6
 800e2fa:	463b      	mov	r3, r7
 800e2fc:	f7f2 f978 	bl	80005f0 <__aeabi_dmul>
 800e300:	2200      	movs	r2, #0
 800e302:	e969 0102 	strd	r0, r1, [r9, #-8]!
 800e306:	4b86      	ldr	r3, [pc, #536]	; (800e520 <__kernel_rem_pio2+0x698>)
 800e308:	4630      	mov	r0, r6
 800e30a:	4639      	mov	r1, r7
 800e30c:	f7f2 f970 	bl	80005f0 <__aeabi_dmul>
 800e310:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e314:	4606      	mov	r6, r0
 800e316:	460f      	mov	r7, r1
 800e318:	e798      	b.n	800e24c <__kernel_rem_pio2+0x3c4>
 800e31a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e31e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e322:	f7f2 f965 	bl	80005f0 <__aeabi_dmul>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e32e:	f7f1 ffad 	bl	800028c <__adddf3>
 800e332:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e336:	f108 0801 	add.w	r8, r8, #1
 800e33a:	9b00      	ldr	r3, [sp, #0]
 800e33c:	4598      	cmp	r8, r3
 800e33e:	dc02      	bgt.n	800e346 <__kernel_rem_pio2+0x4be>
 800e340:	9b04      	ldr	r3, [sp, #16]
 800e342:	4598      	cmp	r8, r3
 800e344:	dde9      	ble.n	800e31a <__kernel_rem_pio2+0x492>
 800e346:	9b04      	ldr	r3, [sp, #16]
 800e348:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e34c:	3301      	adds	r3, #1
 800e34e:	ecaa 7b02 	vstmia	sl!, {d7}
 800e352:	9304      	str	r3, [sp, #16]
 800e354:	e784      	b.n	800e260 <__kernel_rem_pio2+0x3d8>
 800e356:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e358:	2b03      	cmp	r3, #3
 800e35a:	d85d      	bhi.n	800e418 <__kernel_rem_pio2+0x590>
 800e35c:	e8df f003 	tbb	[pc, r3]
 800e360:	0226264b 	.word	0x0226264b
 800e364:	ab98      	add	r3, sp, #608	; 0x260
 800e366:	441d      	add	r5, r3
 800e368:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800e36c:	462e      	mov	r6, r5
 800e36e:	46a2      	mov	sl, r4
 800e370:	f1ba 0f00 	cmp.w	sl, #0
 800e374:	dc6e      	bgt.n	800e454 <__kernel_rem_pio2+0x5cc>
 800e376:	462e      	mov	r6, r5
 800e378:	46a2      	mov	sl, r4
 800e37a:	f1ba 0f01 	cmp.w	sl, #1
 800e37e:	f300 808a 	bgt.w	800e496 <__kernel_rem_pio2+0x60e>
 800e382:	2000      	movs	r0, #0
 800e384:	2100      	movs	r1, #0
 800e386:	2c01      	cmp	r4, #1
 800e388:	f300 80a6 	bgt.w	800e4d8 <__kernel_rem_pio2+0x650>
 800e38c:	f1bb 0f00 	cmp.w	fp, #0
 800e390:	f040 80a8 	bne.w	800e4e4 <__kernel_rem_pio2+0x65c>
 800e394:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 800e398:	9c02      	ldr	r4, [sp, #8]
 800e39a:	e9c4 2300 	strd	r2, r3, [r4]
 800e39e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800e3a2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800e3a6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e3aa:	e035      	b.n	800e418 <__kernel_rem_pio2+0x590>
 800e3ac:	3508      	adds	r5, #8
 800e3ae:	ab48      	add	r3, sp, #288	; 0x120
 800e3b0:	441d      	add	r5, r3
 800e3b2:	4626      	mov	r6, r4
 800e3b4:	2000      	movs	r0, #0
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	2e00      	cmp	r6, #0
 800e3ba:	da3c      	bge.n	800e436 <__kernel_rem_pio2+0x5ae>
 800e3bc:	f1bb 0f00 	cmp.w	fp, #0
 800e3c0:	d03f      	beq.n	800e442 <__kernel_rem_pio2+0x5ba>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3c8:	9d02      	ldr	r5, [sp, #8]
 800e3ca:	e9c5 2300 	strd	r2, r3, [r5]
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e3d6:	f7f1 ff57 	bl	8000288 <__aeabi_dsub>
 800e3da:	ae4a      	add	r6, sp, #296	; 0x128
 800e3dc:	2501      	movs	r5, #1
 800e3de:	42ac      	cmp	r4, r5
 800e3e0:	da32      	bge.n	800e448 <__kernel_rem_pio2+0x5c0>
 800e3e2:	f1bb 0f00 	cmp.w	fp, #0
 800e3e6:	d002      	beq.n	800e3ee <__kernel_rem_pio2+0x566>
 800e3e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	9b02      	ldr	r3, [sp, #8]
 800e3f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e3f4:	e010      	b.n	800e418 <__kernel_rem_pio2+0x590>
 800e3f6:	ab98      	add	r3, sp, #608	; 0x260
 800e3f8:	441d      	add	r5, r3
 800e3fa:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800e3fe:	2000      	movs	r0, #0
 800e400:	2100      	movs	r1, #0
 800e402:	2c00      	cmp	r4, #0
 800e404:	da11      	bge.n	800e42a <__kernel_rem_pio2+0x5a2>
 800e406:	f1bb 0f00 	cmp.w	fp, #0
 800e40a:	d002      	beq.n	800e412 <__kernel_rem_pio2+0x58a>
 800e40c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e410:	4619      	mov	r1, r3
 800e412:	9b02      	ldr	r3, [sp, #8]
 800e414:	e9c3 0100 	strd	r0, r1, [r3]
 800e418:	9b03      	ldr	r3, [sp, #12]
 800e41a:	f003 0007 	and.w	r0, r3, #7
 800e41e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e422:	ecbd 8b02 	vpop	{d8}
 800e426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e42e:	f7f1 ff2d 	bl	800028c <__adddf3>
 800e432:	3c01      	subs	r4, #1
 800e434:	e7e5      	b.n	800e402 <__kernel_rem_pio2+0x57a>
 800e436:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e43a:	f7f1 ff27 	bl	800028c <__adddf3>
 800e43e:	3e01      	subs	r6, #1
 800e440:	e7ba      	b.n	800e3b8 <__kernel_rem_pio2+0x530>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	e7bf      	b.n	800e3c8 <__kernel_rem_pio2+0x540>
 800e448:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e44c:	f7f1 ff1e 	bl	800028c <__adddf3>
 800e450:	3501      	adds	r5, #1
 800e452:	e7c4      	b.n	800e3de <__kernel_rem_pio2+0x556>
 800e454:	ed16 7b02 	vldr	d7, [r6, #-8]
 800e458:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800e45c:	ec53 2b17 	vmov	r2, r3, d7
 800e460:	4640      	mov	r0, r8
 800e462:	4649      	mov	r1, r9
 800e464:	ed8d 7b00 	vstr	d7, [sp]
 800e468:	f7f1 ff10 	bl	800028c <__adddf3>
 800e46c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4640      	mov	r0, r8
 800e476:	4649      	mov	r1, r9
 800e478:	f7f1 ff06 	bl	8000288 <__aeabi_dsub>
 800e47c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e480:	f7f1 ff04 	bl	800028c <__adddf3>
 800e484:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e488:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800e48c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e490:	ed06 7b02 	vstr	d7, [r6, #-8]
 800e494:	e76c      	b.n	800e370 <__kernel_rem_pio2+0x4e8>
 800e496:	ed16 7b02 	vldr	d7, [r6, #-8]
 800e49a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800e49e:	ec53 2b17 	vmov	r2, r3, d7
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	ed8d 7b00 	vstr	d7, [sp]
 800e4aa:	f7f1 feef 	bl	800028c <__adddf3>
 800e4ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4640      	mov	r0, r8
 800e4b8:	4649      	mov	r1, r9
 800e4ba:	f7f1 fee5 	bl	8000288 <__aeabi_dsub>
 800e4be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4c2:	f7f1 fee3 	bl	800028c <__adddf3>
 800e4c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e4ca:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800e4ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e4d2:	ed06 7b02 	vstr	d7, [r6, #-8]
 800e4d6:	e750      	b.n	800e37a <__kernel_rem_pio2+0x4f2>
 800e4d8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e4dc:	f7f1 fed6 	bl	800028c <__adddf3>
 800e4e0:	3c01      	subs	r4, #1
 800e4e2:	e750      	b.n	800e386 <__kernel_rem_pio2+0x4fe>
 800e4e4:	9a02      	ldr	r2, [sp, #8]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	6013      	str	r3, [r2, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6110      	str	r0, [r2, #16]
 800e4ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e4f2:	6053      	str	r3, [r2, #4]
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	6093      	str	r3, [r2, #8]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e4fe:	60d3      	str	r3, [r2, #12]
 800e500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e504:	6153      	str	r3, [r2, #20]
 800e506:	e787      	b.n	800e418 <__kernel_rem_pio2+0x590>
 800e508:	00000000 	.word	0x00000000
 800e50c:	3ff00000 	.word	0x3ff00000
	...
 800e518:	080100c0 	.word	0x080100c0
 800e51c:	41700000 	.word	0x41700000
 800e520:	3e700000 	.word	0x3e700000
 800e524:	00000000 	.word	0x00000000

0800e528 <__kernel_sin>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	ec55 4b10 	vmov	r4, r5, d0
 800e530:	b085      	sub	sp, #20
 800e532:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e536:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e53a:	ed8d 1b00 	vstr	d1, [sp]
 800e53e:	9002      	str	r0, [sp, #8]
 800e540:	da06      	bge.n	800e550 <__kernel_sin+0x28>
 800e542:	ee10 0a10 	vmov	r0, s0
 800e546:	4629      	mov	r1, r5
 800e548:	f7f2 fb02 	bl	8000b50 <__aeabi_d2iz>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d051      	beq.n	800e5f4 <__kernel_sin+0xcc>
 800e550:	4622      	mov	r2, r4
 800e552:	462b      	mov	r3, r5
 800e554:	4620      	mov	r0, r4
 800e556:	4629      	mov	r1, r5
 800e558:	f7f2 f84a 	bl	80005f0 <__aeabi_dmul>
 800e55c:	4682      	mov	sl, r0
 800e55e:	468b      	mov	fp, r1
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	4620      	mov	r0, r4
 800e566:	4629      	mov	r1, r5
 800e568:	f7f2 f842 	bl	80005f0 <__aeabi_dmul>
 800e56c:	a341      	add	r3, pc, #260	; (adr r3, 800e674 <__kernel_sin+0x14c>)
 800e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e572:	4680      	mov	r8, r0
 800e574:	4689      	mov	r9, r1
 800e576:	4650      	mov	r0, sl
 800e578:	4659      	mov	r1, fp
 800e57a:	f7f2 f839 	bl	80005f0 <__aeabi_dmul>
 800e57e:	a33f      	add	r3, pc, #252	; (adr r3, 800e67c <__kernel_sin+0x154>)
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	f7f1 fe80 	bl	8000288 <__aeabi_dsub>
 800e588:	4652      	mov	r2, sl
 800e58a:	465b      	mov	r3, fp
 800e58c:	f7f2 f830 	bl	80005f0 <__aeabi_dmul>
 800e590:	a33c      	add	r3, pc, #240	; (adr r3, 800e684 <__kernel_sin+0x15c>)
 800e592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e596:	f7f1 fe79 	bl	800028c <__adddf3>
 800e59a:	4652      	mov	r2, sl
 800e59c:	465b      	mov	r3, fp
 800e59e:	f7f2 f827 	bl	80005f0 <__aeabi_dmul>
 800e5a2:	a33a      	add	r3, pc, #232	; (adr r3, 800e68c <__kernel_sin+0x164>)
 800e5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a8:	f7f1 fe6e 	bl	8000288 <__aeabi_dsub>
 800e5ac:	4652      	mov	r2, sl
 800e5ae:	465b      	mov	r3, fp
 800e5b0:	f7f2 f81e 	bl	80005f0 <__aeabi_dmul>
 800e5b4:	a337      	add	r3, pc, #220	; (adr r3, 800e694 <__kernel_sin+0x16c>)
 800e5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ba:	f7f1 fe67 	bl	800028c <__adddf3>
 800e5be:	9b02      	ldr	r3, [sp, #8]
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	460f      	mov	r7, r1
 800e5c4:	b9db      	cbnz	r3, 800e5fe <__kernel_sin+0xd6>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	4650      	mov	r0, sl
 800e5cc:	4659      	mov	r1, fp
 800e5ce:	f7f2 f80f 	bl	80005f0 <__aeabi_dmul>
 800e5d2:	a325      	add	r3, pc, #148	; (adr r3, 800e668 <__kernel_sin+0x140>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f7f1 fe56 	bl	8000288 <__aeabi_dsub>
 800e5dc:	4642      	mov	r2, r8
 800e5de:	464b      	mov	r3, r9
 800e5e0:	f7f2 f806 	bl	80005f0 <__aeabi_dmul>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	f7f1 fe4e 	bl	800028c <__adddf3>
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	460d      	mov	r5, r1
 800e5f4:	ec45 4b10 	vmov	d0, r4, r5
 800e5f8:	b005      	add	sp, #20
 800e5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fe:	2200      	movs	r2, #0
 800e600:	4b1b      	ldr	r3, [pc, #108]	; (800e670 <__kernel_sin+0x148>)
 800e602:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e606:	f7f1 fff3 	bl	80005f0 <__aeabi_dmul>
 800e60a:	4632      	mov	r2, r6
 800e60c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e610:	463b      	mov	r3, r7
 800e612:	4640      	mov	r0, r8
 800e614:	4649      	mov	r1, r9
 800e616:	f7f1 ffeb 	bl	80005f0 <__aeabi_dmul>
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e622:	f7f1 fe31 	bl	8000288 <__aeabi_dsub>
 800e626:	4652      	mov	r2, sl
 800e628:	465b      	mov	r3, fp
 800e62a:	f7f1 ffe1 	bl	80005f0 <__aeabi_dmul>
 800e62e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e632:	f7f1 fe29 	bl	8000288 <__aeabi_dsub>
 800e636:	a30c      	add	r3, pc, #48	; (adr r3, 800e668 <__kernel_sin+0x140>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	4606      	mov	r6, r0
 800e63e:	460f      	mov	r7, r1
 800e640:	4640      	mov	r0, r8
 800e642:	4649      	mov	r1, r9
 800e644:	f7f1 ffd4 	bl	80005f0 <__aeabi_dmul>
 800e648:	4602      	mov	r2, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	4630      	mov	r0, r6
 800e64e:	4639      	mov	r1, r7
 800e650:	f7f1 fe1c 	bl	800028c <__adddf3>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4620      	mov	r0, r4
 800e65a:	4629      	mov	r1, r5
 800e65c:	f7f1 fe14 	bl	8000288 <__aeabi_dsub>
 800e660:	e7c6      	b.n	800e5f0 <__kernel_sin+0xc8>
 800e662:	bf00      	nop
 800e664:	f3af 8000 	nop.w
 800e668:	55555549 	.word	0x55555549
 800e66c:	3fc55555 	.word	0x3fc55555
 800e670:	3fe00000 	.word	0x3fe00000
 800e674:	5acfd57c 	.word	0x5acfd57c
 800e678:	3de5d93a 	.word	0x3de5d93a
 800e67c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e680:	3e5ae5e6 	.word	0x3e5ae5e6
 800e684:	57b1fe7d 	.word	0x57b1fe7d
 800e688:	3ec71de3 	.word	0x3ec71de3
 800e68c:	19c161d5 	.word	0x19c161d5
 800e690:	3f2a01a0 	.word	0x3f2a01a0
 800e694:	1110f8a6 	.word	0x1110f8a6
 800e698:	3f811111 	.word	0x3f811111

0800e69c <fabs>:
 800e69c:	ec53 2b10 	vmov	r2, r3, d0
 800e6a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6a4:	ec43 2b10 	vmov	d0, r2, r3
 800e6a8:	4770      	bx	lr

0800e6aa <finite>:
 800e6aa:	ee10 3a90 	vmov	r3, s1
 800e6ae:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e6b2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e6b6:	0fc0      	lsrs	r0, r0, #31
 800e6b8:	4770      	bx	lr
 800e6ba:	0000      	movs	r0, r0
 800e6bc:	0000      	movs	r0, r0
	...

0800e6c0 <floor>:
 800e6c0:	ec51 0b10 	vmov	r0, r1, d0
 800e6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e6cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e6d0:	2e13      	cmp	r6, #19
 800e6d2:	ee10 8a10 	vmov	r8, s0
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	ee10 5a10 	vmov	r5, s0
 800e6dc:	dc35      	bgt.n	800e74a <floor+0x8a>
 800e6de:	2e00      	cmp	r6, #0
 800e6e0:	da17      	bge.n	800e712 <floor+0x52>
 800e6e2:	a335      	add	r3, pc, #212	; (adr r3, 800e7b8 <floor+0xf8>)
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	f7f1 fdd0 	bl	800028c <__adddf3>
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f7f2 fa0e 	bl	8000b10 <__aeabi_dcmpgt>
 800e6f4:	b150      	cbz	r0, 800e70c <floor+0x4c>
 800e6f6:	2c00      	cmp	r4, #0
 800e6f8:	da5a      	bge.n	800e7b0 <floor+0xf0>
 800e6fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e6fe:	ea53 0308 	orrs.w	r3, r3, r8
 800e702:	4b2f      	ldr	r3, [pc, #188]	; (800e7c0 <floor+0x100>)
 800e704:	f04f 0500 	mov.w	r5, #0
 800e708:	bf18      	it	ne
 800e70a:	461c      	movne	r4, r3
 800e70c:	4621      	mov	r1, r4
 800e70e:	4628      	mov	r0, r5
 800e710:	e025      	b.n	800e75e <floor+0x9e>
 800e712:	4f2c      	ldr	r7, [pc, #176]	; (800e7c4 <floor+0x104>)
 800e714:	4137      	asrs	r7, r6
 800e716:	ea01 0307 	and.w	r3, r1, r7
 800e71a:	4303      	orrs	r3, r0
 800e71c:	d01f      	beq.n	800e75e <floor+0x9e>
 800e71e:	a326      	add	r3, pc, #152	; (adr r3, 800e7b8 <floor+0xf8>)
 800e720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e724:	f7f1 fdb2 	bl	800028c <__adddf3>
 800e728:	2200      	movs	r2, #0
 800e72a:	2300      	movs	r3, #0
 800e72c:	f7f2 f9f0 	bl	8000b10 <__aeabi_dcmpgt>
 800e730:	2800      	cmp	r0, #0
 800e732:	d0eb      	beq.n	800e70c <floor+0x4c>
 800e734:	2c00      	cmp	r4, #0
 800e736:	bfbe      	ittt	lt
 800e738:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e73c:	fa43 f606 	asrlt.w	r6, r3, r6
 800e740:	19a4      	addlt	r4, r4, r6
 800e742:	ea24 0407 	bic.w	r4, r4, r7
 800e746:	2500      	movs	r5, #0
 800e748:	e7e0      	b.n	800e70c <floor+0x4c>
 800e74a:	2e33      	cmp	r6, #51	; 0x33
 800e74c:	dd0b      	ble.n	800e766 <floor+0xa6>
 800e74e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e752:	d104      	bne.n	800e75e <floor+0x9e>
 800e754:	ee10 2a10 	vmov	r2, s0
 800e758:	460b      	mov	r3, r1
 800e75a:	f7f1 fd97 	bl	800028c <__adddf3>
 800e75e:	ec41 0b10 	vmov	d0, r0, r1
 800e762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e766:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e76a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e76e:	fa23 f707 	lsr.w	r7, r3, r7
 800e772:	4238      	tst	r0, r7
 800e774:	d0f3      	beq.n	800e75e <floor+0x9e>
 800e776:	a310      	add	r3, pc, #64	; (adr r3, 800e7b8 <floor+0xf8>)
 800e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77c:	f7f1 fd86 	bl	800028c <__adddf3>
 800e780:	2200      	movs	r2, #0
 800e782:	2300      	movs	r3, #0
 800e784:	f7f2 f9c4 	bl	8000b10 <__aeabi_dcmpgt>
 800e788:	2800      	cmp	r0, #0
 800e78a:	d0bf      	beq.n	800e70c <floor+0x4c>
 800e78c:	2c00      	cmp	r4, #0
 800e78e:	da02      	bge.n	800e796 <floor+0xd6>
 800e790:	2e14      	cmp	r6, #20
 800e792:	d103      	bne.n	800e79c <floor+0xdc>
 800e794:	3401      	adds	r4, #1
 800e796:	ea25 0507 	bic.w	r5, r5, r7
 800e79a:	e7b7      	b.n	800e70c <floor+0x4c>
 800e79c:	2301      	movs	r3, #1
 800e79e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e7a2:	fa03 f606 	lsl.w	r6, r3, r6
 800e7a6:	4435      	add	r5, r6
 800e7a8:	45a8      	cmp	r8, r5
 800e7aa:	bf88      	it	hi
 800e7ac:	18e4      	addhi	r4, r4, r3
 800e7ae:	e7f2      	b.n	800e796 <floor+0xd6>
 800e7b0:	2500      	movs	r5, #0
 800e7b2:	462c      	mov	r4, r5
 800e7b4:	e7aa      	b.n	800e70c <floor+0x4c>
 800e7b6:	bf00      	nop
 800e7b8:	8800759c 	.word	0x8800759c
 800e7bc:	7e37e43c 	.word	0x7e37e43c
 800e7c0:	bff00000 	.word	0xbff00000
 800e7c4:	000fffff 	.word	0x000fffff

0800e7c8 <matherr>:
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	4770      	bx	lr
 800e7cc:	0000      	movs	r0, r0
	...

0800e7d0 <nan>:
 800e7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e7d8 <nan+0x8>
 800e7d4:	4770      	bx	lr
 800e7d6:	bf00      	nop
 800e7d8:	00000000 	.word	0x00000000
 800e7dc:	7ff80000 	.word	0x7ff80000

0800e7e0 <rint>:
 800e7e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7e2:	ec51 0b10 	vmov	r0, r1, d0
 800e7e6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e7ea:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800e7ee:	2e13      	cmp	r6, #19
 800e7f0:	ee10 7a10 	vmov	r7, s0
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e7fc:	dc58      	bgt.n	800e8b0 <rint+0xd0>
 800e7fe:	2e00      	cmp	r6, #0
 800e800:	da2b      	bge.n	800e85a <rint+0x7a>
 800e802:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e806:	4302      	orrs	r2, r0
 800e808:	d023      	beq.n	800e852 <rint+0x72>
 800e80a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e80e:	4302      	orrs	r2, r0
 800e810:	4251      	negs	r1, r2
 800e812:	4311      	orrs	r1, r2
 800e814:	0b09      	lsrs	r1, r1, #12
 800e816:	0c5b      	lsrs	r3, r3, #17
 800e818:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800e81c:	045b      	lsls	r3, r3, #17
 800e81e:	ea41 0703 	orr.w	r7, r1, r3
 800e822:	4b31      	ldr	r3, [pc, #196]	; (800e8e8 <rint+0x108>)
 800e824:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e828:	4639      	mov	r1, r7
 800e82a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e82e:	ee10 0a10 	vmov	r0, s0
 800e832:	4632      	mov	r2, r6
 800e834:	463b      	mov	r3, r7
 800e836:	f7f1 fd29 	bl	800028c <__adddf3>
 800e83a:	e9cd 0100 	strd	r0, r1, [sp]
 800e83e:	463b      	mov	r3, r7
 800e840:	4632      	mov	r2, r6
 800e842:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e846:	f7f1 fd1f 	bl	8000288 <__aeabi_dsub>
 800e84a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e84e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800e852:	ec41 0b10 	vmov	d0, r0, r1
 800e856:	b003      	add	sp, #12
 800e858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e85a:	4c24      	ldr	r4, [pc, #144]	; (800e8ec <rint+0x10c>)
 800e85c:	4134      	asrs	r4, r6
 800e85e:	ea01 0704 	and.w	r7, r1, r4
 800e862:	4307      	orrs	r7, r0
 800e864:	d0f5      	beq.n	800e852 <rint+0x72>
 800e866:	0861      	lsrs	r1, r4, #1
 800e868:	ea03 0001 	and.w	r0, r3, r1
 800e86c:	4302      	orrs	r2, r0
 800e86e:	d00b      	beq.n	800e888 <rint+0xa8>
 800e870:	ea23 0101 	bic.w	r1, r3, r1
 800e874:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e878:	2e13      	cmp	r6, #19
 800e87a:	fa43 f306 	asr.w	r3, r3, r6
 800e87e:	bf0c      	ite	eq
 800e880:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800e884:	2200      	movne	r2, #0
 800e886:	430b      	orrs	r3, r1
 800e888:	4619      	mov	r1, r3
 800e88a:	4b17      	ldr	r3, [pc, #92]	; (800e8e8 <rint+0x108>)
 800e88c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e890:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e894:	4610      	mov	r0, r2
 800e896:	462b      	mov	r3, r5
 800e898:	4622      	mov	r2, r4
 800e89a:	f7f1 fcf7 	bl	800028c <__adddf3>
 800e89e:	e9cd 0100 	strd	r0, r1, [sp]
 800e8a2:	4622      	mov	r2, r4
 800e8a4:	462b      	mov	r3, r5
 800e8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8aa:	f7f1 fced 	bl	8000288 <__aeabi_dsub>
 800e8ae:	e7d0      	b.n	800e852 <rint+0x72>
 800e8b0:	2e33      	cmp	r6, #51	; 0x33
 800e8b2:	dd08      	ble.n	800e8c6 <rint+0xe6>
 800e8b4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e8b8:	d1cb      	bne.n	800e852 <rint+0x72>
 800e8ba:	ee10 2a10 	vmov	r2, s0
 800e8be:	460b      	mov	r3, r1
 800e8c0:	f7f1 fce4 	bl	800028c <__adddf3>
 800e8c4:	e7c5      	b.n	800e852 <rint+0x72>
 800e8c6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800e8ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e8ce:	40f4      	lsrs	r4, r6
 800e8d0:	4220      	tst	r0, r4
 800e8d2:	d0be      	beq.n	800e852 <rint+0x72>
 800e8d4:	0861      	lsrs	r1, r4, #1
 800e8d6:	420f      	tst	r7, r1
 800e8d8:	bf1f      	itttt	ne
 800e8da:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800e8de:	ea27 0101 	bicne.w	r1, r7, r1
 800e8e2:	4132      	asrne	r2, r6
 800e8e4:	430a      	orrne	r2, r1
 800e8e6:	e7cf      	b.n	800e888 <rint+0xa8>
 800e8e8:	08010110 	.word	0x08010110
 800e8ec:	000fffff 	.word	0x000fffff

0800e8f0 <scalbn>:
 800e8f0:	b570      	push	{r4, r5, r6, lr}
 800e8f2:	ec55 4b10 	vmov	r4, r5, d0
 800e8f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	462b      	mov	r3, r5
 800e8fe:	b9b2      	cbnz	r2, 800e92e <scalbn+0x3e>
 800e900:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e904:	4323      	orrs	r3, r4
 800e906:	d03c      	beq.n	800e982 <scalbn+0x92>
 800e908:	2200      	movs	r2, #0
 800e90a:	4b33      	ldr	r3, [pc, #204]	; (800e9d8 <scalbn+0xe8>)
 800e90c:	4629      	mov	r1, r5
 800e90e:	ee10 0a10 	vmov	r0, s0
 800e912:	f7f1 fe6d 	bl	80005f0 <__aeabi_dmul>
 800e916:	4a31      	ldr	r2, [pc, #196]	; (800e9dc <scalbn+0xec>)
 800e918:	4296      	cmp	r6, r2
 800e91a:	4604      	mov	r4, r0
 800e91c:	460d      	mov	r5, r1
 800e91e:	460b      	mov	r3, r1
 800e920:	da13      	bge.n	800e94a <scalbn+0x5a>
 800e922:	a329      	add	r3, pc, #164	; (adr r3, 800e9c8 <scalbn+0xd8>)
 800e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e928:	f7f1 fe62 	bl	80005f0 <__aeabi_dmul>
 800e92c:	e00a      	b.n	800e944 <scalbn+0x54>
 800e92e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e932:	428a      	cmp	r2, r1
 800e934:	d10c      	bne.n	800e950 <scalbn+0x60>
 800e936:	ee10 2a10 	vmov	r2, s0
 800e93a:	462b      	mov	r3, r5
 800e93c:	4620      	mov	r0, r4
 800e93e:	4629      	mov	r1, r5
 800e940:	f7f1 fca4 	bl	800028c <__adddf3>
 800e944:	4604      	mov	r4, r0
 800e946:	460d      	mov	r5, r1
 800e948:	e01b      	b.n	800e982 <scalbn+0x92>
 800e94a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e94e:	3a36      	subs	r2, #54	; 0x36
 800e950:	4432      	add	r2, r6
 800e952:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e956:	428a      	cmp	r2, r1
 800e958:	dd0b      	ble.n	800e972 <scalbn+0x82>
 800e95a:	ec45 4b11 	vmov	d1, r4, r5
 800e95e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e9d0 <scalbn+0xe0>
 800e962:	f000 f83f 	bl	800e9e4 <copysign>
 800e966:	a31a      	add	r3, pc, #104	; (adr r3, 800e9d0 <scalbn+0xe0>)
 800e968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96c:	ec51 0b10 	vmov	r0, r1, d0
 800e970:	e7da      	b.n	800e928 <scalbn+0x38>
 800e972:	2a00      	cmp	r2, #0
 800e974:	dd08      	ble.n	800e988 <scalbn+0x98>
 800e976:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e97a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e97e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e982:	ec45 4b10 	vmov	d0, r4, r5
 800e986:	bd70      	pop	{r4, r5, r6, pc}
 800e988:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e98c:	da0d      	bge.n	800e9aa <scalbn+0xba>
 800e98e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e992:	429e      	cmp	r6, r3
 800e994:	ec45 4b11 	vmov	d1, r4, r5
 800e998:	dce1      	bgt.n	800e95e <scalbn+0x6e>
 800e99a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800e9c8 <scalbn+0xd8>
 800e99e:	f000 f821 	bl	800e9e4 <copysign>
 800e9a2:	a309      	add	r3, pc, #36	; (adr r3, 800e9c8 <scalbn+0xd8>)
 800e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a8:	e7e0      	b.n	800e96c <scalbn+0x7c>
 800e9aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9ae:	3236      	adds	r2, #54	; 0x36
 800e9b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	2200      	movs	r2, #0
 800e9be:	4b08      	ldr	r3, [pc, #32]	; (800e9e0 <scalbn+0xf0>)
 800e9c0:	e7b2      	b.n	800e928 <scalbn+0x38>
 800e9c2:	bf00      	nop
 800e9c4:	f3af 8000 	nop.w
 800e9c8:	c2f8f359 	.word	0xc2f8f359
 800e9cc:	01a56e1f 	.word	0x01a56e1f
 800e9d0:	8800759c 	.word	0x8800759c
 800e9d4:	7e37e43c 	.word	0x7e37e43c
 800e9d8:	43500000 	.word	0x43500000
 800e9dc:	ffff3cb0 	.word	0xffff3cb0
 800e9e0:	3c900000 	.word	0x3c900000

0800e9e4 <copysign>:
 800e9e4:	ec53 2b10 	vmov	r2, r3, d0
 800e9e8:	ee11 0a90 	vmov	r0, s3
 800e9ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e9f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e9f4:	ea41 0300 	orr.w	r3, r1, r0
 800e9f8:	ec43 2b10 	vmov	d0, r2, r3
 800e9fc:	4770      	bx	lr

0800e9fe <abort>:
 800e9fe:	b508      	push	{r3, lr}
 800ea00:	2006      	movs	r0, #6
 800ea02:	f000 f869 	bl	800ead8 <raise>
 800ea06:	2001      	movs	r0, #1
 800ea08:	f7fc fe80 	bl	800b70c <_exit>

0800ea0c <__errno>:
 800ea0c:	4b01      	ldr	r3, [pc, #4]	; (800ea14 <__errno+0x8>)
 800ea0e:	6818      	ldr	r0, [r3, #0]
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	20000134 	.word	0x20000134

0800ea18 <__libc_init_array>:
 800ea18:	b570      	push	{r4, r5, r6, lr}
 800ea1a:	4e0d      	ldr	r6, [pc, #52]	; (800ea50 <__libc_init_array+0x38>)
 800ea1c:	4c0d      	ldr	r4, [pc, #52]	; (800ea54 <__libc_init_array+0x3c>)
 800ea1e:	1ba4      	subs	r4, r4, r6
 800ea20:	10a4      	asrs	r4, r4, #2
 800ea22:	2500      	movs	r5, #0
 800ea24:	42a5      	cmp	r5, r4
 800ea26:	d109      	bne.n	800ea3c <__libc_init_array+0x24>
 800ea28:	4e0b      	ldr	r6, [pc, #44]	; (800ea58 <__libc_init_array+0x40>)
 800ea2a:	4c0c      	ldr	r4, [pc, #48]	; (800ea5c <__libc_init_array+0x44>)
 800ea2c:	f000 fe54 	bl	800f6d8 <_init>
 800ea30:	1ba4      	subs	r4, r4, r6
 800ea32:	10a4      	asrs	r4, r4, #2
 800ea34:	2500      	movs	r5, #0
 800ea36:	42a5      	cmp	r5, r4
 800ea38:	d105      	bne.n	800ea46 <__libc_init_array+0x2e>
 800ea3a:	bd70      	pop	{r4, r5, r6, pc}
 800ea3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea40:	4798      	blx	r3
 800ea42:	3501      	adds	r5, #1
 800ea44:	e7ee      	b.n	800ea24 <__libc_init_array+0xc>
 800ea46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea4a:	4798      	blx	r3
 800ea4c:	3501      	adds	r5, #1
 800ea4e:	e7f2      	b.n	800ea36 <__libc_init_array+0x1e>
 800ea50:	080102ac 	.word	0x080102ac
 800ea54:	080102ac 	.word	0x080102ac
 800ea58:	080102ac 	.word	0x080102ac
 800ea5c:	080102b4 	.word	0x080102b4

0800ea60 <memcpy>:
 800ea60:	b510      	push	{r4, lr}
 800ea62:	1e43      	subs	r3, r0, #1
 800ea64:	440a      	add	r2, r1
 800ea66:	4291      	cmp	r1, r2
 800ea68:	d100      	bne.n	800ea6c <memcpy+0xc>
 800ea6a:	bd10      	pop	{r4, pc}
 800ea6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea74:	e7f7      	b.n	800ea66 <memcpy+0x6>
	...

0800ea78 <realloc>:
 800ea78:	4b02      	ldr	r3, [pc, #8]	; (800ea84 <realloc+0xc>)
 800ea7a:	460a      	mov	r2, r1
 800ea7c:	4601      	mov	r1, r0
 800ea7e:	6818      	ldr	r0, [r3, #0]
 800ea80:	f000 b926 	b.w	800ecd0 <_realloc_r>
 800ea84:	20000134 	.word	0x20000134

0800ea88 <_raise_r>:
 800ea88:	291f      	cmp	r1, #31
 800ea8a:	b538      	push	{r3, r4, r5, lr}
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	460d      	mov	r5, r1
 800ea90:	d904      	bls.n	800ea9c <_raise_r+0x14>
 800ea92:	2316      	movs	r3, #22
 800ea94:	6003      	str	r3, [r0, #0]
 800ea96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ea9e:	b112      	cbz	r2, 800eaa6 <_raise_r+0x1e>
 800eaa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eaa4:	b94b      	cbnz	r3, 800eaba <_raise_r+0x32>
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f000 f830 	bl	800eb0c <_getpid_r>
 800eaac:	462a      	mov	r2, r5
 800eaae:	4601      	mov	r1, r0
 800eab0:	4620      	mov	r0, r4
 800eab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eab6:	f000 b817 	b.w	800eae8 <_kill_r>
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d00a      	beq.n	800ead4 <_raise_r+0x4c>
 800eabe:	1c59      	adds	r1, r3, #1
 800eac0:	d103      	bne.n	800eaca <_raise_r+0x42>
 800eac2:	2316      	movs	r3, #22
 800eac4:	6003      	str	r3, [r0, #0]
 800eac6:	2001      	movs	r0, #1
 800eac8:	bd38      	pop	{r3, r4, r5, pc}
 800eaca:	2400      	movs	r4, #0
 800eacc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ead0:	4628      	mov	r0, r5
 800ead2:	4798      	blx	r3
 800ead4:	2000      	movs	r0, #0
 800ead6:	bd38      	pop	{r3, r4, r5, pc}

0800ead8 <raise>:
 800ead8:	4b02      	ldr	r3, [pc, #8]	; (800eae4 <raise+0xc>)
 800eada:	4601      	mov	r1, r0
 800eadc:	6818      	ldr	r0, [r3, #0]
 800eade:	f7ff bfd3 	b.w	800ea88 <_raise_r>
 800eae2:	bf00      	nop
 800eae4:	20000134 	.word	0x20000134

0800eae8 <_kill_r>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	4c07      	ldr	r4, [pc, #28]	; (800eb08 <_kill_r+0x20>)
 800eaec:	2300      	movs	r3, #0
 800eaee:	4605      	mov	r5, r0
 800eaf0:	4608      	mov	r0, r1
 800eaf2:	4611      	mov	r1, r2
 800eaf4:	6023      	str	r3, [r4, #0]
 800eaf6:	f7fc fdf7 	bl	800b6e8 <_kill>
 800eafa:	1c43      	adds	r3, r0, #1
 800eafc:	d102      	bne.n	800eb04 <_kill_r+0x1c>
 800eafe:	6823      	ldr	r3, [r4, #0]
 800eb00:	b103      	cbz	r3, 800eb04 <_kill_r+0x1c>
 800eb02:	602b      	str	r3, [r5, #0]
 800eb04:	bd38      	pop	{r3, r4, r5, pc}
 800eb06:	bf00      	nop
 800eb08:	20001ad0 	.word	0x20001ad0

0800eb0c <_getpid_r>:
 800eb0c:	f7fc bdde 	b.w	800b6cc <_getpid>

0800eb10 <siscanf>:
 800eb10:	b40e      	push	{r1, r2, r3}
 800eb12:	b530      	push	{r4, r5, lr}
 800eb14:	b09c      	sub	sp, #112	; 0x70
 800eb16:	ac1f      	add	r4, sp, #124	; 0x7c
 800eb18:	f44f 7201 	mov.w	r2, #516	; 0x204
 800eb1c:	f854 5b04 	ldr.w	r5, [r4], #4
 800eb20:	f8ad 2014 	strh.w	r2, [sp, #20]
 800eb24:	9002      	str	r0, [sp, #8]
 800eb26:	9006      	str	r0, [sp, #24]
 800eb28:	f7f1 fb52 	bl	80001d0 <strlen>
 800eb2c:	4b0b      	ldr	r3, [pc, #44]	; (800eb5c <siscanf+0x4c>)
 800eb2e:	9003      	str	r0, [sp, #12]
 800eb30:	9007      	str	r0, [sp, #28]
 800eb32:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb34:	480a      	ldr	r0, [pc, #40]	; (800eb60 <siscanf+0x50>)
 800eb36:	9401      	str	r4, [sp, #4]
 800eb38:	2300      	movs	r3, #0
 800eb3a:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb3c:	9314      	str	r3, [sp, #80]	; 0x50
 800eb3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb42:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb46:	462a      	mov	r2, r5
 800eb48:	4623      	mov	r3, r4
 800eb4a:	a902      	add	r1, sp, #8
 800eb4c:	6800      	ldr	r0, [r0, #0]
 800eb4e:	f000 f93f 	bl	800edd0 <__ssvfiscanf_r>
 800eb52:	b01c      	add	sp, #112	; 0x70
 800eb54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb58:	b003      	add	sp, #12
 800eb5a:	4770      	bx	lr
 800eb5c:	0800eb65 	.word	0x0800eb65
 800eb60:	20000134 	.word	0x20000134

0800eb64 <__seofread>:
 800eb64:	2000      	movs	r0, #0
 800eb66:	4770      	bx	lr

0800eb68 <strcpy>:
 800eb68:	4603      	mov	r3, r0
 800eb6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb6e:	f803 2b01 	strb.w	r2, [r3], #1
 800eb72:	2a00      	cmp	r2, #0
 800eb74:	d1f9      	bne.n	800eb6a <strcpy+0x2>
 800eb76:	4770      	bx	lr

0800eb78 <_free_r>:
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	2900      	cmp	r1, #0
 800eb7e:	d045      	beq.n	800ec0c <_free_r+0x94>
 800eb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb84:	1f0c      	subs	r4, r1, #4
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	bfb8      	it	lt
 800eb8a:	18e4      	addlt	r4, r4, r3
 800eb8c:	f000 fd8c 	bl	800f6a8 <__malloc_lock>
 800eb90:	4a1f      	ldr	r2, [pc, #124]	; (800ec10 <_free_r+0x98>)
 800eb92:	6813      	ldr	r3, [r2, #0]
 800eb94:	4610      	mov	r0, r2
 800eb96:	b933      	cbnz	r3, 800eba6 <_free_r+0x2e>
 800eb98:	6063      	str	r3, [r4, #4]
 800eb9a:	6014      	str	r4, [r2, #0]
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eba2:	f000 bd82 	b.w	800f6aa <__malloc_unlock>
 800eba6:	42a3      	cmp	r3, r4
 800eba8:	d90c      	bls.n	800ebc4 <_free_r+0x4c>
 800ebaa:	6821      	ldr	r1, [r4, #0]
 800ebac:	1862      	adds	r2, r4, r1
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	bf04      	itt	eq
 800ebb2:	681a      	ldreq	r2, [r3, #0]
 800ebb4:	685b      	ldreq	r3, [r3, #4]
 800ebb6:	6063      	str	r3, [r4, #4]
 800ebb8:	bf04      	itt	eq
 800ebba:	1852      	addeq	r2, r2, r1
 800ebbc:	6022      	streq	r2, [r4, #0]
 800ebbe:	6004      	str	r4, [r0, #0]
 800ebc0:	e7ec      	b.n	800eb9c <_free_r+0x24>
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	b10a      	cbz	r2, 800ebcc <_free_r+0x54>
 800ebc8:	42a2      	cmp	r2, r4
 800ebca:	d9fa      	bls.n	800ebc2 <_free_r+0x4a>
 800ebcc:	6819      	ldr	r1, [r3, #0]
 800ebce:	1858      	adds	r0, r3, r1
 800ebd0:	42a0      	cmp	r0, r4
 800ebd2:	d10b      	bne.n	800ebec <_free_r+0x74>
 800ebd4:	6820      	ldr	r0, [r4, #0]
 800ebd6:	4401      	add	r1, r0
 800ebd8:	1858      	adds	r0, r3, r1
 800ebda:	4282      	cmp	r2, r0
 800ebdc:	6019      	str	r1, [r3, #0]
 800ebde:	d1dd      	bne.n	800eb9c <_free_r+0x24>
 800ebe0:	6810      	ldr	r0, [r2, #0]
 800ebe2:	6852      	ldr	r2, [r2, #4]
 800ebe4:	605a      	str	r2, [r3, #4]
 800ebe6:	4401      	add	r1, r0
 800ebe8:	6019      	str	r1, [r3, #0]
 800ebea:	e7d7      	b.n	800eb9c <_free_r+0x24>
 800ebec:	d902      	bls.n	800ebf4 <_free_r+0x7c>
 800ebee:	230c      	movs	r3, #12
 800ebf0:	602b      	str	r3, [r5, #0]
 800ebf2:	e7d3      	b.n	800eb9c <_free_r+0x24>
 800ebf4:	6820      	ldr	r0, [r4, #0]
 800ebf6:	1821      	adds	r1, r4, r0
 800ebf8:	428a      	cmp	r2, r1
 800ebfa:	bf04      	itt	eq
 800ebfc:	6811      	ldreq	r1, [r2, #0]
 800ebfe:	6852      	ldreq	r2, [r2, #4]
 800ec00:	6062      	str	r2, [r4, #4]
 800ec02:	bf04      	itt	eq
 800ec04:	1809      	addeq	r1, r1, r0
 800ec06:	6021      	streq	r1, [r4, #0]
 800ec08:	605c      	str	r4, [r3, #4]
 800ec0a:	e7c7      	b.n	800eb9c <_free_r+0x24>
 800ec0c:	bd38      	pop	{r3, r4, r5, pc}
 800ec0e:	bf00      	nop
 800ec10:	20001a94 	.word	0x20001a94

0800ec14 <_malloc_r>:
 800ec14:	b570      	push	{r4, r5, r6, lr}
 800ec16:	1ccd      	adds	r5, r1, #3
 800ec18:	f025 0503 	bic.w	r5, r5, #3
 800ec1c:	3508      	adds	r5, #8
 800ec1e:	2d0c      	cmp	r5, #12
 800ec20:	bf38      	it	cc
 800ec22:	250c      	movcc	r5, #12
 800ec24:	2d00      	cmp	r5, #0
 800ec26:	4606      	mov	r6, r0
 800ec28:	db01      	blt.n	800ec2e <_malloc_r+0x1a>
 800ec2a:	42a9      	cmp	r1, r5
 800ec2c:	d903      	bls.n	800ec36 <_malloc_r+0x22>
 800ec2e:	230c      	movs	r3, #12
 800ec30:	6033      	str	r3, [r6, #0]
 800ec32:	2000      	movs	r0, #0
 800ec34:	bd70      	pop	{r4, r5, r6, pc}
 800ec36:	f000 fd37 	bl	800f6a8 <__malloc_lock>
 800ec3a:	4a23      	ldr	r2, [pc, #140]	; (800ecc8 <_malloc_r+0xb4>)
 800ec3c:	6814      	ldr	r4, [r2, #0]
 800ec3e:	4621      	mov	r1, r4
 800ec40:	b991      	cbnz	r1, 800ec68 <_malloc_r+0x54>
 800ec42:	4c22      	ldr	r4, [pc, #136]	; (800eccc <_malloc_r+0xb8>)
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	b91b      	cbnz	r3, 800ec50 <_malloc_r+0x3c>
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f000 fb6d 	bl	800f328 <_sbrk_r>
 800ec4e:	6020      	str	r0, [r4, #0]
 800ec50:	4629      	mov	r1, r5
 800ec52:	4630      	mov	r0, r6
 800ec54:	f000 fb68 	bl	800f328 <_sbrk_r>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d126      	bne.n	800ecaa <_malloc_r+0x96>
 800ec5c:	230c      	movs	r3, #12
 800ec5e:	6033      	str	r3, [r6, #0]
 800ec60:	4630      	mov	r0, r6
 800ec62:	f000 fd22 	bl	800f6aa <__malloc_unlock>
 800ec66:	e7e4      	b.n	800ec32 <_malloc_r+0x1e>
 800ec68:	680b      	ldr	r3, [r1, #0]
 800ec6a:	1b5b      	subs	r3, r3, r5
 800ec6c:	d41a      	bmi.n	800eca4 <_malloc_r+0x90>
 800ec6e:	2b0b      	cmp	r3, #11
 800ec70:	d90f      	bls.n	800ec92 <_malloc_r+0x7e>
 800ec72:	600b      	str	r3, [r1, #0]
 800ec74:	50cd      	str	r5, [r1, r3]
 800ec76:	18cc      	adds	r4, r1, r3
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f000 fd16 	bl	800f6aa <__malloc_unlock>
 800ec7e:	f104 000b 	add.w	r0, r4, #11
 800ec82:	1d23      	adds	r3, r4, #4
 800ec84:	f020 0007 	bic.w	r0, r0, #7
 800ec88:	1ac3      	subs	r3, r0, r3
 800ec8a:	d01b      	beq.n	800ecc4 <_malloc_r+0xb0>
 800ec8c:	425a      	negs	r2, r3
 800ec8e:	50e2      	str	r2, [r4, r3]
 800ec90:	bd70      	pop	{r4, r5, r6, pc}
 800ec92:	428c      	cmp	r4, r1
 800ec94:	bf0d      	iteet	eq
 800ec96:	6863      	ldreq	r3, [r4, #4]
 800ec98:	684b      	ldrne	r3, [r1, #4]
 800ec9a:	6063      	strne	r3, [r4, #4]
 800ec9c:	6013      	streq	r3, [r2, #0]
 800ec9e:	bf18      	it	ne
 800eca0:	460c      	movne	r4, r1
 800eca2:	e7e9      	b.n	800ec78 <_malloc_r+0x64>
 800eca4:	460c      	mov	r4, r1
 800eca6:	6849      	ldr	r1, [r1, #4]
 800eca8:	e7ca      	b.n	800ec40 <_malloc_r+0x2c>
 800ecaa:	1cc4      	adds	r4, r0, #3
 800ecac:	f024 0403 	bic.w	r4, r4, #3
 800ecb0:	42a0      	cmp	r0, r4
 800ecb2:	d005      	beq.n	800ecc0 <_malloc_r+0xac>
 800ecb4:	1a21      	subs	r1, r4, r0
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f000 fb36 	bl	800f328 <_sbrk_r>
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	d0cd      	beq.n	800ec5c <_malloc_r+0x48>
 800ecc0:	6025      	str	r5, [r4, #0]
 800ecc2:	e7d9      	b.n	800ec78 <_malloc_r+0x64>
 800ecc4:	bd70      	pop	{r4, r5, r6, pc}
 800ecc6:	bf00      	nop
 800ecc8:	20001a94 	.word	0x20001a94
 800eccc:	20001a98 	.word	0x20001a98

0800ecd0 <_realloc_r>:
 800ecd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecd2:	4607      	mov	r7, r0
 800ecd4:	4614      	mov	r4, r2
 800ecd6:	460e      	mov	r6, r1
 800ecd8:	b921      	cbnz	r1, 800ece4 <_realloc_r+0x14>
 800ecda:	4611      	mov	r1, r2
 800ecdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ece0:	f7ff bf98 	b.w	800ec14 <_malloc_r>
 800ece4:	b922      	cbnz	r2, 800ecf0 <_realloc_r+0x20>
 800ece6:	f7ff ff47 	bl	800eb78 <_free_r>
 800ecea:	4625      	mov	r5, r4
 800ecec:	4628      	mov	r0, r5
 800ecee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecf0:	f000 fcdc 	bl	800f6ac <_malloc_usable_size_r>
 800ecf4:	4284      	cmp	r4, r0
 800ecf6:	d90f      	bls.n	800ed18 <_realloc_r+0x48>
 800ecf8:	4621      	mov	r1, r4
 800ecfa:	4638      	mov	r0, r7
 800ecfc:	f7ff ff8a 	bl	800ec14 <_malloc_r>
 800ed00:	4605      	mov	r5, r0
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d0f2      	beq.n	800ecec <_realloc_r+0x1c>
 800ed06:	4631      	mov	r1, r6
 800ed08:	4622      	mov	r2, r4
 800ed0a:	f7ff fea9 	bl	800ea60 <memcpy>
 800ed0e:	4631      	mov	r1, r6
 800ed10:	4638      	mov	r0, r7
 800ed12:	f7ff ff31 	bl	800eb78 <_free_r>
 800ed16:	e7e9      	b.n	800ecec <_realloc_r+0x1c>
 800ed18:	4635      	mov	r5, r6
 800ed1a:	e7e7      	b.n	800ecec <_realloc_r+0x1c>

0800ed1c <_sungetc_r>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	1c4b      	adds	r3, r1, #1
 800ed20:	4614      	mov	r4, r2
 800ed22:	d103      	bne.n	800ed2c <_sungetc_r+0x10>
 800ed24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ed28:	4628      	mov	r0, r5
 800ed2a:	bd38      	pop	{r3, r4, r5, pc}
 800ed2c:	8993      	ldrh	r3, [r2, #12]
 800ed2e:	f023 0320 	bic.w	r3, r3, #32
 800ed32:	8193      	strh	r3, [r2, #12]
 800ed34:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ed36:	6852      	ldr	r2, [r2, #4]
 800ed38:	b2cd      	uxtb	r5, r1
 800ed3a:	b18b      	cbz	r3, 800ed60 <_sungetc_r+0x44>
 800ed3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	da08      	bge.n	800ed54 <_sungetc_r+0x38>
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	1e5a      	subs	r2, r3, #1
 800ed46:	6022      	str	r2, [r4, #0]
 800ed48:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ed4c:	6863      	ldr	r3, [r4, #4]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	6063      	str	r3, [r4, #4]
 800ed52:	e7e9      	b.n	800ed28 <_sungetc_r+0xc>
 800ed54:	4621      	mov	r1, r4
 800ed56:	f000 fc49 	bl	800f5ec <__submore>
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d0f1      	beq.n	800ed42 <_sungetc_r+0x26>
 800ed5e:	e7e1      	b.n	800ed24 <_sungetc_r+0x8>
 800ed60:	6921      	ldr	r1, [r4, #16]
 800ed62:	6823      	ldr	r3, [r4, #0]
 800ed64:	b151      	cbz	r1, 800ed7c <_sungetc_r+0x60>
 800ed66:	4299      	cmp	r1, r3
 800ed68:	d208      	bcs.n	800ed7c <_sungetc_r+0x60>
 800ed6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ed6e:	428d      	cmp	r5, r1
 800ed70:	d104      	bne.n	800ed7c <_sungetc_r+0x60>
 800ed72:	3b01      	subs	r3, #1
 800ed74:	3201      	adds	r2, #1
 800ed76:	6023      	str	r3, [r4, #0]
 800ed78:	6062      	str	r2, [r4, #4]
 800ed7a:	e7d5      	b.n	800ed28 <_sungetc_r+0xc>
 800ed7c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ed7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed82:	6363      	str	r3, [r4, #52]	; 0x34
 800ed84:	2303      	movs	r3, #3
 800ed86:	63a3      	str	r3, [r4, #56]	; 0x38
 800ed88:	4623      	mov	r3, r4
 800ed8a:	6422      	str	r2, [r4, #64]	; 0x40
 800ed8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	2301      	movs	r3, #1
 800ed94:	e7dc      	b.n	800ed50 <_sungetc_r+0x34>

0800ed96 <__ssrefill_r>:
 800ed96:	b510      	push	{r4, lr}
 800ed98:	460c      	mov	r4, r1
 800ed9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ed9c:	b169      	cbz	r1, 800edba <__ssrefill_r+0x24>
 800ed9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eda2:	4299      	cmp	r1, r3
 800eda4:	d001      	beq.n	800edaa <__ssrefill_r+0x14>
 800eda6:	f7ff fee7 	bl	800eb78 <_free_r>
 800edaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edac:	6063      	str	r3, [r4, #4]
 800edae:	2000      	movs	r0, #0
 800edb0:	6360      	str	r0, [r4, #52]	; 0x34
 800edb2:	b113      	cbz	r3, 800edba <__ssrefill_r+0x24>
 800edb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800edb6:	6023      	str	r3, [r4, #0]
 800edb8:	bd10      	pop	{r4, pc}
 800edba:	6923      	ldr	r3, [r4, #16]
 800edbc:	6023      	str	r3, [r4, #0]
 800edbe:	2300      	movs	r3, #0
 800edc0:	6063      	str	r3, [r4, #4]
 800edc2:	89a3      	ldrh	r3, [r4, #12]
 800edc4:	f043 0320 	orr.w	r3, r3, #32
 800edc8:	81a3      	strh	r3, [r4, #12]
 800edca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edce:	bd10      	pop	{r4, pc}

0800edd0 <__ssvfiscanf_r>:
 800edd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800edd8:	f10d 080c 	add.w	r8, sp, #12
 800eddc:	9301      	str	r3, [sp, #4]
 800edde:	2300      	movs	r3, #0
 800ede0:	9346      	str	r3, [sp, #280]	; 0x118
 800ede2:	9347      	str	r3, [sp, #284]	; 0x11c
 800ede4:	4ba0      	ldr	r3, [pc, #640]	; (800f068 <__ssvfiscanf_r+0x298>)
 800ede6:	93a2      	str	r3, [sp, #648]	; 0x288
 800ede8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800f070 <__ssvfiscanf_r+0x2a0>
 800edec:	4b9f      	ldr	r3, [pc, #636]	; (800f06c <__ssvfiscanf_r+0x29c>)
 800edee:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800edf2:	4606      	mov	r6, r0
 800edf4:	460c      	mov	r4, r1
 800edf6:	93a3      	str	r3, [sp, #652]	; 0x28c
 800edf8:	4692      	mov	sl, r2
 800edfa:	270a      	movs	r7, #10
 800edfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 812f 	beq.w	800f064 <__ssvfiscanf_r+0x294>
 800ee06:	f000 fc2f 	bl	800f668 <__locale_ctype_ptr>
 800ee0a:	f89a b000 	ldrb.w	fp, [sl]
 800ee0e:	4458      	add	r0, fp
 800ee10:	7843      	ldrb	r3, [r0, #1]
 800ee12:	f013 0308 	ands.w	r3, r3, #8
 800ee16:	d143      	bne.n	800eea0 <__ssvfiscanf_r+0xd0>
 800ee18:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800ee1c:	f10a 0501 	add.w	r5, sl, #1
 800ee20:	f040 8099 	bne.w	800ef56 <__ssvfiscanf_r+0x186>
 800ee24:	9345      	str	r3, [sp, #276]	; 0x114
 800ee26:	9343      	str	r3, [sp, #268]	; 0x10c
 800ee28:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ee2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee2e:	d103      	bne.n	800ee38 <__ssvfiscanf_r+0x68>
 800ee30:	2310      	movs	r3, #16
 800ee32:	9343      	str	r3, [sp, #268]	; 0x10c
 800ee34:	f10a 0502 	add.w	r5, sl, #2
 800ee38:	7829      	ldrb	r1, [r5, #0]
 800ee3a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ee3e:	2a09      	cmp	r2, #9
 800ee40:	46aa      	mov	sl, r5
 800ee42:	f105 0501 	add.w	r5, r5, #1
 800ee46:	d941      	bls.n	800eecc <__ssvfiscanf_r+0xfc>
 800ee48:	2203      	movs	r2, #3
 800ee4a:	4889      	ldr	r0, [pc, #548]	; (800f070 <__ssvfiscanf_r+0x2a0>)
 800ee4c:	f7f1 f9c8 	bl	80001e0 <memchr>
 800ee50:	b138      	cbz	r0, 800ee62 <__ssvfiscanf_r+0x92>
 800ee52:	eba0 0309 	sub.w	r3, r0, r9
 800ee56:	2001      	movs	r0, #1
 800ee58:	4098      	lsls	r0, r3
 800ee5a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ee5c:	4318      	orrs	r0, r3
 800ee5e:	9043      	str	r0, [sp, #268]	; 0x10c
 800ee60:	46aa      	mov	sl, r5
 800ee62:	f89a 3000 	ldrb.w	r3, [sl]
 800ee66:	2b67      	cmp	r3, #103	; 0x67
 800ee68:	f10a 0501 	add.w	r5, sl, #1
 800ee6c:	d84a      	bhi.n	800ef04 <__ssvfiscanf_r+0x134>
 800ee6e:	2b65      	cmp	r3, #101	; 0x65
 800ee70:	f080 80b7 	bcs.w	800efe2 <__ssvfiscanf_r+0x212>
 800ee74:	2b47      	cmp	r3, #71	; 0x47
 800ee76:	d82f      	bhi.n	800eed8 <__ssvfiscanf_r+0x108>
 800ee78:	2b45      	cmp	r3, #69	; 0x45
 800ee7a:	f080 80b2 	bcs.w	800efe2 <__ssvfiscanf_r+0x212>
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f000 8082 	beq.w	800ef88 <__ssvfiscanf_r+0x1b8>
 800ee84:	2b25      	cmp	r3, #37	; 0x25
 800ee86:	d066      	beq.n	800ef56 <__ssvfiscanf_r+0x186>
 800ee88:	2303      	movs	r3, #3
 800ee8a:	9349      	str	r3, [sp, #292]	; 0x124
 800ee8c:	9744      	str	r7, [sp, #272]	; 0x110
 800ee8e:	e045      	b.n	800ef1c <__ssvfiscanf_r+0x14c>
 800ee90:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800ee92:	3101      	adds	r1, #1
 800ee94:	9147      	str	r1, [sp, #284]	; 0x11c
 800ee96:	6861      	ldr	r1, [r4, #4]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	3901      	subs	r1, #1
 800ee9c:	6061      	str	r1, [r4, #4]
 800ee9e:	6023      	str	r3, [r4, #0]
 800eea0:	6863      	ldr	r3, [r4, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	dd0b      	ble.n	800eebe <__ssvfiscanf_r+0xee>
 800eea6:	f000 fbdf 	bl	800f668 <__locale_ctype_ptr>
 800eeaa:	6823      	ldr	r3, [r4, #0]
 800eeac:	7819      	ldrb	r1, [r3, #0]
 800eeae:	4408      	add	r0, r1
 800eeb0:	7841      	ldrb	r1, [r0, #1]
 800eeb2:	070d      	lsls	r5, r1, #28
 800eeb4:	d4ec      	bmi.n	800ee90 <__ssvfiscanf_r+0xc0>
 800eeb6:	f10a 0501 	add.w	r5, sl, #1
 800eeba:	46aa      	mov	sl, r5
 800eebc:	e79e      	b.n	800edfc <__ssvfiscanf_r+0x2c>
 800eebe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800eec0:	4621      	mov	r1, r4
 800eec2:	4630      	mov	r0, r6
 800eec4:	4798      	blx	r3
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d0ed      	beq.n	800eea6 <__ssvfiscanf_r+0xd6>
 800eeca:	e7f4      	b.n	800eeb6 <__ssvfiscanf_r+0xe6>
 800eecc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800eece:	fb07 1303 	mla	r3, r7, r3, r1
 800eed2:	3b30      	subs	r3, #48	; 0x30
 800eed4:	9345      	str	r3, [sp, #276]	; 0x114
 800eed6:	e7af      	b.n	800ee38 <__ssvfiscanf_r+0x68>
 800eed8:	2b5b      	cmp	r3, #91	; 0x5b
 800eeda:	d061      	beq.n	800efa0 <__ssvfiscanf_r+0x1d0>
 800eedc:	d80c      	bhi.n	800eef8 <__ssvfiscanf_r+0x128>
 800eede:	2b58      	cmp	r3, #88	; 0x58
 800eee0:	d1d2      	bne.n	800ee88 <__ssvfiscanf_r+0xb8>
 800eee2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800eee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eee8:	9243      	str	r2, [sp, #268]	; 0x10c
 800eeea:	2210      	movs	r2, #16
 800eeec:	9244      	str	r2, [sp, #272]	; 0x110
 800eeee:	2b6f      	cmp	r3, #111	; 0x6f
 800eef0:	bfb4      	ite	lt
 800eef2:	2303      	movlt	r3, #3
 800eef4:	2304      	movge	r3, #4
 800eef6:	e010      	b.n	800ef1a <__ssvfiscanf_r+0x14a>
 800eef8:	2b63      	cmp	r3, #99	; 0x63
 800eefa:	d05c      	beq.n	800efb6 <__ssvfiscanf_r+0x1e6>
 800eefc:	2b64      	cmp	r3, #100	; 0x64
 800eefe:	d1c3      	bne.n	800ee88 <__ssvfiscanf_r+0xb8>
 800ef00:	9744      	str	r7, [sp, #272]	; 0x110
 800ef02:	e7f4      	b.n	800eeee <__ssvfiscanf_r+0x11e>
 800ef04:	2b70      	cmp	r3, #112	; 0x70
 800ef06:	d042      	beq.n	800ef8e <__ssvfiscanf_r+0x1be>
 800ef08:	d81d      	bhi.n	800ef46 <__ssvfiscanf_r+0x176>
 800ef0a:	2b6e      	cmp	r3, #110	; 0x6e
 800ef0c:	d059      	beq.n	800efc2 <__ssvfiscanf_r+0x1f2>
 800ef0e:	d843      	bhi.n	800ef98 <__ssvfiscanf_r+0x1c8>
 800ef10:	2b69      	cmp	r3, #105	; 0x69
 800ef12:	d1b9      	bne.n	800ee88 <__ssvfiscanf_r+0xb8>
 800ef14:	2300      	movs	r3, #0
 800ef16:	9344      	str	r3, [sp, #272]	; 0x110
 800ef18:	2303      	movs	r3, #3
 800ef1a:	9349      	str	r3, [sp, #292]	; 0x124
 800ef1c:	6863      	ldr	r3, [r4, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	dd61      	ble.n	800efe6 <__ssvfiscanf_r+0x216>
 800ef22:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ef24:	0659      	lsls	r1, r3, #25
 800ef26:	d56f      	bpl.n	800f008 <__ssvfiscanf_r+0x238>
 800ef28:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	dc7c      	bgt.n	800f028 <__ssvfiscanf_r+0x258>
 800ef2e:	ab01      	add	r3, sp, #4
 800ef30:	4622      	mov	r2, r4
 800ef32:	a943      	add	r1, sp, #268	; 0x10c
 800ef34:	4630      	mov	r0, r6
 800ef36:	f000 f89f 	bl	800f078 <_scanf_chars>
 800ef3a:	2801      	cmp	r0, #1
 800ef3c:	f000 8092 	beq.w	800f064 <__ssvfiscanf_r+0x294>
 800ef40:	2802      	cmp	r0, #2
 800ef42:	d1ba      	bne.n	800eeba <__ssvfiscanf_r+0xea>
 800ef44:	e01d      	b.n	800ef82 <__ssvfiscanf_r+0x1b2>
 800ef46:	2b75      	cmp	r3, #117	; 0x75
 800ef48:	d0da      	beq.n	800ef00 <__ssvfiscanf_r+0x130>
 800ef4a:	2b78      	cmp	r3, #120	; 0x78
 800ef4c:	d0c9      	beq.n	800eee2 <__ssvfiscanf_r+0x112>
 800ef4e:	2b73      	cmp	r3, #115	; 0x73
 800ef50:	d19a      	bne.n	800ee88 <__ssvfiscanf_r+0xb8>
 800ef52:	2302      	movs	r3, #2
 800ef54:	e7e1      	b.n	800ef1a <__ssvfiscanf_r+0x14a>
 800ef56:	6863      	ldr	r3, [r4, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	dd0c      	ble.n	800ef76 <__ssvfiscanf_r+0x1a6>
 800ef5c:	6823      	ldr	r3, [r4, #0]
 800ef5e:	781a      	ldrb	r2, [r3, #0]
 800ef60:	4593      	cmp	fp, r2
 800ef62:	d17f      	bne.n	800f064 <__ssvfiscanf_r+0x294>
 800ef64:	3301      	adds	r3, #1
 800ef66:	6862      	ldr	r2, [r4, #4]
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ef6c:	3a01      	subs	r2, #1
 800ef6e:	3301      	adds	r3, #1
 800ef70:	6062      	str	r2, [r4, #4]
 800ef72:	9347      	str	r3, [sp, #284]	; 0x11c
 800ef74:	e7a1      	b.n	800eeba <__ssvfiscanf_r+0xea>
 800ef76:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ef78:	4621      	mov	r1, r4
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	4798      	blx	r3
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d0ec      	beq.n	800ef5c <__ssvfiscanf_r+0x18c>
 800ef82:	9846      	ldr	r0, [sp, #280]	; 0x118
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d163      	bne.n	800f050 <__ssvfiscanf_r+0x280>
 800ef88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef8c:	e066      	b.n	800f05c <__ssvfiscanf_r+0x28c>
 800ef8e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ef90:	f042 0220 	orr.w	r2, r2, #32
 800ef94:	9243      	str	r2, [sp, #268]	; 0x10c
 800ef96:	e7a4      	b.n	800eee2 <__ssvfiscanf_r+0x112>
 800ef98:	2308      	movs	r3, #8
 800ef9a:	9344      	str	r3, [sp, #272]	; 0x110
 800ef9c:	2304      	movs	r3, #4
 800ef9e:	e7bc      	b.n	800ef1a <__ssvfiscanf_r+0x14a>
 800efa0:	4629      	mov	r1, r5
 800efa2:	4640      	mov	r0, r8
 800efa4:	f000 f9d0 	bl	800f348 <__sccl>
 800efa8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800efaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efae:	9343      	str	r3, [sp, #268]	; 0x10c
 800efb0:	4605      	mov	r5, r0
 800efb2:	2301      	movs	r3, #1
 800efb4:	e7b1      	b.n	800ef1a <__ssvfiscanf_r+0x14a>
 800efb6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800efb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efbc:	9343      	str	r3, [sp, #268]	; 0x10c
 800efbe:	2300      	movs	r3, #0
 800efc0:	e7ab      	b.n	800ef1a <__ssvfiscanf_r+0x14a>
 800efc2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800efc4:	06d0      	lsls	r0, r2, #27
 800efc6:	f53f af78 	bmi.w	800eeba <__ssvfiscanf_r+0xea>
 800efca:	f012 0f01 	tst.w	r2, #1
 800efce:	9a01      	ldr	r2, [sp, #4]
 800efd0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800efd2:	f102 0104 	add.w	r1, r2, #4
 800efd6:	9101      	str	r1, [sp, #4]
 800efd8:	6812      	ldr	r2, [r2, #0]
 800efda:	bf14      	ite	ne
 800efdc:	8013      	strhne	r3, [r2, #0]
 800efde:	6013      	streq	r3, [r2, #0]
 800efe0:	e76b      	b.n	800eeba <__ssvfiscanf_r+0xea>
 800efe2:	2305      	movs	r3, #5
 800efe4:	e799      	b.n	800ef1a <__ssvfiscanf_r+0x14a>
 800efe6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800efe8:	4621      	mov	r1, r4
 800efea:	4630      	mov	r0, r6
 800efec:	4798      	blx	r3
 800efee:	2800      	cmp	r0, #0
 800eff0:	d097      	beq.n	800ef22 <__ssvfiscanf_r+0x152>
 800eff2:	e7c6      	b.n	800ef82 <__ssvfiscanf_r+0x1b2>
 800eff4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800eff6:	3201      	adds	r2, #1
 800eff8:	9247      	str	r2, [sp, #284]	; 0x11c
 800effa:	6862      	ldr	r2, [r4, #4]
 800effc:	3a01      	subs	r2, #1
 800effe:	2a00      	cmp	r2, #0
 800f000:	6062      	str	r2, [r4, #4]
 800f002:	dd0a      	ble.n	800f01a <__ssvfiscanf_r+0x24a>
 800f004:	3301      	adds	r3, #1
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	f000 fb2e 	bl	800f668 <__locale_ctype_ptr>
 800f00c:	6823      	ldr	r3, [r4, #0]
 800f00e:	781a      	ldrb	r2, [r3, #0]
 800f010:	4410      	add	r0, r2
 800f012:	7842      	ldrb	r2, [r0, #1]
 800f014:	0712      	lsls	r2, r2, #28
 800f016:	d4ed      	bmi.n	800eff4 <__ssvfiscanf_r+0x224>
 800f018:	e786      	b.n	800ef28 <__ssvfiscanf_r+0x158>
 800f01a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800f01c:	4621      	mov	r1, r4
 800f01e:	4630      	mov	r0, r6
 800f020:	4798      	blx	r3
 800f022:	2800      	cmp	r0, #0
 800f024:	d0f0      	beq.n	800f008 <__ssvfiscanf_r+0x238>
 800f026:	e7ac      	b.n	800ef82 <__ssvfiscanf_r+0x1b2>
 800f028:	2b04      	cmp	r3, #4
 800f02a:	dc06      	bgt.n	800f03a <__ssvfiscanf_r+0x26a>
 800f02c:	ab01      	add	r3, sp, #4
 800f02e:	4622      	mov	r2, r4
 800f030:	a943      	add	r1, sp, #268	; 0x10c
 800f032:	4630      	mov	r0, r6
 800f034:	f000 f884 	bl	800f140 <_scanf_i>
 800f038:	e77f      	b.n	800ef3a <__ssvfiscanf_r+0x16a>
 800f03a:	4b0e      	ldr	r3, [pc, #56]	; (800f074 <__ssvfiscanf_r+0x2a4>)
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f43f af3c 	beq.w	800eeba <__ssvfiscanf_r+0xea>
 800f042:	ab01      	add	r3, sp, #4
 800f044:	4622      	mov	r2, r4
 800f046:	a943      	add	r1, sp, #268	; 0x10c
 800f048:	4630      	mov	r0, r6
 800f04a:	f3af 8000 	nop.w
 800f04e:	e774      	b.n	800ef3a <__ssvfiscanf_r+0x16a>
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f056:	bf18      	it	ne
 800f058:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800f05c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800f060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f064:	9846      	ldr	r0, [sp, #280]	; 0x118
 800f066:	e7f9      	b.n	800f05c <__ssvfiscanf_r+0x28c>
 800f068:	0800ed1d 	.word	0x0800ed1d
 800f06c:	0800ed97 	.word	0x0800ed97
 800f070:	08010120 	.word	0x08010120
 800f074:	00000000 	.word	0x00000000

0800f078 <_scanf_chars>:
 800f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07c:	4615      	mov	r5, r2
 800f07e:	688a      	ldr	r2, [r1, #8]
 800f080:	4680      	mov	r8, r0
 800f082:	460c      	mov	r4, r1
 800f084:	b932      	cbnz	r2, 800f094 <_scanf_chars+0x1c>
 800f086:	698a      	ldr	r2, [r1, #24]
 800f088:	2a00      	cmp	r2, #0
 800f08a:	bf0c      	ite	eq
 800f08c:	2201      	moveq	r2, #1
 800f08e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800f092:	608a      	str	r2, [r1, #8]
 800f094:	6822      	ldr	r2, [r4, #0]
 800f096:	06d1      	lsls	r1, r2, #27
 800f098:	bf5f      	itttt	pl
 800f09a:	681a      	ldrpl	r2, [r3, #0]
 800f09c:	1d11      	addpl	r1, r2, #4
 800f09e:	6019      	strpl	r1, [r3, #0]
 800f0a0:	6817      	ldrpl	r7, [r2, #0]
 800f0a2:	2600      	movs	r6, #0
 800f0a4:	69a3      	ldr	r3, [r4, #24]
 800f0a6:	b1db      	cbz	r3, 800f0e0 <_scanf_chars+0x68>
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d107      	bne.n	800f0bc <_scanf_chars+0x44>
 800f0ac:	682b      	ldr	r3, [r5, #0]
 800f0ae:	6962      	ldr	r2, [r4, #20]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	5cd3      	ldrb	r3, [r2, r3]
 800f0b4:	b9a3      	cbnz	r3, 800f0e0 <_scanf_chars+0x68>
 800f0b6:	2e00      	cmp	r6, #0
 800f0b8:	d132      	bne.n	800f120 <_scanf_chars+0xa8>
 800f0ba:	e006      	b.n	800f0ca <_scanf_chars+0x52>
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d007      	beq.n	800f0d0 <_scanf_chars+0x58>
 800f0c0:	2e00      	cmp	r6, #0
 800f0c2:	d12d      	bne.n	800f120 <_scanf_chars+0xa8>
 800f0c4:	69a3      	ldr	r3, [r4, #24]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d12a      	bne.n	800f120 <_scanf_chars+0xa8>
 800f0ca:	2001      	movs	r0, #1
 800f0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d0:	f000 faca 	bl	800f668 <__locale_ctype_ptr>
 800f0d4:	682b      	ldr	r3, [r5, #0]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	4418      	add	r0, r3
 800f0da:	7843      	ldrb	r3, [r0, #1]
 800f0dc:	071b      	lsls	r3, r3, #28
 800f0de:	d4ef      	bmi.n	800f0c0 <_scanf_chars+0x48>
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	06da      	lsls	r2, r3, #27
 800f0e4:	bf5e      	ittt	pl
 800f0e6:	682b      	ldrpl	r3, [r5, #0]
 800f0e8:	781b      	ldrbpl	r3, [r3, #0]
 800f0ea:	703b      	strbpl	r3, [r7, #0]
 800f0ec:	682a      	ldr	r2, [r5, #0]
 800f0ee:	686b      	ldr	r3, [r5, #4]
 800f0f0:	f102 0201 	add.w	r2, r2, #1
 800f0f4:	602a      	str	r2, [r5, #0]
 800f0f6:	68a2      	ldr	r2, [r4, #8]
 800f0f8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f0fc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f100:	606b      	str	r3, [r5, #4]
 800f102:	f106 0601 	add.w	r6, r6, #1
 800f106:	bf58      	it	pl
 800f108:	3701      	addpl	r7, #1
 800f10a:	60a2      	str	r2, [r4, #8]
 800f10c:	b142      	cbz	r2, 800f120 <_scanf_chars+0xa8>
 800f10e:	2b00      	cmp	r3, #0
 800f110:	dcc8      	bgt.n	800f0a4 <_scanf_chars+0x2c>
 800f112:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f116:	4629      	mov	r1, r5
 800f118:	4640      	mov	r0, r8
 800f11a:	4798      	blx	r3
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d0c1      	beq.n	800f0a4 <_scanf_chars+0x2c>
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	f013 0310 	ands.w	r3, r3, #16
 800f126:	d105      	bne.n	800f134 <_scanf_chars+0xbc>
 800f128:	68e2      	ldr	r2, [r4, #12]
 800f12a:	3201      	adds	r2, #1
 800f12c:	60e2      	str	r2, [r4, #12]
 800f12e:	69a2      	ldr	r2, [r4, #24]
 800f130:	b102      	cbz	r2, 800f134 <_scanf_chars+0xbc>
 800f132:	703b      	strb	r3, [r7, #0]
 800f134:	6923      	ldr	r3, [r4, #16]
 800f136:	441e      	add	r6, r3
 800f138:	6126      	str	r6, [r4, #16]
 800f13a:	2000      	movs	r0, #0
 800f13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f140 <_scanf_i>:
 800f140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f144:	469a      	mov	sl, r3
 800f146:	4b74      	ldr	r3, [pc, #464]	; (800f318 <_scanf_i+0x1d8>)
 800f148:	460c      	mov	r4, r1
 800f14a:	4683      	mov	fp, r0
 800f14c:	4616      	mov	r6, r2
 800f14e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f152:	b087      	sub	sp, #28
 800f154:	ab03      	add	r3, sp, #12
 800f156:	68a7      	ldr	r7, [r4, #8]
 800f158:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f15c:	4b6f      	ldr	r3, [pc, #444]	; (800f31c <_scanf_i+0x1dc>)
 800f15e:	69a1      	ldr	r1, [r4, #24]
 800f160:	4a6f      	ldr	r2, [pc, #444]	; (800f320 <_scanf_i+0x1e0>)
 800f162:	2903      	cmp	r1, #3
 800f164:	bf18      	it	ne
 800f166:	461a      	movne	r2, r3
 800f168:	1e7b      	subs	r3, r7, #1
 800f16a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800f16e:	bf84      	itt	hi
 800f170:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f174:	60a3      	strhi	r3, [r4, #8]
 800f176:	6823      	ldr	r3, [r4, #0]
 800f178:	9200      	str	r2, [sp, #0]
 800f17a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f17e:	bf88      	it	hi
 800f180:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f184:	f104 091c 	add.w	r9, r4, #28
 800f188:	6023      	str	r3, [r4, #0]
 800f18a:	bf8c      	ite	hi
 800f18c:	197f      	addhi	r7, r7, r5
 800f18e:	2700      	movls	r7, #0
 800f190:	464b      	mov	r3, r9
 800f192:	f04f 0800 	mov.w	r8, #0
 800f196:	9301      	str	r3, [sp, #4]
 800f198:	6831      	ldr	r1, [r6, #0]
 800f19a:	ab03      	add	r3, sp, #12
 800f19c:	2202      	movs	r2, #2
 800f19e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f1a2:	7809      	ldrb	r1, [r1, #0]
 800f1a4:	f7f1 f81c 	bl	80001e0 <memchr>
 800f1a8:	9b01      	ldr	r3, [sp, #4]
 800f1aa:	b328      	cbz	r0, 800f1f8 <_scanf_i+0xb8>
 800f1ac:	f1b8 0f01 	cmp.w	r8, #1
 800f1b0:	d156      	bne.n	800f260 <_scanf_i+0x120>
 800f1b2:	6862      	ldr	r2, [r4, #4]
 800f1b4:	b92a      	cbnz	r2, 800f1c2 <_scanf_i+0x82>
 800f1b6:	2208      	movs	r2, #8
 800f1b8:	6062      	str	r2, [r4, #4]
 800f1ba:	6822      	ldr	r2, [r4, #0]
 800f1bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f1c0:	6022      	str	r2, [r4, #0]
 800f1c2:	6822      	ldr	r2, [r4, #0]
 800f1c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f1c8:	6022      	str	r2, [r4, #0]
 800f1ca:	68a2      	ldr	r2, [r4, #8]
 800f1cc:	1e51      	subs	r1, r2, #1
 800f1ce:	60a1      	str	r1, [r4, #8]
 800f1d0:	b192      	cbz	r2, 800f1f8 <_scanf_i+0xb8>
 800f1d2:	6832      	ldr	r2, [r6, #0]
 800f1d4:	1c51      	adds	r1, r2, #1
 800f1d6:	6031      	str	r1, [r6, #0]
 800f1d8:	7812      	ldrb	r2, [r2, #0]
 800f1da:	701a      	strb	r2, [r3, #0]
 800f1dc:	1c5d      	adds	r5, r3, #1
 800f1de:	6873      	ldr	r3, [r6, #4]
 800f1e0:	3b01      	subs	r3, #1
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	6073      	str	r3, [r6, #4]
 800f1e6:	dc06      	bgt.n	800f1f6 <_scanf_i+0xb6>
 800f1e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	4658      	mov	r0, fp
 800f1f0:	4798      	blx	r3
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	d176      	bne.n	800f2e4 <_scanf_i+0x1a4>
 800f1f6:	462b      	mov	r3, r5
 800f1f8:	f108 0801 	add.w	r8, r8, #1
 800f1fc:	f1b8 0f03 	cmp.w	r8, #3
 800f200:	d1c9      	bne.n	800f196 <_scanf_i+0x56>
 800f202:	6862      	ldr	r2, [r4, #4]
 800f204:	b90a      	cbnz	r2, 800f20a <_scanf_i+0xca>
 800f206:	220a      	movs	r2, #10
 800f208:	6062      	str	r2, [r4, #4]
 800f20a:	6862      	ldr	r2, [r4, #4]
 800f20c:	4945      	ldr	r1, [pc, #276]	; (800f324 <_scanf_i+0x1e4>)
 800f20e:	6960      	ldr	r0, [r4, #20]
 800f210:	9301      	str	r3, [sp, #4]
 800f212:	1a89      	subs	r1, r1, r2
 800f214:	f000 f898 	bl	800f348 <__sccl>
 800f218:	9b01      	ldr	r3, [sp, #4]
 800f21a:	f04f 0800 	mov.w	r8, #0
 800f21e:	461d      	mov	r5, r3
 800f220:	68a3      	ldr	r3, [r4, #8]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d038      	beq.n	800f298 <_scanf_i+0x158>
 800f226:	6831      	ldr	r1, [r6, #0]
 800f228:	6960      	ldr	r0, [r4, #20]
 800f22a:	780a      	ldrb	r2, [r1, #0]
 800f22c:	5c80      	ldrb	r0, [r0, r2]
 800f22e:	2800      	cmp	r0, #0
 800f230:	d032      	beq.n	800f298 <_scanf_i+0x158>
 800f232:	2a30      	cmp	r2, #48	; 0x30
 800f234:	6822      	ldr	r2, [r4, #0]
 800f236:	d121      	bne.n	800f27c <_scanf_i+0x13c>
 800f238:	0510      	lsls	r0, r2, #20
 800f23a:	d51f      	bpl.n	800f27c <_scanf_i+0x13c>
 800f23c:	f108 0801 	add.w	r8, r8, #1
 800f240:	b117      	cbz	r7, 800f248 <_scanf_i+0x108>
 800f242:	3301      	adds	r3, #1
 800f244:	3f01      	subs	r7, #1
 800f246:	60a3      	str	r3, [r4, #8]
 800f248:	6873      	ldr	r3, [r6, #4]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	6073      	str	r3, [r6, #4]
 800f250:	dd1b      	ble.n	800f28a <_scanf_i+0x14a>
 800f252:	6833      	ldr	r3, [r6, #0]
 800f254:	3301      	adds	r3, #1
 800f256:	6033      	str	r3, [r6, #0]
 800f258:	68a3      	ldr	r3, [r4, #8]
 800f25a:	3b01      	subs	r3, #1
 800f25c:	60a3      	str	r3, [r4, #8]
 800f25e:	e7df      	b.n	800f220 <_scanf_i+0xe0>
 800f260:	f1b8 0f02 	cmp.w	r8, #2
 800f264:	d1b1      	bne.n	800f1ca <_scanf_i+0x8a>
 800f266:	6822      	ldr	r2, [r4, #0]
 800f268:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f26c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f270:	d1c2      	bne.n	800f1f8 <_scanf_i+0xb8>
 800f272:	2110      	movs	r1, #16
 800f274:	6061      	str	r1, [r4, #4]
 800f276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f27a:	e7a5      	b.n	800f1c8 <_scanf_i+0x88>
 800f27c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f280:	6022      	str	r2, [r4, #0]
 800f282:	780b      	ldrb	r3, [r1, #0]
 800f284:	702b      	strb	r3, [r5, #0]
 800f286:	3501      	adds	r5, #1
 800f288:	e7de      	b.n	800f248 <_scanf_i+0x108>
 800f28a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f28e:	4631      	mov	r1, r6
 800f290:	4658      	mov	r0, fp
 800f292:	4798      	blx	r3
 800f294:	2800      	cmp	r0, #0
 800f296:	d0df      	beq.n	800f258 <_scanf_i+0x118>
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	05d9      	lsls	r1, r3, #23
 800f29c:	d50c      	bpl.n	800f2b8 <_scanf_i+0x178>
 800f29e:	454d      	cmp	r5, r9
 800f2a0:	d908      	bls.n	800f2b4 <_scanf_i+0x174>
 800f2a2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f2a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2aa:	4632      	mov	r2, r6
 800f2ac:	4658      	mov	r0, fp
 800f2ae:	4798      	blx	r3
 800f2b0:	1e6f      	subs	r7, r5, #1
 800f2b2:	463d      	mov	r5, r7
 800f2b4:	454d      	cmp	r5, r9
 800f2b6:	d02c      	beq.n	800f312 <_scanf_i+0x1d2>
 800f2b8:	6822      	ldr	r2, [r4, #0]
 800f2ba:	f012 0210 	ands.w	r2, r2, #16
 800f2be:	d11e      	bne.n	800f2fe <_scanf_i+0x1be>
 800f2c0:	702a      	strb	r2, [r5, #0]
 800f2c2:	6863      	ldr	r3, [r4, #4]
 800f2c4:	9e00      	ldr	r6, [sp, #0]
 800f2c6:	4649      	mov	r1, r9
 800f2c8:	4658      	mov	r0, fp
 800f2ca:	47b0      	blx	r6
 800f2cc:	6822      	ldr	r2, [r4, #0]
 800f2ce:	f8da 3000 	ldr.w	r3, [sl]
 800f2d2:	f012 0f20 	tst.w	r2, #32
 800f2d6:	d008      	beq.n	800f2ea <_scanf_i+0x1aa>
 800f2d8:	1d1a      	adds	r2, r3, #4
 800f2da:	f8ca 2000 	str.w	r2, [sl]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	6018      	str	r0, [r3, #0]
 800f2e2:	e009      	b.n	800f2f8 <_scanf_i+0x1b8>
 800f2e4:	f04f 0800 	mov.w	r8, #0
 800f2e8:	e7d6      	b.n	800f298 <_scanf_i+0x158>
 800f2ea:	07d2      	lsls	r2, r2, #31
 800f2ec:	d5f4      	bpl.n	800f2d8 <_scanf_i+0x198>
 800f2ee:	1d1a      	adds	r2, r3, #4
 800f2f0:	f8ca 2000 	str.w	r2, [sl]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	8018      	strh	r0, [r3, #0]
 800f2f8:	68e3      	ldr	r3, [r4, #12]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	60e3      	str	r3, [r4, #12]
 800f2fe:	eba5 0509 	sub.w	r5, r5, r9
 800f302:	44a8      	add	r8, r5
 800f304:	6925      	ldr	r5, [r4, #16]
 800f306:	4445      	add	r5, r8
 800f308:	6125      	str	r5, [r4, #16]
 800f30a:	2000      	movs	r0, #0
 800f30c:	b007      	add	sp, #28
 800f30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f312:	2001      	movs	r0, #1
 800f314:	e7fa      	b.n	800f30c <_scanf_i+0x1cc>
 800f316:	bf00      	nop
 800f318:	0800fca4 	.word	0x0800fca4
 800f31c:	0800f5c9 	.word	0x0800f5c9
 800f320:	0800f4a9 	.word	0x0800f4a9
 800f324:	08010134 	.word	0x08010134

0800f328 <_sbrk_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	4c06      	ldr	r4, [pc, #24]	; (800f344 <_sbrk_r+0x1c>)
 800f32c:	2300      	movs	r3, #0
 800f32e:	4605      	mov	r5, r0
 800f330:	4608      	mov	r0, r1
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	f7fc f9f0 	bl	800b718 <_sbrk>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_sbrk_r+0x1a>
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_sbrk_r+0x1a>
 800f340:	602b      	str	r3, [r5, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	20001ad0 	.word	0x20001ad0

0800f348 <__sccl>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	780b      	ldrb	r3, [r1, #0]
 800f34c:	2b5e      	cmp	r3, #94	; 0x5e
 800f34e:	bf13      	iteet	ne
 800f350:	1c4a      	addne	r2, r1, #1
 800f352:	1c8a      	addeq	r2, r1, #2
 800f354:	784b      	ldrbeq	r3, [r1, #1]
 800f356:	2100      	movne	r1, #0
 800f358:	bf08      	it	eq
 800f35a:	2101      	moveq	r1, #1
 800f35c:	1e44      	subs	r4, r0, #1
 800f35e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800f362:	f804 1f01 	strb.w	r1, [r4, #1]!
 800f366:	42a5      	cmp	r5, r4
 800f368:	d1fb      	bne.n	800f362 <__sccl+0x1a>
 800f36a:	b913      	cbnz	r3, 800f372 <__sccl+0x2a>
 800f36c:	3a01      	subs	r2, #1
 800f36e:	4610      	mov	r0, r2
 800f370:	bd70      	pop	{r4, r5, r6, pc}
 800f372:	f081 0401 	eor.w	r4, r1, #1
 800f376:	54c4      	strb	r4, [r0, r3]
 800f378:	4611      	mov	r1, r2
 800f37a:	780d      	ldrb	r5, [r1, #0]
 800f37c:	2d2d      	cmp	r5, #45	; 0x2d
 800f37e:	f101 0201 	add.w	r2, r1, #1
 800f382:	d006      	beq.n	800f392 <__sccl+0x4a>
 800f384:	2d5d      	cmp	r5, #93	; 0x5d
 800f386:	d0f2      	beq.n	800f36e <__sccl+0x26>
 800f388:	b90d      	cbnz	r5, 800f38e <__sccl+0x46>
 800f38a:	460a      	mov	r2, r1
 800f38c:	e7ef      	b.n	800f36e <__sccl+0x26>
 800f38e:	462b      	mov	r3, r5
 800f390:	e7f1      	b.n	800f376 <__sccl+0x2e>
 800f392:	784e      	ldrb	r6, [r1, #1]
 800f394:	2e5d      	cmp	r6, #93	; 0x5d
 800f396:	d0fa      	beq.n	800f38e <__sccl+0x46>
 800f398:	42b3      	cmp	r3, r6
 800f39a:	dcf8      	bgt.n	800f38e <__sccl+0x46>
 800f39c:	3102      	adds	r1, #2
 800f39e:	3301      	adds	r3, #1
 800f3a0:	429e      	cmp	r6, r3
 800f3a2:	54c4      	strb	r4, [r0, r3]
 800f3a4:	dcfb      	bgt.n	800f39e <__sccl+0x56>
 800f3a6:	e7e8      	b.n	800f37a <__sccl+0x32>

0800f3a8 <_strtol_l.isra.0>:
 800f3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ac:	4680      	mov	r8, r0
 800f3ae:	4689      	mov	r9, r1
 800f3b0:	4692      	mov	sl, r2
 800f3b2:	461f      	mov	r7, r3
 800f3b4:	468b      	mov	fp, r1
 800f3b6:	465d      	mov	r5, fp
 800f3b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f3ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f3be:	f000 f950 	bl	800f662 <__locale_ctype_ptr_l>
 800f3c2:	4420      	add	r0, r4
 800f3c4:	7846      	ldrb	r6, [r0, #1]
 800f3c6:	f016 0608 	ands.w	r6, r6, #8
 800f3ca:	d10b      	bne.n	800f3e4 <_strtol_l.isra.0+0x3c>
 800f3cc:	2c2d      	cmp	r4, #45	; 0x2d
 800f3ce:	d10b      	bne.n	800f3e8 <_strtol_l.isra.0+0x40>
 800f3d0:	782c      	ldrb	r4, [r5, #0]
 800f3d2:	2601      	movs	r6, #1
 800f3d4:	f10b 0502 	add.w	r5, fp, #2
 800f3d8:	b167      	cbz	r7, 800f3f4 <_strtol_l.isra.0+0x4c>
 800f3da:	2f10      	cmp	r7, #16
 800f3dc:	d114      	bne.n	800f408 <_strtol_l.isra.0+0x60>
 800f3de:	2c30      	cmp	r4, #48	; 0x30
 800f3e0:	d00a      	beq.n	800f3f8 <_strtol_l.isra.0+0x50>
 800f3e2:	e011      	b.n	800f408 <_strtol_l.isra.0+0x60>
 800f3e4:	46ab      	mov	fp, r5
 800f3e6:	e7e6      	b.n	800f3b6 <_strtol_l.isra.0+0xe>
 800f3e8:	2c2b      	cmp	r4, #43	; 0x2b
 800f3ea:	bf04      	itt	eq
 800f3ec:	782c      	ldrbeq	r4, [r5, #0]
 800f3ee:	f10b 0502 	addeq.w	r5, fp, #2
 800f3f2:	e7f1      	b.n	800f3d8 <_strtol_l.isra.0+0x30>
 800f3f4:	2c30      	cmp	r4, #48	; 0x30
 800f3f6:	d127      	bne.n	800f448 <_strtol_l.isra.0+0xa0>
 800f3f8:	782b      	ldrb	r3, [r5, #0]
 800f3fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f3fe:	2b58      	cmp	r3, #88	; 0x58
 800f400:	d14b      	bne.n	800f49a <_strtol_l.isra.0+0xf2>
 800f402:	786c      	ldrb	r4, [r5, #1]
 800f404:	2710      	movs	r7, #16
 800f406:	3502      	adds	r5, #2
 800f408:	2e00      	cmp	r6, #0
 800f40a:	bf0c      	ite	eq
 800f40c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f410:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f414:	2200      	movs	r2, #0
 800f416:	fbb1 fef7 	udiv	lr, r1, r7
 800f41a:	4610      	mov	r0, r2
 800f41c:	fb07 1c1e 	mls	ip, r7, lr, r1
 800f420:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f424:	2b09      	cmp	r3, #9
 800f426:	d811      	bhi.n	800f44c <_strtol_l.isra.0+0xa4>
 800f428:	461c      	mov	r4, r3
 800f42a:	42a7      	cmp	r7, r4
 800f42c:	dd1d      	ble.n	800f46a <_strtol_l.isra.0+0xc2>
 800f42e:	1c53      	adds	r3, r2, #1
 800f430:	d007      	beq.n	800f442 <_strtol_l.isra.0+0x9a>
 800f432:	4586      	cmp	lr, r0
 800f434:	d316      	bcc.n	800f464 <_strtol_l.isra.0+0xbc>
 800f436:	d101      	bne.n	800f43c <_strtol_l.isra.0+0x94>
 800f438:	45a4      	cmp	ip, r4
 800f43a:	db13      	blt.n	800f464 <_strtol_l.isra.0+0xbc>
 800f43c:	fb00 4007 	mla	r0, r0, r7, r4
 800f440:	2201      	movs	r2, #1
 800f442:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f446:	e7eb      	b.n	800f420 <_strtol_l.isra.0+0x78>
 800f448:	270a      	movs	r7, #10
 800f44a:	e7dd      	b.n	800f408 <_strtol_l.isra.0+0x60>
 800f44c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f450:	2b19      	cmp	r3, #25
 800f452:	d801      	bhi.n	800f458 <_strtol_l.isra.0+0xb0>
 800f454:	3c37      	subs	r4, #55	; 0x37
 800f456:	e7e8      	b.n	800f42a <_strtol_l.isra.0+0x82>
 800f458:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f45c:	2b19      	cmp	r3, #25
 800f45e:	d804      	bhi.n	800f46a <_strtol_l.isra.0+0xc2>
 800f460:	3c57      	subs	r4, #87	; 0x57
 800f462:	e7e2      	b.n	800f42a <_strtol_l.isra.0+0x82>
 800f464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f468:	e7eb      	b.n	800f442 <_strtol_l.isra.0+0x9a>
 800f46a:	1c53      	adds	r3, r2, #1
 800f46c:	d108      	bne.n	800f480 <_strtol_l.isra.0+0xd8>
 800f46e:	2322      	movs	r3, #34	; 0x22
 800f470:	f8c8 3000 	str.w	r3, [r8]
 800f474:	4608      	mov	r0, r1
 800f476:	f1ba 0f00 	cmp.w	sl, #0
 800f47a:	d107      	bne.n	800f48c <_strtol_l.isra.0+0xe4>
 800f47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f480:	b106      	cbz	r6, 800f484 <_strtol_l.isra.0+0xdc>
 800f482:	4240      	negs	r0, r0
 800f484:	f1ba 0f00 	cmp.w	sl, #0
 800f488:	d00c      	beq.n	800f4a4 <_strtol_l.isra.0+0xfc>
 800f48a:	b122      	cbz	r2, 800f496 <_strtol_l.isra.0+0xee>
 800f48c:	3d01      	subs	r5, #1
 800f48e:	f8ca 5000 	str.w	r5, [sl]
 800f492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f496:	464d      	mov	r5, r9
 800f498:	e7f9      	b.n	800f48e <_strtol_l.isra.0+0xe6>
 800f49a:	2430      	movs	r4, #48	; 0x30
 800f49c:	2f00      	cmp	r7, #0
 800f49e:	d1b3      	bne.n	800f408 <_strtol_l.isra.0+0x60>
 800f4a0:	2708      	movs	r7, #8
 800f4a2:	e7b1      	b.n	800f408 <_strtol_l.isra.0+0x60>
 800f4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4a8 <_strtol_r>:
 800f4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4aa:	4c06      	ldr	r4, [pc, #24]	; (800f4c4 <_strtol_r+0x1c>)
 800f4ac:	4d06      	ldr	r5, [pc, #24]	; (800f4c8 <_strtol_r+0x20>)
 800f4ae:	6824      	ldr	r4, [r4, #0]
 800f4b0:	6a24      	ldr	r4, [r4, #32]
 800f4b2:	2c00      	cmp	r4, #0
 800f4b4:	bf08      	it	eq
 800f4b6:	462c      	moveq	r4, r5
 800f4b8:	9400      	str	r4, [sp, #0]
 800f4ba:	f7ff ff75 	bl	800f3a8 <_strtol_l.isra.0>
 800f4be:	b003      	add	sp, #12
 800f4c0:	bd30      	pop	{r4, r5, pc}
 800f4c2:	bf00      	nop
 800f4c4:	20000134 	.word	0x20000134
 800f4c8:	20000198 	.word	0x20000198

0800f4cc <_strtoul_l.isra.0>:
 800f4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d0:	4680      	mov	r8, r0
 800f4d2:	4689      	mov	r9, r1
 800f4d4:	4692      	mov	sl, r2
 800f4d6:	461e      	mov	r6, r3
 800f4d8:	460f      	mov	r7, r1
 800f4da:	463d      	mov	r5, r7
 800f4dc:	9808      	ldr	r0, [sp, #32]
 800f4de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4e2:	f000 f8be 	bl	800f662 <__locale_ctype_ptr_l>
 800f4e6:	4420      	add	r0, r4
 800f4e8:	7843      	ldrb	r3, [r0, #1]
 800f4ea:	f013 0308 	ands.w	r3, r3, #8
 800f4ee:	d10a      	bne.n	800f506 <_strtoul_l.isra.0+0x3a>
 800f4f0:	2c2d      	cmp	r4, #45	; 0x2d
 800f4f2:	d10a      	bne.n	800f50a <_strtoul_l.isra.0+0x3e>
 800f4f4:	782c      	ldrb	r4, [r5, #0]
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	1cbd      	adds	r5, r7, #2
 800f4fa:	b15e      	cbz	r6, 800f514 <_strtoul_l.isra.0+0x48>
 800f4fc:	2e10      	cmp	r6, #16
 800f4fe:	d113      	bne.n	800f528 <_strtoul_l.isra.0+0x5c>
 800f500:	2c30      	cmp	r4, #48	; 0x30
 800f502:	d009      	beq.n	800f518 <_strtoul_l.isra.0+0x4c>
 800f504:	e010      	b.n	800f528 <_strtoul_l.isra.0+0x5c>
 800f506:	462f      	mov	r7, r5
 800f508:	e7e7      	b.n	800f4da <_strtoul_l.isra.0+0xe>
 800f50a:	2c2b      	cmp	r4, #43	; 0x2b
 800f50c:	bf04      	itt	eq
 800f50e:	782c      	ldrbeq	r4, [r5, #0]
 800f510:	1cbd      	addeq	r5, r7, #2
 800f512:	e7f2      	b.n	800f4fa <_strtoul_l.isra.0+0x2e>
 800f514:	2c30      	cmp	r4, #48	; 0x30
 800f516:	d125      	bne.n	800f564 <_strtoul_l.isra.0+0x98>
 800f518:	782a      	ldrb	r2, [r5, #0]
 800f51a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f51e:	2a58      	cmp	r2, #88	; 0x58
 800f520:	d14a      	bne.n	800f5b8 <_strtoul_l.isra.0+0xec>
 800f522:	786c      	ldrb	r4, [r5, #1]
 800f524:	2610      	movs	r6, #16
 800f526:	3502      	adds	r5, #2
 800f528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f52c:	2700      	movs	r7, #0
 800f52e:	fbb1 f1f6 	udiv	r1, r1, r6
 800f532:	fb06 fe01 	mul.w	lr, r6, r1
 800f536:	ea6f 0e0e 	mvn.w	lr, lr
 800f53a:	4638      	mov	r0, r7
 800f53c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800f540:	2a09      	cmp	r2, #9
 800f542:	d811      	bhi.n	800f568 <_strtoul_l.isra.0+0x9c>
 800f544:	4614      	mov	r4, r2
 800f546:	42a6      	cmp	r6, r4
 800f548:	dd1d      	ble.n	800f586 <_strtoul_l.isra.0+0xba>
 800f54a:	2f00      	cmp	r7, #0
 800f54c:	db18      	blt.n	800f580 <_strtoul_l.isra.0+0xb4>
 800f54e:	4281      	cmp	r1, r0
 800f550:	d316      	bcc.n	800f580 <_strtoul_l.isra.0+0xb4>
 800f552:	d101      	bne.n	800f558 <_strtoul_l.isra.0+0x8c>
 800f554:	45a6      	cmp	lr, r4
 800f556:	db13      	blt.n	800f580 <_strtoul_l.isra.0+0xb4>
 800f558:	fb00 4006 	mla	r0, r0, r6, r4
 800f55c:	2701      	movs	r7, #1
 800f55e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f562:	e7eb      	b.n	800f53c <_strtoul_l.isra.0+0x70>
 800f564:	260a      	movs	r6, #10
 800f566:	e7df      	b.n	800f528 <_strtoul_l.isra.0+0x5c>
 800f568:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800f56c:	2a19      	cmp	r2, #25
 800f56e:	d801      	bhi.n	800f574 <_strtoul_l.isra.0+0xa8>
 800f570:	3c37      	subs	r4, #55	; 0x37
 800f572:	e7e8      	b.n	800f546 <_strtoul_l.isra.0+0x7a>
 800f574:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800f578:	2a19      	cmp	r2, #25
 800f57a:	d804      	bhi.n	800f586 <_strtoul_l.isra.0+0xba>
 800f57c:	3c57      	subs	r4, #87	; 0x57
 800f57e:	e7e2      	b.n	800f546 <_strtoul_l.isra.0+0x7a>
 800f580:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f584:	e7eb      	b.n	800f55e <_strtoul_l.isra.0+0x92>
 800f586:	2f00      	cmp	r7, #0
 800f588:	da09      	bge.n	800f59e <_strtoul_l.isra.0+0xd2>
 800f58a:	2322      	movs	r3, #34	; 0x22
 800f58c:	f8c8 3000 	str.w	r3, [r8]
 800f590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f594:	f1ba 0f00 	cmp.w	sl, #0
 800f598:	d107      	bne.n	800f5aa <_strtoul_l.isra.0+0xde>
 800f59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f59e:	b103      	cbz	r3, 800f5a2 <_strtoul_l.isra.0+0xd6>
 800f5a0:	4240      	negs	r0, r0
 800f5a2:	f1ba 0f00 	cmp.w	sl, #0
 800f5a6:	d00c      	beq.n	800f5c2 <_strtoul_l.isra.0+0xf6>
 800f5a8:	b127      	cbz	r7, 800f5b4 <_strtoul_l.isra.0+0xe8>
 800f5aa:	3d01      	subs	r5, #1
 800f5ac:	f8ca 5000 	str.w	r5, [sl]
 800f5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5b4:	464d      	mov	r5, r9
 800f5b6:	e7f9      	b.n	800f5ac <_strtoul_l.isra.0+0xe0>
 800f5b8:	2430      	movs	r4, #48	; 0x30
 800f5ba:	2e00      	cmp	r6, #0
 800f5bc:	d1b4      	bne.n	800f528 <_strtoul_l.isra.0+0x5c>
 800f5be:	2608      	movs	r6, #8
 800f5c0:	e7b2      	b.n	800f528 <_strtoul_l.isra.0+0x5c>
 800f5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800f5c8 <_strtoul_r>:
 800f5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5ca:	4c06      	ldr	r4, [pc, #24]	; (800f5e4 <_strtoul_r+0x1c>)
 800f5cc:	4d06      	ldr	r5, [pc, #24]	; (800f5e8 <_strtoul_r+0x20>)
 800f5ce:	6824      	ldr	r4, [r4, #0]
 800f5d0:	6a24      	ldr	r4, [r4, #32]
 800f5d2:	2c00      	cmp	r4, #0
 800f5d4:	bf08      	it	eq
 800f5d6:	462c      	moveq	r4, r5
 800f5d8:	9400      	str	r4, [sp, #0]
 800f5da:	f7ff ff77 	bl	800f4cc <_strtoul_l.isra.0>
 800f5de:	b003      	add	sp, #12
 800f5e0:	bd30      	pop	{r4, r5, pc}
 800f5e2:	bf00      	nop
 800f5e4:	20000134 	.word	0x20000134
 800f5e8:	20000198 	.word	0x20000198

0800f5ec <__submore>:
 800f5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f0:	460c      	mov	r4, r1
 800f5f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5f8:	4299      	cmp	r1, r3
 800f5fa:	d11e      	bne.n	800f63a <__submore+0x4e>
 800f5fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f600:	f7ff fb08 	bl	800ec14 <_malloc_r>
 800f604:	b918      	cbnz	r0, 800f60e <__submore+0x22>
 800f606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f612:	63a3      	str	r3, [r4, #56]	; 0x38
 800f614:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f618:	6360      	str	r0, [r4, #52]	; 0x34
 800f61a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f61e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f622:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f626:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f62a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f62e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f632:	6020      	str	r0, [r4, #0]
 800f634:	2000      	movs	r0, #0
 800f636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f63c:	0077      	lsls	r7, r6, #1
 800f63e:	463a      	mov	r2, r7
 800f640:	f7ff fb46 	bl	800ecd0 <_realloc_r>
 800f644:	4605      	mov	r5, r0
 800f646:	2800      	cmp	r0, #0
 800f648:	d0dd      	beq.n	800f606 <__submore+0x1a>
 800f64a:	eb00 0806 	add.w	r8, r0, r6
 800f64e:	4601      	mov	r1, r0
 800f650:	4632      	mov	r2, r6
 800f652:	4640      	mov	r0, r8
 800f654:	f7ff fa04 	bl	800ea60 <memcpy>
 800f658:	f8c4 8000 	str.w	r8, [r4]
 800f65c:	6365      	str	r5, [r4, #52]	; 0x34
 800f65e:	63a7      	str	r7, [r4, #56]	; 0x38
 800f660:	e7e8      	b.n	800f634 <__submore+0x48>

0800f662 <__locale_ctype_ptr_l>:
 800f662:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f666:	4770      	bx	lr

0800f668 <__locale_ctype_ptr>:
 800f668:	4b04      	ldr	r3, [pc, #16]	; (800f67c <__locale_ctype_ptr+0x14>)
 800f66a:	4a05      	ldr	r2, [pc, #20]	; (800f680 <__locale_ctype_ptr+0x18>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	6a1b      	ldr	r3, [r3, #32]
 800f670:	2b00      	cmp	r3, #0
 800f672:	bf08      	it	eq
 800f674:	4613      	moveq	r3, r2
 800f676:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800f67a:	4770      	bx	lr
 800f67c:	20000134 	.word	0x20000134
 800f680:	20000198 	.word	0x20000198

0800f684 <__ascii_mbtowc>:
 800f684:	b082      	sub	sp, #8
 800f686:	b901      	cbnz	r1, 800f68a <__ascii_mbtowc+0x6>
 800f688:	a901      	add	r1, sp, #4
 800f68a:	b142      	cbz	r2, 800f69e <__ascii_mbtowc+0x1a>
 800f68c:	b14b      	cbz	r3, 800f6a2 <__ascii_mbtowc+0x1e>
 800f68e:	7813      	ldrb	r3, [r2, #0]
 800f690:	600b      	str	r3, [r1, #0]
 800f692:	7812      	ldrb	r2, [r2, #0]
 800f694:	1c10      	adds	r0, r2, #0
 800f696:	bf18      	it	ne
 800f698:	2001      	movne	r0, #1
 800f69a:	b002      	add	sp, #8
 800f69c:	4770      	bx	lr
 800f69e:	4610      	mov	r0, r2
 800f6a0:	e7fb      	b.n	800f69a <__ascii_mbtowc+0x16>
 800f6a2:	f06f 0001 	mvn.w	r0, #1
 800f6a6:	e7f8      	b.n	800f69a <__ascii_mbtowc+0x16>

0800f6a8 <__malloc_lock>:
 800f6a8:	4770      	bx	lr

0800f6aa <__malloc_unlock>:
 800f6aa:	4770      	bx	lr

0800f6ac <_malloc_usable_size_r>:
 800f6ac:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	f1a0 0004 	sub.w	r0, r0, #4
 800f6b6:	bfbc      	itt	lt
 800f6b8:	580b      	ldrlt	r3, [r1, r0]
 800f6ba:	18c0      	addlt	r0, r0, r3
 800f6bc:	4770      	bx	lr

0800f6be <__ascii_wctomb>:
 800f6be:	b149      	cbz	r1, 800f6d4 <__ascii_wctomb+0x16>
 800f6c0:	2aff      	cmp	r2, #255	; 0xff
 800f6c2:	bf85      	ittet	hi
 800f6c4:	238a      	movhi	r3, #138	; 0x8a
 800f6c6:	6003      	strhi	r3, [r0, #0]
 800f6c8:	700a      	strbls	r2, [r1, #0]
 800f6ca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f6ce:	bf98      	it	ls
 800f6d0:	2001      	movls	r0, #1
 800f6d2:	4770      	bx	lr
 800f6d4:	4608      	mov	r0, r1
 800f6d6:	4770      	bx	lr

0800f6d8 <_init>:
 800f6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6da:	bf00      	nop
 800f6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6de:	bc08      	pop	{r3}
 800f6e0:	469e      	mov	lr, r3
 800f6e2:	4770      	bx	lr

0800f6e4 <_fini>:
 800f6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6e6:	bf00      	nop
 800f6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ea:	bc08      	pop	{r3}
 800f6ec:	469e      	mov	lr, r3
 800f6ee:	4770      	bx	lr
